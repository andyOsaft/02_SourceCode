
imu3000Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000074c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000017a  00800060  000074c4  00007558  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000297  008001da  008001da  000076d2  2**0
                  ALLOC
  3 .debug_aranges 00000220  00000000  00000000  000076d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000e40  00000000  00000000  000078f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00005594  00000000  00000000  00008732  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001676  00000000  00000000  0000dcc6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00003d6e  00000000  00000000  0000f33c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000a80  00000000  00000000  000130ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001b81  00000000  00000000  00013b2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000032d1  00000000  00000000  000156ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  0001897e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__ctors_end>
       4:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
       8:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
       c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      10:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      14:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      18:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      1c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      20:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      24:	0c 94 66 01 	jmp	0x2cc	; 0x2cc <__vector_9>
      28:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      2c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__vector_11>
      30:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      34:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      38:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      3c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      40:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      44:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      48:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      4c:	0c 94 8a 1b 	jmp	0x3714	; 0x3714 <__vector_19>
      50:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      54:	03 6e       	ori	r16, 0xE3	; 227
      56:	db 36       	cpi	r29, 0x6B	; 107
      58:	3d 9a       	sbi	0x07, 5	; 7
      5a:	99 99       	sbic	0x13, 1	; 19
      5c:	99 3d       	cpi	r25, 0xD9	; 217
      5e:	ab aa       	std	Y+51, r10	; 0x33
      60:	aa 2a       	or	r10, r26
      62:	3e 00       	.word	0x003e	; ????
      64:	00 00       	nop
      66:	80 3f       	cpi	r24, 0xF0	; 240
      68:	08 4a       	sbci	r16, 0xA8	; 168
      6a:	d7 3b       	cpi	r29, 0xB7	; 183
      6c:	3b ce       	rjmp	.-906    	; 0xfffffce4 <__eeprom_end+0xff7efce4>
      6e:	01 6e       	ori	r16, 0xE1	; 225
      70:	84 bc       	out	0x24, r8	; 36
      72:	bf fd       	.word	0xfdbf	; ????
      74:	c1 2f       	mov	r28, r17
      76:	3d 6c       	ori	r19, 0xCD	; 205
      78:	74 31       	cpi	r23, 0x14	; 20
      7a:	9a bd       	out	0x2a, r25	; 42
      7c:	56 83       	std	Z+6, r21	; 0x06
      7e:	3d da       	rcall	.-2950   	; 0xfffff4fa <__eeprom_end+0xff7ef4fa>
      80:	3d 00       	.word	0x003d	; ????
      82:	c7 7f       	andi	r28, 0xF7	; 247
      84:	11 be       	out	0x31, r1	; 49
      86:	d9 e4       	ldi	r29, 0x49	; 73
      88:	bb 4c       	sbci	r27, 0xCB	; 203
      8a:	3e 91       	ld	r19, -X
      8c:	6b aa       	std	Y+51, r6	; 0x33
      8e:	aa be       	out	0x3a, r10	; 58
      90:	00 00       	nop
      92:	00 80       	ld	r0, Z
      94:	3f 07       	cpc	r19, r31
      96:	2c 7a       	andi	r18, 0xAC	; 172
      98:	a5 ba       	out	0x15, r10	; 21
      9a:	6c c5       	rjmp	.+2776   	; 0xb74 <fusion_getPitch+0xa0>
      9c:	90 da       	rcall	.-2784   	; 0xfffff5be <__eeprom_end+0xff7ef5be>
      9e:	3b 93       	.word	0x933b	; ????
      a0:	65 fc       	sbrc	r6, 5
      a2:	8b bc       	out	0x2b, r8	; 43
      a4:	53 f8       	bld	r5, 3
      a6:	10 fd       	sbrc	r17, 0
      a8:	3c 56       	subi	r19, 0x6C	; 108
      aa:	92 83       	std	Z+2, r25	; 0x02
      ac:	4d bd       	out	0x2d, r20	; 45
      ae:	87 9d       	mul	r24, r7
      b0:	3a b6       	in	r3, 0x3a	; 58
      b2:	3d cb       	rjmp	.-2438   	; 0xfffff72e <__eeprom_end+0xff7ef72e>
      b4:	c9 bf       	out	0x39, r28	; 57
      b6:	5b be       	out	0x3b, r5	; 59
      b8:	73 da       	rcall	.-2842   	; 0xfffff5a0 <__eeprom_end+0xff7ef5a0>
      ba:	0f c9       	rjmp	.-3554   	; 0xfffff2da <__eeprom_end+0xff7ef2da>
      bc:	3f 00       	.word	0x003f	; ????

000000be <__ctors_end>:
      be:	11 24       	eor	r1, r1
      c0:	1f be       	out	0x3f, r1	; 63
      c2:	cf e5       	ldi	r28, 0x5F	; 95
      c4:	d8 e0       	ldi	r29, 0x08	; 8
      c6:	de bf       	out	0x3e, r29	; 62
      c8:	cd bf       	out	0x3d, r28	; 61

000000ca <__do_copy_data>:
      ca:	11 e0       	ldi	r17, 0x01	; 1
      cc:	a0 e6       	ldi	r26, 0x60	; 96
      ce:	b0 e0       	ldi	r27, 0x00	; 0
      d0:	e4 ec       	ldi	r30, 0xC4	; 196
      d2:	f4 e7       	ldi	r31, 0x74	; 116
      d4:	02 c0       	rjmp	.+4      	; 0xda <.do_copy_data_start>

000000d6 <.do_copy_data_loop>:
      d6:	05 90       	lpm	r0, Z+
      d8:	0d 92       	st	X+, r0

000000da <.do_copy_data_start>:
      da:	aa 3d       	cpi	r26, 0xDA	; 218
      dc:	b1 07       	cpc	r27, r17
      de:	d9 f7       	brne	.-10     	; 0xd6 <.do_copy_data_loop>

000000e0 <__do_clear_bss>:
      e0:	14 e0       	ldi	r17, 0x04	; 4
      e2:	aa ed       	ldi	r26, 0xDA	; 218
      e4:	b1 e0       	ldi	r27, 0x01	; 1
      e6:	01 c0       	rjmp	.+2      	; 0xea <.do_clear_bss_start>

000000e8 <.do_clear_bss_loop>:
      e8:	1d 92       	st	X+, r1

000000ea <.do_clear_bss_start>:
      ea:	a1 37       	cpi	r26, 0x71	; 113
      ec:	b1 07       	cpc	r27, r17
      ee:	e1 f7       	brne	.-8      	; 0xe8 <.do_clear_bss_loop>
      f0:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <main>
      f4:	0c 94 60 3a 	jmp	0x74c0	; 0x74c0 <_exit>

000000f8 <__bad_interrupt>:
      f8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000fc <__vector_11>:

char flip = 0x00;
volatile uint16_t timer1_overflow_count = 0x0;

SIGNAL(TIMER0_OVF_vect)
{
      fc:	1f 92       	push	r1
      fe:	0f 92       	push	r0
     100:	0f b6       	in	r0, 0x3f	; 63
     102:	0f 92       	push	r0
     104:	11 24       	eor	r1, r1
     106:	2f 93       	push	r18
     108:	3f 93       	push	r19
     10a:	4f 93       	push	r20
     10c:	5f 93       	push	r21
     10e:	6f 93       	push	r22
     110:	7f 93       	push	r23
     112:	8f 93       	push	r24
     114:	9f 93       	push	r25
     116:	af 93       	push	r26
     118:	bf 93       	push	r27

        // copy these to local variables so they can be stored in registers
        // (volatile variables must be read from memory on every access)
        unsigned long m = timer0_millis;
     11a:	20 91 de 01 	lds	r18, 0x01DE
     11e:	30 91 df 01 	lds	r19, 0x01DF
     122:	40 91 e0 01 	lds	r20, 0x01E0
     126:	50 91 e1 01 	lds	r21, 0x01E1
        unsigned char f = timer0_fract;
     12a:	70 91 e5 01 	lds	r23, 0x01E5

        m += MILLIS_INC;
     12e:	da 01       	movw	r26, r20
     130:	c9 01       	movw	r24, r18
     132:	02 96       	adiw	r24, 0x02	; 2
     134:	a1 1d       	adc	r26, r1
     136:	b1 1d       	adc	r27, r1
        f += FRACT_INC;
     138:	67 2f       	mov	r22, r23
     13a:	6a 5f       	subi	r22, 0xFA	; 250
        if (f >= FRACT_MAX) {
     13c:	6d 37       	cpi	r22, 0x7D	; 125
     13e:	30 f0       	brcs	.+12     	; 0x14c <__vector_11+0x50>
                f -= FRACT_MAX;
     140:	6d 57       	subi	r22, 0x7D	; 125
                m += 1;
     142:	da 01       	movw	r26, r20
     144:	c9 01       	movw	r24, r18
     146:	03 96       	adiw	r24, 0x03	; 3
     148:	a1 1d       	adc	r26, r1
     14a:	b1 1d       	adc	r27, r1
        }

        timer0_fract = f;
     14c:	60 93 e5 01 	sts	0x01E5, r22
        timer0_millis = m;
     150:	80 93 de 01 	sts	0x01DE, r24
     154:	90 93 df 01 	sts	0x01DF, r25
     158:	a0 93 e0 01 	sts	0x01E0, r26
     15c:	b0 93 e1 01 	sts	0x01E1, r27
        timer0_overflow_count++;
     160:	80 91 da 01 	lds	r24, 0x01DA
     164:	90 91 db 01 	lds	r25, 0x01DB
     168:	a0 91 dc 01 	lds	r26, 0x01DC
     16c:	b0 91 dd 01 	lds	r27, 0x01DD
     170:	01 96       	adiw	r24, 0x01	; 1
     172:	a1 1d       	adc	r26, r1
     174:	b1 1d       	adc	r27, r1
     176:	80 93 da 01 	sts	0x01DA, r24
     17a:	90 93 db 01 	sts	0x01DB, r25
     17e:	a0 93 dc 01 	sts	0x01DC, r26
     182:	b0 93 dd 01 	sts	0x01DD, r27
}
     186:	bf 91       	pop	r27
     188:	af 91       	pop	r26
     18a:	9f 91       	pop	r25
     18c:	8f 91       	pop	r24
     18e:	7f 91       	pop	r23
     190:	6f 91       	pop	r22
     192:	5f 91       	pop	r21
     194:	4f 91       	pop	r20
     196:	3f 91       	pop	r19
     198:	2f 91       	pop	r18
     19a:	0f 90       	pop	r0
     19c:	0f be       	out	0x3f, r0	; 63
     19e:	0f 90       	pop	r0
     1a0:	1f 90       	pop	r1
     1a2:	18 95       	reti

000001a4 <avr_ticks>:
        return m;
}
*/

uint64_t avr_ticks()
{
     1a4:	af 92       	push	r10
     1a6:	bf 92       	push	r11
     1a8:	cf 92       	push	r12
     1aa:	df 92       	push	r13
     1ac:	ef 92       	push	r14
     1ae:	ff 92       	push	r15
     1b0:	0f 93       	push	r16
     1b2:	1f 93       	push	r17
        return (timer0_overflow_count * 256 + TCNT0) * 64;
     1b4:	a0 90 da 01 	lds	r10, 0x01DA
     1b8:	b0 90 db 01 	lds	r11, 0x01DB
     1bc:	c0 90 dc 01 	lds	r12, 0x01DC
     1c0:	d0 90 dd 01 	lds	r13, 0x01DD
     1c4:	82 b7       	in	r24, 0x32	; 50
     1c6:	dc 2c       	mov	r13, r12
     1c8:	cb 2c       	mov	r12, r11
     1ca:	ba 2c       	mov	r11, r10
     1cc:	aa 24       	eor	r10, r10
     1ce:	a8 0e       	add	r10, r24
     1d0:	b1 1c       	adc	r11, r1
     1d2:	c1 1c       	adc	r12, r1
     1d4:	d1 1c       	adc	r13, r1
     1d6:	86 e0       	ldi	r24, 0x06	; 6
     1d8:	aa 0c       	add	r10, r10
     1da:	bb 1c       	adc	r11, r11
     1dc:	cc 1c       	adc	r12, r12
     1de:	dd 1c       	adc	r13, r13
     1e0:	8a 95       	dec	r24
     1e2:	d1 f7       	brne	.-12     	; 0x1d8 <avr_ticks+0x34>
}
     1e4:	95 01       	movw	r18, r10
     1e6:	a6 01       	movw	r20, r12
     1e8:	60 e0       	ldi	r22, 0x00	; 0
     1ea:	70 e0       	ldi	r23, 0x00	; 0
     1ec:	80 e0       	ldi	r24, 0x00	; 0
     1ee:	90 e0       	ldi	r25, 0x00	; 0
     1f0:	1f 91       	pop	r17
     1f2:	0f 91       	pop	r16
     1f4:	ff 90       	pop	r15
     1f6:	ef 90       	pop	r14
     1f8:	df 90       	pop	r13
     1fa:	cf 90       	pop	r12
     1fc:	bf 90       	pop	r11
     1fe:	af 90       	pop	r10
     200:	08 95       	ret

00000202 <avr_micros>:
                ;
}

uint32_t avr_micros()
{
        return ((uint32_t)(TCNT1 + ((uint32_t)timer1_overflow_count << 16)) * TIMER1_MULTIPLIER) / TIMER1_MICROS_DIVIDER;
     202:	8c b5       	in	r24, 0x2c	; 44
     204:	9d b5       	in	r25, 0x2d	; 45
     206:	20 91 e3 01 	lds	r18, 0x01E3
     20a:	30 91 e4 01 	lds	r19, 0x01E4
     20e:	40 e0       	ldi	r20, 0x00	; 0
     210:	50 e0       	ldi	r21, 0x00	; 0
     212:	a9 01       	movw	r20, r18
     214:	33 27       	eor	r19, r19
     216:	22 27       	eor	r18, r18
     218:	a0 e0       	ldi	r26, 0x00	; 0
     21a:	b0 e0       	ldi	r27, 0x00	; 0
     21c:	28 0f       	add	r18, r24
     21e:	39 1f       	adc	r19, r25
     220:	4a 1f       	adc	r20, r26
     222:	5b 1f       	adc	r21, r27
     224:	76 e0       	ldi	r23, 0x06	; 6
     226:	22 0f       	add	r18, r18
     228:	33 1f       	adc	r19, r19
     22a:	44 1f       	adc	r20, r20
     22c:	55 1f       	adc	r21, r21
     22e:	7a 95       	dec	r23
     230:	d1 f7       	brne	.-12     	; 0x226 <avr_micros+0x24>
     232:	63 e0       	ldi	r22, 0x03	; 3
     234:	56 95       	lsr	r21
     236:	47 95       	ror	r20
     238:	37 95       	ror	r19
     23a:	27 95       	ror	r18
     23c:	6a 95       	dec	r22
     23e:	d1 f7       	brne	.-12     	; 0x234 <avr_micros+0x32>
}
     240:	b9 01       	movw	r22, r18
     242:	ca 01       	movw	r24, r20
     244:	08 95       	ret

00000246 <avr_millis>:

uint32_t avr_millis()
{
        return ((uint32_t)(TCNT1 + ((uint32_t)timer1_overflow_count << 16)) * TIMER1_MULTIPLIER) / TIMER1_MILLIS_DIVIDER;
     246:	2c b5       	in	r18, 0x2c	; 44
     248:	3d b5       	in	r19, 0x2d	; 45
     24a:	60 91 e3 01 	lds	r22, 0x01E3
     24e:	70 91 e4 01 	lds	r23, 0x01E4
     252:	80 e0       	ldi	r24, 0x00	; 0
     254:	90 e0       	ldi	r25, 0x00	; 0
     256:	cb 01       	movw	r24, r22
     258:	77 27       	eor	r23, r23
     25a:	66 27       	eor	r22, r22
     25c:	40 e0       	ldi	r20, 0x00	; 0
     25e:	50 e0       	ldi	r21, 0x00	; 0
     260:	62 0f       	add	r22, r18
     262:	73 1f       	adc	r23, r19
     264:	84 1f       	adc	r24, r20
     266:	95 1f       	adc	r25, r21
     268:	f6 e0       	ldi	r31, 0x06	; 6
     26a:	66 0f       	add	r22, r22
     26c:	77 1f       	adc	r23, r23
     26e:	88 1f       	adc	r24, r24
     270:	99 1f       	adc	r25, r25
     272:	fa 95       	dec	r31
     274:	d1 f7       	brne	.-12     	; 0x26a <avr_millis+0x24>
     276:	20 e4       	ldi	r18, 0x40	; 64
     278:	3f e1       	ldi	r19, 0x1F	; 31
     27a:	40 e0       	ldi	r20, 0x00	; 0
     27c:	50 e0       	ldi	r21, 0x00	; 0
     27e:	0e 94 a7 38 	call	0x714e	; 0x714e <__udivmodsi4>
     282:	ca 01       	movw	r24, r20
}
     284:	b9 01       	movw	r22, r18
     286:	08 95       	ret

00000288 <avr_delay>:
{
        return (timer0_overflow_count * 256 + TCNT0) * 64;
}

void avr_delay(unsigned long ms)
{
     288:	af 92       	push	r10
     28a:	bf 92       	push	r11
     28c:	cf 92       	push	r12
     28e:	df 92       	push	r13
     290:	ef 92       	push	r14
     292:	ff 92       	push	r15
     294:	0f 93       	push	r16
     296:	1f 93       	push	r17
     298:	5b 01       	movw	r10, r22
     29a:	6c 01       	movw	r12, r24
        unsigned long start = avr_millis();
     29c:	0e 94 23 01 	call	0x246	; 0x246 <avr_millis>
     2a0:	7b 01       	movw	r14, r22
     2a2:	8c 01       	movw	r16, r24

        while (avr_millis() - start <= ms)
     2a4:	0e 94 23 01 	call	0x246	; 0x246 <avr_millis>
     2a8:	6e 19       	sub	r22, r14
     2aa:	7f 09       	sbc	r23, r15
     2ac:	80 0b       	sbc	r24, r16
     2ae:	91 0b       	sbc	r25, r17
     2b0:	a6 16       	cp	r10, r22
     2b2:	b7 06       	cpc	r11, r23
     2b4:	c8 06       	cpc	r12, r24
     2b6:	d9 06       	cpc	r13, r25
     2b8:	a8 f7       	brcc	.-22     	; 0x2a4 <avr_delay+0x1c>
                ;
}
     2ba:	1f 91       	pop	r17
     2bc:	0f 91       	pop	r16
     2be:	ff 90       	pop	r15
     2c0:	ef 90       	pop	r14
     2c2:	df 90       	pop	r13
     2c4:	cf 90       	pop	r12
     2c6:	bf 90       	pop	r11
     2c8:	af 90       	pop	r10
     2ca:	08 95       	ret

000002cc <__vector_9>:
{
        return ((uint32_t)(TCNT1 + ((uint32_t)timer1_overflow_count << 16)) * TIMER1_MULTIPLIER) / TIMER1_MILLIS_DIVIDER;
}

SIGNAL(TIMER1_OVF_vect)
{
     2cc:	1f 92       	push	r1
     2ce:	0f 92       	push	r0
     2d0:	0f b6       	in	r0, 0x3f	; 63
     2d2:	0f 92       	push	r0
     2d4:	11 24       	eor	r1, r1
     2d6:	8f 93       	push	r24
     2d8:	9f 93       	push	r25
        DDRB |= 0xff;
     2da:	87 b3       	in	r24, 0x17	; 23
     2dc:	8f ef       	ldi	r24, 0xFF	; 255
     2de:	87 bb       	out	0x17, r24	; 23
        PORTB = flip;
     2e0:	80 91 e2 01 	lds	r24, 0x01E2
     2e4:	88 bb       	out	0x18, r24	; 24

        flip = ~flip;
     2e6:	80 95       	com	r24
     2e8:	80 93 e2 01 	sts	0x01E2, r24

        timer1_overflow_count ++;
     2ec:	80 91 e3 01 	lds	r24, 0x01E3
     2f0:	90 91 e4 01 	lds	r25, 0x01E4
     2f4:	01 96       	adiw	r24, 0x01	; 1
     2f6:	90 93 e4 01 	sts	0x01E4, r25
     2fa:	80 93 e3 01 	sts	0x01E3, r24
}
     2fe:	9f 91       	pop	r25
     300:	8f 91       	pop	r24
     302:	0f 90       	pop	r0
     304:	0f be       	out	0x3f, r0	; 63
     306:	0f 90       	pop	r0
     308:	1f 90       	pop	r1
     30a:	18 95       	reti

0000030c <avr_timer1Init>:

void avr_timer1Init()
{
        // Initialise 16-bit timer 1
        // Set prescale to 64
        sbi(TCCR1B, CS11);
     30c:	8e b5       	in	r24, 0x2e	; 46
     30e:	82 60       	ori	r24, 0x02	; 2
     310:	8e bd       	out	0x2e, r24	; 46
        sbi(TCCR1B, CS10);
     312:	8e b5       	in	r24, 0x2e	; 46
     314:	81 60       	ori	r24, 0x01	; 1
     316:	8e bd       	out	0x2e, r24	; 46

        sbi(TIMSK, TOIE1);
     318:	89 b7       	in	r24, 0x39	; 57
     31a:	84 60       	ori	r24, 0x04	; 4
     31c:	89 bf       	out	0x39, r24	; 57
}
     31e:	08 95       	ret

00000320 <avr_timerInit>:

void avr_timerInit()
{
        // this needs to be called before setup() or some functions won't
        // work there
        sei();
     320:	78 94       	sei

        avr_timer1Init();
     322:	0e 94 86 01 	call	0x30c	; 0x30c <avr_timer1Init>
        // set timer 0 prescale factor to 64
        #ifdef __AVR_ATmega128__
        sbi(TCCR0, CS01);
        sbi(TCCR0, CS00);
        #else
        sbi(TCCR1A, CS11);
     326:	8f b5       	in	r24, 0x2f	; 47
     328:	82 60       	ori	r24, 0x02	; 2
     32a:	8f bd       	out	0x2f, r24	; 47
        sbi(TCCR1A, CS10);
     32c:	8f b5       	in	r24, 0x2f	; 47
     32e:	81 60       	ori	r24, 0x01	; 1
     330:	8f bd       	out	0x2f, r24	; 47
        sbi(ADCSRA, ADPS2);
        sbi(ADCSRA, ADPS1);
        sbi(ADCSRA, ADPS0);
        */

}
     332:	08 95       	ret

00000334 <imu_writeAuxByte>:
        result = twi_readFrom(IMU_I2C_ADDRESS, buf, count);
        return(result);
}

int imu_writeAuxByte(uint8_t reg, uint8_t value)
{
     334:	df 93       	push	r29
     336:	cf 93       	push	r28
     338:	00 d0       	rcall	.+0      	; 0x33a <imu_writeAuxByte+0x6>
     33a:	cd b7       	in	r28, 0x3d	; 61
     33c:	de b7       	in	r29, 0x3e	; 62
        uint8_t buf[2] = { reg, value };
     33e:	89 83       	std	Y+1, r24	; 0x01
     340:	6a 83       	std	Y+2, r22	; 0x02
        return twi_writeTo(IMU_I2C_AUX_ADDRESS, buf, 2, 1);
     342:	8f e0       	ldi	r24, 0x0F	; 15
     344:	be 01       	movw	r22, r28
     346:	6f 5f       	subi	r22, 0xFF	; 255
     348:	7f 4f       	sbci	r23, 0xFF	; 255
     34a:	42 e0       	ldi	r20, 0x02	; 2
     34c:	21 e0       	ldi	r18, 0x01	; 1
     34e:	0e 94 0b 1b 	call	0x3616	; 0x3616 <twi_writeTo>
}
     352:	90 e0       	ldi	r25, 0x00	; 0
     354:	0f 90       	pop	r0
     356:	0f 90       	pop	r0
     358:	cf 91       	pop	r28
     35a:	df 91       	pop	r29
     35c:	08 95       	ret

0000035e <imu_writeByte>:
#include "avr.h"

static uint8_t fifoFlags = 0x0;

int imu_writeByte(uint8_t reg, uint8_t value)
{
     35e:	df 93       	push	r29
     360:	cf 93       	push	r28
     362:	00 d0       	rcall	.+0      	; 0x364 <imu_writeByte+0x6>
     364:	cd b7       	in	r28, 0x3d	; 61
     366:	de b7       	in	r29, 0x3e	; 62
        uint8_t buf[2] = { reg, value };
     368:	89 83       	std	Y+1, r24	; 0x01
     36a:	6a 83       	std	Y+2, r22	; 0x02
        return twi_writeTo(IMU_I2C_ADDRESS, buf, 2, 1);
     36c:	88 e6       	ldi	r24, 0x68	; 104
     36e:	be 01       	movw	r22, r28
     370:	6f 5f       	subi	r22, 0xFF	; 255
     372:	7f 4f       	sbci	r23, 0xFF	; 255
     374:	42 e0       	ldi	r20, 0x02	; 2
     376:	21 e0       	ldi	r18, 0x01	; 1
     378:	0e 94 0b 1b 	call	0x3616	; 0x3616 <twi_writeTo>
}
     37c:	90 e0       	ldi	r25, 0x00	; 0
     37e:	0f 90       	pop	r0
     380:	0f 90       	pop	r0
     382:	cf 91       	pop	r28
     384:	df 91       	pop	r29
     386:	08 95       	ret

00000388 <imu_setSamplingRateDivider>:
        uint8_t reg = imu_readByte(MPUREG_DLPF_FS_SYNC);
        return imu_writeByte(MPUREG_DLPF_FS_SYNC, (reg & 0b11111000) | dlpf);
}

int imu_setSamplingRateDivider(uint8_t divider)
{
     388:	df 93       	push	r29
     38a:	cf 93       	push	r28
     38c:	00 d0       	rcall	.+0      	; 0x38e <imu_setSamplingRateDivider+0x6>
     38e:	cd b7       	in	r28, 0x3d	; 61
     390:	de b7       	in	r29, 0x3e	; 62

static uint8_t fifoFlags = 0x0;

int imu_writeByte(uint8_t reg, uint8_t value)
{
        uint8_t buf[2] = { reg, value };
     392:	95 e1       	ldi	r25, 0x15	; 21
     394:	99 83       	std	Y+1, r25	; 0x01
     396:	8a 83       	std	Y+2, r24	; 0x02
        return twi_writeTo(IMU_I2C_ADDRESS, buf, 2, 1);
     398:	88 e6       	ldi	r24, 0x68	; 104
     39a:	be 01       	movw	r22, r28
     39c:	6f 5f       	subi	r22, 0xFF	; 255
     39e:	7f 4f       	sbci	r23, 0xFF	; 255
     3a0:	42 e0       	ldi	r20, 0x02	; 2
     3a2:	21 e0       	ldi	r18, 0x01	; 1
     3a4:	0e 94 0b 1b 	call	0x3616	; 0x3616 <twi_writeTo>
}

int imu_setSamplingRateDivider(uint8_t divider)
{
        return imu_writeByte(MPUREG_SMPLRT_DIV, divider);
}
     3a8:	90 e0       	ldi	r25, 0x00	; 0
     3aa:	0f 90       	pop	r0
     3ac:	0f 90       	pop	r0
     3ae:	cf 91       	pop	r28
     3b0:	df 91       	pop	r29
     3b2:	08 95       	ret

000003b4 <imu_fifoEnable>:
        uint8_t buf[2] = { reg, value };
        return twi_writeTo(IMU_I2C_AUX_ADDRESS, buf, 2, 1);
}

int imu_fifoEnable(uint8_t flags)
{
     3b4:	df 93       	push	r29
     3b6:	cf 93       	push	r28
     3b8:	00 d0       	rcall	.+0      	; 0x3ba <imu_fifoEnable+0x6>
     3ba:	cd b7       	in	r28, 0x3d	; 61
     3bc:	de b7       	in	r29, 0x3e	; 62
        fifoFlags = flags;
     3be:	80 93 e6 01 	sts	0x01E6, r24

static uint8_t fifoFlags = 0x0;

int imu_writeByte(uint8_t reg, uint8_t value)
{
        uint8_t buf[2] = { reg, value };
     3c2:	92 e1       	ldi	r25, 0x12	; 18
     3c4:	99 83       	std	Y+1, r25	; 0x01
     3c6:	8a 83       	std	Y+2, r24	; 0x02
        return twi_writeTo(IMU_I2C_ADDRESS, buf, 2, 1);
     3c8:	88 e6       	ldi	r24, 0x68	; 104
     3ca:	be 01       	movw	r22, r28
     3cc:	6f 5f       	subi	r22, 0xFF	; 255
     3ce:	7f 4f       	sbci	r23, 0xFF	; 255
     3d0:	42 e0       	ldi	r20, 0x02	; 2
     3d2:	21 e0       	ldi	r18, 0x01	; 1
     3d4:	0e 94 0b 1b 	call	0x3616	; 0x3616 <twi_writeTo>

int imu_fifoEnable(uint8_t flags)
{
        fifoFlags = flags;
        return imu_writeByte(MPUREG_FIFO_EN1, flags);
}
     3d8:	90 e0       	ldi	r25, 0x00	; 0
     3da:	0f 90       	pop	r0
     3dc:	0f 90       	pop	r0
     3de:	cf 91       	pop	r28
     3e0:	df 91       	pop	r29
     3e2:	08 95       	ret

000003e4 <imu_read>:
        twi_readFrom(IMU_I2C_ADDRESS, data, 2);
        return (data[0]<<8) | data[1];
}

int imu_read(uint8_t reg, uint8_t * buf, uint16_t count)
{
     3e4:	ff 92       	push	r15
     3e6:	0f 93       	push	r16
     3e8:	1f 93       	push	r17
     3ea:	df 93       	push	r29
     3ec:	cf 93       	push	r28
     3ee:	0f 92       	push	r0
     3f0:	cd b7       	in	r28, 0x3d	; 61
     3f2:	de b7       	in	r29, 0x3e	; 62
     3f4:	89 83       	std	Y+1, r24	; 0x01
     3f6:	8b 01       	movw	r16, r22
     3f8:	f4 2e       	mov	r15, r20
        uint8_t result = count;

        // Write register
        result = twi_writeTo(IMU_I2C_ADDRESS, &reg, 1, 1);
     3fa:	88 e6       	ldi	r24, 0x68	; 104
     3fc:	be 01       	movw	r22, r28
     3fe:	6f 5f       	subi	r22, 0xFF	; 255
     400:	7f 4f       	sbci	r23, 0xFF	; 255
     402:	41 e0       	ldi	r20, 0x01	; 1
     404:	21 e0       	ldi	r18, 0x01	; 1
     406:	0e 94 0b 1b 	call	0x3616	; 0x3616 <twi_writeTo>
        if (result!=0) return -1;
     40a:	88 23       	and	r24, r24
     40c:	19 f0       	breq	.+6      	; 0x414 <imu_read+0x30>
     40e:	2f ef       	ldi	r18, 0xFF	; 255
     410:	3f ef       	ldi	r19, 0xFF	; 255
     412:	07 c0       	rjmp	.+14     	; 0x422 <imu_read+0x3e>

        // Read data
        result = twi_readFrom(IMU_I2C_ADDRESS, buf, count);
     414:	88 e6       	ldi	r24, 0x68	; 104
     416:	b8 01       	movw	r22, r16
     418:	4f 2d       	mov	r20, r15
     41a:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <twi_readFrom>
        return(result);
     41e:	28 2f       	mov	r18, r24
     420:	30 e0       	ldi	r19, 0x00	; 0
}
     422:	c9 01       	movw	r24, r18
     424:	0f 90       	pop	r0
     426:	cf 91       	pop	r28
     428:	df 91       	pop	r29
     42a:	1f 91       	pop	r17
     42c:	0f 91       	pop	r16
     42e:	ff 90       	pop	r15
     430:	08 95       	ret

00000432 <imu_readWord>:
        twi_readFrom(IMU_I2C_ADDRESS, &data, 1);
        return data;
}

uint16_t imu_readWord(uint8_t reg)
{
     432:	df 93       	push	r29
     434:	cf 93       	push	r28
     436:	00 d0       	rcall	.+0      	; 0x438 <imu_readWord+0x6>
     438:	0f 92       	push	r0
     43a:	cd b7       	in	r28, 0x3d	; 61
     43c:	de b7       	in	r29, 0x3e	; 62
     43e:	8b 83       	std	Y+3, r24	; 0x03
        int result;
        uint8_t data[2];

        // Write register to read from.
        result = twi_writeTo(IMU_I2C_ADDRESS, &reg, 1, 1);
     440:	88 e6       	ldi	r24, 0x68	; 104
     442:	be 01       	movw	r22, r28
     444:	6d 5f       	subi	r22, 0xFD	; 253
     446:	7f 4f       	sbci	r23, 0xFF	; 255
     448:	41 e0       	ldi	r20, 0x01	; 1
     44a:	21 e0       	ldi	r18, 0x01	; 1
     44c:	0e 94 0b 1b 	call	0x3616	; 0x3616 <twi_writeTo>
        if (result!=0) return -1;
     450:	88 23       	and	r24, r24
     452:	19 f0       	breq	.+6      	; 0x45a <imu_readWord+0x28>
     454:	2f ef       	ldi	r18, 0xFF	; 255
     456:	3f ef       	ldi	r19, 0xFF	; 255
     458:	0d c0       	rjmp	.+26     	; 0x474 <imu_readWord+0x42>

        // Read data
        twi_readFrom(IMU_I2C_ADDRESS, data, 2);
     45a:	88 e6       	ldi	r24, 0x68	; 104
     45c:	be 01       	movw	r22, r28
     45e:	6f 5f       	subi	r22, 0xFF	; 255
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	42 e0       	ldi	r20, 0x02	; 2
     464:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <twi_readFrom>
        return (data[0]<<8) | data[1];
     468:	99 81       	ldd	r25, Y+1	; 0x01
     46a:	80 e0       	ldi	r24, 0x00	; 0
     46c:	2a 81       	ldd	r18, Y+2	; 0x02
     46e:	30 e0       	ldi	r19, 0x00	; 0
     470:	28 2b       	or	r18, r24
     472:	39 2b       	or	r19, r25
}
     474:	c9 01       	movw	r24, r18
     476:	0f 90       	pop	r0
     478:	0f 90       	pop	r0
     47a:	0f 90       	pop	r0
     47c:	cf 91       	pop	r28
     47e:	df 91       	pop	r29
     480:	08 95       	ret

00000482 <imu_registerRead>:
{
        return imu_readWord(MPUREG_FIFO_R_W);
}

int imu_registerRead(imu_sensorData *data)
{
     482:	0f 93       	push	r16
     484:	1f 93       	push	r17
     486:	8c 01       	movw	r16, r24
        data->temp = imu_readWord(MPUREG_TEMP_OUT_H);
     488:	8b e1       	ldi	r24, 0x1B	; 27
     48a:	0e 94 19 02 	call	0x432	; 0x432 <imu_readWord>
     48e:	f8 01       	movw	r30, r16
     490:	95 87       	std	Z+13, r25	; 0x0d
     492:	84 87       	std	Z+12, r24	; 0x0c
        data->gyro_x = imu_readWord(MPUREG_GYRO_XOUT_H);
     494:	8d e1       	ldi	r24, 0x1D	; 29
     496:	0e 94 19 02 	call	0x432	; 0x432 <imu_readWord>
     49a:	f8 01       	movw	r30, r16
     49c:	91 83       	std	Z+1, r25	; 0x01
     49e:	80 83       	st	Z, r24
        data->gyro_y = imu_readWord(MPUREG_GYRO_YOUT_H);
     4a0:	8f e1       	ldi	r24, 0x1F	; 31
     4a2:	0e 94 19 02 	call	0x432	; 0x432 <imu_readWord>
     4a6:	f8 01       	movw	r30, r16
     4a8:	93 83       	std	Z+3, r25	; 0x03
     4aa:	82 83       	std	Z+2, r24	; 0x02
        data->gyro_z = imu_readWord(MPUREG_GYRO_ZOUT_H);
     4ac:	81 e2       	ldi	r24, 0x21	; 33
     4ae:	0e 94 19 02 	call	0x432	; 0x432 <imu_readWord>
     4b2:	f8 01       	movw	r30, r16
     4b4:	95 83       	std	Z+5, r25	; 0x05
     4b6:	84 83       	std	Z+4, r24	; 0x04
        data->acc_z = imu_readWord(35);
     4b8:	83 e2       	ldi	r24, 0x23	; 35
     4ba:	0e 94 19 02 	call	0x432	; 0x432 <imu_readWord>
     4be:	f8 01       	movw	r30, r16
     4c0:	93 87       	std	Z+11, r25	; 0x0b
     4c2:	82 87       	std	Z+10, r24	; 0x0a
        data->acc_z = imu_readWord(37);
     4c4:	85 e2       	ldi	r24, 0x25	; 37
     4c6:	0e 94 19 02 	call	0x432	; 0x432 <imu_readWord>
     4ca:	f8 01       	movw	r30, r16
     4cc:	93 87       	std	Z+11, r25	; 0x0b
     4ce:	82 87       	std	Z+10, r24	; 0x0a
        data->acc_z = imu_readWord(39);
     4d0:	87 e2       	ldi	r24, 0x27	; 39
     4d2:	0e 94 19 02 	call	0x432	; 0x432 <imu_readWord>
     4d6:	f8 01       	movw	r30, r16
     4d8:	93 87       	std	Z+11, r25	; 0x0b
     4da:	82 87       	std	Z+10, r24	; 0x0a

        return 0;
}
     4dc:	80 e0       	ldi	r24, 0x00	; 0
     4de:	90 e0       	ldi	r25, 0x00	; 0
     4e0:	1f 91       	pop	r17
     4e2:	0f 91       	pop	r16
     4e4:	08 95       	ret

000004e6 <imu_fifoReadWord>:
        return (int)imu_readWord(MPUREG_FIFO_COUNTH);
}

uint16_t imu_fifoReadWord()
{
        return imu_readWord(MPUREG_FIFO_R_W);
     4e6:	8c e3       	ldi	r24, 0x3C	; 60
     4e8:	0e 94 19 02 	call	0x432	; 0x432 <imu_readWord>
}
     4ec:	08 95       	ret

000004ee <imu_fifoCount>:
        return imu_writeByte(MPUREG_FIFO_EN1, flags);
}

int imu_fifoCount()
{
        return (int)imu_readWord(MPUREG_FIFO_COUNTH);
     4ee:	8a e3       	ldi	r24, 0x3A	; 58
     4f0:	0e 94 19 02 	call	0x432	; 0x432 <imu_readWord>
}
     4f4:	08 95       	ret

000004f6 <imu_readByte>:
        uint8_t buf[2] = { reg, value };
        return twi_writeTo(IMU_I2C_ADDRESS, buf, 2, 1);
}

uint8_t imu_readByte(uint8_t reg)
{
     4f6:	df 93       	push	r29
     4f8:	cf 93       	push	r28
     4fa:	00 d0       	rcall	.+0      	; 0x4fc <imu_readByte+0x6>
     4fc:	cd b7       	in	r28, 0x3d	; 61
     4fe:	de b7       	in	r29, 0x3e	; 62
     500:	8a 83       	std	Y+2, r24	; 0x02
        int result;
        uint8_t data;

        // Write register to read from.
        result = twi_writeTo(IMU_I2C_ADDRESS, &reg, 1, 1);
     502:	88 e6       	ldi	r24, 0x68	; 104
     504:	be 01       	movw	r22, r28
     506:	6e 5f       	subi	r22, 0xFE	; 254
     508:	7f 4f       	sbci	r23, 0xFF	; 255
     50a:	41 e0       	ldi	r20, 0x01	; 1
     50c:	21 e0       	ldi	r18, 0x01	; 1
     50e:	0e 94 0b 1b 	call	0x3616	; 0x3616 <twi_writeTo>
        if (result!=0) return -1;
     512:	88 23       	and	r24, r24
     514:	11 f0       	breq	.+4      	; 0x51a <imu_readByte+0x24>
     516:	8f ef       	ldi	r24, 0xFF	; 255
     518:	08 c0       	rjmp	.+16     	; 0x52a <imu_readByte+0x34>

        // Read data
        twi_readFrom(IMU_I2C_ADDRESS, &data, 1);
     51a:	88 e6       	ldi	r24, 0x68	; 104
     51c:	be 01       	movw	r22, r28
     51e:	6f 5f       	subi	r22, 0xFF	; 255
     520:	7f 4f       	sbci	r23, 0xFF	; 255
     522:	41 e0       	ldi	r20, 0x01	; 1
     524:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <twi_readFrom>
        return data;
     528:	89 81       	ldd	r24, Y+1	; 0x01
}
     52a:	0f 90       	pop	r0
     52c:	0f 90       	pop	r0
     52e:	cf 91       	pop	r28
     530:	df 91       	pop	r29
     532:	08 95       	ret

00000534 <imu_setPassThrough>:
        uint8_t reg = imu_readByte(MPUREG_DLPF_FS_SYNC);
        return imu_writeByte(MPUREG_DLPF_FS_SYNC, (reg & 0b11000111) | (scale << 3));
}

static int imu_setPassThrough(uint8_t enable)
{
     534:	1f 93       	push	r17
     536:	df 93       	push	r29
     538:	cf 93       	push	r28
     53a:	00 d0       	rcall	.+0      	; 0x53c <imu_setPassThrough+0x8>
     53c:	cd b7       	in	r28, 0x3d	; 61
     53e:	de b7       	in	r29, 0x3e	; 62
     540:	18 2f       	mov	r17, r24
        uint8_t reg = imu_readByte(MPUREG_USER_CTRL);
     542:	8d e3       	ldi	r24, 0x3D	; 61
     544:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <imu_readByte>

        // Set the auxilary interface enable bit.
        if (enable)
     548:	11 23       	and	r17, r17
     54a:	19 f0       	breq	.+6      	; 0x552 <imu_setPassThrough+0x1e>
                reg |= BIT_AUX_IF_EN;
     54c:	98 2f       	mov	r25, r24
     54e:	90 62       	ori	r25, 0x20	; 32
     550:	02 c0       	rjmp	.+4      	; 0x556 <imu_setPassThrough+0x22>
        else
                reg &= ~BIT_AUX_IF_EN;
     552:	98 2f       	mov	r25, r24
     554:	9f 7d       	andi	r25, 0xDF	; 223

static uint8_t fifoFlags = 0x0;

int imu_writeByte(uint8_t reg, uint8_t value)
{
        uint8_t buf[2] = { reg, value };
     556:	8d e3       	ldi	r24, 0x3D	; 61
     558:	89 83       	std	Y+1, r24	; 0x01
     55a:	98 60       	ori	r25, 0x08	; 8
     55c:	9a 83       	std	Y+2, r25	; 0x02
        return twi_writeTo(IMU_I2C_ADDRESS, buf, 2, 1);
     55e:	88 e6       	ldi	r24, 0x68	; 104
     560:	be 01       	movw	r22, r28
     562:	6f 5f       	subi	r22, 0xFF	; 255
     564:	7f 4f       	sbci	r23, 0xFF	; 255
     566:	42 e0       	ldi	r20, 0x02	; 2
     568:	21 e0       	ldi	r18, 0x01	; 1
     56a:	0e 94 0b 1b 	call	0x3616	; 0x3616 <twi_writeTo>
        reg |= BIT_AUX_IF_RST;

        imu_writeByte(MPUREG_USER_CTRL, reg);

        return 0;
}
     56e:	80 e0       	ldi	r24, 0x00	; 0
     570:	90 e0       	ldi	r25, 0x00	; 0
     572:	0f 90       	pop	r0
     574:	0f 90       	pop	r0
     576:	cf 91       	pop	r28
     578:	df 91       	pop	r29
     57a:	1f 91       	pop	r17
     57c:	08 95       	ret

0000057e <imu_disablePassThrough>:
        return imu_setPassThrough(0);
}

int imu_disablePassThrough()
{
        return imu_setPassThrough(1);
     57e:	81 e0       	ldi	r24, 0x01	; 1
     580:	0e 94 9a 02 	call	0x534	; 0x534 <imu_setPassThrough>
}
     584:	08 95       	ret

00000586 <imu_enablePassThrough>:
        return 0;
}

int imu_enablePassThrough()
{
        return imu_setPassThrough(0);
     586:	80 e0       	ldi	r24, 0x00	; 0
     588:	0e 94 9a 02 	call	0x534	; 0x534 <imu_setPassThrough>
}
     58c:	08 95       	ret

0000058e <imu_setGyroFullScale>:
{
        return imu_writeByte(MPUREG_SMPLRT_DIV, divider);
}

int imu_setGyroFullScale(uint8_t scale)
{
     58e:	1f 93       	push	r17
     590:	df 93       	push	r29
     592:	cf 93       	push	r28
     594:	00 d0       	rcall	.+0      	; 0x596 <imu_setGyroFullScale+0x8>
     596:	cd b7       	in	r28, 0x3d	; 61
     598:	de b7       	in	r29, 0x3e	; 62
     59a:	18 2f       	mov	r17, r24
        uint8_t reg = imu_readByte(MPUREG_DLPF_FS_SYNC);
     59c:	86 e1       	ldi	r24, 0x16	; 22
     59e:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <imu_readByte>

static uint8_t fifoFlags = 0x0;

int imu_writeByte(uint8_t reg, uint8_t value)
{
        uint8_t buf[2] = { reg, value };
     5a2:	96 e1       	ldi	r25, 0x16	; 22
     5a4:	99 83       	std	Y+1, r25	; 0x01
     5a6:	87 7c       	andi	r24, 0xC7	; 199
     5a8:	11 0f       	add	r17, r17
     5aa:	11 0f       	add	r17, r17
     5ac:	11 0f       	add	r17, r17
     5ae:	81 2b       	or	r24, r17
     5b0:	8a 83       	std	Y+2, r24	; 0x02
        return twi_writeTo(IMU_I2C_ADDRESS, buf, 2, 1);
     5b2:	88 e6       	ldi	r24, 0x68	; 104
     5b4:	be 01       	movw	r22, r28
     5b6:	6f 5f       	subi	r22, 0xFF	; 255
     5b8:	7f 4f       	sbci	r23, 0xFF	; 255
     5ba:	42 e0       	ldi	r20, 0x02	; 2
     5bc:	21 e0       	ldi	r18, 0x01	; 1
     5be:	0e 94 0b 1b 	call	0x3616	; 0x3616 <twi_writeTo>

int imu_setGyroFullScale(uint8_t scale)
{
        uint8_t reg = imu_readByte(MPUREG_DLPF_FS_SYNC);
        return imu_writeByte(MPUREG_DLPF_FS_SYNC, (reg & 0b11000111) | (scale << 3));
}
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	0f 90       	pop	r0
     5c6:	0f 90       	pop	r0
     5c8:	cf 91       	pop	r28
     5ca:	df 91       	pop	r29
     5cc:	1f 91       	pop	r17
     5ce:	08 95       	ret

000005d0 <imu_setDigitalLowPassFilter>:
        return 0;
}


int imu_setDigitalLowPassFilter(uint8_t dlpf)
{
     5d0:	1f 93       	push	r17
     5d2:	df 93       	push	r29
     5d4:	cf 93       	push	r28
     5d6:	00 d0       	rcall	.+0      	; 0x5d8 <imu_setDigitalLowPassFilter+0x8>
     5d8:	cd b7       	in	r28, 0x3d	; 61
     5da:	de b7       	in	r29, 0x3e	; 62
     5dc:	18 2f       	mov	r17, r24
        uint8_t reg = imu_readByte(MPUREG_DLPF_FS_SYNC);
     5de:	86 e1       	ldi	r24, 0x16	; 22
     5e0:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <imu_readByte>

static uint8_t fifoFlags = 0x0;

int imu_writeByte(uint8_t reg, uint8_t value)
{
        uint8_t buf[2] = { reg, value };
     5e4:	96 e1       	ldi	r25, 0x16	; 22
     5e6:	99 83       	std	Y+1, r25	; 0x01
     5e8:	88 7f       	andi	r24, 0xF8	; 248
     5ea:	81 2b       	or	r24, r17
     5ec:	8a 83       	std	Y+2, r24	; 0x02
        return twi_writeTo(IMU_I2C_ADDRESS, buf, 2, 1);
     5ee:	88 e6       	ldi	r24, 0x68	; 104
     5f0:	be 01       	movw	r22, r28
     5f2:	6f 5f       	subi	r22, 0xFF	; 255
     5f4:	7f 4f       	sbci	r23, 0xFF	; 255
     5f6:	42 e0       	ldi	r20, 0x02	; 2
     5f8:	21 e0       	ldi	r18, 0x01	; 1
     5fa:	0e 94 0b 1b 	call	0x3616	; 0x3616 <twi_writeTo>

int imu_setDigitalLowPassFilter(uint8_t dlpf)
{
        uint8_t reg = imu_readByte(MPUREG_DLPF_FS_SYNC);
        return imu_writeByte(MPUREG_DLPF_FS_SYNC, (reg & 0b11111000) | dlpf);
}
     5fe:	90 e0       	ldi	r25, 0x00	; 0
     600:	0f 90       	pop	r0
     602:	0f 90       	pop	r0
     604:	cf 91       	pop	r28
     606:	df 91       	pop	r29
     608:	1f 91       	pop	r17
     60a:	08 95       	ret

0000060c <imu_fifoClear>:

        return len;
}

int imu_fifoClear()
{
     60c:	03 c0       	rjmp	.+6      	; 0x614 <imu_fifoClear+0x8>
        while (imu_fifoCount() > 0)
                imu_readByte(MPUREG_FIFO_R_W);
     60e:	8c e3       	ldi	r24, 0x3C	; 60
     610:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <imu_readByte>
        return len;
}

int imu_fifoClear()
{
        while (imu_fifoCount() > 0)
     614:	0e 94 77 02 	call	0x4ee	; 0x4ee <imu_fifoCount>
     618:	18 16       	cp	r1, r24
     61a:	19 06       	cpc	r1, r25
     61c:	c4 f3       	brlt	.-16     	; 0x60e <imu_fifoClear+0x2>
                imu_readByte(MPUREG_FIFO_R_W);

        return 0;
}
     61e:	80 e0       	ldi	r24, 0x00	; 0
     620:	90 e0       	ldi	r25, 0x00	; 0
     622:	08 95       	ret

00000624 <imu_fifoFromFooter>:

        return ret;
}

int imu_fifoFromFooter(uint8_t * buf, int len)
{
     624:	af 92       	push	r10
     626:	bf 92       	push	r11
     628:	df 92       	push	r13
     62a:	ef 92       	push	r14
     62c:	ff 92       	push	r15
     62e:	0f 93       	push	r16
     630:	1f 93       	push	r17
     632:	cf 93       	push	r28
     634:	df 93       	push	r29
     636:	5c 01       	movw	r10, r24
     638:	8b 01       	movw	r16, r22
        int i, fifoCount, read = 0;
        uint8_t scan[2];

        fifoCount = imu_fifoCount();
     63a:	0e 94 77 02 	call	0x4ee	; 0x4ee <imu_fifoCount>
     63e:	7c 01       	movw	r14, r24

        // Fifo needs to hold at least 2 footers (==4 bytes) and len data words.
        if (fifoCount<4 + len*2) return -1;
     640:	c8 01       	movw	r24, r16
     642:	02 96       	adiw	r24, 0x02	; 2
     644:	88 0f       	add	r24, r24
     646:	99 1f       	adc	r25, r25
     648:	e8 16       	cp	r14, r24
     64a:	f9 06       	cpc	r15, r25
     64c:	1c f4       	brge	.+6      	; 0x654 <imu_fifoFromFooter+0x30>
     64e:	0f ef       	ldi	r16, 0xFF	; 255
     650:	1f ef       	ldi	r17, 0xFF	; 255
     652:	31 c0       	rjmp	.+98     	; 0x6b6 <imu_fifoFromFooter+0x92>
     654:	c0 e0       	ldi	r28, 0x00	; 0
     656:	d0 e0       	ldi	r29, 0x00	; 0
     658:	10 c0       	rjmp	.+32     	; 0x67a <imu_fifoFromFooter+0x56>

        // Scan for footer
        for (i=0; i<fifoCount; i++)
        {
                scan[0] = scan[1]; scan[1] = imu_readByte(MPUREG_FIFO_R_W);
     65a:	8c e3       	ldi	r24, 0x3C	; 60
     65c:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <imu_readByte>
                if ((i>0) && (scan[0]==0x0C) && (scan[1]==0x2A)) break;
     660:	1c 16       	cp	r1, r28
     662:	1d 06       	cpc	r1, r29
     664:	2c f4       	brge	.+10     	; 0x670 <imu_fifoFromFooter+0x4c>
     666:	9c e0       	ldi	r25, 0x0C	; 12
     668:	d9 16       	cp	r13, r25
     66a:	11 f4       	brne	.+4      	; 0x670 <imu_fifoFromFooter+0x4c>
     66c:	8a 32       	cpi	r24, 0x2A	; 42
     66e:	41 f0       	breq	.+16     	; 0x680 <imu_fifoFromFooter+0x5c>
                fifoCount --;
     670:	08 94       	sec
     672:	e1 08       	sbc	r14, r1
     674:	f1 08       	sbc	r15, r1

        // Fifo needs to hold at least 2 footers (==4 bytes) and len data words.
        if (fifoCount<4 + len*2) return -1;

        // Scan for footer
        for (i=0; i<fifoCount; i++)
     676:	21 96       	adiw	r28, 0x01	; 1
     678:	d8 2e       	mov	r13, r24
     67a:	ce 15       	cp	r28, r14
     67c:	df 05       	cpc	r29, r15
     67e:	6c f3       	brlt	.-38     	; 0x65a <imu_fifoFromFooter+0x36>
                if ((i>0) && (scan[0]==0x0C) && (scan[1]==0x2A)) break;
                fifoCount --;
        }

        // Make sure that after the first footer found, there's still at least len+2 words in the fifo
        if (fifoCount< 2 + len*2) return -2;
     680:	c8 01       	movw	r24, r16
     682:	01 96       	adiw	r24, 0x01	; 1
     684:	88 0f       	add	r24, r24
     686:	99 1f       	adc	r25, r25
     688:	e8 16       	cp	r14, r24
     68a:	f9 06       	cpc	r15, r25
     68c:	1c f4       	brge	.+6      	; 0x694 <imu_fifoFromFooter+0x70>
     68e:	0e ef       	ldi	r16, 0xFE	; 254
     690:	1f ef       	ldi	r17, 0xFF	; 255
     692:	11 c0       	rjmp	.+34     	; 0x6b6 <imu_fifoFromFooter+0x92>

        // Read len bytes from the fifo
        for (i=0; i<len*2; i++)
     694:	78 01       	movw	r14, r16
     696:	ee 0c       	add	r14, r14
     698:	ff 1c       	adc	r15, r15
     69a:	c0 e0       	ldi	r28, 0x00	; 0
     69c:	d0 e0       	ldi	r29, 0x00	; 0
     69e:	08 c0       	rjmp	.+16     	; 0x6b0 <imu_fifoFromFooter+0x8c>
                buf[i] = imu_readByte(MPUREG_FIFO_R_W);
     6a0:	8c e3       	ldi	r24, 0x3C	; 60
     6a2:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <imu_readByte>
     6a6:	f5 01       	movw	r30, r10
     6a8:	ec 0f       	add	r30, r28
     6aa:	fd 1f       	adc	r31, r29
     6ac:	80 83       	st	Z, r24

        // Make sure that after the first footer found, there's still at least len+2 words in the fifo
        if (fifoCount< 2 + len*2) return -2;

        // Read len bytes from the fifo
        for (i=0; i<len*2; i++)
     6ae:	21 96       	adiw	r28, 0x01	; 1
     6b0:	ce 15       	cp	r28, r14
     6b2:	df 05       	cpc	r29, r15
     6b4:	ac f3       	brlt	.-22     	; 0x6a0 <imu_fifoFromFooter+0x7c>
                buf[i] = imu_readByte(MPUREG_FIFO_R_W);

        return len;
}
     6b6:	c8 01       	movw	r24, r16
     6b8:	df 91       	pop	r29
     6ba:	cf 91       	pop	r28
     6bc:	1f 91       	pop	r17
     6be:	0f 91       	pop	r16
     6c0:	ff 90       	pop	r15
     6c2:	ef 90       	pop	r14
     6c4:	df 90       	pop	r13
     6c6:	bf 90       	pop	r11
     6c8:	af 90       	pop	r10
     6ca:	08 95       	ret

000006cc <imu_fifoRead>:
        for (ret=0; value; value>>=1) ret+=value&1;
        return ret;
}

int imu_fifoRead(imu_sensorData *data)
{
     6cc:	0f 93       	push	r16
     6ce:	1f 93       	push	r17
     6d0:	df 93       	push	r29
     6d2:	cf 93       	push	r28
     6d4:	cd b7       	in	r28, 0x3d	; 61
     6d6:	de b7       	in	r29, 0x3e	; 62
     6d8:	60 97       	sbiw	r28, 0x10	; 16
     6da:	0f b6       	in	r0, 0x3f	; 63
     6dc:	f8 94       	cli
     6de:	de bf       	out	0x3e, r29	; 62
     6e0:	0f be       	out	0x3f, r0	; 63
     6e2:	cd bf       	out	0x3d, r28	; 61
     6e4:	8c 01       	movw	r16, r24
        uint8_t buf[16];

        // Determine how many values to read from the fifo.
        // We do a bit count on the fifo enable flags to figure out how many outputs are turned on and subtract
        // one to account for the footer that we don't want to read.
        int valueCount = bitcount(fifoFlags) -1;
     6e6:	90 91 e6 01 	lds	r25, 0x01E6
     6ea:	60 e0       	ldi	r22, 0x00	; 0
     6ec:	04 c0       	rjmp	.+8      	; 0x6f6 <imu_fifoRead+0x2a>
}

static int bitcount(uint8_t value)
{
        uint8_t ret;
        for (ret=0; value; value>>=1) ret+=value&1;
     6ee:	89 2f       	mov	r24, r25
     6f0:	81 70       	andi	r24, 0x01	; 1
     6f2:	68 0f       	add	r22, r24
     6f4:	96 95       	lsr	r25
     6f6:	99 23       	and	r25, r25
     6f8:	d1 f7       	brne	.-12     	; 0x6ee <imu_fifoRead+0x22>
        // We do a bit count on the fifo enable flags to figure out how many outputs are turned on and subtract
        // one to account for the footer that we don't want to read.
        int valueCount = bitcount(fifoFlags) -1;

        // Read data from the FIFO.
        ret = imu_fifoFromFooter(buf, valueCount);
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	61 50       	subi	r22, 0x01	; 1
     6fe:	70 40       	sbci	r23, 0x00	; 0
     700:	ce 01       	movw	r24, r28
     702:	01 96       	adiw	r24, 0x01	; 1
     704:	0e 94 12 03 	call	0x624	; 0x624 <imu_fifoFromFooter>
     708:	bc 01       	movw	r22, r24
        if (ret<0) return ret;
     70a:	97 fd       	sbrc	r25, 7
     70c:	7a c0       	rjmp	.+244    	; 0x802 <imu_fifoRead+0x136>

        // Decode the buffer data
        if (fifoFlags & IMU_FIFO_TEMP) { data->temp = (buf[bufPos]<<8) | buf[bufPos+1]; bufPos +=2; }
     70e:	40 91 e6 01 	lds	r20, 0x01E6
     712:	47 fd       	sbrc	r20, 7
     714:	03 c0       	rjmp	.+6      	; 0x71c <imu_fifoRead+0x50>
     716:	a0 e0       	ldi	r26, 0x00	; 0
     718:	b0 e0       	ldi	r27, 0x00	; 0
     71a:	0b c0       	rjmp	.+22     	; 0x732 <imu_fifoRead+0x66>
     71c:	99 81       	ldd	r25, Y+1	; 0x01
     71e:	80 e0       	ldi	r24, 0x00	; 0
     720:	2a 81       	ldd	r18, Y+2	; 0x02
     722:	30 e0       	ldi	r19, 0x00	; 0
     724:	82 2b       	or	r24, r18
     726:	93 2b       	or	r25, r19
     728:	f8 01       	movw	r30, r16
     72a:	95 87       	std	Z+13, r25	; 0x0d
     72c:	84 87       	std	Z+12, r24	; 0x0c
     72e:	a2 e0       	ldi	r26, 0x02	; 2
     730:	b0 e0       	ldi	r27, 0x00	; 0
        if (fifoFlags & IMU_FIFO_GYRO_X) { data->gyro_x = (buf[bufPos]<<8) | buf[bufPos+1]; bufPos +=2; }
     732:	46 ff       	sbrs	r20, 6
     734:	10 c0       	rjmp	.+32     	; 0x756 <imu_fifoRead+0x8a>
     736:	fe 01       	movw	r30, r28
     738:	ea 0f       	add	r30, r26
     73a:	fb 1f       	adc	r31, r27
     73c:	22 81       	ldd	r18, Z+2	; 0x02
     73e:	30 e0       	ldi	r19, 0x00	; 0
     740:	fe 01       	movw	r30, r28
     742:	ea 0f       	add	r30, r26
     744:	fb 1f       	adc	r31, r27
     746:	91 81       	ldd	r25, Z+1	; 0x01
     748:	80 e0       	ldi	r24, 0x00	; 0
     74a:	28 2b       	or	r18, r24
     74c:	39 2b       	or	r19, r25
     74e:	f8 01       	movw	r30, r16
     750:	31 83       	std	Z+1, r19	; 0x01
     752:	20 83       	st	Z, r18
     754:	12 96       	adiw	r26, 0x02	; 2
        if (fifoFlags & IMU_FIFO_GYRO_Y) { data->gyro_y = (buf[bufPos]<<8) | buf[bufPos+1]; bufPos +=2; }
     756:	45 ff       	sbrs	r20, 5
     758:	10 c0       	rjmp	.+32     	; 0x77a <imu_fifoRead+0xae>
     75a:	fe 01       	movw	r30, r28
     75c:	ea 0f       	add	r30, r26
     75e:	fb 1f       	adc	r31, r27
     760:	22 81       	ldd	r18, Z+2	; 0x02
     762:	30 e0       	ldi	r19, 0x00	; 0
     764:	fe 01       	movw	r30, r28
     766:	ea 0f       	add	r30, r26
     768:	fb 1f       	adc	r31, r27
     76a:	91 81       	ldd	r25, Z+1	; 0x01
     76c:	80 e0       	ldi	r24, 0x00	; 0
     76e:	28 2b       	or	r18, r24
     770:	39 2b       	or	r19, r25
     772:	f8 01       	movw	r30, r16
     774:	33 83       	std	Z+3, r19	; 0x03
     776:	22 83       	std	Z+2, r18	; 0x02
     778:	12 96       	adiw	r26, 0x02	; 2
        if (fifoFlags & IMU_FIFO_GYRO_Z) { data->gyro_z = (buf[bufPos]<<8) | buf[bufPos+1]; bufPos +=2; }
     77a:	44 ff       	sbrs	r20, 4
     77c:	10 c0       	rjmp	.+32     	; 0x79e <imu_fifoRead+0xd2>
     77e:	fe 01       	movw	r30, r28
     780:	ea 0f       	add	r30, r26
     782:	fb 1f       	adc	r31, r27
     784:	22 81       	ldd	r18, Z+2	; 0x02
     786:	30 e0       	ldi	r19, 0x00	; 0
     788:	fe 01       	movw	r30, r28
     78a:	ea 0f       	add	r30, r26
     78c:	fb 1f       	adc	r31, r27
     78e:	91 81       	ldd	r25, Z+1	; 0x01
     790:	80 e0       	ldi	r24, 0x00	; 0
     792:	28 2b       	or	r18, r24
     794:	39 2b       	or	r19, r25
     796:	f8 01       	movw	r30, r16
     798:	35 83       	std	Z+5, r19	; 0x05
     79a:	24 83       	std	Z+4, r18	; 0x04
     79c:	12 96       	adiw	r26, 0x02	; 2
        if (fifoFlags & IMU_FIFO_AUX_X) { data->acc_x = (buf[bufPos+1]<<8) | buf[bufPos]; bufPos +=2; }
     79e:	43 ff       	sbrs	r20, 3
     7a0:	10 c0       	rjmp	.+32     	; 0x7c2 <imu_fifoRead+0xf6>
     7a2:	fe 01       	movw	r30, r28
     7a4:	ea 0f       	add	r30, r26
     7a6:	fb 1f       	adc	r31, r27
     7a8:	32 81       	ldd	r19, Z+2	; 0x02
     7aa:	20 e0       	ldi	r18, 0x00	; 0
     7ac:	fe 01       	movw	r30, r28
     7ae:	ea 0f       	add	r30, r26
     7b0:	fb 1f       	adc	r31, r27
     7b2:	81 81       	ldd	r24, Z+1	; 0x01
     7b4:	90 e0       	ldi	r25, 0x00	; 0
     7b6:	28 2b       	or	r18, r24
     7b8:	39 2b       	or	r19, r25
     7ba:	f8 01       	movw	r30, r16
     7bc:	37 83       	std	Z+7, r19	; 0x07
     7be:	26 83       	std	Z+6, r18	; 0x06
     7c0:	12 96       	adiw	r26, 0x02	; 2
        if (fifoFlags & IMU_FIFO_AUX_Y) { data->acc_y = (buf[bufPos+1]<<8) | buf[bufPos]; bufPos +=2; }
     7c2:	42 ff       	sbrs	r20, 2
     7c4:	10 c0       	rjmp	.+32     	; 0x7e6 <imu_fifoRead+0x11a>
     7c6:	fe 01       	movw	r30, r28
     7c8:	ea 0f       	add	r30, r26
     7ca:	fb 1f       	adc	r31, r27
     7cc:	32 81       	ldd	r19, Z+2	; 0x02
     7ce:	20 e0       	ldi	r18, 0x00	; 0
     7d0:	fe 01       	movw	r30, r28
     7d2:	ea 0f       	add	r30, r26
     7d4:	fb 1f       	adc	r31, r27
     7d6:	81 81       	ldd	r24, Z+1	; 0x01
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	28 2b       	or	r18, r24
     7dc:	39 2b       	or	r19, r25
     7de:	f8 01       	movw	r30, r16
     7e0:	31 87       	std	Z+9, r19	; 0x09
     7e2:	20 87       	std	Z+8, r18	; 0x08
     7e4:	12 96       	adiw	r26, 0x02	; 2
        if (fifoFlags & IMU_FIFO_AUX_Z) { data->acc_z = (buf[bufPos+1]<<8) | buf[bufPos]; bufPos +=2; }
     7e6:	41 ff       	sbrs	r20, 1
     7e8:	0c c0       	rjmp	.+24     	; 0x802 <imu_fifoRead+0x136>
     7ea:	fe 01       	movw	r30, r28
     7ec:	ea 0f       	add	r30, r26
     7ee:	fb 1f       	adc	r31, r27
     7f0:	32 81       	ldd	r19, Z+2	; 0x02
     7f2:	20 e0       	ldi	r18, 0x00	; 0
     7f4:	81 81       	ldd	r24, Z+1	; 0x01
     7f6:	90 e0       	ldi	r25, 0x00	; 0
     7f8:	28 2b       	or	r18, r24
     7fa:	39 2b       	or	r19, r25
     7fc:	f8 01       	movw	r30, r16
     7fe:	33 87       	std	Z+11, r19	; 0x0b
     800:	22 87       	std	Z+10, r18	; 0x0a

        return ret;
}
     802:	cb 01       	movw	r24, r22
     804:	60 96       	adiw	r28, 0x10	; 16
     806:	0f b6       	in	r0, 0x3f	; 63
     808:	f8 94       	cli
     80a:	de bf       	out	0x3e, r29	; 62
     80c:	0f be       	out	0x3f, r0	; 63
     80e:	cd bf       	out	0x3d, r28	; 61
     810:	cf 91       	pop	r28
     812:	df 91       	pop	r29
     814:	1f 91       	pop	r17
     816:	0f 91       	pop	r16
     818:	08 95       	ret

0000081a <imu_configKionix>:

void imu_configKionix()
{
        int result = 0;

        imu_enablePassThrough();
     81a:	0e 94 c3 02 	call	0x586	; 0x586 <imu_enablePassThrough>

        result += imu_writeAuxByte(0x1d, 0xcd); // RAM reset
     81e:	8d e1       	ldi	r24, 0x1D	; 29
     820:	6d ec       	ldi	r22, 0xCD	; 205
     822:	0e 94 9a 01 	call	0x334	; 0x334 <imu_writeAuxByte>
        avr_delay(10);
     826:	6a e0       	ldi	r22, 0x0A	; 10
     828:	70 e0       	ldi	r23, 0x00	; 0
     82a:	80 e0       	ldi	r24, 0x00	; 0
     82c:	90 e0       	ldi	r25, 0x00	; 0
     82e:	0e 94 44 01 	call	0x288	; 0x288 <avr_delay>
        result += imu_writeAuxByte(0x1b, 0x42); // Wake up
     832:	8b e1       	ldi	r24, 0x1B	; 27
     834:	62 e4       	ldi	r22, 0x42	; 66
     836:	0e 94 9a 01 	call	0x334	; 0x334 <imu_writeAuxByte>
        result += imu_writeAuxByte(0x1b, 0xc2); // Normal operation
     83a:	8b e1       	ldi	r24, 0x1B	; 27
     83c:	62 ec       	ldi	r22, 0xC2	; 194
     83e:	0e 94 9a 01 	call	0x334	; 0x334 <imu_writeAuxByte>
        avr_delay(50);
     842:	62 e3       	ldi	r22, 0x32	; 50
     844:	70 e0       	ldi	r23, 0x00	; 0
     846:	80 e0       	ldi	r24, 0x00	; 0
     848:	90 e0       	ldi	r25, 0x00	; 0
     84a:	0e 94 44 01 	call	0x288	; 0x288 <avr_delay>
        result += imu_writeAuxByte(0x1e, 0x14); // INT_CTRL_REG1: Configure non-latching wake-up
     84e:	8e e1       	ldi	r24, 0x1E	; 30
     850:	64 e1       	ldi	r22, 0x14	; 20
     852:	0e 94 9a 01 	call	0x334	; 0x334 <imu_writeAuxByte>
        result += imu_writeAuxByte(0x5a, 0x00); // WUF_THRESH:    wake-up threshold (on motion)
     856:	8a e5       	ldi	r24, 0x5A	; 90
     858:	60 e0       	ldi	r22, 0x00	; 0
     85a:	0e 94 9a 01 	call	0x334	; 0x334 <imu_writeAuxByte>
        result += imu_writeAuxByte(0x21, 0x06); // DATA_CTRL_REG: output data rate
     85e:	81 e2       	ldi	r24, 0x21	; 33
     860:	66 e0       	ldi	r22, 0x06	; 6
     862:	0e 94 9a 01 	call	0x334	; 0x334 <imu_writeAuxByte>
        result += imu_writeAuxByte(0x29, 0x02); // WUF_TIMER:     wake-up timer
     866:	89 e2       	ldi	r24, 0x29	; 41
     868:	62 e0       	ldi	r22, 0x02	; 2
     86a:	0e 94 9a 01 	call	0x334	; 0x334 <imu_writeAuxByte>

        imu_disablePassThrough();
     86e:	0e 94 bf 02 	call	0x57e	; 0x57e <imu_disablePassThrough>

        return result;
}
     872:	08 95       	ret

00000874 <imu_init>:
#define SAMPLE_FREQUENCY 200

void imu_init()
{
        // Reset IMU3000
        imu_writeByte(MPUREG_PWR_MGM, BIT_H_RESET);
     874:	8e e3       	ldi	r24, 0x3E	; 62
     876:	60 e8       	ldi	r22, 0x80	; 128
     878:	0e 94 af 01 	call	0x35e	; 0x35e <imu_writeByte>

        // Defaults for the IMU3000 evaluation board
        imu_writeByte(MPUREG_AUX_SLV_ADDR, KIONIX_AUX_SLAVEADDR);
     87c:	84 e1       	ldi	r24, 0x14	; 20
     87e:	6f e0       	ldi	r22, 0x0F	; 15
     880:	0e 94 af 01 	call	0x35e	; 0x35e <imu_writeByte>
        imu_writeByte(MPUREG_ACCEL_BURST_ADDR, 0x86);
     884:	88 e1       	ldi	r24, 0x18	; 24
     886:	66 e8       	ldi	r22, 0x86	; 134
     888:	0e 94 af 01 	call	0x35e	; 0x35e <imu_writeByte>

        // Configure external accelerometer
        imu_configKionix();
     88c:	0e 94 0d 04 	call	0x81a	; 0x81a <imu_configKionix>

        // Defaults can be changed later
        imu_setGyroFullScale(MPUFS_2000DPS);
     890:	83 e0       	ldi	r24, 0x03	; 3
     892:	0e 94 c7 02 	call	0x58e	; 0x58e <imu_setGyroFullScale>
        imu_setDigitalLowPassFilter(MPUFILTER_5HZ);
     896:	86 e0       	ldi	r24, 0x06	; 6
     898:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <imu_setDigitalLowPassFilter>
        imu_setSamplingRateDivider(19);
     89c:	83 e1       	ldi	r24, 0x13	; 19
     89e:	0e 94 c4 01 	call	0x388	; 0x388 <imu_setSamplingRateDivider>

        // Enable the IMU fifo
        imu_fifoEnable(IMU_FIFO_ALL);
     8a2:	8f ef       	ldi	r24, 0xFF	; 255
     8a4:	0e 94 da 01 	call	0x3b4	; 0x3b4 <imu_fifoEnable>
        imu_writeByte(MPUREG_USER_CTRL, 0b01101011);
     8a8:	8d e3       	ldi	r24, 0x3D	; 61
     8aa:	6b e6       	ldi	r22, 0x6B	; 107
     8ac:	0e 94 af 01 	call	0x35e	; 0x35e <imu_writeByte>

        // Clear out the fifo
        imu_fifoClear();
     8b0:	0e 94 06 03 	call	0x60c	; 0x60c <imu_fifoClear>
}
     8b4:	08 95       	ret

000008b6 <main>:

//#define MEDIAN_FILTER_WINDOW 5
//static uint16_t filter

int main()
{
     8b6:	0f 93       	push	r16
     8b8:	1f 93       	push	r17
     8ba:	df 93       	push	r29
     8bc:	cf 93       	push	r28
     8be:	cd b7       	in	r28, 0x3d	; 61
     8c0:	de b7       	in	r29, 0x3e	; 62
     8c2:	2e 97       	sbiw	r28, 0x0e	; 14
     8c4:	0f b6       	in	r0, 0x3f	; 63
     8c6:	f8 94       	cli
     8c8:	de bf       	out	0x3e, r29	; 62
     8ca:	0f be       	out	0x3f, r0	; 63
     8cc:	cd bf       	out	0x3d, r28	; 61
        imu_sensorData sensorData;

        // Init avr timers
        avr_timerInit();
     8ce:	0e 94 90 01 	call	0x320	; 0x320 <avr_timerInit>

        // Init serial port
        //avr_serialInit(57600);

        // Init I2C (two-wire interface)
        twi_init();
     8d2:	0e 94 f9 1c 	call	0x39f2	; 0x39f2 <twi_init>

        // Blink
        DDRB = 0xff;
     8d6:	8f ef       	ldi	r24, 0xFF	; 255
     8d8:	87 bb       	out	0x17, r24	; 23
        PORTB = 0xff;
     8da:	88 bb       	out	0x18, r24	; 24

        uint8_t buf[100];
        int i;
        long time = 0;

        imu_init();
     8dc:	0e 94 3a 04 	call	0x874	; 0x874 <imu_init>
        // Divider is 4, so sample rate is 1KHz/5 = 200Hz
        // float gyroScale = (3.141592 / 100.0f) / 180.0f;

        float gyroScale = 16.4;

        fusion_reset();
     8e0:	0e 94 84 04 	call	0x908	; 0x908 <fusion_reset>

        long startTime = avr_millis();
     8e4:	0e 94 23 01 	call	0x246	; 0x246 <avr_millis>
        {

                // wait for sample
                while (imu_fifoCount()<=2);

                int result = imu_fifoRead(&sensorData);
     8e8:	8e 01       	movw	r16, r28
     8ea:	0f 5f       	subi	r16, 0xFF	; 255
     8ec:	1f 4f       	sbci	r17, 0xFF	; 255

        while (1)
        {

                // wait for sample
                while (imu_fifoCount()<=2);
     8ee:	0e 94 77 02 	call	0x4ee	; 0x4ee <imu_fifoCount>
     8f2:	03 97       	sbiw	r24, 0x03	; 3
     8f4:	e4 f3       	brlt	.-8      	; 0x8ee <main+0x38>

                int result = imu_fifoRead(&sensorData);
     8f6:	c8 01       	movw	r24, r16
     8f8:	0e 94 66 03 	call	0x6cc	; 0x6cc <imu_fifoRead>
                if (result>0)
     8fc:	18 16       	cp	r1, r24
     8fe:	19 06       	cpc	r1, r25
     900:	b4 f7       	brge	.-20     	; 0x8ee <main+0x38>
                        buf[0] = time >> 24;
                        buf[1] = (time >> 16) & 0xff;
                        buf[2] = (time >> 8) & 0xff;
                        buf[3] = time & 0xff;

                        long millis = avr_millis();
     902:	0e 94 23 01 	call	0x246	; 0x246 <avr_millis>
     906:	f3 cf       	rjmp	.-26     	; 0x8ee <main+0x38>

00000908 <fusion_reset>:
static float q0 = 1, q1 = 0, q2 = 0, q3 = 0;
static float exInt = 0, eyInt = 0, ezInt = 0;

void fusion_reset()
{
        q0 = 1, q1 = 0, q2 = 0, q3 = 0;
     908:	80 e0       	ldi	r24, 0x00	; 0
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	a0 e8       	ldi	r26, 0x80	; 128
     90e:	bf e3       	ldi	r27, 0x3F	; 63
     910:	80 93 60 00 	sts	0x0060, r24
     914:	90 93 61 00 	sts	0x0061, r25
     918:	a0 93 62 00 	sts	0x0062, r26
     91c:	b0 93 63 00 	sts	0x0063, r27
     920:	80 e0       	ldi	r24, 0x00	; 0
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	a0 e0       	ldi	r26, 0x00	; 0
     926:	b0 e0       	ldi	r27, 0x00	; 0
     928:	80 93 e7 01 	sts	0x01E7, r24
     92c:	90 93 e8 01 	sts	0x01E8, r25
     930:	a0 93 e9 01 	sts	0x01E9, r26
     934:	b0 93 ea 01 	sts	0x01EA, r27
     938:	80 93 ef 01 	sts	0x01EF, r24
     93c:	90 93 f0 01 	sts	0x01F0, r25
     940:	a0 93 f1 01 	sts	0x01F1, r26
     944:	b0 93 f2 01 	sts	0x01F2, r27
     948:	80 93 eb 01 	sts	0x01EB, r24
     94c:	90 93 ec 01 	sts	0x01EC, r25
     950:	a0 93 ed 01 	sts	0x01ED, r26
     954:	b0 93 ee 01 	sts	0x01EE, r27
        exInt = 0, eyInt = 0, ezInt = 0;
     958:	80 93 f3 01 	sts	0x01F3, r24
     95c:	90 93 f4 01 	sts	0x01F4, r25
     960:	a0 93 f5 01 	sts	0x01F5, r26
     964:	b0 93 f6 01 	sts	0x01F6, r27
     968:	80 93 f7 01 	sts	0x01F7, r24
     96c:	90 93 f8 01 	sts	0x01F8, r25
     970:	a0 93 f9 01 	sts	0x01F9, r26
     974:	b0 93 fa 01 	sts	0x01FA, r27
     978:	80 93 fb 01 	sts	0x01FB, r24
     97c:	90 93 fc 01 	sts	0x01FC, r25
     980:	a0 93 fd 01 	sts	0x01FD, r26
     984:	b0 93 fe 01 	sts	0x01FE, r27
}
     988:	08 95       	ret

0000098a <fusion_getRoll>:
{
        return asin(-2*(q0*q2 - q3*q1));
}

float fusion_getRoll()
{
     98a:	2f 92       	push	r2
     98c:	3f 92       	push	r3
     98e:	4f 92       	push	r4
     990:	5f 92       	push	r5
     992:	6f 92       	push	r6
     994:	7f 92       	push	r7
     996:	8f 92       	push	r8
     998:	9f 92       	push	r9
     99a:	af 92       	push	r10
     99c:	bf 92       	push	r11
     99e:	cf 92       	push	r12
     9a0:	df 92       	push	r13
     9a2:	ef 92       	push	r14
     9a4:	ff 92       	push	r15
     9a6:	0f 93       	push	r16
     9a8:	1f 93       	push	r17
     9aa:	df 93       	push	r29
     9ac:	cf 93       	push	r28
     9ae:	00 d0       	rcall	.+0      	; 0x9b0 <fusion_getRoll+0x26>
     9b0:	00 d0       	rcall	.+0      	; 0x9b2 <fusion_getRoll+0x28>
     9b2:	cd b7       	in	r28, 0x3d	; 61
     9b4:	de b7       	in	r29, 0x3e	; 62
        return atan2(2*(q0*q1 + q3*q2), q3*q3 + q0*q0 - q1*q1 - q2*q2);
     9b6:	60 90 60 00 	lds	r6, 0x0060
     9ba:	70 90 61 00 	lds	r7, 0x0061
     9be:	80 90 62 00 	lds	r8, 0x0062
     9c2:	90 90 63 00 	lds	r9, 0x0063
     9c6:	20 90 e7 01 	lds	r2, 0x01E7
     9ca:	30 90 e8 01 	lds	r3, 0x01E8
     9ce:	40 90 e9 01 	lds	r4, 0x01E9
     9d2:	50 90 ea 01 	lds	r5, 0x01EA
     9d6:	e0 90 eb 01 	lds	r14, 0x01EB
     9da:	f0 90 ec 01 	lds	r15, 0x01EC
     9de:	00 91 ed 01 	lds	r16, 0x01ED
     9e2:	10 91 ee 01 	lds	r17, 0x01EE
     9e6:	80 91 ef 01 	lds	r24, 0x01EF
     9ea:	90 91 f0 01 	lds	r25, 0x01F0
     9ee:	a0 91 f1 01 	lds	r26, 0x01F1
     9f2:	b0 91 f2 01 	lds	r27, 0x01F2
     9f6:	89 83       	std	Y+1, r24	; 0x01
     9f8:	9a 83       	std	Y+2, r25	; 0x02
     9fa:	ab 83       	std	Y+3, r26	; 0x03
     9fc:	bc 83       	std	Y+4, r27	; 0x04
     9fe:	c4 01       	movw	r24, r8
     a00:	b3 01       	movw	r22, r6
     a02:	a2 01       	movw	r20, r4
     a04:	91 01       	movw	r18, r2
     a06:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <__mulsf3>
     a0a:	5b 01       	movw	r10, r22
     a0c:	6c 01       	movw	r12, r24
     a0e:	c8 01       	movw	r24, r16
     a10:	b7 01       	movw	r22, r14
     a12:	29 81       	ldd	r18, Y+1	; 0x01
     a14:	3a 81       	ldd	r19, Y+2	; 0x02
     a16:	4b 81       	ldd	r20, Y+3	; 0x03
     a18:	5c 81       	ldd	r21, Y+4	; 0x04
     a1a:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <__mulsf3>
     a1e:	9b 01       	movw	r18, r22
     a20:	ac 01       	movw	r20, r24
     a22:	c6 01       	movw	r24, r12
     a24:	b5 01       	movw	r22, r10
     a26:	0e 94 34 35 	call	0x6a68	; 0x6a68 <__addsf3>
     a2a:	9b 01       	movw	r18, r22
     a2c:	ac 01       	movw	r20, r24
     a2e:	0e 94 34 35 	call	0x6a68	; 0x6a68 <__addsf3>
     a32:	5b 01       	movw	r10, r22
     a34:	6c 01       	movw	r12, r24
     a36:	c8 01       	movw	r24, r16
     a38:	b7 01       	movw	r22, r14
     a3a:	a8 01       	movw	r20, r16
     a3c:	97 01       	movw	r18, r14
     a3e:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <__mulsf3>
     a42:	7b 01       	movw	r14, r22
     a44:	8c 01       	movw	r16, r24
     a46:	c4 01       	movw	r24, r8
     a48:	b3 01       	movw	r22, r6
     a4a:	a4 01       	movw	r20, r8
     a4c:	93 01       	movw	r18, r6
     a4e:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <__mulsf3>
     a52:	9b 01       	movw	r18, r22
     a54:	ac 01       	movw	r20, r24
     a56:	c8 01       	movw	r24, r16
     a58:	b7 01       	movw	r22, r14
     a5a:	0e 94 34 35 	call	0x6a68	; 0x6a68 <__addsf3>
     a5e:	7b 01       	movw	r14, r22
     a60:	8c 01       	movw	r16, r24
     a62:	c2 01       	movw	r24, r4
     a64:	b1 01       	movw	r22, r2
     a66:	a2 01       	movw	r20, r4
     a68:	91 01       	movw	r18, r2
     a6a:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <__mulsf3>
     a6e:	9b 01       	movw	r18, r22
     a70:	ac 01       	movw	r20, r24
     a72:	c8 01       	movw	r24, r16
     a74:	b7 01       	movw	r22, r14
     a76:	0e 94 33 35 	call	0x6a66	; 0x6a66 <__subsf3>
     a7a:	7b 01       	movw	r14, r22
     a7c:	8c 01       	movw	r16, r24
     a7e:	69 81       	ldd	r22, Y+1	; 0x01
     a80:	7a 81       	ldd	r23, Y+2	; 0x02
     a82:	8b 81       	ldd	r24, Y+3	; 0x03
     a84:	9c 81       	ldd	r25, Y+4	; 0x04
     a86:	9b 01       	movw	r18, r22
     a88:	ac 01       	movw	r20, r24
     a8a:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <__mulsf3>
     a8e:	9b 01       	movw	r18, r22
     a90:	ac 01       	movw	r20, r24
     a92:	c8 01       	movw	r24, r16
     a94:	b7 01       	movw	r22, r14
     a96:	0e 94 33 35 	call	0x6a66	; 0x6a66 <__subsf3>
     a9a:	9b 01       	movw	r18, r22
     a9c:	ac 01       	movw	r20, r24
     a9e:	c6 01       	movw	r24, r12
     aa0:	b5 01       	movw	r22, r10
     aa2:	0e 94 be 35 	call	0x6b7c	; 0x6b7c <atan2>
}
     aa6:	0f 90       	pop	r0
     aa8:	0f 90       	pop	r0
     aaa:	0f 90       	pop	r0
     aac:	0f 90       	pop	r0
     aae:	cf 91       	pop	r28
     ab0:	df 91       	pop	r29
     ab2:	1f 91       	pop	r17
     ab4:	0f 91       	pop	r16
     ab6:	ff 90       	pop	r15
     ab8:	ef 90       	pop	r14
     aba:	df 90       	pop	r13
     abc:	cf 90       	pop	r12
     abe:	bf 90       	pop	r11
     ac0:	af 90       	pop	r10
     ac2:	9f 90       	pop	r9
     ac4:	8f 90       	pop	r8
     ac6:	7f 90       	pop	r7
     ac8:	6f 90       	pop	r6
     aca:	5f 90       	pop	r5
     acc:	4f 90       	pop	r4
     ace:	3f 90       	pop	r3
     ad0:	2f 90       	pop	r2
     ad2:	08 95       	ret

00000ad4 <fusion_getPitch>:
        q3 = q3 / norm;

}

float fusion_getPitch()
{
     ad4:	2f 92       	push	r2
     ad6:	3f 92       	push	r3
     ad8:	4f 92       	push	r4
     ada:	5f 92       	push	r5
     adc:	6f 92       	push	r6
     ade:	7f 92       	push	r7
     ae0:	8f 92       	push	r8
     ae2:	9f 92       	push	r9
     ae4:	af 92       	push	r10
     ae6:	bf 92       	push	r11
     ae8:	cf 92       	push	r12
     aea:	df 92       	push	r13
     aec:	ef 92       	push	r14
     aee:	ff 92       	push	r15
     af0:	0f 93       	push	r16
     af2:	1f 93       	push	r17
     af4:	df 93       	push	r29
     af6:	cf 93       	push	r28
     af8:	00 d0       	rcall	.+0      	; 0xafa <fusion_getPitch+0x26>
     afa:	00 d0       	rcall	.+0      	; 0xafc <fusion_getPitch+0x28>
     afc:	cd b7       	in	r28, 0x3d	; 61
     afe:	de b7       	in	r29, 0x3e	; 62
        return atan2(2*(q1*q2 + q3*q0), q3*q3 - q0*q0 - q1*q1 + q2*q2);
     b00:	20 90 e7 01 	lds	r2, 0x01E7
     b04:	30 90 e8 01 	lds	r3, 0x01E8
     b08:	40 90 e9 01 	lds	r4, 0x01E9
     b0c:	50 90 ea 01 	lds	r5, 0x01EA
     b10:	80 91 ef 01 	lds	r24, 0x01EF
     b14:	90 91 f0 01 	lds	r25, 0x01F0
     b18:	a0 91 f1 01 	lds	r26, 0x01F1
     b1c:	b0 91 f2 01 	lds	r27, 0x01F2
     b20:	89 83       	std	Y+1, r24	; 0x01
     b22:	9a 83       	std	Y+2, r25	; 0x02
     b24:	ab 83       	std	Y+3, r26	; 0x03
     b26:	bc 83       	std	Y+4, r27	; 0x04
     b28:	e0 90 eb 01 	lds	r14, 0x01EB
     b2c:	f0 90 ec 01 	lds	r15, 0x01EC
     b30:	00 91 ed 01 	lds	r16, 0x01ED
     b34:	10 91 ee 01 	lds	r17, 0x01EE
     b38:	60 90 60 00 	lds	r6, 0x0060
     b3c:	70 90 61 00 	lds	r7, 0x0061
     b40:	80 90 62 00 	lds	r8, 0x0062
     b44:	90 90 63 00 	lds	r9, 0x0063
     b48:	c2 01       	movw	r24, r4
     b4a:	b1 01       	movw	r22, r2
     b4c:	29 81       	ldd	r18, Y+1	; 0x01
     b4e:	3a 81       	ldd	r19, Y+2	; 0x02
     b50:	4b 81       	ldd	r20, Y+3	; 0x03
     b52:	5c 81       	ldd	r21, Y+4	; 0x04
     b54:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <__mulsf3>
     b58:	5b 01       	movw	r10, r22
     b5a:	6c 01       	movw	r12, r24
     b5c:	c8 01       	movw	r24, r16
     b5e:	b7 01       	movw	r22, r14
     b60:	a4 01       	movw	r20, r8
     b62:	93 01       	movw	r18, r6
     b64:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <__mulsf3>
     b68:	9b 01       	movw	r18, r22
     b6a:	ac 01       	movw	r20, r24
     b6c:	c6 01       	movw	r24, r12
     b6e:	b5 01       	movw	r22, r10
     b70:	0e 94 34 35 	call	0x6a68	; 0x6a68 <__addsf3>
     b74:	9b 01       	movw	r18, r22
     b76:	ac 01       	movw	r20, r24
     b78:	0e 94 34 35 	call	0x6a68	; 0x6a68 <__addsf3>
     b7c:	5b 01       	movw	r10, r22
     b7e:	6c 01       	movw	r12, r24
     b80:	c8 01       	movw	r24, r16
     b82:	b7 01       	movw	r22, r14
     b84:	a8 01       	movw	r20, r16
     b86:	97 01       	movw	r18, r14
     b88:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <__mulsf3>
     b8c:	7b 01       	movw	r14, r22
     b8e:	8c 01       	movw	r16, r24
     b90:	c4 01       	movw	r24, r8
     b92:	b3 01       	movw	r22, r6
     b94:	a4 01       	movw	r20, r8
     b96:	93 01       	movw	r18, r6
     b98:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <__mulsf3>
     b9c:	9b 01       	movw	r18, r22
     b9e:	ac 01       	movw	r20, r24
     ba0:	c8 01       	movw	r24, r16
     ba2:	b7 01       	movw	r22, r14
     ba4:	0e 94 33 35 	call	0x6a66	; 0x6a66 <__subsf3>
     ba8:	7b 01       	movw	r14, r22
     baa:	8c 01       	movw	r16, r24
     bac:	c2 01       	movw	r24, r4
     bae:	b1 01       	movw	r22, r2
     bb0:	a2 01       	movw	r20, r4
     bb2:	91 01       	movw	r18, r2
     bb4:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <__mulsf3>
     bb8:	9b 01       	movw	r18, r22
     bba:	ac 01       	movw	r20, r24
     bbc:	c8 01       	movw	r24, r16
     bbe:	b7 01       	movw	r22, r14
     bc0:	0e 94 33 35 	call	0x6a66	; 0x6a66 <__subsf3>
     bc4:	7b 01       	movw	r14, r22
     bc6:	8c 01       	movw	r16, r24
     bc8:	69 81       	ldd	r22, Y+1	; 0x01
     bca:	7a 81       	ldd	r23, Y+2	; 0x02
     bcc:	8b 81       	ldd	r24, Y+3	; 0x03
     bce:	9c 81       	ldd	r25, Y+4	; 0x04
     bd0:	9b 01       	movw	r18, r22
     bd2:	ac 01       	movw	r20, r24
     bd4:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <__mulsf3>
     bd8:	9b 01       	movw	r18, r22
     bda:	ac 01       	movw	r20, r24
     bdc:	c8 01       	movw	r24, r16
     bde:	b7 01       	movw	r22, r14
     be0:	0e 94 34 35 	call	0x6a68	; 0x6a68 <__addsf3>
     be4:	9b 01       	movw	r18, r22
     be6:	ac 01       	movw	r20, r24
     be8:	c6 01       	movw	r24, r12
     bea:	b5 01       	movw	r22, r10
     bec:	0e 94 be 35 	call	0x6b7c	; 0x6b7c <atan2>
}
     bf0:	0f 90       	pop	r0
     bf2:	0f 90       	pop	r0
     bf4:	0f 90       	pop	r0
     bf6:	0f 90       	pop	r0
     bf8:	cf 91       	pop	r28
     bfa:	df 91       	pop	r29
     bfc:	1f 91       	pop	r17
     bfe:	0f 91       	pop	r16
     c00:	ff 90       	pop	r15
     c02:	ef 90       	pop	r14
     c04:	df 90       	pop	r13
     c06:	cf 90       	pop	r12
     c08:	bf 90       	pop	r11
     c0a:	af 90       	pop	r10
     c0c:	9f 90       	pop	r9
     c0e:	8f 90       	pop	r8
     c10:	7f 90       	pop	r7
     c12:	6f 90       	pop	r6
     c14:	5f 90       	pop	r5
     c16:	4f 90       	pop	r4
     c18:	3f 90       	pop	r3
     c1a:	2f 90       	pop	r2
     c1c:	08 95       	ret

00000c1e <fusion_getYaw>:

float fusion_getYaw()
{
     c1e:	ef 92       	push	r14
     c20:	ff 92       	push	r15
     c22:	0f 93       	push	r16
     c24:	1f 93       	push	r17
        return asin(-2*(q0*q2 - q3*q1));
     c26:	60 91 60 00 	lds	r22, 0x0060
     c2a:	70 91 61 00 	lds	r23, 0x0061
     c2e:	80 91 62 00 	lds	r24, 0x0062
     c32:	90 91 63 00 	lds	r25, 0x0063
     c36:	20 91 ef 01 	lds	r18, 0x01EF
     c3a:	30 91 f0 01 	lds	r19, 0x01F0
     c3e:	40 91 f1 01 	lds	r20, 0x01F1
     c42:	50 91 f2 01 	lds	r21, 0x01F2
     c46:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <__mulsf3>
     c4a:	7b 01       	movw	r14, r22
     c4c:	8c 01       	movw	r16, r24
     c4e:	60 91 eb 01 	lds	r22, 0x01EB
     c52:	70 91 ec 01 	lds	r23, 0x01EC
     c56:	80 91 ed 01 	lds	r24, 0x01ED
     c5a:	90 91 ee 01 	lds	r25, 0x01EE
     c5e:	20 91 e7 01 	lds	r18, 0x01E7
     c62:	30 91 e8 01 	lds	r19, 0x01E8
     c66:	40 91 e9 01 	lds	r20, 0x01E9
     c6a:	50 91 ea 01 	lds	r21, 0x01EA
     c6e:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <__mulsf3>
     c72:	9b 01       	movw	r18, r22
     c74:	ac 01       	movw	r20, r24
     c76:	c8 01       	movw	r24, r16
     c78:	b7 01       	movw	r22, r14
     c7a:	0e 94 33 35 	call	0x6a66	; 0x6a66 <__subsf3>
     c7e:	20 e0       	ldi	r18, 0x00	; 0
     c80:	30 e0       	ldi	r19, 0x00	; 0
     c82:	40 e0       	ldi	r20, 0x00	; 0
     c84:	50 ec       	ldi	r21, 0xC0	; 192
     c86:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <__mulsf3>
     c8a:	0e 94 98 35 	call	0x6b30	; 0x6b30 <asin>
}
     c8e:	1f 91       	pop	r17
     c90:	0f 91       	pop	r16
     c92:	ff 90       	pop	r15
     c94:	ef 90       	pop	r14
     c96:	08 95       	ret

00000c98 <fusion_update>:
        q0 = 1, q1 = 0, q2 = 0, q3 = 0;
        exInt = 0, eyInt = 0, ezInt = 0;
}

void fusion_update(float gx, float gy, float gz, float ax, float ay, float az)
{
     c98:	2f 92       	push	r2
     c9a:	3f 92       	push	r3
     c9c:	4f 92       	push	r4
     c9e:	5f 92       	push	r5
     ca0:	6f 92       	push	r6
     ca2:	7f 92       	push	r7
     ca4:	8f 92       	push	r8
     ca6:	9f 92       	push	r9
     ca8:	af 92       	push	r10
     caa:	bf 92       	push	r11
     cac:	cf 92       	push	r12
     cae:	df 92       	push	r13
     cb0:	ef 92       	push	r14
     cb2:	ff 92       	push	r15
     cb4:	0f 93       	push	r16
     cb6:	1f 93       	push	r17
     cb8:	df 93       	push	r29
     cba:	cf 93       	push	r28
     cbc:	cd b7       	in	r28, 0x3d	; 61
     cbe:	de b7       	in	r29, 0x3e	; 62
     cc0:	c4 54       	subi	r28, 0x44	; 68
     cc2:	d0 40       	sbci	r29, 0x00	; 0
     cc4:	0f b6       	in	r0, 0x3f	; 63
     cc6:	f8 94       	cli
     cc8:	de bf       	out	0x3e, r29	; 62
     cca:	0f be       	out	0x3f, r0	; 63
     ccc:	cd bf       	out	0x3d, r28	; 61
     cce:	69 8b       	std	Y+17, r22	; 0x11
     cd0:	7a 8b       	std	Y+18, r23	; 0x12
     cd2:	8b 8b       	std	Y+19, r24	; 0x13
     cd4:	9c 8b       	std	Y+20, r25	; 0x14
     cd6:	2d 8b       	std	Y+21, r18	; 0x15
     cd8:	3e 8b       	std	Y+22, r19	; 0x16
     cda:	4f 8b       	std	Y+23, r20	; 0x17
     cdc:	58 8f       	std	Y+24, r21	; 0x18
     cde:	6d 96       	adiw	r28, 0x1d	; 29
     ce0:	2c ac       	ldd	r2, Y+60	; 0x3c
     ce2:	3d ac       	ldd	r3, Y+61	; 0x3d
     ce4:	4e ac       	ldd	r4, Y+62	; 0x3e
     ce6:	5f ac       	ldd	r5, Y+63	; 0x3f
     ce8:	6d 97       	sbiw	r28, 0x1d	; 29
        float norm;
        float vx, vy, vz;
        float ex, ey, ez;

        // normalise the measurements
        norm = sqrt(ax*ax + ay*ay + az*az);
     cea:	c6 01       	movw	r24, r12
     cec:	b5 01       	movw	r22, r10
     cee:	a6 01       	movw	r20, r12
     cf0:	95 01       	movw	r18, r10
     cf2:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <__mulsf3>
     cf6:	3b 01       	movw	r6, r22
     cf8:	4c 01       	movw	r8, r24
     cfa:	c2 01       	movw	r24, r4
     cfc:	b1 01       	movw	r22, r2
     cfe:	a2 01       	movw	r20, r4
     d00:	91 01       	movw	r18, r2
     d02:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <__mulsf3>
     d06:	9b 01       	movw	r18, r22
     d08:	ac 01       	movw	r20, r24
     d0a:	c4 01       	movw	r24, r8
     d0c:	b3 01       	movw	r22, r6
     d0e:	0e 94 34 35 	call	0x6a68	; 0x6a68 <__addsf3>
     d12:	3b 01       	movw	r6, r22
     d14:	4c 01       	movw	r8, r24
     d16:	a1 96       	adiw	r28, 0x21	; 33
     d18:	6c ad       	ldd	r22, Y+60	; 0x3c
     d1a:	7d ad       	ldd	r23, Y+61	; 0x3d
     d1c:	8e ad       	ldd	r24, Y+62	; 0x3e
     d1e:	9f ad       	ldd	r25, Y+63	; 0x3f
     d20:	a1 97       	sbiw	r28, 0x21	; 33
     d22:	9b 01       	movw	r18, r22
     d24:	ac 01       	movw	r20, r24
     d26:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <__mulsf3>
     d2a:	9b 01       	movw	r18, r22
     d2c:	ac 01       	movw	r20, r24
     d2e:	c4 01       	movw	r24, r8
     d30:	b3 01       	movw	r22, r6
     d32:	0e 94 34 35 	call	0x6a68	; 0x6a68 <__addsf3>
     d36:	0e 94 1f 38 	call	0x703e	; 0x703e <sqrt>
     d3a:	3b 01       	movw	r6, r22
     d3c:	4c 01       	movw	r8, r24
        ax = ax / norm;
     d3e:	c6 01       	movw	r24, r12
     d40:	b5 01       	movw	r22, r10
     d42:	a4 01       	movw	r20, r8
     d44:	93 01       	movw	r18, r6
     d46:	0e 94 15 36 	call	0x6c2a	; 0x6c2a <__divsf3>
     d4a:	69 8f       	std	Y+25, r22	; 0x19
     d4c:	7a 8f       	std	Y+26, r23	; 0x1a
     d4e:	8b 8f       	std	Y+27, r24	; 0x1b
     d50:	9c 8f       	std	Y+28, r25	; 0x1c
        ay = ay / norm;
     d52:	c2 01       	movw	r24, r4
     d54:	b1 01       	movw	r22, r2
     d56:	a4 01       	movw	r20, r8
     d58:	93 01       	movw	r18, r6
     d5a:	0e 94 15 36 	call	0x6c2a	; 0x6c2a <__divsf3>
     d5e:	6d 8f       	std	Y+29, r22	; 0x1d
     d60:	7e 8f       	std	Y+30, r23	; 0x1e
     d62:	8f 8f       	std	Y+31, r24	; 0x1f
     d64:	98 a3       	std	Y+32, r25	; 0x20
        az = az / norm;
     d66:	a1 96       	adiw	r28, 0x21	; 33
     d68:	6c ad       	ldd	r22, Y+60	; 0x3c
     d6a:	7d ad       	ldd	r23, Y+61	; 0x3d
     d6c:	8e ad       	ldd	r24, Y+62	; 0x3e
     d6e:	9f ad       	ldd	r25, Y+63	; 0x3f
     d70:	a1 97       	sbiw	r28, 0x21	; 33
     d72:	a4 01       	movw	r20, r8
     d74:	93 01       	movw	r18, r6
     d76:	0e 94 15 36 	call	0x6c2a	; 0x6c2a <__divsf3>
     d7a:	69 a3       	std	Y+33, r22	; 0x21
     d7c:	7a a3       	std	Y+34, r23	; 0x22
     d7e:	8b a3       	std	Y+35, r24	; 0x23
     d80:	9c a3       	std	Y+36, r25	; 0x24

        // estimated direction of gravity
        vx = 2*(q1*q3 - q0*q2);
     d82:	80 91 e7 01 	lds	r24, 0x01E7
     d86:	90 91 e8 01 	lds	r25, 0x01E8
     d8a:	a0 91 e9 01 	lds	r26, 0x01E9
     d8e:	b0 91 ea 01 	lds	r27, 0x01EA
     d92:	8d 87       	std	Y+13, r24	; 0x0d
     d94:	9e 87       	std	Y+14, r25	; 0x0e
     d96:	af 87       	std	Y+15, r26	; 0x0f
     d98:	b8 8b       	std	Y+16, r27	; 0x10
     d9a:	80 91 eb 01 	lds	r24, 0x01EB
     d9e:	90 91 ec 01 	lds	r25, 0x01EC
     da2:	a0 91 ed 01 	lds	r26, 0x01ED
     da6:	b0 91 ee 01 	lds	r27, 0x01EE
     daa:	89 87       	std	Y+9, r24	; 0x09
     dac:	9a 87       	std	Y+10, r25	; 0x0a
     dae:	ab 87       	std	Y+11, r26	; 0x0b
     db0:	bc 87       	std	Y+12, r27	; 0x0c
     db2:	80 91 60 00 	lds	r24, 0x0060
     db6:	90 91 61 00 	lds	r25, 0x0061
     dba:	a0 91 62 00 	lds	r26, 0x0062
     dbe:	b0 91 63 00 	lds	r27, 0x0063
     dc2:	8d 83       	std	Y+5, r24	; 0x05
     dc4:	9e 83       	std	Y+6, r25	; 0x06
     dc6:	af 83       	std	Y+7, r26	; 0x07
     dc8:	b8 87       	std	Y+8, r27	; 0x08
     dca:	80 91 ef 01 	lds	r24, 0x01EF
     dce:	90 91 f0 01 	lds	r25, 0x01F0
     dd2:	a0 91 f1 01 	lds	r26, 0x01F1
     dd6:	b0 91 f2 01 	lds	r27, 0x01F2
     dda:	89 83       	std	Y+1, r24	; 0x01
     ddc:	9a 83       	std	Y+2, r25	; 0x02
     dde:	ab 83       	std	Y+3, r26	; 0x03
     de0:	bc 83       	std	Y+4, r27	; 0x04
     de2:	6d 85       	ldd	r22, Y+13	; 0x0d
     de4:	7e 85       	ldd	r23, Y+14	; 0x0e
     de6:	8f 85       	ldd	r24, Y+15	; 0x0f
     de8:	98 89       	ldd	r25, Y+16	; 0x10
     dea:	29 85       	ldd	r18, Y+9	; 0x09
     dec:	3a 85       	ldd	r19, Y+10	; 0x0a
     dee:	4b 85       	ldd	r20, Y+11	; 0x0b
     df0:	5c 85       	ldd	r21, Y+12	; 0x0c
     df2:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <__mulsf3>
     df6:	5b 01       	movw	r10, r22
     df8:	6c 01       	movw	r12, r24
     dfa:	6d 81       	ldd	r22, Y+5	; 0x05
     dfc:	7e 81       	ldd	r23, Y+6	; 0x06
     dfe:	8f 81       	ldd	r24, Y+7	; 0x07
     e00:	98 85       	ldd	r25, Y+8	; 0x08
     e02:	29 81       	ldd	r18, Y+1	; 0x01
     e04:	3a 81       	ldd	r19, Y+2	; 0x02
     e06:	4b 81       	ldd	r20, Y+3	; 0x03
     e08:	5c 81       	ldd	r21, Y+4	; 0x04
     e0a:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <__mulsf3>
     e0e:	9b 01       	movw	r18, r22
     e10:	ac 01       	movw	r20, r24
     e12:	c6 01       	movw	r24, r12
     e14:	b5 01       	movw	r22, r10
     e16:	0e 94 33 35 	call	0x6a66	; 0x6a66 <__subsf3>
     e1a:	9b 01       	movw	r18, r22
     e1c:	ac 01       	movw	r20, r24
     e1e:	0e 94 34 35 	call	0x6a68	; 0x6a68 <__addsf3>
     e22:	6d a3       	std	Y+37, r22	; 0x25
     e24:	7e a3       	std	Y+38, r23	; 0x26
     e26:	8f a3       	std	Y+39, r24	; 0x27
     e28:	98 a7       	std	Y+40, r25	; 0x28
        vy = 2*(q0*q1 + q2*q3);
     e2a:	6d 81       	ldd	r22, Y+5	; 0x05
     e2c:	7e 81       	ldd	r23, Y+6	; 0x06
     e2e:	8f 81       	ldd	r24, Y+7	; 0x07
     e30:	98 85       	ldd	r25, Y+8	; 0x08
     e32:	2d 85       	ldd	r18, Y+13	; 0x0d
     e34:	3e 85       	ldd	r19, Y+14	; 0x0e
     e36:	4f 85       	ldd	r20, Y+15	; 0x0f
     e38:	58 89       	ldd	r21, Y+16	; 0x10
     e3a:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <__mulsf3>
     e3e:	5b 01       	movw	r10, r22
     e40:	6c 01       	movw	r12, r24
     e42:	69 81       	ldd	r22, Y+1	; 0x01
     e44:	7a 81       	ldd	r23, Y+2	; 0x02
     e46:	8b 81       	ldd	r24, Y+3	; 0x03
     e48:	9c 81       	ldd	r25, Y+4	; 0x04
     e4a:	29 85       	ldd	r18, Y+9	; 0x09
     e4c:	3a 85       	ldd	r19, Y+10	; 0x0a
     e4e:	4b 85       	ldd	r20, Y+11	; 0x0b
     e50:	5c 85       	ldd	r21, Y+12	; 0x0c
     e52:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <__mulsf3>
     e56:	9b 01       	movw	r18, r22
     e58:	ac 01       	movw	r20, r24
     e5a:	c6 01       	movw	r24, r12
     e5c:	b5 01       	movw	r22, r10
     e5e:	0e 94 34 35 	call	0x6a68	; 0x6a68 <__addsf3>
     e62:	9b 01       	movw	r18, r22
     e64:	ac 01       	movw	r20, r24
     e66:	0e 94 34 35 	call	0x6a68	; 0x6a68 <__addsf3>
     e6a:	69 a7       	std	Y+41, r22	; 0x29
     e6c:	7a a7       	std	Y+42, r23	; 0x2a
     e6e:	8b a7       	std	Y+43, r24	; 0x2b
     e70:	9c a7       	std	Y+44, r25	; 0x2c
        vz = q0*q0 - q1*q1 - q2*q2 + q3*q3;
     e72:	6d 81       	ldd	r22, Y+5	; 0x05
     e74:	7e 81       	ldd	r23, Y+6	; 0x06
     e76:	8f 81       	ldd	r24, Y+7	; 0x07
     e78:	98 85       	ldd	r25, Y+8	; 0x08
     e7a:	9b 01       	movw	r18, r22
     e7c:	ac 01       	movw	r20, r24
     e7e:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <__mulsf3>
     e82:	5b 01       	movw	r10, r22
     e84:	6c 01       	movw	r12, r24
     e86:	6d 85       	ldd	r22, Y+13	; 0x0d
     e88:	7e 85       	ldd	r23, Y+14	; 0x0e
     e8a:	8f 85       	ldd	r24, Y+15	; 0x0f
     e8c:	98 89       	ldd	r25, Y+16	; 0x10
     e8e:	9b 01       	movw	r18, r22
     e90:	ac 01       	movw	r20, r24
     e92:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <__mulsf3>
     e96:	9b 01       	movw	r18, r22
     e98:	ac 01       	movw	r20, r24
     e9a:	c6 01       	movw	r24, r12
     e9c:	b5 01       	movw	r22, r10
     e9e:	0e 94 33 35 	call	0x6a66	; 0x6a66 <__subsf3>
     ea2:	5b 01       	movw	r10, r22
     ea4:	6c 01       	movw	r12, r24
     ea6:	69 81       	ldd	r22, Y+1	; 0x01
     ea8:	7a 81       	ldd	r23, Y+2	; 0x02
     eaa:	8b 81       	ldd	r24, Y+3	; 0x03
     eac:	9c 81       	ldd	r25, Y+4	; 0x04
     eae:	9b 01       	movw	r18, r22
     eb0:	ac 01       	movw	r20, r24
     eb2:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <__mulsf3>
     eb6:	9b 01       	movw	r18, r22
     eb8:	ac 01       	movw	r20, r24
     eba:	c6 01       	movw	r24, r12
     ebc:	b5 01       	movw	r22, r10
     ebe:	0e 94 33 35 	call	0x6a66	; 0x6a66 <__subsf3>
     ec2:	5b 01       	movw	r10, r22
     ec4:	6c 01       	movw	r12, r24
     ec6:	69 85       	ldd	r22, Y+9	; 0x09
     ec8:	7a 85       	ldd	r23, Y+10	; 0x0a
     eca:	8b 85       	ldd	r24, Y+11	; 0x0b
     ecc:	9c 85       	ldd	r25, Y+12	; 0x0c
     ece:	9b 01       	movw	r18, r22
     ed0:	ac 01       	movw	r20, r24
     ed2:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <__mulsf3>
     ed6:	9b 01       	movw	r18, r22
     ed8:	ac 01       	movw	r20, r24
     eda:	c6 01       	movw	r24, r12
     edc:	b5 01       	movw	r22, r10
     ede:	0e 94 34 35 	call	0x6a68	; 0x6a68 <__addsf3>
     ee2:	3b 01       	movw	r6, r22
     ee4:	4c 01       	movw	r8, r24

        // error is sum of cross product between reference direction of field and direction measured by sensor
        ex = (ay*vz - az*vy);
     ee6:	6d 8d       	ldd	r22, Y+29	; 0x1d
     ee8:	7e 8d       	ldd	r23, Y+30	; 0x1e
     eea:	8f 8d       	ldd	r24, Y+31	; 0x1f
     eec:	98 a1       	ldd	r25, Y+32	; 0x20
     eee:	a4 01       	movw	r20, r8
     ef0:	93 01       	movw	r18, r6
     ef2:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <__mulsf3>
     ef6:	5b 01       	movw	r10, r22
     ef8:	6c 01       	movw	r12, r24
     efa:	69 a1       	ldd	r22, Y+33	; 0x21
     efc:	7a a1       	ldd	r23, Y+34	; 0x22
     efe:	8b a1       	ldd	r24, Y+35	; 0x23
     f00:	9c a1       	ldd	r25, Y+36	; 0x24
     f02:	29 a5       	ldd	r18, Y+41	; 0x29
     f04:	3a a5       	ldd	r19, Y+42	; 0x2a
     f06:	4b a5       	ldd	r20, Y+43	; 0x2b
     f08:	5c a5       	ldd	r21, Y+44	; 0x2c
     f0a:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <__mulsf3>
     f0e:	9b 01       	movw	r18, r22
     f10:	ac 01       	movw	r20, r24
     f12:	c6 01       	movw	r24, r12
     f14:	b5 01       	movw	r22, r10
     f16:	0e 94 33 35 	call	0x6a66	; 0x6a66 <__subsf3>
     f1a:	1b 01       	movw	r2, r22
     f1c:	2c 01       	movw	r4, r24
        ey = (az*vx - ax*vz);
     f1e:	69 a1       	ldd	r22, Y+33	; 0x21
     f20:	7a a1       	ldd	r23, Y+34	; 0x22
     f22:	8b a1       	ldd	r24, Y+35	; 0x23
     f24:	9c a1       	ldd	r25, Y+36	; 0x24
     f26:	2d a1       	ldd	r18, Y+37	; 0x25
     f28:	3e a1       	ldd	r19, Y+38	; 0x26
     f2a:	4f a1       	ldd	r20, Y+39	; 0x27
     f2c:	58 a5       	ldd	r21, Y+40	; 0x28
     f2e:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <__mulsf3>
     f32:	5b 01       	movw	r10, r22
     f34:	6c 01       	movw	r12, r24
     f36:	69 8d       	ldd	r22, Y+25	; 0x19
     f38:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f3a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f3c:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f3e:	a4 01       	movw	r20, r8
     f40:	93 01       	movw	r18, r6
     f42:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <__mulsf3>
     f46:	9b 01       	movw	r18, r22
     f48:	ac 01       	movw	r20, r24
     f4a:	c6 01       	movw	r24, r12
     f4c:	b5 01       	movw	r22, r10
     f4e:	0e 94 33 35 	call	0x6a66	; 0x6a66 <__subsf3>
     f52:	3b 01       	movw	r6, r22
     f54:	4c 01       	movw	r8, r24
        ez = (ax*vy - ay*vx);
     f56:	69 8d       	ldd	r22, Y+25	; 0x19
     f58:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f5a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f5c:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f5e:	29 a5       	ldd	r18, Y+41	; 0x29
     f60:	3a a5       	ldd	r19, Y+42	; 0x2a
     f62:	4b a5       	ldd	r20, Y+43	; 0x2b
     f64:	5c a5       	ldd	r21, Y+44	; 0x2c
     f66:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <__mulsf3>
     f6a:	5b 01       	movw	r10, r22
     f6c:	6c 01       	movw	r12, r24
     f6e:	6d 8d       	ldd	r22, Y+29	; 0x1d
     f70:	7e 8d       	ldd	r23, Y+30	; 0x1e
     f72:	8f 8d       	ldd	r24, Y+31	; 0x1f
     f74:	98 a1       	ldd	r25, Y+32	; 0x20
     f76:	2d a1       	ldd	r18, Y+37	; 0x25
     f78:	3e a1       	ldd	r19, Y+38	; 0x26
     f7a:	4f a1       	ldd	r20, Y+39	; 0x27
     f7c:	58 a5       	ldd	r21, Y+40	; 0x28
     f7e:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <__mulsf3>
     f82:	9b 01       	movw	r18, r22
     f84:	ac 01       	movw	r20, r24
     f86:	c6 01       	movw	r24, r12
     f88:	b5 01       	movw	r22, r10
     f8a:	0e 94 33 35 	call	0x6a66	; 0x6a66 <__subsf3>
     f8e:	5b 01       	movw	r10, r22
     f90:	6c 01       	movw	r12, r24

        // integral error scaled integral gain
        exInt = exInt + ex*Ki;
     f92:	c2 01       	movw	r24, r4
     f94:	b1 01       	movw	r22, r2
     f96:	2a e0       	ldi	r18, 0x0A	; 10
     f98:	37 ed       	ldi	r19, 0xD7	; 215
     f9a:	43 ea       	ldi	r20, 0xA3	; 163
     f9c:	5b e3       	ldi	r21, 0x3B	; 59
     f9e:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <__mulsf3>
     fa2:	20 91 f3 01 	lds	r18, 0x01F3
     fa6:	30 91 f4 01 	lds	r19, 0x01F4
     faa:	40 91 f5 01 	lds	r20, 0x01F5
     fae:	50 91 f6 01 	lds	r21, 0x01F6
     fb2:	0e 94 34 35 	call	0x6a68	; 0x6a68 <__addsf3>
     fb6:	6d a7       	std	Y+45, r22	; 0x2d
     fb8:	7e a7       	std	Y+46, r23	; 0x2e
     fba:	8f a7       	std	Y+47, r24	; 0x2f
     fbc:	98 ab       	std	Y+48, r25	; 0x30
     fbe:	60 93 f3 01 	sts	0x01F3, r22
     fc2:	70 93 f4 01 	sts	0x01F4, r23
     fc6:	80 93 f5 01 	sts	0x01F5, r24
     fca:	90 93 f6 01 	sts	0x01F6, r25
        eyInt = eyInt + ey*Ki;
     fce:	c4 01       	movw	r24, r8
     fd0:	b3 01       	movw	r22, r6
     fd2:	2a e0       	ldi	r18, 0x0A	; 10
     fd4:	37 ed       	ldi	r19, 0xD7	; 215
     fd6:	43 ea       	ldi	r20, 0xA3	; 163
     fd8:	5b e3       	ldi	r21, 0x3B	; 59
     fda:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <__mulsf3>
     fde:	20 91 f7 01 	lds	r18, 0x01F7
     fe2:	30 91 f8 01 	lds	r19, 0x01F8
     fe6:	40 91 f9 01 	lds	r20, 0x01F9
     fea:	50 91 fa 01 	lds	r21, 0x01FA
     fee:	0e 94 34 35 	call	0x6a68	; 0x6a68 <__addsf3>
     ff2:	69 ab       	std	Y+49, r22	; 0x31
     ff4:	7a ab       	std	Y+50, r23	; 0x32
     ff6:	8b ab       	std	Y+51, r24	; 0x33
     ff8:	9c ab       	std	Y+52, r25	; 0x34
     ffa:	60 93 f7 01 	sts	0x01F7, r22
     ffe:	70 93 f8 01 	sts	0x01F8, r23
    1002:	80 93 f9 01 	sts	0x01F9, r24
    1006:	90 93 fa 01 	sts	0x01FA, r25
        ezInt = ezInt + ez*Ki;
    100a:	c6 01       	movw	r24, r12
    100c:	b5 01       	movw	r22, r10
    100e:	2a e0       	ldi	r18, 0x0A	; 10
    1010:	37 ed       	ldi	r19, 0xD7	; 215
    1012:	43 ea       	ldi	r20, 0xA3	; 163
    1014:	5b e3       	ldi	r21, 0x3B	; 59
    1016:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <__mulsf3>
    101a:	20 91 fb 01 	lds	r18, 0x01FB
    101e:	30 91 fc 01 	lds	r19, 0x01FC
    1022:	40 91 fd 01 	lds	r20, 0x01FD
    1026:	50 91 fe 01 	lds	r21, 0x01FE
    102a:	0e 94 34 35 	call	0x6a68	; 0x6a68 <__addsf3>
    102e:	6d ab       	std	Y+53, r22	; 0x35
    1030:	7e ab       	std	Y+54, r23	; 0x36
    1032:	8f ab       	std	Y+55, r24	; 0x37
    1034:	98 af       	std	Y+56, r25	; 0x38
    1036:	60 93 fb 01 	sts	0x01FB, r22
    103a:	70 93 fc 01 	sts	0x01FC, r23
    103e:	80 93 fd 01 	sts	0x01FD, r24
    1042:	90 93 fe 01 	sts	0x01FE, r25

        // adjusted gyroscope measurements
        gx = gx + Kp*ex + exInt;
    1046:	c2 01       	movw	r24, r4
    1048:	b1 01       	movw	r22, r2
    104a:	a2 01       	movw	r20, r4
    104c:	91 01       	movw	r18, r2
    104e:	0e 94 34 35 	call	0x6a68	; 0x6a68 <__addsf3>
    1052:	9b 01       	movw	r18, r22
    1054:	ac 01       	movw	r20, r24
    1056:	69 89       	ldd	r22, Y+17	; 0x11
    1058:	7a 89       	ldd	r23, Y+18	; 0x12
    105a:	8b 89       	ldd	r24, Y+19	; 0x13
    105c:	9c 89       	ldd	r25, Y+20	; 0x14
    105e:	0e 94 34 35 	call	0x6a68	; 0x6a68 <__addsf3>
    1062:	2d a5       	ldd	r18, Y+45	; 0x2d
    1064:	3e a5       	ldd	r19, Y+46	; 0x2e
    1066:	4f a5       	ldd	r20, Y+47	; 0x2f
    1068:	58 a9       	ldd	r21, Y+48	; 0x30
    106a:	0e 94 34 35 	call	0x6a68	; 0x6a68 <__addsf3>
    106e:	69 af       	std	Y+57, r22	; 0x39
    1070:	7a af       	std	Y+58, r23	; 0x3a
    1072:	8b af       	std	Y+59, r24	; 0x3b
    1074:	9c af       	std	Y+60, r25	; 0x3c
        gy = gy + Kp*ey + eyInt;
    1076:	c4 01       	movw	r24, r8
    1078:	b3 01       	movw	r22, r6
    107a:	a4 01       	movw	r20, r8
    107c:	93 01       	movw	r18, r6
    107e:	0e 94 34 35 	call	0x6a68	; 0x6a68 <__addsf3>
    1082:	9b 01       	movw	r18, r22
    1084:	ac 01       	movw	r20, r24
    1086:	6d 89       	ldd	r22, Y+21	; 0x15
    1088:	7e 89       	ldd	r23, Y+22	; 0x16
    108a:	8f 89       	ldd	r24, Y+23	; 0x17
    108c:	98 8d       	ldd	r25, Y+24	; 0x18
    108e:	0e 94 34 35 	call	0x6a68	; 0x6a68 <__addsf3>
    1092:	29 a9       	ldd	r18, Y+49	; 0x31
    1094:	3a a9       	ldd	r19, Y+50	; 0x32
    1096:	4b a9       	ldd	r20, Y+51	; 0x33
    1098:	5c a9       	ldd	r21, Y+52	; 0x34
    109a:	0e 94 34 35 	call	0x6a68	; 0x6a68 <__addsf3>
    109e:	21 96       	adiw	r28, 0x01	; 1
    10a0:	6c af       	std	Y+60, r22	; 0x3c
    10a2:	7d af       	std	Y+61, r23	; 0x3d
    10a4:	8e af       	std	Y+62, r24	; 0x3e
    10a6:	9f af       	std	Y+63, r25	; 0x3f
    10a8:	21 97       	sbiw	r28, 0x01	; 1
        gz = gz + Kp*ez + ezInt;
    10aa:	c6 01       	movw	r24, r12
    10ac:	b5 01       	movw	r22, r10
    10ae:	a6 01       	movw	r20, r12
    10b0:	95 01       	movw	r18, r10
    10b2:	0e 94 34 35 	call	0x6a68	; 0x6a68 <__addsf3>
    10b6:	9b 01       	movw	r18, r22
    10b8:	ac 01       	movw	r20, r24
    10ba:	c8 01       	movw	r24, r16
    10bc:	b7 01       	movw	r22, r14
    10be:	0e 94 34 35 	call	0x6a68	; 0x6a68 <__addsf3>
    10c2:	2d a9       	ldd	r18, Y+53	; 0x35
    10c4:	3e a9       	ldd	r19, Y+54	; 0x36
    10c6:	4f a9       	ldd	r20, Y+55	; 0x37
    10c8:	58 ad       	ldd	r21, Y+56	; 0x38
    10ca:	0e 94 34 35 	call	0x6a68	; 0x6a68 <__addsf3>
    10ce:	5b 01       	movw	r10, r22
    10d0:	6c 01       	movw	r12, r24

        // integrate quaternion rate and normalise
        q0 = q0 + (-q1*gx - q2*gy - q3*gz)*halfT;
    10d2:	6d 85       	ldd	r22, Y+13	; 0x0d
    10d4:	7e 85       	ldd	r23, Y+14	; 0x0e
    10d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    10d8:	98 89       	ldd	r25, Y+16	; 0x10
    10da:	90 58       	subi	r25, 0x80	; 128
    10dc:	29 ad       	ldd	r18, Y+57	; 0x39
    10de:	3a ad       	ldd	r19, Y+58	; 0x3a
    10e0:	4b ad       	ldd	r20, Y+59	; 0x3b
    10e2:	5c ad       	ldd	r21, Y+60	; 0x3c
    10e4:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <__mulsf3>
    10e8:	7b 01       	movw	r14, r22
    10ea:	8c 01       	movw	r16, r24
    10ec:	69 81       	ldd	r22, Y+1	; 0x01
    10ee:	7a 81       	ldd	r23, Y+2	; 0x02
    10f0:	8b 81       	ldd	r24, Y+3	; 0x03
    10f2:	9c 81       	ldd	r25, Y+4	; 0x04
    10f4:	21 96       	adiw	r28, 0x01	; 1
    10f6:	2c ad       	ldd	r18, Y+60	; 0x3c
    10f8:	3d ad       	ldd	r19, Y+61	; 0x3d
    10fa:	4e ad       	ldd	r20, Y+62	; 0x3e
    10fc:	5f ad       	ldd	r21, Y+63	; 0x3f
    10fe:	21 97       	sbiw	r28, 0x01	; 1
    1100:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <__mulsf3>
    1104:	9b 01       	movw	r18, r22
    1106:	ac 01       	movw	r20, r24
    1108:	c8 01       	movw	r24, r16
    110a:	b7 01       	movw	r22, r14
    110c:	0e 94 33 35 	call	0x6a66	; 0x6a66 <__subsf3>
    1110:	7b 01       	movw	r14, r22
    1112:	8c 01       	movw	r16, r24
    1114:	69 85       	ldd	r22, Y+9	; 0x09
    1116:	7a 85       	ldd	r23, Y+10	; 0x0a
    1118:	8b 85       	ldd	r24, Y+11	; 0x0b
    111a:	9c 85       	ldd	r25, Y+12	; 0x0c
    111c:	a6 01       	movw	r20, r12
    111e:	95 01       	movw	r18, r10
    1120:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <__mulsf3>
    1124:	9b 01       	movw	r18, r22
    1126:	ac 01       	movw	r20, r24
    1128:	c8 01       	movw	r24, r16
    112a:	b7 01       	movw	r22, r14
    112c:	0e 94 33 35 	call	0x6a66	; 0x6a66 <__subsf3>
    1130:	20 e0       	ldi	r18, 0x00	; 0
    1132:	30 e0       	ldi	r19, 0x00	; 0
    1134:	40 e0       	ldi	r20, 0x00	; 0
    1136:	5f e3       	ldi	r21, 0x3F	; 63
    1138:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <__mulsf3>
    113c:	9b 01       	movw	r18, r22
    113e:	ac 01       	movw	r20, r24
    1140:	6d 81       	ldd	r22, Y+5	; 0x05
    1142:	7e 81       	ldd	r23, Y+6	; 0x06
    1144:	8f 81       	ldd	r24, Y+7	; 0x07
    1146:	98 85       	ldd	r25, Y+8	; 0x08
    1148:	0e 94 34 35 	call	0x6a68	; 0x6a68 <__addsf3>
    114c:	25 96       	adiw	r28, 0x05	; 5
    114e:	6c af       	std	Y+60, r22	; 0x3c
    1150:	7d af       	std	Y+61, r23	; 0x3d
    1152:	8e af       	std	Y+62, r24	; 0x3e
    1154:	9f af       	std	Y+63, r25	; 0x3f
    1156:	25 97       	sbiw	r28, 0x05	; 5
        q1 = q1 + (q0*gx + q2*gz - q3*gy)*halfT;
    1158:	29 ad       	ldd	r18, Y+57	; 0x39
    115a:	3a ad       	ldd	r19, Y+58	; 0x3a
    115c:	4b ad       	ldd	r20, Y+59	; 0x3b
    115e:	5c ad       	ldd	r21, Y+60	; 0x3c
    1160:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <__mulsf3>
    1164:	7b 01       	movw	r14, r22
    1166:	8c 01       	movw	r16, r24
    1168:	69 81       	ldd	r22, Y+1	; 0x01
    116a:	7a 81       	ldd	r23, Y+2	; 0x02
    116c:	8b 81       	ldd	r24, Y+3	; 0x03
    116e:	9c 81       	ldd	r25, Y+4	; 0x04
    1170:	a6 01       	movw	r20, r12
    1172:	95 01       	movw	r18, r10
    1174:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <__mulsf3>
    1178:	9b 01       	movw	r18, r22
    117a:	ac 01       	movw	r20, r24
    117c:	c8 01       	movw	r24, r16
    117e:	b7 01       	movw	r22, r14
    1180:	0e 94 34 35 	call	0x6a68	; 0x6a68 <__addsf3>
    1184:	7b 01       	movw	r14, r22
    1186:	8c 01       	movw	r16, r24
    1188:	69 85       	ldd	r22, Y+9	; 0x09
    118a:	7a 85       	ldd	r23, Y+10	; 0x0a
    118c:	8b 85       	ldd	r24, Y+11	; 0x0b
    118e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1190:	21 96       	adiw	r28, 0x01	; 1
    1192:	2c ad       	ldd	r18, Y+60	; 0x3c
    1194:	3d ad       	ldd	r19, Y+61	; 0x3d
    1196:	4e ad       	ldd	r20, Y+62	; 0x3e
    1198:	5f ad       	ldd	r21, Y+63	; 0x3f
    119a:	21 97       	sbiw	r28, 0x01	; 1
    119c:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <__mulsf3>
    11a0:	9b 01       	movw	r18, r22
    11a2:	ac 01       	movw	r20, r24
    11a4:	c8 01       	movw	r24, r16
    11a6:	b7 01       	movw	r22, r14
    11a8:	0e 94 33 35 	call	0x6a66	; 0x6a66 <__subsf3>
    11ac:	20 e0       	ldi	r18, 0x00	; 0
    11ae:	30 e0       	ldi	r19, 0x00	; 0
    11b0:	40 e0       	ldi	r20, 0x00	; 0
    11b2:	5f e3       	ldi	r21, 0x3F	; 63
    11b4:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <__mulsf3>
    11b8:	9b 01       	movw	r18, r22
    11ba:	ac 01       	movw	r20, r24
    11bc:	6d 85       	ldd	r22, Y+13	; 0x0d
    11be:	7e 85       	ldd	r23, Y+14	; 0x0e
    11c0:	8f 85       	ldd	r24, Y+15	; 0x0f
    11c2:	98 89       	ldd	r25, Y+16	; 0x10
    11c4:	0e 94 34 35 	call	0x6a68	; 0x6a68 <__addsf3>
    11c8:	1b 01       	movw	r2, r22
    11ca:	2c 01       	movw	r4, r24
        q2 = q2 + (q0*gy - q1*gz + q3*gx)*halfT;
    11cc:	25 96       	adiw	r28, 0x05	; 5
    11ce:	6c ad       	ldd	r22, Y+60	; 0x3c
    11d0:	7d ad       	ldd	r23, Y+61	; 0x3d
    11d2:	8e ad       	ldd	r24, Y+62	; 0x3e
    11d4:	9f ad       	ldd	r25, Y+63	; 0x3f
    11d6:	25 97       	sbiw	r28, 0x05	; 5
    11d8:	21 96       	adiw	r28, 0x01	; 1
    11da:	2c ad       	ldd	r18, Y+60	; 0x3c
    11dc:	3d ad       	ldd	r19, Y+61	; 0x3d
    11de:	4e ad       	ldd	r20, Y+62	; 0x3e
    11e0:	5f ad       	ldd	r21, Y+63	; 0x3f
    11e2:	21 97       	sbiw	r28, 0x01	; 1
    11e4:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <__mulsf3>
    11e8:	7b 01       	movw	r14, r22
    11ea:	8c 01       	movw	r16, r24
    11ec:	c2 01       	movw	r24, r4
    11ee:	b1 01       	movw	r22, r2
    11f0:	a6 01       	movw	r20, r12
    11f2:	95 01       	movw	r18, r10
    11f4:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <__mulsf3>
    11f8:	9b 01       	movw	r18, r22
    11fa:	ac 01       	movw	r20, r24
    11fc:	c8 01       	movw	r24, r16
    11fe:	b7 01       	movw	r22, r14
    1200:	0e 94 33 35 	call	0x6a66	; 0x6a66 <__subsf3>
    1204:	7b 01       	movw	r14, r22
    1206:	8c 01       	movw	r16, r24
    1208:	69 85       	ldd	r22, Y+9	; 0x09
    120a:	7a 85       	ldd	r23, Y+10	; 0x0a
    120c:	8b 85       	ldd	r24, Y+11	; 0x0b
    120e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1210:	29 ad       	ldd	r18, Y+57	; 0x39
    1212:	3a ad       	ldd	r19, Y+58	; 0x3a
    1214:	4b ad       	ldd	r20, Y+59	; 0x3b
    1216:	5c ad       	ldd	r21, Y+60	; 0x3c
    1218:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <__mulsf3>
    121c:	9b 01       	movw	r18, r22
    121e:	ac 01       	movw	r20, r24
    1220:	c8 01       	movw	r24, r16
    1222:	b7 01       	movw	r22, r14
    1224:	0e 94 34 35 	call	0x6a68	; 0x6a68 <__addsf3>
    1228:	20 e0       	ldi	r18, 0x00	; 0
    122a:	30 e0       	ldi	r19, 0x00	; 0
    122c:	40 e0       	ldi	r20, 0x00	; 0
    122e:	5f e3       	ldi	r21, 0x3F	; 63
    1230:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <__mulsf3>
    1234:	9b 01       	movw	r18, r22
    1236:	ac 01       	movw	r20, r24
    1238:	69 81       	ldd	r22, Y+1	; 0x01
    123a:	7a 81       	ldd	r23, Y+2	; 0x02
    123c:	8b 81       	ldd	r24, Y+3	; 0x03
    123e:	9c 81       	ldd	r25, Y+4	; 0x04
    1240:	0e 94 34 35 	call	0x6a68	; 0x6a68 <__addsf3>
    1244:	3b 01       	movw	r6, r22
    1246:	4c 01       	movw	r8, r24
        q3 = q3 + (q0*gz + q1*gy - q2*gx)*halfT;
    1248:	25 96       	adiw	r28, 0x05	; 5
    124a:	6c ad       	ldd	r22, Y+60	; 0x3c
    124c:	7d ad       	ldd	r23, Y+61	; 0x3d
    124e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1250:	9f ad       	ldd	r25, Y+63	; 0x3f
    1252:	25 97       	sbiw	r28, 0x05	; 5
    1254:	a6 01       	movw	r20, r12
    1256:	95 01       	movw	r18, r10
    1258:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <__mulsf3>
    125c:	7b 01       	movw	r14, r22
    125e:	8c 01       	movw	r16, r24
    1260:	c2 01       	movw	r24, r4
    1262:	b1 01       	movw	r22, r2
    1264:	21 96       	adiw	r28, 0x01	; 1
    1266:	2c ad       	ldd	r18, Y+60	; 0x3c
    1268:	3d ad       	ldd	r19, Y+61	; 0x3d
    126a:	4e ad       	ldd	r20, Y+62	; 0x3e
    126c:	5f ad       	ldd	r21, Y+63	; 0x3f
    126e:	21 97       	sbiw	r28, 0x01	; 1
    1270:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <__mulsf3>
    1274:	9b 01       	movw	r18, r22
    1276:	ac 01       	movw	r20, r24
    1278:	c8 01       	movw	r24, r16
    127a:	b7 01       	movw	r22, r14
    127c:	0e 94 34 35 	call	0x6a68	; 0x6a68 <__addsf3>
    1280:	7b 01       	movw	r14, r22
    1282:	8c 01       	movw	r16, r24
    1284:	c4 01       	movw	r24, r8
    1286:	b3 01       	movw	r22, r6
    1288:	29 ad       	ldd	r18, Y+57	; 0x39
    128a:	3a ad       	ldd	r19, Y+58	; 0x3a
    128c:	4b ad       	ldd	r20, Y+59	; 0x3b
    128e:	5c ad       	ldd	r21, Y+60	; 0x3c
    1290:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <__mulsf3>
    1294:	9b 01       	movw	r18, r22
    1296:	ac 01       	movw	r20, r24
    1298:	c8 01       	movw	r24, r16
    129a:	b7 01       	movw	r22, r14
    129c:	0e 94 33 35 	call	0x6a66	; 0x6a66 <__subsf3>
    12a0:	20 e0       	ldi	r18, 0x00	; 0
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	40 e0       	ldi	r20, 0x00	; 0
    12a6:	5f e3       	ldi	r21, 0x3F	; 63
    12a8:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <__mulsf3>
    12ac:	9b 01       	movw	r18, r22
    12ae:	ac 01       	movw	r20, r24
    12b0:	69 85       	ldd	r22, Y+9	; 0x09
    12b2:	7a 85       	ldd	r23, Y+10	; 0x0a
    12b4:	8b 85       	ldd	r24, Y+11	; 0x0b
    12b6:	9c 85       	ldd	r25, Y+12	; 0x0c
    12b8:	0e 94 34 35 	call	0x6a68	; 0x6a68 <__addsf3>
    12bc:	5b 01       	movw	r10, r22
    12be:	6c 01       	movw	r12, r24

        // normalise quaternion
        norm = sqrt(q0*q0 + q1*q1 + q2*q2 + q3*q3);
    12c0:	25 96       	adiw	r28, 0x05	; 5
    12c2:	6c ad       	ldd	r22, Y+60	; 0x3c
    12c4:	7d ad       	ldd	r23, Y+61	; 0x3d
    12c6:	8e ad       	ldd	r24, Y+62	; 0x3e
    12c8:	9f ad       	ldd	r25, Y+63	; 0x3f
    12ca:	25 97       	sbiw	r28, 0x05	; 5
    12cc:	9b 01       	movw	r18, r22
    12ce:	ac 01       	movw	r20, r24
    12d0:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <__mulsf3>
    12d4:	7b 01       	movw	r14, r22
    12d6:	8c 01       	movw	r16, r24
    12d8:	c2 01       	movw	r24, r4
    12da:	b1 01       	movw	r22, r2
    12dc:	a2 01       	movw	r20, r4
    12de:	91 01       	movw	r18, r2
    12e0:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <__mulsf3>
    12e4:	9b 01       	movw	r18, r22
    12e6:	ac 01       	movw	r20, r24
    12e8:	c8 01       	movw	r24, r16
    12ea:	b7 01       	movw	r22, r14
    12ec:	0e 94 34 35 	call	0x6a68	; 0x6a68 <__addsf3>
    12f0:	7b 01       	movw	r14, r22
    12f2:	8c 01       	movw	r16, r24
    12f4:	c4 01       	movw	r24, r8
    12f6:	b3 01       	movw	r22, r6
    12f8:	a4 01       	movw	r20, r8
    12fa:	93 01       	movw	r18, r6
    12fc:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <__mulsf3>
    1300:	9b 01       	movw	r18, r22
    1302:	ac 01       	movw	r20, r24
    1304:	c8 01       	movw	r24, r16
    1306:	b7 01       	movw	r22, r14
    1308:	0e 94 34 35 	call	0x6a68	; 0x6a68 <__addsf3>
    130c:	7b 01       	movw	r14, r22
    130e:	8c 01       	movw	r16, r24
    1310:	c6 01       	movw	r24, r12
    1312:	b5 01       	movw	r22, r10
    1314:	a6 01       	movw	r20, r12
    1316:	95 01       	movw	r18, r10
    1318:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <__mulsf3>
    131c:	9b 01       	movw	r18, r22
    131e:	ac 01       	movw	r20, r24
    1320:	c8 01       	movw	r24, r16
    1322:	b7 01       	movw	r22, r14
    1324:	0e 94 34 35 	call	0x6a68	; 0x6a68 <__addsf3>
    1328:	0e 94 1f 38 	call	0x703e	; 0x703e <sqrt>
    132c:	7b 01       	movw	r14, r22
    132e:	8c 01       	movw	r16, r24
        q0 = q0 / norm;
    1330:	25 96       	adiw	r28, 0x05	; 5
    1332:	6c ad       	ldd	r22, Y+60	; 0x3c
    1334:	7d ad       	ldd	r23, Y+61	; 0x3d
    1336:	8e ad       	ldd	r24, Y+62	; 0x3e
    1338:	9f ad       	ldd	r25, Y+63	; 0x3f
    133a:	25 97       	sbiw	r28, 0x05	; 5
    133c:	a8 01       	movw	r20, r16
    133e:	97 01       	movw	r18, r14
    1340:	0e 94 15 36 	call	0x6c2a	; 0x6c2a <__divsf3>
    1344:	60 93 60 00 	sts	0x0060, r22
    1348:	70 93 61 00 	sts	0x0061, r23
    134c:	80 93 62 00 	sts	0x0062, r24
    1350:	90 93 63 00 	sts	0x0063, r25
        q1 = q1 / norm;
    1354:	c2 01       	movw	r24, r4
    1356:	b1 01       	movw	r22, r2
    1358:	a8 01       	movw	r20, r16
    135a:	97 01       	movw	r18, r14
    135c:	0e 94 15 36 	call	0x6c2a	; 0x6c2a <__divsf3>
    1360:	60 93 e7 01 	sts	0x01E7, r22
    1364:	70 93 e8 01 	sts	0x01E8, r23
    1368:	80 93 e9 01 	sts	0x01E9, r24
    136c:	90 93 ea 01 	sts	0x01EA, r25
        q2 = q2 / norm;
    1370:	c4 01       	movw	r24, r8
    1372:	b3 01       	movw	r22, r6
    1374:	a8 01       	movw	r20, r16
    1376:	97 01       	movw	r18, r14
    1378:	0e 94 15 36 	call	0x6c2a	; 0x6c2a <__divsf3>
    137c:	60 93 ef 01 	sts	0x01EF, r22
    1380:	70 93 f0 01 	sts	0x01F0, r23
    1384:	80 93 f1 01 	sts	0x01F1, r24
    1388:	90 93 f2 01 	sts	0x01F2, r25
        q3 = q3 / norm;
    138c:	c6 01       	movw	r24, r12
    138e:	b5 01       	movw	r22, r10
    1390:	a8 01       	movw	r20, r16
    1392:	97 01       	movw	r18, r14
    1394:	0e 94 15 36 	call	0x6c2a	; 0x6c2a <__divsf3>
    1398:	60 93 eb 01 	sts	0x01EB, r22
    139c:	70 93 ec 01 	sts	0x01EC, r23
    13a0:	80 93 ed 01 	sts	0x01ED, r24
    13a4:	90 93 ee 01 	sts	0x01EE, r25

}
    13a8:	cc 5b       	subi	r28, 0xBC	; 188
    13aa:	df 4f       	sbci	r29, 0xFF	; 255
    13ac:	0f b6       	in	r0, 0x3f	; 63
    13ae:	f8 94       	cli
    13b0:	de bf       	out	0x3e, r29	; 62
    13b2:	0f be       	out	0x3f, r0	; 63
    13b4:	cd bf       	out	0x3d, r28	; 61
    13b6:	cf 91       	pop	r28
    13b8:	df 91       	pop	r29
    13ba:	1f 91       	pop	r17
    13bc:	0f 91       	pop	r16
    13be:	ff 90       	pop	r15
    13c0:	ef 90       	pop	r14
    13c2:	df 90       	pop	r13
    13c4:	cf 90       	pop	r12
    13c6:	bf 90       	pop	r11
    13c8:	af 90       	pop	r10
    13ca:	9f 90       	pop	r9
    13cc:	8f 90       	pop	r8
    13ce:	7f 90       	pop	r7
    13d0:	6f 90       	pop	r6
    13d2:	5f 90       	pop	r5
    13d4:	4f 90       	pop	r4
    13d6:	3f 90       	pop	r3
    13d8:	2f 90       	pop	r2
    13da:	08 95       	ret

000013dc <setGetAddress>:
 *         will changed for each DMP code loaded.
 *  @param func   Function used to convert keys to addresses.
 */
void setGetAddress(unsigned short(*func)(unsigned short key))
{
        sGetAddress = func;
    13dc:	90 93 00 02 	sts	0x0200, r25
    13e0:	80 93 ff 01 	sts	0x01FF, r24
}
    13e4:	08 95       	ret

000013e6 <MLDLGetDefaultAuxSlaveAddr>:
 */
unsigned char MLDLGetDefaultAuxSlaveAddr(void)
{
        /*---- get value ----*/
        return mldlData.auxSlaveAddr;
}
    13e6:	80 91 cc 02 	lds	r24, 0x02CC
    13ea:	08 95       	ret

000013ec <MLDLSetDefaultParams>:
 *        data from RAM memory.
 */
void MLDLSetDefaultParams(void)
{
        /*---- default values for MLDL variables ----*/
        mldlData.auxSlaveAddr = KIONIX_AUX_SLAVEADDR;
    13ec:	8f e0       	ldi	r24, 0x0F	; 15
    13ee:	80 93 cc 02 	sts	0x02CC, r24
        mldlData.mpuSlaveAddr = DEFAULT_MPU_SLAVEADDR;
    13f2:	88 e6       	ldi	r24, 0x68	; 104
    13f4:	80 93 cb 02 	sts	0x02CB, r24
        mldlData.serialInterface = SERIAL_I2C;
    13f8:	10 92 cd 02 	sts	0x02CD, r1
        mldlData.autoProcess = 0;
    13fc:	10 92 ce 02 	sts	0x02CE, r1
        mldlData.dataSource = DATASRC_FIFO;
    1400:	82 e0       	ldi	r24, 0x02	; 2
    1402:	80 93 d0 02 	sts	0x02D0, r24
        mldlData.fifoCount = 0;
    1406:	10 92 de 02 	sts	0x02DE, r1
    140a:	10 92 dd 02 	sts	0x02DD, r1
        mldlData.fifoError = 0;
    140e:	10 92 e2 02 	sts	0x02E2, r1
    1412:	10 92 e1 02 	sts	0x02E1, r1
        mldlData.compassPresent = 0;
    1416:	10 92 e4 02 	sts	0x02E4, r1
    141a:	10 92 e3 02 	sts	0x02E3, r1
}
    141e:	08 95       	ret

00001420 <MLDLGetMPUSlaveAddr>:
 **/

unsigned char MLDLGetMPUSlaveAddr()
{
        return mldlData.mpuSlaveAddr;
}
    1420:	80 91 cb 02 	lds	r24, 0x02CB
    1424:	08 95       	ret

00001426 <MLDLGetIntTrigger>:
 * @brief   query the current status of an interrupt source.
 * @param   index zero-based index of the interrupt source.
 * @return  1 if the interrupt has been triggered.
 **/
unsigned char MLDLGetIntTrigger(unsigned char index)
{
    1426:	eb ec       	ldi	r30, 0xCB	; 203
    1428:	f2 e0       	ldi	r31, 0x02	; 2
    142a:	e8 0f       	add	r30, r24
    142c:	f1 1d       	adc	r31, r1
        return mldlData.intTrigger[index];
}
    142e:	80 85       	ldd	r24, Z+8	; 0x08
    1430:	08 95       	ret

00001432 <MLDLClearIntTrigger>:
 * @brief clear the 'triggered' status for an interrupt source.
 * @param index Zero-based index of the interrupt source.
 **/
void MLDLClearIntTrigger(unsigned char index)
{
        mldlData.intTrigger[index] = 0;
    1432:	eb ec       	ldi	r30, 0xCB	; 203
    1434:	f2 e0       	ldi	r31, 0x02	; 2
    1436:	e8 0f       	add	r30, r24
    1438:	f1 1d       	adc	r31, r1
    143a:	10 86       	std	Z+8, r1	; 0x08
}
    143c:	08 95       	ret

0000143e <MLDLIntHandler>:
 * @return  Zero if the command is successful; an error code otherwise.
 */
tMLError MLDLIntHandler(INT_SOURCE intSource)
{
        /*---- range check ----*/
        if (intSource >= NUM_OF_INTSOURCES)
    143e:	87 30       	cpi	r24, 0x07	; 7
    1440:	10 f0       	brcs	.+4      	; 0x1446 <MLDLIntHandler+0x8>
    1442:	81 e0       	ldi	r24, 0x01	; 1
    1444:	08 95       	ret
        {
                return MLDL_ERROR;
        }

        /*---- save source of interrupt ----*/
        mldlData.intTrigger[intSource] = INT_TRIGGERED;
    1446:	e8 2f       	mov	r30, r24
    1448:	f0 e0       	ldi	r31, 0x00	; 0
    144a:	e5 53       	subi	r30, 0x35	; 53
    144c:	fd 4f       	sbci	r31, 0xFD	; 253
    144e:	81 e0       	ldi	r24, 0x01	; 1
    1450:	80 87       	std	Z+8, r24	; 0x08
    1452:	80 e0       	ldi	r24, 0x00	; 0
        {
                //MLProcessInts();
        }

        return ML_SUCCESS;
}
    1454:	08 95       	ret

00001456 <MLDLGetFifoStatus>:
 * @return ML_SUCCESS if the fifo is OK.  ML_ERROR otherwise.
 */
short MLDLGetFifoStatus(void)
{
        return mldlData.fifoError;
}
    1456:	80 91 e1 02 	lds	r24, 0x02E1
    145a:	90 91 e2 02 	lds	r25, 0x02E2
    145e:	08 95       	ret

00001460 <MPUGetRegisterShadow>:
 *  @return value of register, or zero if not available.
 */
unsigned char MPUGetRegisterShadow(unsigned char reg)
{
        /*---- if valid, then return value ----*/
        if (mpuRegisterValid[reg])
    1460:	a8 2f       	mov	r26, r24
    1462:	b0 e0       	ldi	r27, 0x00	; 0
    1464:	fd 01       	movw	r30, r26
    1466:	eb 51       	subi	r30, 0x1B	; 27
    1468:	fd 4f       	sbci	r31, 0xFD	; 253
    146a:	80 81       	ld	r24, Z
    146c:	88 23       	and	r24, r24
    146e:	19 f0       	breq	.+6      	; 0x1476 <MPUGetRegisterShadow+0x16>
        {
                return (mpuRegister[reg]);
    1470:	a9 53       	subi	r26, 0x39	; 57
    1472:	bd 4f       	sbci	r27, 0xFD	; 253
    1474:	8c 91       	ld	r24, X
        } else
        {
                return (0); // return 0 if invalid
        }
}
    1476:	08 95       	ret

00001478 <MLDLGetRegistersMPU>:
 *  @param  length      Number of bytes to read.
 *
 *  @return value of first register
 */
unsigned char MLDLGetRegistersMPU(unsigned char reg, unsigned char length)
{
    1478:	0f 93       	push	r16
    147a:	1f 93       	push	r17
    147c:	18 2f       	mov	r17, r24
    147e:	06 2f       	mov	r16, r22
    1480:	28 2f       	mov	r18, r24
    1482:	30 e0       	ldi	r19, 0x00	; 0
        uint_fast8_t i;

        /*---- use single or burst depending on length ----*/
        if (length == 1)
    1484:	61 30       	cpi	r22, 0x01	; 1
    1486:	a1 f4       	brne	.+40     	; 0x14b0 <MLDLGetRegistersMPU+0x38>
        {
                /*---- get single register from MPU ----*/
                MLSLSerialReadSingle(mldlData.mpuSlaveAddr, reg, &mpuRegister[reg]);
    1488:	29 53       	subi	r18, 0x39	; 57
    148a:	3d 4f       	sbci	r19, 0xFD	; 253
    148c:	80 91 cb 02 	lds	r24, 0x02CB
    1490:	61 2f       	mov	r22, r17
    1492:	a9 01       	movw	r20, r18
    1494:	0e 94 8e 1d 	call	0x3b1c	; 0x3b1c <MLSLSerialReadSingle>
 *  @param  length      Number of bytes to read.
 *
 *  @return value of first register
 */
unsigned char MLDLGetRegistersMPU(unsigned char reg, unsigned char length)
{
    1498:	e1 2f       	mov	r30, r17
    149a:	f0 e0       	ldi	r31, 0x00	; 0
    149c:	df 01       	movw	r26, r30
    149e:	ab 51       	subi	r26, 0x1B	; 27
    14a0:	bd 4f       	sbci	r27, 0xFD	; 253
                extern tReadBurst ReadBurst;
                ReadBurst(mldlData.mpuSlaveAddr, reg, length, &mpuRegister[reg]);
        }

        /*---- update valid flags ----*/
        for (i = 0; i < length; i++)
    14a2:	af 01       	movw	r20, r30
    14a4:	40 0f       	add	r20, r16
    14a6:	51 1d       	adc	r21, r1
    14a8:	4b 51       	subi	r20, 0x1B	; 27
    14aa:	5d 4f       	sbci	r21, 0xFD	; 253
        {
                mpuRegisterValid[reg + i] = 1;
    14ac:	81 e0       	ldi	r24, 0x01	; 1
    14ae:	0e c0       	rjmp	.+28     	; 0x14cc <MLDLGetRegistersMPU+0x54>
                MLSLSerialReadSingle(mldlData.mpuSlaveAddr, reg, &mpuRegister[reg]);
        } else
        {
                /*---- get sequence of registers from MPU ----*/
                extern tReadBurst ReadBurst;
                ReadBurst(mldlData.mpuSlaveAddr, reg, length, &mpuRegister[reg]);
    14b0:	29 53       	subi	r18, 0x39	; 57
    14b2:	3d 4f       	sbci	r19, 0xFD	; 253
    14b4:	e0 91 7e 00 	lds	r30, 0x007E
    14b8:	f0 91 7f 00 	lds	r31, 0x007F
    14bc:	80 91 cb 02 	lds	r24, 0x02CB
    14c0:	61 2f       	mov	r22, r17
    14c2:	40 2f       	mov	r20, r16
    14c4:	50 e0       	ldi	r21, 0x00	; 0
    14c6:	09 95       	icall
    14c8:	e7 cf       	rjmp	.-50     	; 0x1498 <MLDLGetRegistersMPU+0x20>
        }

        /*---- update valid flags ----*/
        for (i = 0; i < length; i++)
        {
                mpuRegisterValid[reg + i] = 1;
    14ca:	8d 93       	st	X+, r24
                extern tReadBurst ReadBurst;
                ReadBurst(mldlData.mpuSlaveAddr, reg, length, &mpuRegister[reg]);
        }

        /*---- update valid flags ----*/
        for (i = 0; i < length; i++)
    14cc:	a4 17       	cp	r26, r20
    14ce:	b5 07       	cpc	r27, r21
    14d0:	e1 f7       	brne	.-8      	; 0x14ca <MLDLGetRegistersMPU+0x52>
    14d2:	e9 53       	subi	r30, 0x39	; 57
    14d4:	fd 4f       	sbci	r31, 0xFD	; 253
                mpuRegisterValid[reg + i] = 1;
        }

        /*---- return value of first register read -----*/
        return (mpuRegister[reg]);
}
    14d6:	80 81       	ld	r24, Z
    14d8:	1f 91       	pop	r17
    14da:	0f 91       	pop	r16
    14dc:	08 95       	ret

000014de <MLDLSetRegisterMPU>:
 *  @param value    Value to write
 *
 *  @return  Zero if the command is successful, an error code otherwise.
 */
tMLError MLDLSetRegisterMPU(unsigned char reg, unsigned char value)
{
    14de:	0f 93       	push	r16
    14e0:	1f 93       	push	r17
    14e2:	08 2f       	mov	r16, r24
    14e4:	16 2f       	mov	r17, r22
        tMLError retCode;

        /*---- write register to I2C port ----*/
        retCode = MLSLSerialWriteSingle(mldlData.mpuSlaveAddr, reg, value);
    14e6:	80 91 cb 02 	lds	r24, 0x02CB
    14ea:	60 2f       	mov	r22, r16
    14ec:	41 2f       	mov	r20, r17
    14ee:	0e 94 4e 1d 	call	0x3a9c	; 0x3a9c <MLSLSerialWriteSingle>

        /*---- Clean up any left over buffering ---- */
        if (reg == MPUREG_USER_CTRL && (value & BIT_FIFO_RST))
    14f2:	0d 33       	cpi	r16, 0x3D	; 61
    14f4:	29 f4       	brne	.+10     	; 0x1500 <MLDLSetRegisterMPU+0x22>
    14f6:	11 ff       	sbrs	r17, 1
    14f8:	14 c0       	rjmp	.+40     	; 0x1522 <MLDLSetRegisterMPU+0x44>
        {
                MLSLSerialReset();
    14fa:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <MLSLSerialReset>
    14fe:	11 c0       	rjmp	.+34     	; 0x1522 <MLDLSetRegisterMPU+0x44>
        }
        /*---- save copy in shadow registers (first clear any reset bits) ----*/
        if (reg == MPUREG_USER_CTRL)
        {
                value &= ~(BIT_AUX_IF_RST | BIT_DMP_RST | BIT_FIFO_RST | BIT_GYRO_RST);
        } else if (reg == MPUREG_PWR_MGM)
    1500:	0e 33       	cpi	r16, 0x3E	; 62
    1502:	09 f4       	brne	.+2      	; 0x1506 <MLDLSetRegisterMPU+0x28>
        {
                value &= ~BIT_H_RESET;
    1504:	1f 77       	andi	r17, 0x7F	; 127
        }
        mpuRegister[reg] = value; // shadow register
    1506:	e0 2f       	mov	r30, r16
    1508:	f0 e0       	ldi	r31, 0x00	; 0
    150a:	df 01       	movw	r26, r30
    150c:	a9 53       	subi	r26, 0x39	; 57
    150e:	bd 4f       	sbci	r27, 0xFD	; 253
    1510:	1c 93       	st	X, r17
        mpuRegisterValid[reg] = 1; // indicate shadow register is valid
    1512:	eb 51       	subi	r30, 0x1B	; 27
    1514:	fd 4f       	sbci	r31, 0xFD	; 253
    1516:	81 e0       	ldi	r24, 0x01	; 1
    1518:	80 83       	st	Z, r24

        return ML_SUCCESS;
}
    151a:	80 e0       	ldi	r24, 0x00	; 0
    151c:	1f 91       	pop	r17
    151e:	0f 91       	pop	r16
    1520:	08 95       	ret
                MLSLSerialReset();
        }
        /*---- save copy in shadow registers (first clear any reset bits) ----*/
        if (reg == MPUREG_USER_CTRL)
        {
                value &= ~(BIT_AUX_IF_RST | BIT_DMP_RST | BIT_FIFO_RST | BIT_GYRO_RST);
    1522:	10 7f       	andi	r17, 0xF0	; 240
    1524:	f0 cf       	rjmp	.-32     	; 0x1506 <MLDLSetRegisterMPU+0x28>

00001526 <MLDLSetMemoryMPU_one_bank>:
 *
 *  @return zero if the command is successful, an error code otherwise.
 */
static tMLError MLDLSetMemoryMPU_one_bank(unsigned char bank, unsigned short memAddr, unsigned short length,
                const unsigned char* buffer)
{
    1526:	ff 92       	push	r15
    1528:	0f 93       	push	r16
    152a:	1f 93       	push	r17
    152c:	cf 93       	push	r28
    152e:	df 93       	push	r29
    1530:	98 2f       	mov	r25, r24
    1532:	f6 2e       	mov	r15, r22
    1534:	ea 01       	movw	r28, r20
    1536:	89 01       	movw	r16, r18
 *  @return value of register, or zero if not available.
 */
unsigned char MPUGetRegisterShadow(unsigned char reg)
{
        /*---- if valid, then return value ----*/
        if (mpuRegisterValid[reg])
    1538:	80 91 1c 03 	lds	r24, 0x031C
    153c:	88 23       	and	r24, r24
    153e:	11 f4       	brne	.+4      	; 0x1544 <MLDLSetMemoryMPU_one_bank+0x1e>
    1540:	60 e0       	ldi	r22, 0x00	; 0
    1542:	02 c0       	rjmp	.+4      	; 0x1548 <MLDLSetMemoryMPU_one_bank+0x22>
        {
                return (mpuRegister[reg]);
    1544:	60 91 fe 02 	lds	r22, 0x02FE
        tMLError ec;
        extern tWriteBurst WriteBurst;

        /*---- set appropriate memory bank ----*/
        b = MPUGetRegisterShadow(MPUREG_BANK_SEL) & ~BITS_MEM_SEL; // b = masked memory bank register
        MLDLSetRegisterMPU(MPUREG_BANK_SEL, b | (bank & 0x0f));
    1548:	60 7f       	andi	r22, 0xF0	; 240
    154a:	9f 70       	andi	r25, 0x0F	; 15
    154c:	69 2b       	or	r22, r25
    154e:	87 e3       	ldi	r24, 0x37	; 55
    1550:	0e 94 6f 0a 	call	0x14de	; 0x14de <MLDLSetRegisterMPU>

        /*---- set the memory address to the start address ----*/
        MLDLSetRegisterMPU(MPUREG_MEM_START_ADDR, (unsigned char) memAddr);
    1554:	88 e3       	ldi	r24, 0x38	; 56
    1556:	6f 2d       	mov	r22, r15
    1558:	0e 94 6f 0a 	call	0x14de	; 0x14de <MLDLSetRegisterMPU>

        /*---- write memory from bank with a burst write ----*/
        ec = WriteBurst(mldlData.mpuSlaveAddr, MPUREG_MEM_R_W, length, buffer);
    155c:	e0 91 7c 00 	lds	r30, 0x007C
    1560:	f0 91 7d 00 	lds	r31, 0x007D
    1564:	80 91 cb 02 	lds	r24, 0x02CB
    1568:	69 e3       	ldi	r22, 0x39	; 57
    156a:	ae 01       	movw	r20, r28
    156c:	98 01       	movw	r18, r16
    156e:	09 95       	icall

        return ec;
}
    1570:	df 91       	pop	r29
    1572:	cf 91       	pop	r28
    1574:	1f 91       	pop	r17
    1576:	0f 91       	pop	r16
    1578:	ff 90       	pop	r15
    157a:	08 95       	ret

0000157c <MLDLSetMemoryMPU>:
 *
 *  @return ML_SUCCESS if the command is successful, ML_ERROR otherwise. The key
 *          not corresponding to a memory address will result in ML_ERROR.
 */
tMLError MLDLSetMemoryMPU(unsigned short key, unsigned short length, const unsigned char* buffer)
{
    157c:	af 92       	push	r10
    157e:	bf 92       	push	r11
    1580:	cf 92       	push	r12
    1582:	df 92       	push	r13
    1584:	ef 92       	push	r14
    1586:	ff 92       	push	r15
    1588:	0f 93       	push	r16
    158a:	1f 93       	push	r17
    158c:	cf 93       	push	r28
    158e:	df 93       	push	r29
    1590:	eb 01       	movw	r28, r22
    1592:	7a 01       	movw	r14, r20
        tMLError ec = ML_SUCCESS;
        unsigned short memAddr;
        unsigned char bank;

        if (sGetAddress == NULL)
    1594:	e0 91 ff 01 	lds	r30, 0x01FF
    1598:	f0 91 00 02 	lds	r31, 0x0200
    159c:	30 97       	sbiw	r30, 0x00	; 0
    159e:	59 f1       	breq	.+86     	; 0x15f6 <MLDLSetMemoryMPU+0x7a>
                return ML_ERROR;

        memAddr = sGetAddress(key);
    15a0:	09 95       	icall

        if (memAddr >= 0xffff)
    15a2:	2f ef       	ldi	r18, 0xFF	; 255
    15a4:	8f 3f       	cpi	r24, 0xFF	; 255
    15a6:	92 07       	cpc	r25, r18
    15a8:	31 f1       	breq	.+76     	; 0x15f6 <MLDLSetMemoryMPU+0x7a>
                return ML_ERROR; // This key not supported

        bank = (unsigned char) (memAddr >> 8);
    15aa:	b9 2e       	mov	r11, r25
        memAddr &= 0xff;
    15ac:	bc 01       	movw	r22, r24
    15ae:	70 70       	andi	r23, 0x00	; 0

        if (memAddr + length > 256)
    15b0:	6b 01       	movw	r12, r22
    15b2:	cc 0e       	add	r12, r28
    15b4:	dd 1e       	adc	r13, r29
    15b6:	21 e0       	ldi	r18, 0x01	; 1
    15b8:	c2 16       	cp	r12, r18
    15ba:	21 e0       	ldi	r18, 0x01	; 1
    15bc:	d2 06       	cpc	r13, r18
    15be:	10 f4       	brcc	.+4      	; 0x15c4 <MLDLSetMemoryMPU+0x48>
    15c0:	aa 24       	eor	r10, r10
    15c2:	12 c0       	rjmp	.+36     	; 0x15e8 <MLDLSetMemoryMPU+0x6c>
        {
                // We cross a bank in the middle
                ec = MLDLSetMemoryMPU_one_bank(bank, memAddr, 256 - memAddr, buffer);
    15c4:	00 e0       	ldi	r16, 0x00	; 0
    15c6:	11 e0       	ldi	r17, 0x01	; 1
    15c8:	06 1b       	sub	r16, r22
    15ca:	17 0b       	sbc	r17, r23
    15cc:	89 2f       	mov	r24, r25
    15ce:	a8 01       	movw	r20, r16
    15d0:	97 01       	movw	r18, r14
    15d2:	0e 94 93 0a 	call	0x1526	; 0x1526 <MLDLSetMemoryMPU_one_bank>
    15d6:	a8 2e       	mov	r10, r24
                bank++;
    15d8:	b3 94       	inc	r11
                length -= 256 - memAddr;
    15da:	e6 01       	movw	r28, r12
    15dc:	c0 50       	subi	r28, 0x00	; 0
    15de:	d1 40       	sbci	r29, 0x01	; 1
                buffer += 256 - memAddr;
    15e0:	e0 0e       	add	r14, r16
    15e2:	f1 1e       	adc	r15, r17
    15e4:	60 e0       	ldi	r22, 0x00	; 0
    15e6:	71 e0       	ldi	r23, 0x01	; 1
                memAddr += 256 - memAddr;
        }
        ec |= MLDLSetMemoryMPU_one_bank(bank, memAddr, length, buffer);
    15e8:	8b 2d       	mov	r24, r11
    15ea:	ae 01       	movw	r20, r28
    15ec:	97 01       	movw	r18, r14
    15ee:	0e 94 93 0a 	call	0x1526	; 0x1526 <MLDLSetMemoryMPU_one_bank>
    15f2:	8a 29       	or	r24, r10
    15f4:	01 c0       	rjmp	.+2      	; 0x15f8 <MLDLSetMemoryMPU+0x7c>
        return ec;
    15f6:	81 e0       	ldi	r24, 0x01	; 1
}
    15f8:	df 91       	pop	r29
    15fa:	cf 91       	pop	r28
    15fc:	1f 91       	pop	r17
    15fe:	0f 91       	pop	r16
    1600:	ff 90       	pop	r15
    1602:	ef 90       	pop	r14
    1604:	df 90       	pop	r13
    1606:	cf 90       	pop	r12
    1608:	bf 90       	pop	r11
    160a:	af 90       	pop	r10
    160c:	08 95       	ret

0000160e <MLDLResetDmp>:
/**
 * @internal
 * Resets the DMP by stoping the DMP, clearing the fifo and then restarting it
 */
static tMLError MLDLResetDmp(void)
{
    160e:	8f 92       	push	r8
    1610:	9f 92       	push	r9
    1612:	af 92       	push	r10
    1614:	bf 92       	push	r11
    1616:	df 92       	push	r13
    1618:	ef 92       	push	r14
    161a:	ff 92       	push	r15
    161c:	0f 93       	push	r16
    161e:	1f 93       	push	r17
    1620:	df 93       	push	r29
    1622:	cf 93       	push	r28
    1624:	00 d0       	rcall	.+0      	; 0x1626 <MLDLResetDmp+0x18>
    1626:	cd b7       	in	r28, 0x3d	; 61
    1628:	de b7       	in	r29, 0x3e	; 62
 *  @return value of register, or zero if not available.
 */
unsigned char MPUGetRegisterShadow(unsigned char reg)
{
        /*---- if valid, then return value ----*/
        if (mpuRegisterValid[reg])
    162a:	80 91 22 03 	lds	r24, 0x0322
    162e:	88 23       	and	r24, r24
    1630:	11 f4       	brne	.+4      	; 0x1636 <MLDLResetDmp+0x28>
    1632:	dd 24       	eor	r13, r13
    1634:	02 c0       	rjmp	.+4      	; 0x163a <MLDLResetDmp+0x2c>
        {
                return (mpuRegister[reg]);
    1636:	d0 90 04 03 	lds	r13, 0x0304
{
        int len = FIFO_HW_SIZE;
        unsigned char fifoBuf[2];
        unsigned char tries = 0;
        unsigned char userCtrlReg = MPUGetRegisterShadow(MPUREG_USER_CTRL);
        unsigned short prevDataMode = mlxData.mlDataMode;
    163a:	a0 90 bf 03 	lds	r10, 0x03BF
    163e:	b0 90 c0 03 	lds	r11, 0x03C0
        extern tReadBurst ReadBurst;

        MLSetDataMode(0);
    1642:	80 e0       	ldi	r24, 0x00	; 0
    1644:	90 e0       	ldi	r25, 0x00	; 0
    1646:	0e 94 ba 13 	call	0x2774	; 0x2774 <MLSetDataMode>
    164a:	ee 24       	eor	r14, r14

        while (len != 0 && tries < 6)
        {
                MLDLSetRegisterMPU(MPUREG_USER_CTRL, (userCtrlReg & (~BIT_FIFO_EN) | BIT_FIFO_RST));
    164c:	8d eb       	ldi	r24, 0xBD	; 189
    164e:	f8 2e       	mov	r15, r24
    1650:	fd 20       	and	r15, r13
    1652:	22 e0       	ldi	r18, 0x02	; 2
    1654:	f2 2a       	or	r15, r18
                ReadBurst(mldlData.mpuSlaveAddr, MPUREG_FIFO_COUNTH, 2, fifoBuf);
    1656:	4e 01       	movw	r8, r28
    1658:	08 94       	sec
    165a:	81 1c       	adc	r8, r1
    165c:	91 1c       	adc	r9, r1

        MLSetDataMode(0);

        while (len != 0 && tries < 6)
        {
                MLDLSetRegisterMPU(MPUREG_USER_CTRL, (userCtrlReg & (~BIT_FIFO_EN) | BIT_FIFO_RST));
    165e:	8d e3       	ldi	r24, 0x3D	; 61
    1660:	6f 2d       	mov	r22, r15
    1662:	0e 94 6f 0a 	call	0x14de	; 0x14de <MLDLSetRegisterMPU>
                ReadBurst(mldlData.mpuSlaveAddr, MPUREG_FIFO_COUNTH, 2, fifoBuf);
    1666:	e0 91 7e 00 	lds	r30, 0x007E
    166a:	f0 91 7f 00 	lds	r31, 0x007F
    166e:	80 91 cb 02 	lds	r24, 0x02CB
    1672:	6a e3       	ldi	r22, 0x3A	; 58
    1674:	42 e0       	ldi	r20, 0x02	; 2
    1676:	50 e0       	ldi	r21, 0x00	; 0
    1678:	94 01       	movw	r18, r8
    167a:	09 95       	icall
        unsigned short prevDataMode = mlxData.mlDataMode;
        extern tReadBurst ReadBurst;

        MLSetDataMode(0);

        while (len != 0 && tries < 6)
    167c:	19 81       	ldd	r17, Y+1	; 0x01
    167e:	00 e0       	ldi	r16, 0x00	; 0
    1680:	8a 81       	ldd	r24, Y+2	; 0x02
    1682:	98 01       	movw	r18, r16
    1684:	28 0f       	add	r18, r24
    1686:	31 1d       	adc	r19, r1
    1688:	21 15       	cp	r18, r1
    168a:	31 05       	cpc	r19, r1
    168c:	21 f0       	breq	.+8      	; 0x1696 <MLDLResetDmp+0x88>
        {
                MLDLSetRegisterMPU(MPUREG_USER_CTRL, (userCtrlReg & (~BIT_FIFO_EN) | BIT_FIFO_RST));
                ReadBurst(mldlData.mpuSlaveAddr, MPUREG_FIFO_COUNTH, 2, fifoBuf);
                len = (unsigned short) fifoBuf[0] * 256 + (unsigned short) fifoBuf[1];
                tries++;
    168e:	e3 94       	inc	r14
        unsigned short prevDataMode = mlxData.mlDataMode;
        extern tReadBurst ReadBurst;

        MLSetDataMode(0);

        while (len != 0 && tries < 6)
    1690:	36 e0       	ldi	r19, 0x06	; 6
    1692:	e3 16       	cp	r14, r19
    1694:	21 f7       	brne	.-56     	; 0x165e <MLDLResetDmp+0x50>
                MLDLSetRegisterMPU(MPUREG_USER_CTRL, (userCtrlReg & (~BIT_FIFO_EN) | BIT_FIFO_RST));
                ReadBurst(mldlData.mpuSlaveAddr, MPUREG_FIFO_COUNTH, 2, fifoBuf);
                len = (unsigned short) fifoBuf[0] * 256 + (unsigned short) fifoBuf[1];
                tries++;
        }
        mldlData.fifoCount = 0;
    1696:	10 92 de 02 	sts	0x02DE, r1
    169a:	10 92 dd 02 	sts	0x02DD, r1
        MLDLSetRegisterMPU(MPUREG_USER_CTRL, userCtrlReg);
    169e:	8d e3       	ldi	r24, 0x3D	; 61
    16a0:	6d 2d       	mov	r22, r13
    16a2:	0e 94 6f 0a 	call	0x14de	; 0x14de <MLDLSetRegisterMPU>

        MLSetDataMode(prevDataMode);
    16a6:	c5 01       	movw	r24, r10
    16a8:	0e 94 ba 13 	call	0x2774	; 0x2774 <MLSetDataMode>

        return ML_SUCCESS;
}
    16ac:	80 e0       	ldi	r24, 0x00	; 0
    16ae:	0f 90       	pop	r0
    16b0:	0f 90       	pop	r0
    16b2:	cf 91       	pop	r28
    16b4:	df 91       	pop	r29
    16b6:	1f 91       	pop	r17
    16b8:	0f 91       	pop	r16
    16ba:	ff 90       	pop	r15
    16bc:	ef 90       	pop	r14
    16be:	df 90       	pop	r13
    16c0:	bf 90       	pop	r11
    16c2:	af 90       	pop	r10
    16c4:	9f 90       	pop	r9
    16c6:	8f 90       	pop	r8
    16c8:	08 95       	ret

000016ca <MLDLReadFifo>:
 * @param[in] len   Amount of data to read out of the fifo
 *
 * @return ML_SUCCESS or non-zero error code
 */
tMLError MLDLReadFifo(unsigned char *data, unsigned short len)
{
    16ca:	1f 93       	push	r17
    16cc:	9c 01       	movw	r18, r24
    16ce:	ab 01       	movw	r20, r22
        tMLError result;
        result = ReadBurst(mldlData.mpuSlaveAddr, MPUREG_FIFO_R_W, len, data);
    16d0:	e0 91 7e 00 	lds	r30, 0x007E
    16d4:	f0 91 7f 00 	lds	r31, 0x007F
    16d8:	80 91 cb 02 	lds	r24, 0x02CB
    16dc:	6c e3       	ldi	r22, 0x3C	; 60
    16de:	09 95       	icall
    16e0:	18 2f       	mov	r17, r24
        if (ML_SUCCESS != result)
    16e2:	88 23       	and	r24, r24
    16e4:	41 f0       	breq	.+16     	; 0x16f6 <MLDLReadFifo+0x2c>
        {
                MLDLResetDmp();
    16e6:	0e 94 07 0b 	call	0x160e	; 0x160e <MLDLResetDmp>
                mldlData.fifoError = 1;
    16ea:	81 e0       	ldi	r24, 0x01	; 1
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	90 93 e2 02 	sts	0x02E2, r25
    16f2:	80 93 e1 02 	sts	0x02E1, r24
                return result;
        }
        return result;
}
    16f6:	81 2f       	mov	r24, r17
    16f8:	1f 91       	pop	r17
    16fa:	08 95       	ret

000016fc <MLDLGetFifoLength>:
 * @param[out] len amount of data currently stored in the fifo.
 *
 * @return ML_SUCCESS or non-zero error code.
 */
tMLError MLDLGetFifoLength(unsigned short * len)
{
    16fc:	ff 92       	push	r15
    16fe:	0f 93       	push	r16
    1700:	1f 93       	push	r17
    1702:	df 93       	push	r29
    1704:	cf 93       	push	r28
    1706:	00 d0       	rcall	.+0      	; 0x1708 <MLDLGetFifoLength+0xc>
    1708:	cd b7       	in	r28, 0x3d	; 61
    170a:	de b7       	in	r29, 0x3e	; 62
    170c:	8c 01       	movw	r16, r24
        int result;
        extern tReadBurst ReadBurst;

        /*---- read the 2 'count' registers and
         burst read the data from the FIFO ----*/
        result = ReadBurst(mldlData.mpuSlaveAddr, MPUREG_FIFO_COUNTH, 2, fifoBuf);
    170e:	e0 91 7e 00 	lds	r30, 0x007E
    1712:	f0 91 7f 00 	lds	r31, 0x007F
    1716:	80 91 cb 02 	lds	r24, 0x02CB
    171a:	6a e3       	ldi	r22, 0x3A	; 58
    171c:	42 e0       	ldi	r20, 0x02	; 2
    171e:	50 e0       	ldi	r21, 0x00	; 0
    1720:	9e 01       	movw	r18, r28
    1722:	2f 5f       	subi	r18, 0xFF	; 255
    1724:	3f 4f       	sbci	r19, 0xFF	; 255
    1726:	09 95       	icall
    1728:	f8 2e       	mov	r15, r24
        if (ML_SUCCESS != result)
    172a:	88 23       	and	r24, r24
    172c:	61 f0       	breq	.+24     	; 0x1746 <MLDLGetFifoLength+0x4a>
        {
                MLDLResetDmp();
    172e:	0e 94 07 0b 	call	0x160e	; 0x160e <MLDLResetDmp>
                mldlData.fifoError = 1;
    1732:	81 e0       	ldi	r24, 0x01	; 1
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	90 93 e2 02 	sts	0x02E2, r25
    173a:	80 93 e1 02 	sts	0x02E1, r24
                *len = 0;
    173e:	f8 01       	movw	r30, r16
    1740:	11 82       	std	Z+1, r1	; 0x01
    1742:	10 82       	st	Z, r1
    1744:	08 c0       	rjmp	.+16     	; 0x1756 <MLDLGetFifoLength+0x5a>
                return result;
        }

        *len = (unsigned short) (fifoBuf[0] << 8);
    1746:	99 81       	ldd	r25, Y+1	; 0x01
    1748:	80 e0       	ldi	r24, 0x00	; 0
        *len += (unsigned short) (fifoBuf[1]);
    174a:	2a 81       	ldd	r18, Y+2	; 0x02
    174c:	82 0f       	add	r24, r18
    174e:	91 1d       	adc	r25, r1
    1750:	f8 01       	movw	r30, r16
    1752:	91 83       	std	Z+1, r25	; 0x01
    1754:	80 83       	st	Z, r24
        return result;
}
    1756:	8f 2d       	mov	r24, r15
    1758:	0f 90       	pop	r0
    175a:	0f 90       	pop	r0
    175c:	cf 91       	pop	r28
    175e:	df 91       	pop	r29
    1760:	1f 91       	pop	r17
    1762:	0f 91       	pop	r16
    1764:	ff 90       	pop	r15
    1766:	08 95       	ret

00001768 <MLDLGetMemoryMPU>:
 *
 *  @return ML_SUCCESS if the command is successful, ML_ERROR otherwise. The key
 *          not corresponding to a memory address will result in ML_ERROR.
 */
tMLError MLDLGetMemoryMPU(unsigned short key, unsigned short length, unsigned char* buffer)
{
    1768:	ef 92       	push	r14
    176a:	ff 92       	push	r15
    176c:	0f 93       	push	r16
    176e:	1f 93       	push	r17
    1770:	cf 93       	push	r28
    1772:	df 93       	push	r29
    1774:	8b 01       	movw	r16, r22
    1776:	7a 01       	movw	r14, r20
        unsigned char bank;
        tMLError ec;
        extern tReadBurst ReadBurst;
        unsigned short memAddr;

        if (sGetAddress == NULL)
    1778:	e0 91 ff 01 	lds	r30, 0x01FF
    177c:	f0 91 00 02 	lds	r31, 0x0200
    1780:	30 97       	sbiw	r30, 0x00	; 0
    1782:	11 f1       	breq	.+68     	; 0x17c8 <MLDLGetMemoryMPU+0x60>
                return ML_ERROR;

        memAddr = sGetAddress(key);
    1784:	09 95       	icall
    1786:	ec 01       	movw	r28, r24
        if (memAddr >= 0xffff)
    1788:	8f ef       	ldi	r24, 0xFF	; 255
    178a:	cf 3f       	cpi	r28, 0xFF	; 255
    178c:	d8 07       	cpc	r29, r24
    178e:	e1 f0       	breq	.+56     	; 0x17c8 <MLDLGetMemoryMPU+0x60>
                return ML_ERROR;
        bank = memAddr >> 8; // Get Bank
    1790:	6d 2f       	mov	r22, r29
 *  @return value of register, or zero if not available.
 */
unsigned char MPUGetRegisterShadow(unsigned char reg)
{
        /*---- if valid, then return value ----*/
        if (mpuRegisterValid[reg])
    1792:	80 91 1c 03 	lds	r24, 0x031C
    1796:	88 23       	and	r24, r24
    1798:	11 f0       	breq	.+4      	; 0x179e <MLDLGetMemoryMPU+0x36>
        {
                return (mpuRegister[reg]);
    179a:	80 91 fe 02 	lds	r24, 0x02FE
                return ML_ERROR;
        bank = memAddr >> 8; // Get Bank
        memAddr &= 0xff;

        /*---- set appropriate memory bank ----*/
        if (bank != MPUGetRegisterShadow(MPUREG_BANK_SEL))
    179e:	68 17       	cp	r22, r24
    17a0:	19 f0       	breq	.+6      	; 0x17a8 <MLDLGetMemoryMPU+0x40>
        { // only write bank register if it's changed
                MLDLSetRegisterMPU(MPUREG_BANK_SEL, bank);
    17a2:	87 e3       	ldi	r24, 0x37	; 55
    17a4:	0e 94 6f 0a 	call	0x14de	; 0x14de <MLDLSetRegisterMPU>
        }

        /*---- set the memory address to the start address ----*/
        MLDLSetRegisterMPU(MPUREG_MEM_START_ADDR, (unsigned char) memAddr);
    17a8:	d0 70       	andi	r29, 0x00	; 0
    17aa:	88 e3       	ldi	r24, 0x38	; 56
    17ac:	6c 2f       	mov	r22, r28
    17ae:	0e 94 6f 0a 	call	0x14de	; 0x14de <MLDLSetRegisterMPU>

        /*---- read memory from bank with a burst read ----*/
        ec = ReadBurst(mldlData.mpuSlaveAddr, MPUREG_MEM_R_W, length, buffer);
    17b2:	e0 91 7e 00 	lds	r30, 0x007E
    17b6:	f0 91 7f 00 	lds	r31, 0x007F
    17ba:	80 91 cb 02 	lds	r24, 0x02CB
    17be:	69 e3       	ldi	r22, 0x39	; 57
    17c0:	a8 01       	movw	r20, r16
    17c2:	97 01       	movw	r18, r14
    17c4:	09 95       	icall
    17c6:	01 c0       	rjmp	.+2      	; 0x17ca <MLDLGetMemoryMPU+0x62>

        return ec;
    17c8:	81 e0       	ldi	r24, 0x01	; 1
}
    17ca:	df 91       	pop	r29
    17cc:	cf 91       	pop	r28
    17ce:	1f 91       	pop	r17
    17d0:	0f 91       	pop	r16
    17d2:	ff 90       	pop	r15
    17d4:	ef 90       	pop	r14
    17d6:	08 95       	ret

000017d8 <MLDLSetI2CPassThrough>:
 *  @brief  enables/disables the I2C pass through to the accelerometer device.
 *  @param  enable Non-zero to enable pass through.
 *  @return Zero if the command is successful, an error code otherwise.
 */
tMLError MLDLSetI2CPassThrough(unsigned char enable)
{
    17d8:	28 2f       	mov	r18, r24
        unsigned char b;

        enable = !enable;

        if (INVALID_SLAVE_ADDR == mldlData.auxSlaveAddr)
    17da:	80 91 cc 02 	lds	r24, 0x02CC
    17de:	88 23       	and	r24, r24
    17e0:	11 f4       	brne	.+4      	; 0x17e6 <MLDLSetI2CPassThrough+0xe>
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	04 c0       	rjmp	.+8      	; 0x17ee <MLDLSetI2CPassThrough+0x16>
 */
tMLError MLDLSetI2CPassThrough(unsigned char enable)
{
        unsigned char b;

        enable = !enable;
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	22 23       	and	r18, r18
    17ea:	09 f4       	brne	.+2      	; 0x17ee <MLDLSetI2CPassThrough+0x16>
    17ec:	91 e0       	ldi	r25, 0x01	; 1
 *  @return value of register, or zero if not available.
 */
unsigned char MPUGetRegisterShadow(unsigned char reg)
{
        /*---- if valid, then return value ----*/
        if (mpuRegisterValid[reg])
    17ee:	80 91 22 03 	lds	r24, 0x0322
    17f2:	88 23       	and	r24, r24
    17f4:	11 f4       	brne	.+4      	; 0x17fa <MLDLSetI2CPassThrough+0x22>
    17f6:	60 e0       	ldi	r22, 0x00	; 0
    17f8:	02 c0       	rjmp	.+4      	; 0x17fe <MLDLSetI2CPassThrough+0x26>
        {
                return (mpuRegister[reg]);
    17fa:	60 91 04 03 	lds	r22, 0x0304
        }

        /*---- get current 'USER_CTRL' into b ----*/
        b = MPUGetRegisterShadow(MPUREG_USER_CTRL);
        /*---- set 'AUX_IF_EN' based on enable/disable ----*/
        if (enable)
    17fe:	99 23       	and	r25, r25
    1800:	11 f0       	breq	.+4      	; 0x1806 <MLDLSetI2CPassThrough+0x2e>
        {
                b |= BIT_AUX_IF_EN;
    1802:	60 62       	ori	r22, 0x20	; 32
    1804:	01 c0       	rjmp	.+2      	; 0x1808 <MLDLSetI2CPassThrough+0x30>
        } else
        {
                b &= ~BIT_AUX_IF_EN;
    1806:	6f 7d       	andi	r22, 0xDF	; 223
        }

        b |= BIT_AUX_IF_RST; // always reset AUX IF
    1808:	68 60       	ori	r22, 0x08	; 8

        mldlData.i2cPassThrough = b; // save new setting
    180a:	60 93 db 02 	sts	0x02DB, r22

        MLDLSetRegisterMPU(MPUREG_USER_CTRL, b);
    180e:	8d e3       	ldi	r24, 0x3D	; 61
    1810:	0e 94 6f 0a 	call	0x14de	; 0x14de <MLDLSetRegisterMPU>
        return ML_SUCCESS;
}
    1814:	80 e0       	ldi	r24, 0x00	; 0
    1816:	08 95       	ret

00001818 <MLDLDmpAccelInit>:
 * @internal
 * @brief   Initialize Accelerometers.
 * @return  Zero if successful, an error code otherwise.
 */
tMLError MLDLDmpAccelInit()
{
    1818:	8f 92       	push	r8
    181a:	9f 92       	push	r9
    181c:	af 92       	push	r10
    181e:	bf 92       	push	r11
    1820:	cf 92       	push	r12
    1822:	df 92       	push	r13
    1824:	ef 92       	push	r14
    1826:	ff 92       	push	r15
    1828:	0f 93       	push	r16
    182a:	1f 93       	push	r17
    182c:	df 93       	push	r29
    182e:	cf 93       	push	r28
    1830:	00 d0       	rcall	.+0      	; 0x1832 <MLDLDmpAccelInit+0x1a>
    1832:	00 d0       	rcall	.+0      	; 0x1834 <MLDLDmpAccelInit+0x1c>
    1834:	cd b7       	in	r28, 0x3d	; 61
    1836:	de b7       	in	r29, 0x3e	; 62
        unsigned char regs[4] = { 0 };
        tMLError result = ML_SUCCESS;

        if (mldlData.auxSlaveAddr == KIONIX_AUX_SLAVEADDR)
    1838:	80 91 cc 02 	lds	r24, 0x02CC
    183c:	8f 30       	cpi	r24, 0x0F	; 15
    183e:	11 f0       	breq	.+4      	; 0x1844 <MLDLDmpAccelInit+0x2c>
    1840:	91 e0       	ldi	r25, 0x01	; 1
    1842:	65 c0       	rjmp	.+202    	; 0x190e <MLDLDmpAccelInit+0xf6>
        {
                //must set MPUREG_ACCEL_BURST_ADDR high bit before accessing the accel chip

                result += MLSLSerialWriteSingle(mldlData.mpuSlaveAddr, MPUREG_ACCEL_BURST_ADDR, 0x86);
    1844:	80 91 cb 02 	lds	r24, 0x02CB
 * @brief   Initialize Accelerometers.
 * @return  Zero if successful, an error code otherwise.
 */
tMLError MLDLDmpAccelInit()
{
        unsigned char regs[4] = { 0 };
    1848:	19 82       	std	Y+1, r1	; 0x01
    184a:	1a 82       	std	Y+2, r1	; 0x02
    184c:	1b 82       	std	Y+3, r1	; 0x03
    184e:	1c 82       	std	Y+4, r1	; 0x04

        if (mldlData.auxSlaveAddr == KIONIX_AUX_SLAVEADDR)
        {
                //must set MPUREG_ACCEL_BURST_ADDR high bit before accessing the accel chip

                result += MLSLSerialWriteSingle(mldlData.mpuSlaveAddr, MPUREG_ACCEL_BURST_ADDR, 0x86);
    1850:	68 e1       	ldi	r22, 0x18	; 24
    1852:	46 e8       	ldi	r20, 0x86	; 134
    1854:	0e 94 4e 1d 	call	0x3a9c	; 0x3a9c <MLSLSerialWriteSingle>
    1858:	88 2e       	mov	r8, r24

                // Kionix Accel
                regs[0] = 0;
    185a:	19 82       	std	Y+1, r1	; 0x01
                regs[1] = 64;
    185c:	80 e4       	ldi	r24, 0x40	; 64
    185e:	8a 83       	std	Y+2, r24	; 0x02
                regs[2] = 0;
    1860:	1b 82       	std	Y+3, r1	; 0x03
                regs[3] = 0;
    1862:	1c 82       	std	Y+4, r1	; 0x04
                result += MLDLSetMemoryMPU(KEY_D_1_236, 4, regs);
    1864:	89 e2       	ldi	r24, 0x29	; 41
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	64 e0       	ldi	r22, 0x04	; 4
    186a:	70 e0       	ldi	r23, 0x00	; 0
    186c:	ae 01       	movw	r20, r28
    186e:	4f 5f       	subi	r20, 0xFF	; 255
    1870:	5f 4f       	sbci	r21, 0xFF	; 255
    1872:	0e 94 be 0a 	call	0x157c	; 0x157c <MLDLSetMemoryMPU>
    1876:	98 2e       	mov	r9, r24

                result += MLDLSetI2CPassThrough(1); // By-pass on
    1878:	81 e0       	ldi	r24, 0x01	; 1
    187a:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <MLDLSetI2CPassThrough>
    187e:	a8 2e       	mov	r10, r24
                result += MLSLSerialWriteSingle(mldlData.auxSlaveAddr, 0x1d, 0xcd); // RAM reset
    1880:	80 91 cc 02 	lds	r24, 0x02CC
    1884:	6d e1       	ldi	r22, 0x1D	; 29
    1886:	4d ec       	ldi	r20, 0xCD	; 205
    1888:	0e 94 4e 1d 	call	0x3a9c	; 0x3a9c <MLSLSerialWriteSingle>
    188c:	b8 2e       	mov	r11, r24
                MLOSSleep(10);
    188e:	8a e0       	ldi	r24, 0x0A	; 10
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	0e 94 c3 1d 	call	0x3b86	; 0x3b86 <MLOSSleep>
                result += MLSLSerialWriteSingle(mldlData.auxSlaveAddr, 0x1b, 0x42); // Wake up
    1896:	80 91 cc 02 	lds	r24, 0x02CC
    189a:	6b e1       	ldi	r22, 0x1B	; 27
    189c:	42 e4       	ldi	r20, 0x42	; 66
    189e:	0e 94 4e 1d 	call	0x3a9c	; 0x3a9c <MLSLSerialWriteSingle>
    18a2:	c8 2e       	mov	r12, r24
                result += MLSLSerialWriteSingle(mldlData.auxSlaveAddr, 0x1b, 0xc2); // Normal operation
    18a4:	80 91 cc 02 	lds	r24, 0x02CC
    18a8:	6b e1       	ldi	r22, 0x1B	; 27
    18aa:	42 ec       	ldi	r20, 0xC2	; 194
    18ac:	0e 94 4e 1d 	call	0x3a9c	; 0x3a9c <MLSLSerialWriteSingle>
    18b0:	d8 2e       	mov	r13, r24
                MLOSSleep(50);
    18b2:	82 e3       	ldi	r24, 0x32	; 50
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	0e 94 c3 1d 	call	0x3b86	; 0x3b86 <MLOSSleep>
                result += MLSLSerialWriteSingle(mldlData.auxSlaveAddr, 0x1e, 0x14); // INT_CTRL_REG1: Configure non-latching wake-up
    18ba:	80 91 cc 02 	lds	r24, 0x02CC
    18be:	6e e1       	ldi	r22, 0x1E	; 30
    18c0:	44 e1       	ldi	r20, 0x14	; 20
    18c2:	0e 94 4e 1d 	call	0x3a9c	; 0x3a9c <MLSLSerialWriteSingle>
    18c6:	e8 2e       	mov	r14, r24
                result += MLSLSerialWriteSingle(mldlData.auxSlaveAddr, 0x5a, 0x00); // WUF_THRESH:    wake-up threshold (on motion)
    18c8:	80 91 cc 02 	lds	r24, 0x02CC
    18cc:	6a e5       	ldi	r22, 0x5A	; 90
    18ce:	40 e0       	ldi	r20, 0x00	; 0
    18d0:	0e 94 4e 1d 	call	0x3a9c	; 0x3a9c <MLSLSerialWriteSingle>
    18d4:	f8 2e       	mov	r15, r24
                result += MLSLSerialWriteSingle(mldlData.auxSlaveAddr, 0x21, 0x06); // DATA_CTRL_REG: output data rate
    18d6:	80 91 cc 02 	lds	r24, 0x02CC
    18da:	61 e2       	ldi	r22, 0x21	; 33
    18dc:	46 e0       	ldi	r20, 0x06	; 6
    18de:	0e 94 4e 1d 	call	0x3a9c	; 0x3a9c <MLSLSerialWriteSingle>
    18e2:	08 2f       	mov	r16, r24
                result += MLSLSerialWriteSingle(mldlData.auxSlaveAddr, 0x29, 0x02); // WUF_TIMER:     wake-up timer
    18e4:	80 91 cc 02 	lds	r24, 0x02CC
    18e8:	69 e2       	ldi	r22, 0x29	; 41
    18ea:	42 e0       	ldi	r20, 0x02	; 2
    18ec:	0e 94 4e 1d 	call	0x3a9c	; 0x3a9c <MLSLSerialWriteSingle>
    18f0:	18 2f       	mov	r17, r24
                result += MLDLSetI2CPassThrough(0); // By-pass off
    18f2:	80 e0       	ldi	r24, 0x00	; 0
    18f4:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <MLDLSetI2CPassThrough>
                // Kionix Accel
                regs[0] = 0;
                regs[1] = 64;
                regs[2] = 0;
                regs[3] = 0;
                result += MLDLSetMemoryMPU(KEY_D_1_236, 4, regs);
    18f8:	99 2d       	mov	r25, r9
    18fa:	98 0d       	add	r25, r8

                result += MLDLSetI2CPassThrough(1); // By-pass on
    18fc:	9a 0d       	add	r25, r10
                result += MLSLSerialWriteSingle(mldlData.auxSlaveAddr, 0x1d, 0xcd); // RAM reset
    18fe:	9b 0d       	add	r25, r11
                MLOSSleep(10);
                result += MLSLSerialWriteSingle(mldlData.auxSlaveAddr, 0x1b, 0x42); // Wake up
    1900:	9c 0d       	add	r25, r12
                result += MLSLSerialWriteSingle(mldlData.auxSlaveAddr, 0x1b, 0xc2); // Normal operation
    1902:	9d 0d       	add	r25, r13
                MLOSSleep(50);
                result += MLSLSerialWriteSingle(mldlData.auxSlaveAddr, 0x1e, 0x14); // INT_CTRL_REG1: Configure non-latching wake-up
    1904:	9e 0d       	add	r25, r14
                result += MLSLSerialWriteSingle(mldlData.auxSlaveAddr, 0x5a, 0x00); // WUF_THRESH:    wake-up threshold (on motion)
    1906:	9f 0d       	add	r25, r15
                result += MLSLSerialWriteSingle(mldlData.auxSlaveAddr, 0x21, 0x06); // DATA_CTRL_REG: output data rate
    1908:	90 0f       	add	r25, r16
                result += MLSLSerialWriteSingle(mldlData.auxSlaveAddr, 0x29, 0x02); // WUF_TIMER:     wake-up timer
    190a:	91 0f       	add	r25, r17
                result += MLDLSetI2CPassThrough(0); // By-pass off
    190c:	98 0f       	add	r25, r24
        } else
        {
                result = ML_ERROR;
        }
        return result;
}
    190e:	89 2f       	mov	r24, r25
    1910:	0f 90       	pop	r0
    1912:	0f 90       	pop	r0
    1914:	0f 90       	pop	r0
    1916:	0f 90       	pop	r0
    1918:	cf 91       	pop	r28
    191a:	df 91       	pop	r29
    191c:	1f 91       	pop	r17
    191e:	0f 91       	pop	r16
    1920:	ff 90       	pop	r15
    1922:	ef 90       	pop	r14
    1924:	df 90       	pop	r13
    1926:	cf 90       	pop	r12
    1928:	bf 90       	pop	r11
    192a:	af 90       	pop	r10
    192c:	9f 90       	pop	r9
    192e:	8f 90       	pop	r8
    1930:	08 95       	ret

00001932 <MLDLDMPInit>:
 * @internal
 * @brief   DMP Init Function.
 * @return  Zero if successful, an error code otherwise.
 */
tMLError MLDLDMPInit(void)
{
    1932:	1f 93       	push	r17
        tMLError result;

        result = MLDLDmpAccelInit();
    1934:	0e 94 0c 0c 	call	0x1818	; 0x1818 <MLDLDmpAccelInit>
    1938:	18 2f       	mov	r17, r24
 *  @return value of register, or zero if not available.
 */
unsigned char MPUGetRegisterShadow(unsigned char reg)
{
        /*---- if valid, then return value ----*/
        if (mpuRegisterValid[reg])
    193a:	80 91 22 03 	lds	r24, 0x0322
    193e:	88 23       	and	r24, r24
    1940:	11 f4       	brne	.+4      	; 0x1946 <MLDLDMPInit+0x14>
    1942:	60 e0       	ldi	r22, 0x00	; 0
    1944:	02 c0       	rjmp	.+4      	; 0x194a <MLDLDMPInit+0x18>
        {
                return (mpuRegister[reg]);
    1946:	60 91 04 03 	lds	r22, 0x0304
        tMLError result;

        result = MLDLDmpAccelInit();

        /*---- set length of AUX burst read to cover status registers ----*/
        result += MLDLSetRegisterMPU(MPUREG_USER_CTRL, MPUGetRegisterShadow(MPUREG_USER_CTRL) | BIT_AUX_RD_LENG);
    194a:	60 61       	ori	r22, 0x10	; 16
    194c:	8d e3       	ldi	r24, 0x3D	; 61
    194e:	0e 94 6f 0a 	call	0x14de	; 0x14de <MLDLSetRegisterMPU>
        return result;
}
    1952:	81 0f       	add	r24, r17
    1954:	1f 91       	pop	r17
    1956:	08 95       	ret

00001958 <MLDLClockSource>:
 *                      - CLK_PLLEXT19M.
 *
 * @return  Zero if the command is successful; an error code otherwise.
 */
tMLError MLDLClockSource(unsigned char clkSource)
{
    1958:	1f 93       	push	r17
    195a:	18 2f       	mov	r17, r24
        unsigned char b;

        /*---- do range checking ----*/
        if (clkSource > 7)
    195c:	88 30       	cpi	r24, 0x08	; 8
    195e:	10 f0       	brcs	.+4      	; 0x1964 <MLDLClockSource+0xc>
    1960:	81 e0       	ldi	r24, 0x01	; 1
    1962:	10 c0       	rjmp	.+32     	; 0x1984 <MLDLClockSource+0x2c>
 *  @return value of register, or zero if not available.
 */
unsigned char MPUGetRegisterShadow(unsigned char reg)
{
        /*---- if valid, then return value ----*/
        if (mpuRegisterValid[reg])
    1964:	80 91 23 03 	lds	r24, 0x0323
    1968:	88 23       	and	r24, r24
    196a:	11 f4       	brne	.+4      	; 0x1970 <MLDLClockSource+0x18>
    196c:	60 e0       	ldi	r22, 0x00	; 0
    196e:	02 c0       	rjmp	.+4      	; 0x1974 <MLDLClockSource+0x1c>
        {
                return (mpuRegister[reg]);
    1970:	60 91 05 03 	lds	r22, 0x0305
                return MLDL_ERROR;
        }

        /*---- get current power management register and clear clock bits ----*/
        b = MPUGetRegisterShadow(MPUREG_PWR_MGM);
        b &= ~BITS_CLKSEL;
    1974:	68 7f       	andi	r22, 0xF8	; 248

        /*---- set new clock select in power management register ----*/
        b |= clkSource;
        MLDLSetRegisterMPU(MPUREG_PWR_MGM, b);
    1976:	61 2b       	or	r22, r17
    1978:	8e e3       	ldi	r24, 0x3E	; 62
    197a:	0e 94 6f 0a 	call	0x14de	; 0x14de <MLDLSetRegisterMPU>

        mldlData.clkSource = clkSource; // save new setting
    197e:	10 93 cf 02 	sts	0x02CF, r17
    1982:	80 e0       	ldi	r24, 0x00	; 0

        return MLDL_SUCCESS;
}
    1984:	1f 91       	pop	r17
    1986:	08 95       	ret

00001988 <MLDLPowerMgmtMPU>:
 * @param   disable_gz  Disable gyro Z.
 *
 * @return  Zero if the command is successful, an error code otherwise.
 */
tMLError MLDLPowerMgmtMPU(unsigned char sleep, unsigned char disable_gx, unsigned char disable_gy, unsigned char disable_gz)
{
    1988:	bf 92       	push	r11
    198a:	cf 92       	push	r12
    198c:	df 92       	push	r13
    198e:	ef 92       	push	r14
    1990:	ff 92       	push	r15
    1992:	0f 93       	push	r16
    1994:	1f 93       	push	r17
    1996:	f8 2e       	mov	r15, r24
    1998:	06 2f       	mov	r16, r22
    199a:	e4 2e       	mov	r14, r20
    199c:	b2 2e       	mov	r11, r18
 *  @return value of register, or zero if not available.
 */
unsigned char MPUGetRegisterShadow(unsigned char reg)
{
        /*---- if valid, then return value ----*/
        if (mpuRegisterValid[reg])
    199e:	80 91 23 03 	lds	r24, 0x0323
    19a2:	88 23       	and	r24, r24
    19a4:	11 f4       	brne	.+4      	; 0x19aa <MLDLPowerMgmtMPU+0x22>
    19a6:	10 e0       	ldi	r17, 0x00	; 0
    19a8:	02 c0       	rjmp	.+4      	; 0x19ae <MLDLPowerMgmtMPU+0x26>
        {
                return (mpuRegister[reg]);
    19aa:	10 91 05 03 	lds	r17, 0x0305
         *  This specific transition between states needs to be reinterpreted:
         *      (1,1,1,1) -> (0,1,1,1) has to become (1,1,1,1) -> (1,0,0,0) -> (0,1,1,1)
         *  where
         *      (1,1,1,1) stands for (sleep=1,disable_gx=1,disable_gy=1,disable_gz=1)
         */
        if ((b & (BIT_SLEEP | BIT_STBY_XG | BIT_STBY_YG | BIT_STBY_ZG)) == (BIT_SLEEP | BIT_STBY_XG | BIT_STBY_YG
    19ae:	81 2f       	mov	r24, r17
    19b0:	88 77       	andi	r24, 0x78	; 120
    19b2:	88 37       	cpi	r24, 0x78	; 120
    19b4:	81 f4       	brne	.+32     	; 0x19d6 <MLDLPowerMgmtMPU+0x4e>
    19b6:	ff 20       	and	r15, r15
    19b8:	71 f4       	brne	.+28     	; 0x19d6 <MLDLPowerMgmtMPU+0x4e>
    19ba:	00 23       	and	r16, r16
    19bc:	61 f0       	breq	.+24     	; 0x19d6 <MLDLPowerMgmtMPU+0x4e>
    19be:	ee 20       	and	r14, r14
    19c0:	51 f0       	breq	.+20     	; 0x19d6 <MLDLPowerMgmtMPU+0x4e>
    19c2:	bb 20       	and	r11, r11
    19c4:	41 f0       	breq	.+16     	; 0x19d6 <MLDLPowerMgmtMPU+0x4e>
                        | BIT_STBY_ZG) // (1,1,1,1)
                        && ((!sleep) && disable_gx && disable_gy && disable_gz))
        { // (0,1,1,1)

                MLDLPowerMgmtMPU(1, 0, 0, 0);
    19c6:	81 e0       	ldi	r24, 0x01	; 1
    19c8:	60 e0       	ldi	r22, 0x00	; 0
    19ca:	40 e0       	ldi	r20, 0x00	; 0
    19cc:	20 e0       	ldi	r18, 0x00	; 0
    19ce:	0e 94 c4 0c 	call	0x1988	; 0x1988 <MLDLPowerMgmtMPU>
                b |= BIT_SLEEP;
    19d2:	10 64       	ori	r17, 0x40	; 64
                b &= ~(BIT_STBY_XG | BIT_STBY_YG | BIT_STBY_ZG);
    19d4:	17 7c       	andi	r17, 0xC7	; 199
        }
        /* register the changes to be made */
        if ((b & BIT_SLEEP) != (sleep * BIT_SLEEP))
    19d6:	21 2f       	mov	r18, r17
    19d8:	30 e0       	ldi	r19, 0x00	; 0
    19da:	20 74       	andi	r18, 0x40	; 64
    19dc:	30 70       	andi	r19, 0x00	; 0
    19de:	8f 2d       	mov	r24, r15
    19e0:	90 e0       	ldi	r25, 0x00	; 0
    19e2:	f6 e0       	ldi	r31, 0x06	; 6
    19e4:	88 0f       	add	r24, r24
    19e6:	99 1f       	adc	r25, r25
    19e8:	fa 95       	dec	r31
    19ea:	e1 f7       	brne	.-8      	; 0x19e4 <MLDLPowerMgmtMPU+0x5c>
    19ec:	28 17       	cp	r18, r24
    19ee:	39 07       	cpc	r19, r25
    19f0:	11 f4       	brne	.+4      	; 0x19f6 <MLDLPowerMgmtMPU+0x6e>
    19f2:	60 e0       	ldi	r22, 0x00	; 0
    19f4:	03 c0       	rjmp	.+6      	; 0x19fc <MLDLPowerMgmtMPU+0x74>
        {
                sleepChange = 1;
                b = b ^ BIT_SLEEP;
    19f6:	80 e4       	ldi	r24, 0x40	; 64
    19f8:	18 27       	eor	r17, r24
    19fa:	61 e0       	ldi	r22, 0x01	; 1
        }
        if ((b & BIT_STBY_XG) != (disable_gx * BIT_STBY_XG))
    19fc:	41 2f       	mov	r20, r17
    19fe:	50 e0       	ldi	r21, 0x00	; 0
    1a00:	9a 01       	movw	r18, r20
    1a02:	20 72       	andi	r18, 0x20	; 32
    1a04:	30 70       	andi	r19, 0x00	; 0
    1a06:	80 2f       	mov	r24, r16
    1a08:	90 e0       	ldi	r25, 0x00	; 0
    1a0a:	e5 e0       	ldi	r30, 0x05	; 5
    1a0c:	88 0f       	add	r24, r24
    1a0e:	99 1f       	adc	r25, r25
    1a10:	ea 95       	dec	r30
    1a12:	e1 f7       	brne	.-8      	; 0x1a0c <MLDLPowerMgmtMPU+0x84>
    1a14:	28 17       	cp	r18, r24
    1a16:	39 07       	cpc	r19, r25
    1a18:	21 f0       	breq	.+8      	; 0x1a22 <MLDLPowerMgmtMPU+0x9a>
    1a1a:	01 e0       	ldi	r16, 0x01	; 1
    1a1c:	cc 24       	eor	r12, r12
    1a1e:	c3 94       	inc	r12
    1a20:	02 c0       	rjmp	.+4      	; 0x1a26 <MLDLPowerMgmtMPU+0x9e>
    1a22:	00 e0       	ldi	r16, 0x00	; 0
    1a24:	cc 24       	eor	r12, r12
        {
                standByXChanges = 1;
                standByChanges++;
                //b= b ^ BIT_STBY_XG;   // don't record changes for stand-by
        }
        if ((b & BIT_STBY_YG) != (disable_gy * BIT_STBY_YG))
    1a26:	9a 01       	movw	r18, r20
    1a28:	20 71       	andi	r18, 0x10	; 16
    1a2a:	30 70       	andi	r19, 0x00	; 0
    1a2c:	8e 2d       	mov	r24, r14
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	74 e0       	ldi	r23, 0x04	; 4
    1a32:	88 0f       	add	r24, r24
    1a34:	99 1f       	adc	r25, r25
    1a36:	7a 95       	dec	r23
    1a38:	e1 f7       	brne	.-8      	; 0x1a32 <MLDLPowerMgmtMPU+0xaa>
    1a3a:	28 17       	cp	r18, r24
    1a3c:	39 07       	cpc	r19, r25
    1a3e:	11 f4       	brne	.+4      	; 0x1a44 <MLDLPowerMgmtMPU+0xbc>
    1a40:	dd 24       	eor	r13, r13
    1a42:	03 c0       	rjmp	.+6      	; 0x1a4a <MLDLPowerMgmtMPU+0xc2>
        {
                standByYChanges = 1;
                standByChanges++;
    1a44:	0f 5f       	subi	r16, 0xFF	; 255
    1a46:	dd 24       	eor	r13, r13
    1a48:	d3 94       	inc	r13
                //b= b ^ BIT_STBY_YG;
        }
        if ((b & BIT_STBY_ZG) != (disable_gz * BIT_STBY_ZG))
    1a4a:	48 70       	andi	r20, 0x08	; 8
    1a4c:	50 70       	andi	r21, 0x00	; 0
    1a4e:	8b 2d       	mov	r24, r11
    1a50:	90 e0       	ldi	r25, 0x00	; 0
    1a52:	23 e0       	ldi	r18, 0x03	; 3
    1a54:	88 0f       	add	r24, r24
    1a56:	99 1f       	adc	r25, r25
    1a58:	2a 95       	dec	r18
    1a5a:	e1 f7       	brne	.-8      	; 0x1a54 <MLDLPowerMgmtMPU+0xcc>
    1a5c:	48 17       	cp	r20, r24
    1a5e:	59 07       	cpc	r21, r25
    1a60:	11 f4       	brne	.+4      	; 0x1a66 <MLDLPowerMgmtMPU+0xde>
    1a62:	ee 24       	eor	r14, r14
    1a64:	03 c0       	rjmp	.+6      	; 0x1a6c <MLDLPowerMgmtMPU+0xe4>
        {
                standByZChanges = 1;
                standByChanges++;
    1a66:	0f 5f       	subi	r16, 0xFF	; 255
    1a68:	ee 24       	eor	r14, r14
    1a6a:	e3 94       	inc	r14
                //b= b ^ BIT_STBY_ZG;
        }

        if (sleep && sleepChange)
    1a6c:	ff 20       	and	r15, r15
    1a6e:	91 f0       	breq	.+36     	; 0x1a94 <MLDLPowerMgmtMPU+0x10c>
    1a70:	66 23       	and	r22, r22
    1a72:	39 f1       	breq	.+78     	; 0x1ac2 <MLDLPowerMgmtMPU+0x13a>
        { // going into sleep from awake
                i2cPTStatus = mldlData.i2cPassThrough;
    1a74:	80 91 db 02 	lds	r24, 0x02DB
    1a78:	80 93 01 02 	sts	0x0201, r24
                MLDLSetI2CPassThrough(1);
    1a7c:	81 e0       	ldi	r24, 0x01	; 1
    1a7e:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <MLDLSetI2CPassThrough>
                MLDLSetRegisterMPU(MPUREG_PWR_MGM, b);
    1a82:	8e e3       	ldi	r24, 0x3E	; 62
    1a84:	61 2f       	mov	r22, r17
    1a86:	0e 94 6f 0a 	call	0x14de	; 0x14de <MLDLSetRegisterMPU>
                MLOSSleep(1);
    1a8a:	81 e0       	ldi	r24, 0x01	; 1
    1a8c:	90 e0       	ldi	r25, 0x00	; 0
    1a8e:	0e 94 c3 1d 	call	0x3b86	; 0x3b86 <MLOSSleep>
    1a92:	17 c0       	rjmp	.+46     	; 0x1ac2 <MLDLPowerMgmtMPU+0x13a>
        }
        if (!sleep && sleepChange)
    1a94:	66 23       	and	r22, r22
    1a96:	a9 f0       	breq	.+42     	; 0x1ac2 <MLDLPowerMgmtMPU+0x13a>
        { // waking up from sleep
                MLDLSetRegisterMPU(MPUREG_PWR_MGM, b);
    1a98:	8e e3       	ldi	r24, 0x3E	; 62
    1a9a:	61 2f       	mov	r22, r17
    1a9c:	0e 94 6f 0a 	call	0x14de	; 0x14de <MLDLSetRegisterMPU>
                MLOSSleep(5);
    1aa0:	85 e0       	ldi	r24, 0x05	; 5
    1aa2:	90 e0       	ldi	r25, 0x00	; 0
    1aa4:	0e 94 c3 1d 	call	0x3b86	; 0x3b86 <MLOSSleep>
                if (i2cPTStatus)
    1aa8:	80 91 01 02 	lds	r24, 0x0201
    1aac:	88 23       	and	r24, r24
    1aae:	49 f0       	breq	.+18     	; 0x1ac2 <MLDLPowerMgmtMPU+0x13a>
                { // was in master mode (that is, pass-through was disabled)
                        MLDLSetI2CPassThrough(0);
    1ab0:	80 e0       	ldi	r24, 0x00	; 0
    1ab2:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <MLDLSetI2CPassThrough>
                        MLOSSleep(45);
    1ab6:	8d e2       	ldi	r24, 0x2D	; 45
    1ab8:	90 e0       	ldi	r25, 0x00	; 0
    1aba:	0e 94 c3 1d 	call	0x3b86	; 0x3b86 <MLOSSleep>
                        i2cPTStatus = 0;
    1abe:	10 92 01 02 	sts	0x0201, r1
                }
        }
        if (standByChanges > 0)
    1ac2:	00 23       	and	r16, r16
    1ac4:	c1 f0       	breq	.+48     	; 0x1af6 <MLDLPowerMgmtMPU+0x16e>
        {
                if (standByXChanges)
    1ac6:	cc 20       	and	r12, r12
    1ac8:	31 f0       	breq	.+12     	; 0x1ad6 <MLDLPowerMgmtMPU+0x14e>
                {
                        b ^= BIT_STBY_XG;
    1aca:	80 e2       	ldi	r24, 0x20	; 32
    1acc:	18 27       	eor	r17, r24
                        MLDLSetRegisterMPU(MPUREG_PWR_MGM, b);
    1ace:	8e e3       	ldi	r24, 0x3E	; 62
    1ad0:	61 2f       	mov	r22, r17
    1ad2:	0e 94 6f 0a 	call	0x14de	; 0x14de <MLDLSetRegisterMPU>
                }
                if (standByYChanges)
    1ad6:	dd 20       	and	r13, r13
    1ad8:	31 f0       	breq	.+12     	; 0x1ae6 <MLDLPowerMgmtMPU+0x15e>
                {
                        b ^= BIT_STBY_YG;
    1ada:	80 e1       	ldi	r24, 0x10	; 16
    1adc:	18 27       	eor	r17, r24
                        MLDLSetRegisterMPU(MPUREG_PWR_MGM, b);
    1ade:	8e e3       	ldi	r24, 0x3E	; 62
    1ae0:	61 2f       	mov	r22, r17
    1ae2:	0e 94 6f 0a 	call	0x14de	; 0x14de <MLDLSetRegisterMPU>
                }
                if (standByZChanges)
    1ae6:	ee 20       	and	r14, r14
    1ae8:	31 f0       	breq	.+12     	; 0x1af6 <MLDLPowerMgmtMPU+0x16e>
                {
                        b ^= BIT_STBY_ZG;
                        MLDLSetRegisterMPU(MPUREG_PWR_MGM, b);
    1aea:	88 e0       	ldi	r24, 0x08	; 8
    1aec:	18 27       	eor	r17, r24
    1aee:	8e e3       	ldi	r24, 0x3E	; 62
    1af0:	61 2f       	mov	r22, r17
    1af2:	0e 94 6f 0a 	call	0x14de	; 0x14de <MLDLSetRegisterMPU>
                }
        }

        return ML_SUCCESS;
}
    1af6:	80 e0       	ldi	r24, 0x00	; 0
    1af8:	1f 91       	pop	r17
    1afa:	0f 91       	pop	r16
    1afc:	ff 90       	pop	r15
    1afe:	ef 90       	pop	r14
    1b00:	df 90       	pop	r13
    1b02:	cf 90       	pop	r12
    1b04:	bf 90       	pop	r11
    1b06:	08 95       	ret

00001b08 <MLDLCfgSamplingMPU>:
 * @param   divider     Output sampling divder, 0 to 255.
 *
 * @return  Zero if the command is successful; an error code otherwise.
 */
tMLError MLDLCfgSamplingMPU(unsigned char lpf, unsigned char fullScale, unsigned char divider)
{
    1b08:	0f 93       	push	r16
    1b0a:	1f 93       	push	r17
    1b0c:	08 2f       	mov	r16, r24
    1b0e:	16 2f       	mov	r17, r22
        unsigned char b;

        /*---- do range checking ----*/
        if (lpf > 7 || fullScale > 3)
    1b10:	88 30       	cpi	r24, 0x08	; 8
    1b12:	c8 f4       	brcc	.+50     	; 0x1b46 <MLDLCfgSamplingMPU+0x3e>
    1b14:	64 30       	cpi	r22, 0x04	; 4
    1b16:	b8 f4       	brcc	.+46     	; 0x1b46 <MLDLCfgSamplingMPU+0x3e>
        {
                return MLDL_ERROR;
        }

        /*---- set sample rate clock divider ----*/
        MLDLSetRegisterMPU(MPUREG_SMPLRT_DIV, divider);
    1b18:	85 e1       	ldi	r24, 0x15	; 21
    1b1a:	64 2f       	mov	r22, r20
    1b1c:	0e 94 6f 0a 	call	0x14de	; 0x14de <MLDLSetRegisterMPU>
 *  @return value of register, or zero if not available.
 */
unsigned char MPUGetRegisterShadow(unsigned char reg)
{
        /*---- if valid, then return value ----*/
        if (mpuRegisterValid[reg])
    1b20:	80 91 fb 02 	lds	r24, 0x02FB
    1b24:	88 23       	and	r24, r24
    1b26:	11 f4       	brne	.+4      	; 0x1b2c <MLDLCfgSamplingMPU+0x24>
    1b28:	60 e0       	ldi	r22, 0x00	; 0
    1b2a:	02 c0       	rjmp	.+4      	; 0x1b30 <MLDLCfgSamplingMPU+0x28>
        {
                return (mpuRegister[reg]);
    1b2c:	60 91 dd 02 	lds	r22, 0x02DD
        /*---- set sample rate clock divider ----*/
        MLDLSetRegisterMPU(MPUREG_SMPLRT_DIV, divider);

        /*---- set low pass filter and full scale in 'DLPF_FS_SYNC' register ----*/
        b = MPUGetRegisterShadow(MPUREG_DLPF_FS_SYNC) & ~(BITS_FS_SEL | BITS_DLPF_CFG);
        b |= ((fullScale << 3) + lpf);
    1b30:	60 7e       	andi	r22, 0xE0	; 224
    1b32:	11 0f       	add	r17, r17
    1b34:	11 0f       	add	r17, r17
    1b36:	11 0f       	add	r17, r17
    1b38:	10 0f       	add	r17, r16
    1b3a:	61 2b       	or	r22, r17
        MLDLSetRegisterMPU(MPUREG_DLPF_FS_SYNC, b);
    1b3c:	86 e1       	ldi	r24, 0x16	; 22
    1b3e:	0e 94 6f 0a 	call	0x14de	; 0x14de <MLDLSetRegisterMPU>
    1b42:	80 e0       	ldi	r24, 0x00	; 0
    1b44:	01 c0       	rjmp	.+2      	; 0x1b48 <MLDLCfgSamplingMPU+0x40>

        return MLDL_SUCCESS;
    1b46:	81 e0       	ldi	r24, 0x01	; 1
}
    1b48:	1f 91       	pop	r17
    1b4a:	0f 91       	pop	r16
    1b4c:	08 95       	ret

00001b4e <MLDLCtrlDmp>:
 * @param   enableFIFO  Enables DMP output to the FIFO if set to TRUE.
 *
 * @return  Zero if the command is successful, an error code otherwise.
 **/
tMLError MLDLCtrlDmp(unsigned char enableRun, unsigned char enableFIFO, unsigned short startAddress)
{
    1b4e:	ff 92       	push	r15
    1b50:	0f 93       	push	r16
    1b52:	1f 93       	push	r17
    1b54:	08 2f       	mov	r16, r24
    1b56:	f6 2e       	mov	r15, r22
    1b58:	14 2f       	mov	r17, r20
        unsigned char b;

        mldlData.runDMP = enableRun; // save DMP run status
    1b5a:	80 93 da 02 	sts	0x02DA, r24

        /*==== FIRST LOAD DMP CFG 1 and DMP CFG 2 ====*/
        MLDLSetRegisterMPU(MPUREG_DMP_CFG_1, startAddress >> 8);
    1b5e:	85 e3       	ldi	r24, 0x35	; 53
    1b60:	65 2f       	mov	r22, r21
    1b62:	0e 94 6f 0a 	call	0x14de	; 0x14de <MLDLSetRegisterMPU>
        MLDLSetRegisterMPU(MPUREG_DMP_CFG_2, startAddress & 0xff);
    1b66:	86 e3       	ldi	r24, 0x36	; 54
    1b68:	61 2f       	mov	r22, r17
    1b6a:	0e 94 6f 0a 	call	0x14de	; 0x14de <MLDLSetRegisterMPU>
 *  @return value of register, or zero if not available.
 */
unsigned char MPUGetRegisterShadow(unsigned char reg)
{
        /*---- if valid, then return value ----*/
        if (mpuRegisterValid[reg])
    1b6e:	80 91 22 03 	lds	r24, 0x0322
    1b72:	88 23       	and	r24, r24
    1b74:	11 f0       	breq	.+4      	; 0x1b7a <MLDLCtrlDmp+0x2c>
        {
                return (mpuRegister[reg]);
    1b76:	80 91 04 03 	lds	r24, 0x0304

        /*==== NOW ENABLE/DISABLE DMP ====*/

        /*---- set 'DMP_EN' based on enable/disable ----*/
        b = MPUGetRegisterShadow(MPUREG_USER_CTRL);
        if (enableRun == DMP_RUN)
    1b7a:	01 30       	cpi	r16, 0x01	; 1
    1b7c:	11 f4       	brne	.+4      	; 0x1b82 <MLDLCtrlDmp+0x34>
        {
                b |= BIT_DMP_EN;
    1b7e:	80 68       	ori	r24, 0x80	; 128
    1b80:	01 c0       	rjmp	.+2      	; 0x1b84 <MLDLCtrlDmp+0x36>
        } else
        {
                b &= ~BIT_DMP_EN;
    1b82:	8f 77       	andi	r24, 0x7F	; 127
        }
        b |= BIT_DMP_RST; // always reset DMP
    1b84:	68 2f       	mov	r22, r24
    1b86:	64 60       	ori	r22, 0x04	; 4

        if (enableFIFO)
    1b88:	ff 20       	and	r15, r15
    1b8a:	11 f0       	breq	.+4      	; 0x1b90 <MLDLCtrlDmp+0x42>
        {
                b |= BIT_FIFO_EN;
    1b8c:	68 2f       	mov	r22, r24
    1b8e:	64 64       	ori	r22, 0x44	; 68
        }

        MLDLSetRegisterMPU(MPUREG_USER_CTRL, b);
    1b90:	8d e3       	ldi	r24, 0x3D	; 61
    1b92:	0e 94 6f 0a 	call	0x14de	; 0x14de <MLDLSetRegisterMPU>

        return ML_SUCCESS;
}
    1b96:	80 e0       	ldi	r24, 0x00	; 0
    1b98:	1f 91       	pop	r17
    1b9a:	0f 91       	pop	r16
    1b9c:	ff 90       	pop	r15
    1b9e:	08 95       	ret

00001ba0 <loadDMP>:
 * Loads DMP configuration
 * @param[in] buffer Buffer to Load
 * @param[in] startAddress location to start loading
 */
tMLError loadDMP(const MLU8 *buffer, unsigned short length, unsigned short startAddress)
{
    1ba0:	bf 92       	push	r11
    1ba2:	cf 92       	push	r12
    1ba4:	df 92       	push	r13
    1ba6:	ef 92       	push	r14
    1ba8:	ff 92       	push	r15
    1baa:	0f 93       	push	r16
    1bac:	1f 93       	push	r17
    1bae:	cf 93       	push	r28
    1bb0:	df 93       	push	r29
    1bb2:	6c 01       	movw	r12, r24
    1bb4:	7b 01       	movw	r14, r22
        tMLError result;
        unsigned short toWrite;
        unsigned short memAddr = 0;
#define MAX_LOAD_WRITE_SIZE 128

        result = MLDLCtrlDmp(DMP_DONTRUN, FALSE, startAddress);
    1bb6:	80 e0       	ldi	r24, 0x00	; 0
    1bb8:	60 e0       	ldi	r22, 0x00	; 0
    1bba:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <MLDLCtrlDmp>
    1bbe:	b8 2e       	mov	r11, r24
        if (result != ML_SUCCESS)
    1bc0:	88 23       	and	r24, r24
    1bc2:	e1 f4       	brne	.+56     	; 0x1bfc <loadDMP+0x5c>
    1bc4:	00 e0       	ldi	r16, 0x00	; 0
    1bc6:	10 e0       	ldi	r17, 0x00	; 0
    1bc8:	16 c0       	rjmp	.+44     	; 0x1bf6 <loadDMP+0x56>
    1bca:	e7 01       	movw	r28, r14
    1bcc:	81 e8       	ldi	r24, 0x81	; 129
    1bce:	e8 16       	cp	r14, r24
    1bd0:	f1 04       	cpc	r15, r1
    1bd2:	10 f0       	brcs	.+4      	; 0x1bd8 <loadDMP+0x38>
    1bd4:	c0 e8       	ldi	r28, 0x80	; 128
    1bd6:	d0 e0       	ldi	r29, 0x00	; 0
        {
                toWrite = length;
                if (toWrite > MAX_LOAD_WRITE_SIZE)
                        toWrite = MAX_LOAD_WRITE_SIZE;

                result = MLDLSetMemoryMPU_one_bank(memAddr >> 8, memAddr & 0xff, toWrite, buffer);
    1bd8:	b8 01       	movw	r22, r16
    1bda:	70 70       	andi	r23, 0x00	; 0
    1bdc:	81 2f       	mov	r24, r17
    1bde:	ae 01       	movw	r20, r28
    1be0:	96 01       	movw	r18, r12
    1be2:	0e 94 93 0a 	call	0x1526	; 0x1526 <MLDLSetMemoryMPU_one_bank>
                if (result != ML_SUCCESS)
    1be6:	88 23       	and	r24, r24
    1be8:	51 f4       	brne	.+20     	; 0x1bfe <loadDMP+0x5e>
                        return result;

                buffer += toWrite;
    1bea:	cc 0e       	add	r12, r28
    1bec:	dd 1e       	adc	r13, r29
                memAddr += toWrite;
    1bee:	0c 0f       	add	r16, r28
    1bf0:	1d 1f       	adc	r17, r29
                length -= toWrite;
    1bf2:	ec 1a       	sub	r14, r28
    1bf4:	fd 0a       	sbc	r15, r29

        result = MLDLCtrlDmp(DMP_DONTRUN, FALSE, startAddress);
        if (result != ML_SUCCESS)
                return result;

        while (length > 0)
    1bf6:	e1 14       	cp	r14, r1
    1bf8:	f1 04       	cpc	r15, r1
    1bfa:	39 f7       	brne	.-50     	; 0x1bca <loadDMP+0x2a>
    1bfc:	8b 2d       	mov	r24, r11
                buffer += toWrite;
                memAddr += toWrite;
                length -= toWrite;
        }
        return result;
}
    1bfe:	df 91       	pop	r29
    1c00:	cf 91       	pop	r28
    1c02:	1f 91       	pop	r17
    1c04:	0f 91       	pop	r16
    1c06:	ff 90       	pop	r15
    1c08:	ef 90       	pop	r14
    1c0a:	df 90       	pop	r13
    1c0c:	cf 90       	pop	r12
    1c0e:	bf 90       	pop	r11
    1c10:	08 95       	ret

00001c12 <MLDLDmpStart>:
 * @return ML_SUCCESS or non-zero error code
 */
tMLError MLDLDmpStart(void)
{
        unsigned short startAddress;
        MLDLResetDmp();
    1c12:	0e 94 07 0b 	call	0x160e	; 0x160e <MLDLResetDmp>
 *  @return value of register, or zero if not available.
 */
unsigned char MPUGetRegisterShadow(unsigned char reg)
{
        /*---- if valid, then return value ----*/
        if (mpuRegisterValid[reg])
    1c16:	80 91 1a 03 	lds	r24, 0x031A
    1c1a:	88 23       	and	r24, r24
    1c1c:	11 f4       	brne	.+4      	; 0x1c22 <MLDLDmpStart+0x10>
    1c1e:	20 e0       	ldi	r18, 0x00	; 0
    1c20:	02 c0       	rjmp	.+4      	; 0x1c26 <MLDLDmpStart+0x14>
        {
                return (mpuRegister[reg]);
    1c22:	20 91 fc 02 	lds	r18, 0x02FC
 *  @return value of register, or zero if not available.
 */
unsigned char MPUGetRegisterShadow(unsigned char reg)
{
        /*---- if valid, then return value ----*/
        if (mpuRegisterValid[reg])
    1c26:	80 91 1b 03 	lds	r24, 0x031B
    1c2a:	88 23       	and	r24, r24
    1c2c:	11 f4       	brne	.+4      	; 0x1c32 <MLDLDmpStart+0x20>
    1c2e:	40 e0       	ldi	r20, 0x00	; 0
    1c30:	02 c0       	rjmp	.+4      	; 0x1c36 <MLDLDmpStart+0x24>
        {
                return (mpuRegister[reg]);
    1c32:	40 91 fd 02 	lds	r20, 0x02FD
{
        unsigned short startAddress;
        MLDLResetDmp();
        startAddress = ((unsigned short) MPUGetRegisterShadow(MPUREG_DMP_CFG_1) << 8) | MPUGetRegisterShadow(MPUREG_DMP_CFG_2);

        return MLDLCtrlDmp(DMP_RUN, (mldlData.dataSource == DATASRC_FIFO), startAddress);
    1c36:	60 e0       	ldi	r22, 0x00	; 0
    1c38:	80 91 d0 02 	lds	r24, 0x02D0
    1c3c:	82 30       	cpi	r24, 0x02	; 2
    1c3e:	09 f4       	brne	.+2      	; 0x1c42 <MLDLDmpStart+0x30>
    1c40:	61 e0       	ldi	r22, 0x01	; 1
    1c42:	50 e0       	ldi	r21, 0x00	; 0
    1c44:	92 2f       	mov	r25, r18
    1c46:	80 e0       	ldi	r24, 0x00	; 0
    1c48:	48 2b       	or	r20, r24
    1c4a:	59 2b       	or	r21, r25
    1c4c:	81 e0       	ldi	r24, 0x01	; 1
    1c4e:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <MLDLCtrlDmp>
}
    1c52:	08 95       	ret

00001c54 <MLDLCfgHardware>:
 *  @param  serialInterface I2C or SPI. Can be one of SERIAL_I2C or SERIAL_SPI.
 *
 *  @return Zero if the command is successful, an error code otherwise
 **/
tMLError MLDLCfgHardware(unsigned char auxSlaveAddr, unsigned char mpuSlaveAddr, unsigned char serialInterface)
{
    1c54:	1f 93       	push	r17
    1c56:	18 2f       	mov	r17, r24
        mldlData.auxSlaveAddr = auxSlaveAddr;
    1c58:	80 93 cc 02 	sts	0x02CC, r24
        mldlData.mpuSlaveAddr = mpuSlaveAddr;
    1c5c:	60 93 cb 02 	sts	0x02CB, r22
        mldlData.serialInterface = serialInterface;
    1c60:	40 93 cd 02 	sts	0x02CD, r20

        /*---- power management operation ----*/
        MLDLPowerMgmtMPU(0, 0, 0, 0); // power up MPU (it is currently in sleep mode)
    1c64:	80 e0       	ldi	r24, 0x00	; 0
    1c66:	60 e0       	ldi	r22, 0x00	; 0
    1c68:	40 e0       	ldi	r20, 0x00	; 0
    1c6a:	20 e0       	ldi	r18, 0x00	; 0
    1c6c:	0e 94 c4 0c 	call	0x1988	; 0x1988 <MLDLPowerMgmtMPU>

        /*---- reset the MPU-3000 to make sure all settings are known ----*/
        MLDLSetRegisterMPU(MPUREG_PWR_MGM, BIT_H_RESET);
    1c70:	8e e3       	ldi	r24, 0x3E	; 62
    1c72:	60 e8       	ldi	r22, 0x80	; 128
    1c74:	0e 94 6f 0a 	call	0x14de	; 0x14de <MLDLSetRegisterMPU>
        /*---- set AUX slave address so that MPU can access device ----*/
        MLDLSetRegisterMPU(MPUREG_AUX_SLV_ADDR, auxSlaveAddr);
    1c78:	84 e1       	ldi	r24, 0x14	; 20
    1c7a:	61 2f       	mov	r22, r17
    1c7c:	0e 94 6f 0a 	call	0x14de	; 0x14de <MLDLSetRegisterMPU>
 *  @return value of register, or zero if not available.
 */
unsigned char MPUGetRegisterShadow(unsigned char reg)
{
        /*---- if valid, then return value ----*/
        if (mpuRegisterValid[reg])
    1c80:	80 91 22 03 	lds	r24, 0x0322
    1c84:	88 23       	and	r24, r24
    1c86:	11 f4       	brne	.+4      	; 0x1c8c <MLDLCfgHardware+0x38>
    1c88:	60 e0       	ldi	r22, 0x00	; 0
    1c8a:	02 c0       	rjmp	.+4      	; 0x1c90 <MLDLCfgHardware+0x3c>
        {
                return (mpuRegister[reg]);
    1c8c:	60 91 04 03 	lds	r22, 0x0304
        MLDLSetRegisterMPU(MPUREG_PWR_MGM, BIT_H_RESET);
        /*---- set AUX slave address so that MPU can access device ----*/
        MLDLSetRegisterMPU(MPUREG_AUX_SLV_ADDR, auxSlaveAddr);

        /*---- reset AUX interface to make slave address take effect ----*/
        MLDLSetRegisterMPU(MPUREG_USER_CTRL, (MPUGetRegisterShadow(MPUREG_USER_CTRL) | BIT_AUX_IF_RST));
    1c90:	68 60       	ori	r22, 0x08	; 8
    1c92:	8d e3       	ldi	r24, 0x3D	; 61
    1c94:	0e 94 6f 0a 	call	0x14de	; 0x14de <MLDLSetRegisterMPU>

        /*---- disable pass through ----*/
        if (auxSlaveAddr != INVALID_SLAVE_ADDR)
    1c98:	11 23       	and	r17, r17
    1c9a:	61 f0       	breq	.+24     	; 0x1cb4 <MLDLCfgHardware+0x60>
 *  @return value of register, or zero if not available.
 */
unsigned char MPUGetRegisterShadow(unsigned char reg)
{
        /*---- if valid, then return value ----*/
        if (mpuRegisterValid[reg])
    1c9c:	80 91 22 03 	lds	r24, 0x0322
    1ca0:	88 23       	and	r24, r24
    1ca2:	11 f4       	brne	.+4      	; 0x1ca8 <MLDLCfgHardware+0x54>
    1ca4:	60 e0       	ldi	r22, 0x00	; 0
    1ca6:	02 c0       	rjmp	.+4      	; 0x1cac <MLDLCfgHardware+0x58>
        {
                return (mpuRegister[reg]);
    1ca8:	60 91 04 03 	lds	r22, 0x0304
        MLDLSetRegisterMPU(MPUREG_USER_CTRL, (MPUGetRegisterShadow(MPUREG_USER_CTRL) | BIT_AUX_IF_RST));

        /*---- disable pass through ----*/
        if (auxSlaveAddr != INVALID_SLAVE_ADDR)
        {
                MLDLSetRegisterMPU(MPUREG_USER_CTRL, MPUGetRegisterShadow(MPUREG_USER_CTRL) | BIT_AUX_IF_EN);
    1cac:	60 62       	ori	r22, 0x20	; 32
    1cae:	8d e3       	ldi	r24, 0x3D	; 61
    1cb0:	0e 94 6f 0a 	call	0x14de	; 0x14de <MLDLSetRegisterMPU>
        }

        return ML_SUCCESS;
}
    1cb4:	80 e0       	ldi	r24, 0x00	; 0
    1cb6:	1f 91       	pop	r17
    1cb8:	08 95       	ret

00001cba <MLDLSetAuxParams>:
 *          no motion interrupt register and no motion mask.
 * @see     MLSetAuxSlaveAddr()
 * @param   auxSlaveAddr AUX slave address
 */
tMLError MLDLSetAuxParams(unsigned char auxSlaveAddr)
{
    1cba:	1f 93       	push	r17
    1cbc:	18 2f       	mov	r17, r24
        tMLError result;

        if (auxSlaveAddr != KIONIX_AUX_SLAVEADDR)
    1cbe:	8f 30       	cpi	r24, 0x0F	; 15
    1cc0:	11 f0       	breq	.+4      	; 0x1cc6 <MLDLSetAuxParams+0xc>
    1cc2:	81 e0       	ldi	r24, 0x01	; 1
    1cc4:	07 c0       	rjmp	.+14     	; 0x1cd4 <MLDLSetAuxParams+0x1a>
                return ML_ERROR; // Accelerometer not supported.

        result = MLDLSetRegisterMPU(MPUREG_AUX_SLV_ADDR, auxSlaveAddr);
    1cc6:	84 e1       	ldi	r24, 0x14	; 20
    1cc8:	6f e0       	ldi	r22, 0x0F	; 15
    1cca:	0e 94 6f 0a 	call	0x14de	; 0x14de <MLDLSetRegisterMPU>

        /*---- change INTERNAL record of aux slave address value ----*/
        mldlData.auxSlaveAddr = auxSlaveAddr;
    1cce:	10 93 cc 02 	sts	0x02CC, r17
    1cd2:	80 e0       	ldi	r24, 0x00	; 0

        return ML_SUCCESS;
}
    1cd4:	1f 91       	pop	r17
    1cd6:	08 95       	ret

00001cd8 <MLDLGetDMPData>:
 * @param          len     Length of the data buffer.
 *
 * @return  The amount of data read.
 */
unsigned short MLDLGetDMPData(unsigned char src, unsigned char *buffer, unsigned char len)
{
    1cd8:	bf 92       	push	r11
    1cda:	cf 92       	push	r12
    1cdc:	df 92       	push	r13
    1cde:	ef 92       	push	r14
    1ce0:	ff 92       	push	r15
    1ce2:	0f 93       	push	r16
    1ce4:	1f 93       	push	r17
    1ce6:	df 93       	push	r29
    1ce8:	cf 93       	push	r28
    1cea:	cd b7       	in	r28, 0x3d	; 61
    1cec:	de b7       	in	r29, 0x3e	; 62
    1cee:	cb 56       	subi	r28, 0x6B	; 107
    1cf0:	d0 40       	sbci	r29, 0x00	; 0
    1cf2:	0f b6       	in	r0, 0x3f	; 63
    1cf4:	f8 94       	cli
    1cf6:	de bf       	out	0x3e, r29	; 62
    1cf8:	0f be       	out	0x3f, r0	; 63
    1cfa:	cd bf       	out	0x3d, r28	; 61
    1cfc:	b8 2e       	mov	r11, r24
    1cfe:	d6 2e       	mov	r13, r22
    1d00:	c7 2e       	mov	r12, r23
    1d02:	14 2f       	mov	r17, r20
        unsigned short length;
        unsigned char regs[1] = { 1 };
    1d04:	81 e0       	ldi	r24, 0x01	; 1
    1d06:	89 83       	std	Y+1, r24	; 0x01
        tMLError result;
        unsigned short temp;
        int_fast8_t kk;

        /*---- make sure length is correct ----*/
        if (length > MAX_FIFO_LENGTH)
    1d08:	45 36       	cpi	r20, 0x65	; 101
    1d0a:	08 f0       	brcs	.+2      	; 0x1d0e <MLDLGetDMPData+0x36>
    1d0c:	5e c0       	rjmp	.+188    	; 0x1dca <MLDLGetDMPData+0xf2>
        {
                return 0;
        }

        result = MLDLGetFifoLength(&inFifo);
    1d0e:	ce 01       	movw	r24, r28
    1d10:	02 96       	adiw	r24, 0x02	; 2
    1d12:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <MLDLGetFifoLength>
        if (ML_SUCCESS != result)
    1d16:	88 23       	and	r24, r24
    1d18:	09 f0       	breq	.+2      	; 0x1d1c <MLDLGetDMPData+0x44>
    1d1a:	57 c0       	rjmp	.+174    	; 0x1dca <MLDLGetDMPData+0xf2>
        {
                return 0;
        }

        // mldlData.fifoCount is the footer size left in the buffer.
        if (inFifo < length + mldlData.fifoCount)
    1d1c:	41 2f       	mov	r20, r17
    1d1e:	50 e0       	ldi	r21, 0x00	; 0
    1d20:	60 91 dd 02 	lds	r22, 0x02DD
    1d24:	70 91 de 02 	lds	r23, 0x02DE
    1d28:	9a 01       	movw	r18, r20
    1d2a:	26 0f       	add	r18, r22
    1d2c:	37 1f       	adc	r19, r23
    1d2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d30:	9b 81       	ldd	r25, Y+3	; 0x03
    1d32:	82 17       	cp	r24, r18
    1d34:	93 07       	cpc	r25, r19
    1d36:	08 f4       	brcc	.+2      	; 0x1d3a <MLDLGetDMPData+0x62>
    1d38:	48 c0       	rjmp	.+144    	; 0x1dca <MLDLGetDMPData+0xf2>
                return 0;

        toRead = length - 2 + mldlData.fifoCount;
    1d3a:	8a 01       	movw	r16, r20
    1d3c:	02 50       	subi	r16, 0x02	; 2
    1d3e:	10 40       	sbci	r17, 0x00	; 0
        result = MLDLReadFifo(fifoBuf, toRead);
    1d40:	a6 e0       	ldi	r26, 0x06	; 6
    1d42:	ea 2e       	mov	r14, r26
    1d44:	f1 2c       	mov	r15, r1
    1d46:	ec 0e       	add	r14, r28
    1d48:	fd 1e       	adc	r15, r29
    1d4a:	60 0f       	add	r22, r16
    1d4c:	71 1f       	adc	r23, r17
    1d4e:	c7 01       	movw	r24, r14
    1d50:	0e 94 65 0b 	call	0x16ca	; 0x16ca <MLDLReadFifo>
        if (ML_SUCCESS != result)
    1d54:	88 23       	and	r24, r24
    1d56:	c9 f5       	brne	.+114    	; 0x1dca <MLDLGetDMPData+0xf2>
        {
                return 0;
        }
        result = MLDLGetFifoLength(&temp);
    1d58:	ce 01       	movw	r24, r28
    1d5a:	04 96       	adiw	r24, 0x04	; 4
    1d5c:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <MLDLGetFifoLength>

        /* Check the Footer value to give us a chance at making sure data
         * didn't get corrupted */
        for (kk = 0; kk < mldlData.fifoCount; ++kk)
    1d60:	60 91 dd 02 	lds	r22, 0x02DD
    1d64:	70 91 de 02 	lds	r23, 0x02DE
    1d68:	40 e0       	ldi	r20, 0x00	; 0
    1d6a:	50 e0       	ldi	r21, 0x00	; 0
    1d6c:	97 01       	movw	r18, r14
    1d6e:	15 c0       	rjmp	.+42     	; 0x1d9a <MLDLGetDMPData+0xc2>
        {
                if (fifoBuf[kk] != gFifoFooter[kk - 2])
    1d70:	f9 01       	movw	r30, r18
    1d72:	e4 0f       	add	r30, r20
    1d74:	f5 1f       	adc	r31, r21
    1d76:	90 81       	ld	r25, Z
    1d78:	fa 01       	movw	r30, r20
    1d7a:	ee 59       	subi	r30, 0x9E	; 158
    1d7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d7e:	80 81       	ld	r24, Z
    1d80:	4f 5f       	subi	r20, 0xFF	; 255
    1d82:	5f 4f       	sbci	r21, 0xFF	; 255
    1d84:	98 17       	cp	r25, r24
    1d86:	49 f0       	breq	.+18     	; 0x1d9a <MLDLGetDMPData+0xc2>
                {
                        MLDLResetDmp();
    1d88:	0e 94 07 0b 	call	0x160e	; 0x160e <MLDLResetDmp>
                        mldlData.fifoError = 1;
    1d8c:	81 e0       	ldi	r24, 0x01	; 1
    1d8e:	90 e0       	ldi	r25, 0x00	; 0
    1d90:	90 93 e2 02 	sts	0x02E2, r25
    1d94:	80 93 e1 02 	sts	0x02E1, r24
    1d98:	18 c0       	rjmp	.+48     	; 0x1dca <MLDLGetDMPData+0xf2>
        }
        result = MLDLGetFifoLength(&temp);

        /* Check the Footer value to give us a chance at making sure data
         * didn't get corrupted */
        for (kk = 0; kk < mldlData.fifoCount; ++kk)
    1d9a:	46 17       	cp	r20, r22
    1d9c:	57 07       	cpc	r21, r23
    1d9e:	44 f3       	brlt	.-48     	; 0x1d70 <MLDLGetDMPData+0x98>
                        return 0;
                }
        }

        /*---- copy data into result buffer ----*/
        memcpy(buffer, &fifoBuf[mldlData.fifoCount], length - 2);
    1da0:	26 0f       	add	r18, r22
    1da2:	37 1f       	adc	r19, r23
    1da4:	8d 2d       	mov	r24, r13
    1da6:	9c 2d       	mov	r25, r12
    1da8:	b9 01       	movw	r22, r18
    1daa:	a8 01       	movw	r20, r16
    1dac:	0e 94 50 3a 	call	0x74a0	; 0x74a0 <memcpy>

        if (mldlData.fifoCount == 0)
    1db0:	80 91 dd 02 	lds	r24, 0x02DD
    1db4:	90 91 de 02 	lds	r25, 0x02DE
    1db8:	89 2b       	or	r24, r25
    1dba:	49 f4       	brne	.+18     	; 0x1dce <MLDLGetDMPData+0xf6>
                mldlData.fifoCount = 2;
    1dbc:	82 e0       	ldi	r24, 0x02	; 2
    1dbe:	90 e0       	ldi	r25, 0x00	; 0
    1dc0:	90 93 de 02 	sts	0x02DE, r25
    1dc4:	80 93 dd 02 	sts	0x02DD, r24
    1dc8:	02 c0       	rjmp	.+4      	; 0x1dce <MLDLGetDMPData+0xf6>
    1dca:	00 e0       	ldi	r16, 0x00	; 0
    1dcc:	10 e0       	ldi	r17, 0x00	; 0
unsigned short MLDLGetDMPData(unsigned char src, unsigned char *buffer, unsigned char len)
{
        unsigned short length;
        unsigned char regs[1] = { 1 };
        length = MPUGetFIFO(len, buffer);
        if (src == DATASRC_FIFO)
    1dce:	82 e0       	ldi	r24, 0x02	; 2
    1dd0:	b8 16       	cp	r11, r24
    1dd2:	69 f0       	breq	.+26     	; 0x1dee <MLDLGetDMPData+0x116>
        {
        } else
        {
                if (MLDLSetMemoryMPU(KEY_D_1_179, 1, regs) != ML_SUCCESS)
    1dd4:	88 e2       	ldi	r24, 0x28	; 40
    1dd6:	90 e0       	ldi	r25, 0x00	; 0
    1dd8:	61 e0       	ldi	r22, 0x01	; 1
    1dda:	70 e0       	ldi	r23, 0x00	; 0
    1ddc:	ae 01       	movw	r20, r28
    1dde:	4f 5f       	subi	r20, 0xFF	; 255
    1de0:	5f 4f       	sbci	r21, 0xFF	; 255
    1de2:	0e 94 be 0a 	call	0x157c	; 0x157c <MLDLSetMemoryMPU>
    1de6:	88 23       	and	r24, r24
    1de8:	11 f0       	breq	.+4      	; 0x1dee <MLDLGetDMPData+0x116>
    1dea:	01 e0       	ldi	r16, 0x01	; 1
    1dec:	10 e0       	ldi	r17, 0x00	; 0
                        return ML_ERROR;
        }
        return length;
}
    1dee:	c8 01       	movw	r24, r16
    1df0:	c5 59       	subi	r28, 0x95	; 149
    1df2:	df 4f       	sbci	r29, 0xFF	; 255
    1df4:	0f b6       	in	r0, 0x3f	; 63
    1df6:	f8 94       	cli
    1df8:	de bf       	out	0x3e, r29	; 62
    1dfa:	0f be       	out	0x3f, r0	; 63
    1dfc:	cd bf       	out	0x3d, r28	; 61
    1dfe:	cf 91       	pop	r28
    1e00:	df 91       	pop	r29
    1e02:	1f 91       	pop	r17
    1e04:	0f 91       	pop	r16
    1e06:	ff 90       	pop	r15
    1e08:	ef 90       	pop	r14
    1e0a:	df 90       	pop	r13
    1e0c:	cf 90       	pop	r12
    1e0e:	bf 90       	pop	r11
    1e10:	08 95       	ret

00001e12 <MLDLInit>:
 *          an error code otherwise.
 */
tMLError MLDLInit(void)
{
        /*---- indicate that shadow registers are not valid ----*/
        memset(mpuRegisterValid, 0, NUM_OF_MPU_REGISTERS * sizeof(unsigned char));
    1e12:	80 e4       	ldi	r24, 0x40	; 64
    1e14:	e5 ee       	ldi	r30, 0xE5	; 229
    1e16:	f2 e0       	ldi	r31, 0x02	; 2
    1e18:	df 01       	movw	r26, r30
    1e1a:	1d 92       	st	X+, r1
    1e1c:	8a 95       	dec	r24
    1e1e:	e9 f7       	brne	.-6      	; 0x1e1a <MLDLInit+0x8>
        memset(auxRegisterValid, 0, NUM_OF_AUX_REGISTERS * sizeof(unsigned char));
    1e20:	10 92 c8 02 	sts	0x02C8, r1

        /*---- clear external interrupt status ----*/
        memset(mldlData.intTrigger, INT_CLEAR, NUM_OF_INTSOURCES * sizeof(unsigned char));
    1e24:	87 e0       	ldi	r24, 0x07	; 7
    1e26:	e3 ed       	ldi	r30, 0xD3	; 211
    1e28:	f2 e0       	ldi	r31, 0x02	; 2
    1e2a:	df 01       	movw	r26, r30
    1e2c:	1d 92       	st	X+, r1
    1e2e:	8a 95       	dec	r24
    1e30:	e9 f7       	brne	.-6      	; 0x1e2c <MLDLInit+0x1a>

        // fixme KIONIX_AUX_SLAVEADDR set multiple places
        MLDLCfgHardware(KIONIX_AUX_SLAVEADDR, DEFAULT_MPU_SLAVEADDR, SERIAL_I2C);
    1e32:	8f e0       	ldi	r24, 0x0F	; 15
    1e34:	68 e6       	ldi	r22, 0x68	; 104
    1e36:	40 e0       	ldi	r20, 0x00	; 0
    1e38:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <MLDLCfgHardware>

        // Configure Interrupt Status;
        return MLDLSetRegisterMPU(MPUREG_INT_CFG, MPUINT_DMP_DONE);
    1e3c:	87 e1       	ldi	r24, 0x17	; 23
    1e3e:	62 e0       	ldi	r22, 0x02	; 2
    1e40:	0e 94 6f 0a 	call	0x14de	; 0x14de <MLDLSetRegisterMPU>
}
    1e44:	08 95       	ret

00001e46 <MLControlUpdate>:
 *          Control engine outputs are written to the mlCtrlxData data 
 *          structure.
 * @return  error code.
 **/
tMLError MLControlUpdate(void)
{
    1e46:	2f 92       	push	r2
    1e48:	3f 92       	push	r3
    1e4a:	4f 92       	push	r4
    1e4c:	5f 92       	push	r5
    1e4e:	6f 92       	push	r6
    1e50:	7f 92       	push	r7
    1e52:	8f 92       	push	r8
    1e54:	9f 92       	push	r9
    1e56:	af 92       	push	r10
    1e58:	bf 92       	push	r11
    1e5a:	cf 92       	push	r12
    1e5c:	df 92       	push	r13
    1e5e:	ef 92       	push	r14
    1e60:	ff 92       	push	r15
    1e62:	0f 93       	push	r16
    1e64:	1f 93       	push	r17
    1e66:	df 93       	push	r29
    1e68:	cf 93       	push	r28
    1e6a:	cd b7       	in	r28, 0x3d	; 61
    1e6c:	de b7       	in	r29, 0x3e	; 62
    1e6e:	2d 97       	sbiw	r28, 0x0d	; 13
    1e70:	0f b6       	in	r0, 0x3f	; 63
    1e72:	f8 94       	cli
    1e74:	de bf       	out	0x3e, r29	; 62
    1e76:	0f be       	out	0x3f, r0	; 63
    1e78:	cd bf       	out	0x3d, r28	; 61

        unsigned char i;
        long gridTmp;
        long tmp;
        if ((mlxData.mlEngineMask & ML_CONTROL) && (mlxData.newData))
    1e7a:	80 91 e7 02 	lds	r24, 0x02E7
    1e7e:	86 ff       	sbrs	r24, 6
    1e80:	67 c1       	rjmp	.+718    	; 0x2150 <MLControlUpdate+0x30a>
    1e82:	80 91 c4 03 	lds	r24, 0x03C4
    1e86:	88 23       	and	r24, r24
    1e88:	09 f4       	brne	.+2      	; 0x1e8c <MLControlUpdate+0x46>
    1e8a:	62 c1       	rjmp	.+708    	; 0x2150 <MLControlUpdate+0x30a>
    1e8c:	51 ee       	ldi	r21, 0xE1	; 225
    1e8e:	c5 2e       	mov	r12, r21
    1e90:	53 e0       	ldi	r21, 0x03	; 3
    1e92:	d5 2e       	mov	r13, r21
    1e94:	44 ee       	ldi	r20, 0xE4	; 228
    1e96:	64 2e       	mov	r6, r20
    1e98:	4f ef       	ldi	r20, 0xFF	; 255
    1e9a:	74 2e       	mov	r7, r20
    1e9c:	6c 0c       	add	r6, r12
    1e9e:	7d 1c       	adc	r7, r13
    1ea0:	2d e9       	ldi	r18, 0x9D	; 157
    1ea2:	30 e0       	ldi	r19, 0x00	; 0
    1ea4:	3a 83       	std	Y+2, r19	; 0x02
    1ea6:	29 83       	std	Y+1, r18	; 0x01
    1ea8:	1c 82       	std	Y+4, r1	; 0x04
    1eaa:	1b 82       	std	Y+3, r1	; 0x03
        {
                for (i = 0; i < 4; i++)
                {
                        if (mlCtrlParams.functions & ML_GRID)
    1eac:	80 91 89 00 	lds	r24, 0x0089
    1eb0:	90 91 8a 00 	lds	r25, 0x008A
    1eb4:	80 ff       	sbrs	r24, 0
    1eb6:	31 c1       	rjmp	.+610    	; 0x211a <MLControlUpdate+0x2d4>
                        {
                                if (mlCtrlParams.functions & ML_HYSTERESIS)
    1eb8:	dc 01       	movw	r26, r24
    1eba:	a8 70       	andi	r26, 0x08	; 8
    1ebc:	b0 70       	andi	r27, 0x00	; 0
    1ebe:	b8 87       	std	Y+8, r27	; 0x08
    1ec0:	af 83       	std	Y+7, r26	; 0x07
    1ec2:	83 ff       	sbrs	r24, 3
    1ec4:	09 c0       	rjmp	.+18     	; 0x1ed8 <MLControlUpdate+0x92>
                                {
                                        mlCtrlxData.mlGridNumDMP[i] += mlCtrlxData.gridNumOffset[i];
    1ec6:	f6 01       	movw	r30, r12
    1ec8:	80 85       	ldd	r24, Z+8	; 0x08
    1eca:	91 85       	ldd	r25, Z+9	; 0x09
    1ecc:	20 89       	ldd	r18, Z+16	; 0x10
    1ece:	31 89       	ldd	r19, Z+17	; 0x11
    1ed0:	82 0f       	add	r24, r18
    1ed2:	93 1f       	adc	r25, r19
    1ed4:	91 87       	std	Z+9, r25	; 0x09
    1ed6:	80 87       	std	Z+8, r24	; 0x08
    1ed8:	fb 81       	ldd	r31, Y+3	; 0x03
    1eda:	f9 87       	std	Y+9, r31	; 0x09
                                }
                                mlCtrlxData.mlGridNumDMP[i] = mlCtrlxData.mlGridNumDMP[i] / 2 + 1073741824;
    1edc:	d6 01       	movw	r26, r12
    1ede:	18 96       	adiw	r26, 0x08	; 8
    1ee0:	8d 91       	ld	r24, X+
    1ee2:	9c 91       	ld	r25, X
    1ee4:	19 97       	sbiw	r26, 0x09	; 9
    1ee6:	62 e0       	ldi	r22, 0x02	; 2
    1ee8:	70 e0       	ldi	r23, 0x00	; 0
    1eea:	0e 94 94 38 	call	0x7128	; 0x7128 <__divmodhi4>
    1eee:	cb 01       	movw	r24, r22
    1ef0:	f6 01       	movw	r30, r12
    1ef2:	60 87       	std	Z+8, r22	; 0x08
    1ef4:	91 87       	std	Z+9, r25	; 0x09
                                mlCtrlxData.controlInt[i] = (mlCtrlxData.mlGridNumDMP[i] % (128 * mlCtrlParams.gridThreshold[i])) / 128;
    1ef6:	a9 81       	ldd	r26, Y+1	; 0x01
    1ef8:	ba 81       	ldd	r27, Y+2	; 0x02
    1efa:	2d 90       	ld	r2, X+
    1efc:	3c 90       	ld	r3, X
    1efe:	f1 01       	movw	r30, r2
    1f00:	f6 95       	lsr	r31
    1f02:	fe 2f       	mov	r31, r30
    1f04:	ee 27       	eor	r30, r30
    1f06:	f7 95       	ror	r31
    1f08:	e7 95       	ror	r30
    1f0a:	fe 83       	std	Y+6, r31	; 0x06
    1f0c:	ed 83       	std	Y+5, r30	; 0x05
    1f0e:	bf 01       	movw	r22, r30
    1f10:	0e 94 94 38 	call	0x7128	; 0x7128 <__divmodhi4>
    1f14:	60 e8       	ldi	r22, 0x80	; 128
    1f16:	70 e0       	ldi	r23, 0x00	; 0
    1f18:	0e 94 94 38 	call	0x7128	; 0x7128 <__divmodhi4>
    1f1c:	d3 01       	movw	r26, r6
    1f1e:	19 96       	adiw	r26, 0x09	; 9
    1f20:	7c 93       	st	X, r23
    1f22:	6e 93       	st	-X, r22
    1f24:	18 97       	sbiw	r26, 0x08	; 8
                                gridTmp = mlCtrlxData.mlGridNumDMP[i] / (128 * mlCtrlParams.gridThreshold[i]);
    1f26:	f6 01       	movw	r30, r12
    1f28:	80 85       	ldd	r24, Z+8	; 0x08
    1f2a:	91 85       	ldd	r25, Z+9	; 0x09
    1f2c:	6d 81       	ldd	r22, Y+5	; 0x05
    1f2e:	7e 81       	ldd	r23, Y+6	; 0x06
    1f30:	0e 94 94 38 	call	0x7128	; 0x7128 <__divmodhi4>
    1f34:	6a 87       	std	Y+10, r22	; 0x0a
    1f36:	7b 87       	std	Y+11, r23	; 0x0b
                                tmp = 1 + 16777216L / mlCtrlParams.gridThreshold[i];
    1f38:	91 01       	movw	r18, r2
    1f3a:	44 27       	eor	r20, r20
    1f3c:	37 fd       	sbrc	r19, 7
    1f3e:	40 95       	com	r20
    1f40:	54 2f       	mov	r21, r20
    1f42:	60 e0       	ldi	r22, 0x00	; 0
    1f44:	70 e0       	ldi	r23, 0x00	; 0
    1f46:	80 e0       	ldi	r24, 0x00	; 0
    1f48:	91 e0       	ldi	r25, 0x01	; 1
    1f4a:	0e 94 c9 38 	call	0x7192	; 0x7192 <__divmodsi4>
    1f4e:	79 01       	movw	r14, r18
    1f50:	8a 01       	movw	r16, r20
    1f52:	08 94       	sec
    1f54:	e1 1c       	adc	r14, r1
    1f56:	f1 1c       	adc	r15, r1
    1f58:	01 1d       	adc	r16, r1
    1f5a:	11 1d       	adc	r17, r1
                                mlCtrlxData.gridChange[i] = gridTmp - mlCtrlxData.lastGridNum[i];
    1f5c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f5e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f60:	9d 87       	std	Y+13, r25	; 0x0d
    1f62:	8c 87       	std	Y+12, r24	; 0x0c
    1f64:	d3 01       	movw	r26, r6
    1f66:	50 96       	adiw	r26, 0x10	; 16
    1f68:	4d 90       	ld	r4, X+
    1f6a:	5c 90       	ld	r5, X
    1f6c:	51 97       	sbiw	r26, 0x11	; 17
    1f6e:	84 19       	sub	r24, r4
    1f70:	95 09       	sbc	r25, r5
    1f72:	f6 01       	movw	r30, r12
    1f74:	91 83       	std	Z+1, r25	; 0x01
    1f76:	80 83       	st	Z, r24
                                if (mlCtrlxData.gridChange[i] > tmp / 2)
    1f78:	4c 01       	movw	r8, r24
    1f7a:	aa 24       	eor	r10, r10
    1f7c:	97 fc       	sbrc	r9, 7
    1f7e:	a0 94       	com	r10
    1f80:	ba 2c       	mov	r11, r10
    1f82:	c8 01       	movw	r24, r16
    1f84:	b7 01       	movw	r22, r14
    1f86:	22 e0       	ldi	r18, 0x02	; 2
    1f88:	30 e0       	ldi	r19, 0x00	; 0
    1f8a:	40 e0       	ldi	r20, 0x00	; 0
    1f8c:	50 e0       	ldi	r21, 0x00	; 0
    1f8e:	0e 94 c9 38 	call	0x7192	; 0x7192 <__divmodsi4>
    1f92:	28 15       	cp	r18, r8
    1f94:	39 05       	cpc	r19, r9
    1f96:	4a 05       	cpc	r20, r10
    1f98:	5b 05       	cpc	r21, r11
    1f9a:	54 f4       	brge	.+20     	; 0x1fb0 <MLControlUpdate+0x16a>
                                {
                                        mlCtrlxData.gridChange[i] = gridTmp - tmp - mlCtrlxData.lastGridNum[i];
    1f9c:	2c 85       	ldd	r18, Y+12	; 0x0c
    1f9e:	3d 85       	ldd	r19, Y+13	; 0x0d
    1fa0:	2e 19       	sub	r18, r14
    1fa2:	3f 09       	sbc	r19, r15
    1fa4:	24 19       	sub	r18, r4
    1fa6:	35 09       	sbc	r19, r5
    1fa8:	d6 01       	movw	r26, r12
    1faa:	2d 93       	st	X+, r18
    1fac:	3c 93       	st	X, r19
    1fae:	1d c0       	rjmp	.+58     	; 0x1fea <MLControlUpdate+0x1a4>
                                } else if (mlCtrlxData.gridChange[i] < -tmp / 2)
    1fb0:	c8 01       	movw	r24, r16
    1fb2:	b7 01       	movw	r22, r14
    1fb4:	22 e0       	ldi	r18, 0x02	; 2
    1fb6:	30 e0       	ldi	r19, 0x00	; 0
    1fb8:	40 e0       	ldi	r20, 0x00	; 0
    1fba:	50 e0       	ldi	r21, 0x00	; 0
    1fbc:	0e 94 c9 38 	call	0x7192	; 0x7192 <__divmodsi4>
    1fc0:	50 95       	com	r21
    1fc2:	40 95       	com	r20
    1fc4:	30 95       	com	r19
    1fc6:	21 95       	neg	r18
    1fc8:	3f 4f       	sbci	r19, 0xFF	; 255
    1fca:	4f 4f       	sbci	r20, 0xFF	; 255
    1fcc:	5f 4f       	sbci	r21, 0xFF	; 255
    1fce:	82 16       	cp	r8, r18
    1fd0:	93 06       	cpc	r9, r19
    1fd2:	a4 06       	cpc	r10, r20
    1fd4:	b5 06       	cpc	r11, r21
    1fd6:	4c f4       	brge	.+18     	; 0x1fea <MLControlUpdate+0x1a4>
                                {
                                        mlCtrlxData.gridChange[i] = gridTmp + tmp - mlCtrlxData.lastGridNum[i];
    1fd8:	ec 85       	ldd	r30, Y+12	; 0x0c
    1fda:	fd 85       	ldd	r31, Y+13	; 0x0d
    1fdc:	ee 0d       	add	r30, r14
    1fde:	ff 1d       	adc	r31, r15
    1fe0:	e4 19       	sub	r30, r4
    1fe2:	f5 09       	sbc	r31, r5
    1fe4:	d6 01       	movw	r26, r12
    1fe6:	ed 93       	st	X+, r30
    1fe8:	fc 93       	st	X, r31
                                }
                                if ((mlCtrlParams.functions & ML_HYSTERESIS) && (mlCtrlxData.gridChange[i] != 0))
    1fea:	ef 81       	ldd	r30, Y+7	; 0x07
    1fec:	f8 85       	ldd	r31, Y+8	; 0x08
    1fee:	ef 2b       	or	r30, r31
    1ff0:	d1 f1       	breq	.+116    	; 0x2066 <MLControlUpdate+0x220>
    1ff2:	d6 01       	movw	r26, r12
    1ff4:	8d 91       	ld	r24, X+
    1ff6:	9c 91       	ld	r25, X
    1ff8:	11 97       	sbiw	r26, 0x01	; 1
    1ffa:	00 97       	sbiw	r24, 0x00	; 0
    1ffc:	a1 f1       	breq	.+104    	; 0x2066 <MLControlUpdate+0x220>
                                {
                                        if (mlCtrlxData.gridChange[i] > 0)
    1ffe:	18 16       	cp	r1, r24
    2000:	19 06       	cpc	r1, r25
    2002:	b4 f4       	brge	.+44     	; 0x2030 <MLControlUpdate+0x1ea>
                                        {
                                                mlCtrlxData.gridNumOffset[i] += 128 * mlCtrlParams.gridThreshold[i];
    2004:	50 96       	adiw	r26, 0x10	; 16
    2006:	8d 91       	ld	r24, X+
    2008:	9c 91       	ld	r25, X
    200a:	51 97       	sbiw	r26, 0x11	; 17
    200c:	ed 81       	ldd	r30, Y+5	; 0x05
    200e:	fe 81       	ldd	r31, Y+6	; 0x06
    2010:	8e 0f       	add	r24, r30
    2012:	9f 1f       	adc	r25, r31
    2014:	51 96       	adiw	r26, 0x11	; 17
    2016:	9c 93       	st	X, r25
    2018:	8e 93       	st	-X, r24
    201a:	50 97       	sbiw	r26, 0x10	; 16
                                                mlCtrlxData.controlInt[i] = mlCtrlParams.gridThreshold[i] / 2;
    201c:	c1 01       	movw	r24, r2
    201e:	62 e0       	ldi	r22, 0x02	; 2
    2020:	70 e0       	ldi	r23, 0x00	; 0
    2022:	0e 94 94 38 	call	0x7128	; 0x7128 <__divmodhi4>
    2026:	d3 01       	movw	r26, r6
    2028:	19 96       	adiw	r26, 0x09	; 9
    202a:	7c 93       	st	X, r23
    202c:	6e 93       	st	-X, r22
    202e:	18 97       	sbiw	r26, 0x08	; 8
                                        }
                                        if (mlCtrlxData.gridChange[i] < 0)
    2030:	f6 01       	movw	r30, r12
    2032:	80 81       	ld	r24, Z
    2034:	91 81       	ldd	r25, Z+1	; 0x01
    2036:	97 ff       	sbrs	r25, 7
    2038:	16 c0       	rjmp	.+44     	; 0x2066 <MLControlUpdate+0x220>
                                        {
                                                mlCtrlxData.gridNumOffset[i] -= 128 * mlCtrlParams.gridThreshold[i];
    203a:	c1 01       	movw	r24, r2
    203c:	96 95       	lsr	r25
    203e:	98 2f       	mov	r25, r24
    2040:	88 27       	eor	r24, r24
    2042:	97 95       	ror	r25
    2044:	87 95       	ror	r24
    2046:	20 89       	ldd	r18, Z+16	; 0x10
    2048:	31 89       	ldd	r19, Z+17	; 0x11
    204a:	28 1b       	sub	r18, r24
    204c:	39 0b       	sbc	r19, r25
    204e:	31 8b       	std	Z+17, r19	; 0x11
    2050:	20 8b       	std	Z+16, r18	; 0x10
                                                mlCtrlxData.controlInt[i] = mlCtrlParams.gridThreshold[i] / 2;
    2052:	c1 01       	movw	r24, r2
    2054:	62 e0       	ldi	r22, 0x02	; 2
    2056:	70 e0       	ldi	r23, 0x00	; 0
    2058:	0e 94 94 38 	call	0x7128	; 0x7128 <__divmodhi4>
    205c:	d3 01       	movw	r26, r6
    205e:	19 96       	adiw	r26, 0x09	; 9
    2060:	7c 93       	st	X, r23
    2062:	6e 93       	st	-X, r22
    2064:	18 97       	sbiw	r26, 0x08	; 8
                                        }
                                }
                                mlCtrlxData.gridNum[i] += mlCtrlxData.gridChange[i];
    2066:	f6 01       	movw	r30, r12
    2068:	20 81       	ld	r18, Z
    206a:	31 81       	ldd	r19, Z+1	; 0x01
    206c:	d3 01       	movw	r26, r6
    206e:	8d 91       	ld	r24, X+
    2070:	9c 91       	ld	r25, X
    2072:	11 97       	sbiw	r26, 0x01	; 1
    2074:	28 0f       	add	r18, r24
    2076:	39 1f       	adc	r19, r25
    2078:	11 96       	adiw	r26, 0x01	; 1
    207a:	3c 93       	st	X, r19
    207c:	2e 93       	st	-X, r18
                                if (mlCtrlxData.gridNum[i] >= mlCtrlParams.gridMaximum[i])
    207e:	e9 81       	ldd	r30, Y+1	; 0x01
    2080:	fa 81       	ldd	r31, Y+2	; 0x02
    2082:	80 85       	ldd	r24, Z+8	; 0x08
    2084:	91 85       	ldd	r25, Z+9	; 0x09
    2086:	28 17       	cp	r18, r24
    2088:	39 07       	cpc	r19, r25
    208a:	a4 f0       	brlt	.+40     	; 0x20b4 <MLControlUpdate+0x26e>
                                {
                                        mlCtrlxData.gridNum[i] = mlCtrlParams.gridMaximum[i];
    208c:	8d 93       	st	X+, r24
    208e:	9c 93       	st	X, r25
                                        if (mlCtrlxData.controlInt[i] >= mlCtrlParams.gridThreshold[i] / 2)
    2090:	c1 01       	movw	r24, r2
    2092:	62 e0       	ldi	r22, 0x02	; 2
    2094:	70 e0       	ldi	r23, 0x00	; 0
    2096:	0e 94 94 38 	call	0x7128	; 0x7128 <__divmodhi4>
    209a:	d3 01       	movw	r26, r6
    209c:	18 96       	adiw	r26, 0x08	; 8
    209e:	8d 91       	ld	r24, X+
    20a0:	9c 91       	ld	r25, X
    20a2:	19 97       	sbiw	r26, 0x09	; 9
    20a4:	86 17       	cp	r24, r22
    20a6:	97 07       	cpc	r25, r23
    20a8:	bc f0       	brlt	.+46     	; 0x20d8 <MLControlUpdate+0x292>
                                        {
                                                mlCtrlxData.controlInt[i] = mlCtrlParams.gridThreshold[i] / 2;
    20aa:	19 96       	adiw	r26, 0x09	; 9
    20ac:	7c 93       	st	X, r23
    20ae:	6e 93       	st	-X, r22
    20b0:	18 97       	sbiw	r26, 0x08	; 8
    20b2:	12 c0       	rjmp	.+36     	; 0x20d8 <MLControlUpdate+0x292>
                                        }
                                } else if (mlCtrlxData.gridNum[i] <= 0)
    20b4:	12 16       	cp	r1, r18
    20b6:	13 06       	cpc	r1, r19
    20b8:	7c f0       	brlt	.+30     	; 0x20d8 <MLControlUpdate+0x292>
                                {
                                        mlCtrlxData.gridNum[i] = 0;
    20ba:	f3 01       	movw	r30, r6
    20bc:	11 82       	std	Z+1, r1	; 0x01
    20be:	10 82       	st	Z, r1
                                        if (mlCtrlxData.controlInt[i] < mlCtrlParams.gridThreshold[i] / 2)
    20c0:	c1 01       	movw	r24, r2
    20c2:	62 e0       	ldi	r22, 0x02	; 2
    20c4:	70 e0       	ldi	r23, 0x00	; 0
    20c6:	0e 94 94 38 	call	0x7128	; 0x7128 <__divmodhi4>
    20ca:	80 85       	ldd	r24, Z+8	; 0x08
    20cc:	91 85       	ldd	r25, Z+9	; 0x09
    20ce:	86 17       	cp	r24, r22
    20d0:	97 07       	cpc	r25, r23
    20d2:	14 f4       	brge	.+4      	; 0x20d8 <MLControlUpdate+0x292>
                                        {
                                                mlCtrlxData.controlInt[i] = mlCtrlParams.gridThreshold[i] / 2;
    20d4:	71 87       	std	Z+9, r23	; 0x09
    20d6:	60 87       	std	Z+8, r22	; 0x08
                                        }
                                }
                                mlCtrlxData.lastGridNum[i] = gridTmp;
    20d8:	ea 85       	ldd	r30, Y+10	; 0x0a
    20da:	d3 01       	movw	r26, r6
    20dc:	50 96       	adiw	r26, 0x10	; 16
    20de:	ec 93       	st	X, r30
    20e0:	50 97       	sbiw	r26, 0x10	; 16
    20e2:	fb 85       	ldd	r31, Y+11	; 0x0b
    20e4:	51 96       	adiw	r26, 0x11	; 17
    20e6:	fc 93       	st	X, r31
                                if ((mlCtrlParams.gridCallback) && (mlCtrlxData.gridChange[i] != 0))
    20e8:	e0 91 ad 00 	lds	r30, 0x00AD
    20ec:	f0 91 ae 00 	lds	r31, 0x00AE
    20f0:	30 97       	sbiw	r30, 0x00	; 0
    20f2:	d9 f0       	breq	.+54     	; 0x212a <MLControlUpdate+0x2e4>
    20f4:	d6 01       	movw	r26, r12
    20f6:	8d 91       	ld	r24, X+
    20f8:	9c 91       	ld	r25, X
    20fa:	89 2b       	or	r24, r25
    20fc:	b1 f0       	breq	.+44     	; 0x212a <MLControlUpdate+0x2e4>
                                {
                                        mlCtrlParams.gridCallback((ML_CONTROL_1 << i), mlCtrlxData.gridNum, mlCtrlxData.gridChange);
    20fe:	81 e0       	ldi	r24, 0x01	; 1
    2100:	90 e0       	ldi	r25, 0x00	; 0
    2102:	09 84       	ldd	r0, Y+9	; 0x09
    2104:	02 c0       	rjmp	.+4      	; 0x210a <MLControlUpdate+0x2c4>
    2106:	88 0f       	add	r24, r24
    2108:	99 1f       	adc	r25, r25
    210a:	0a 94       	dec	r0
    210c:	e2 f7       	brpl	.-8      	; 0x2106 <MLControlUpdate+0x2c0>
    210e:	65 ec       	ldi	r22, 0xC5	; 197
    2110:	73 e0       	ldi	r23, 0x03	; 3
    2112:	41 ee       	ldi	r20, 0xE1	; 225
    2114:	53 e0       	ldi	r21, 0x03	; 3
    2116:	09 95       	icall
    2118:	08 c0       	rjmp	.+16     	; 0x212a <MLControlUpdate+0x2e4>
                                }

                        } else
                        {
                                mlCtrlxData.controlInt[i] = mlCtrlxData.mlGridNumDMP[i];
    211a:	f6 01       	movw	r30, r12
    211c:	80 85       	ldd	r24, Z+8	; 0x08
    211e:	91 85       	ldd	r25, Z+9	; 0x09
    2120:	d3 01       	movw	r26, r6
    2122:	19 96       	adiw	r26, 0x09	; 9
    2124:	9c 93       	st	X, r25
    2126:	8e 93       	st	-X, r24
    2128:	18 97       	sbiw	r26, 0x08	; 8
    212a:	eb 81       	ldd	r30, Y+3	; 0x03
    212c:	fc 81       	ldd	r31, Y+4	; 0x04
    212e:	31 96       	adiw	r30, 0x01	; 1
    2130:	fc 83       	std	Y+4, r31	; 0x04
    2132:	eb 83       	std	Y+3, r30	; 0x03
    2134:	22 e0       	ldi	r18, 0x02	; 2
    2136:	30 e0       	ldi	r19, 0x00	; 0
    2138:	c2 0e       	add	r12, r18
    213a:	d3 1e       	adc	r13, r19
    213c:	62 0e       	add	r6, r18
    213e:	73 1e       	adc	r7, r19
    2140:	89 81       	ldd	r24, Y+1	; 0x01
    2142:	9a 81       	ldd	r25, Y+2	; 0x02
    2144:	02 96       	adiw	r24, 0x02	; 2
    2146:	9a 83       	std	Y+2, r25	; 0x02
    2148:	89 83       	std	Y+1, r24	; 0x01
        unsigned char i;
        long gridTmp;
        long tmp;
        if ((mlxData.mlEngineMask & ML_CONTROL) && (mlxData.newData))
        {
                for (i = 0; i < 4; i++)
    214a:	34 97       	sbiw	r30, 0x04	; 4
    214c:	09 f0       	breq	.+2      	; 0x2150 <MLControlUpdate+0x30a>
    214e:	ae ce       	rjmp	.-676    	; 0x1eac <MLControlUpdate+0x66>

                }
        }

        return ML_SUCCESS;
}
    2150:	80 e0       	ldi	r24, 0x00	; 0
    2152:	2d 96       	adiw	r28, 0x0d	; 13
    2154:	0f b6       	in	r0, 0x3f	; 63
    2156:	f8 94       	cli
    2158:	de bf       	out	0x3e, r29	; 62
    215a:	0f be       	out	0x3f, r0	; 63
    215c:	cd bf       	out	0x3d, r28	; 61
    215e:	cf 91       	pop	r28
    2160:	df 91       	pop	r29
    2162:	1f 91       	pop	r17
    2164:	0f 91       	pop	r16
    2166:	ff 90       	pop	r15
    2168:	ef 90       	pop	r14
    216a:	df 90       	pop	r13
    216c:	cf 90       	pop	r12
    216e:	bf 90       	pop	r11
    2170:	af 90       	pop	r10
    2172:	9f 90       	pop	r9
    2174:	8f 90       	pop	r8
    2176:	7f 90       	pop	r7
    2178:	6f 90       	pop	r6
    217a:	5f 90       	pop	r5
    217c:	4f 90       	pop	r4
    217e:	3f 90       	pop	r3
    2180:	2f 90       	pop	r2
    2182:	08 95       	ret

00002184 <MLXAccelInit>:
 * @param   auxSlaveAddr    AUX slave address
 **/
void MLXAccelInit(unsigned char auxSlaveAddr)
{

        if (auxSlaveAddr == KIONIX_AUX_SLAVEADDR)
    2184:	8f 30       	cpi	r24, 0x0F	; 15
    2186:	41 f4       	brne	.+16     	; 0x2198 <MLXAccelInit+0x14>
        {
                mlxData.mlAccelSens = (int) 65536;
    2188:	10 92 6d 03 	sts	0x036D, r1
    218c:	10 92 6e 03 	sts	0x036E, r1
    2190:	10 92 6f 03 	sts	0x036F, r1
    2194:	10 92 70 03 	sts	0x0370, r1
        }

        // Default assumes orientation the same as the gyros
        mlxData.mlAccelCal[0] = mlxData.mlAccelSens; // mlRotMatrix[0]
    2198:	80 91 6d 03 	lds	r24, 0x036D
    219c:	90 91 6e 03 	lds	r25, 0x036E
    21a0:	a0 91 6f 03 	lds	r26, 0x036F
    21a4:	b0 91 70 03 	lds	r27, 0x0370
    21a8:	80 93 01 03 	sts	0x0301, r24
    21ac:	90 93 02 03 	sts	0x0302, r25
    21b0:	a0 93 03 03 	sts	0x0303, r26
    21b4:	b0 93 04 03 	sts	0x0304, r27
        mlxData.mlAccelCal[4] = mlxData.mlAccelSens; // mlRotMatrix[4]
    21b8:	80 93 11 03 	sts	0x0311, r24
    21bc:	90 93 12 03 	sts	0x0312, r25
    21c0:	a0 93 13 03 	sts	0x0313, r26
    21c4:	b0 93 14 03 	sts	0x0314, r27
        mlxData.mlAccelCal[8] = mlxData.mlAccelSens; // mlRotMatrix[8]
    21c8:	80 93 21 03 	sts	0x0321, r24
    21cc:	90 93 22 03 	sts	0x0322, r25
    21d0:	a0 93 23 03 	sts	0x0323, r26
    21d4:	b0 93 24 03 	sts	0x0324, r27
}
    21d8:	08 95       	ret

000021da <MLUpdateBias>:
 *          Thus, ML_BIAS_FROM_NO_MOTION will not work if FIFO data is used.
 *
 * @return  Zero for success; ML error code on any failure.
 **/
unsigned char MLUpdateBias(void)
{
    21da:	2f 92       	push	r2
    21dc:	3f 92       	push	r3
    21de:	4f 92       	push	r4
    21e0:	5f 92       	push	r5
    21e2:	6f 92       	push	r6
    21e4:	7f 92       	push	r7
    21e6:	8f 92       	push	r8
    21e8:	9f 92       	push	r9
    21ea:	af 92       	push	r10
    21ec:	bf 92       	push	r11
    21ee:	cf 92       	push	r12
    21f0:	df 92       	push	r13
    21f2:	ef 92       	push	r14
    21f4:	ff 92       	push	r15
    21f6:	0f 93       	push	r16
    21f8:	1f 93       	push	r17
    21fa:	df 93       	push	r29
    21fc:	cf 93       	push	r28
    21fe:	cd b7       	in	r28, 0x3d	; 61
    2200:	de b7       	in	r29, 0x3e	; 62
    2202:	ec 97       	sbiw	r28, 0x3c	; 60
    2204:	0f b6       	in	r0, 0x3f	; 63
    2206:	f8 94       	cli
    2208:	de bf       	out	0x3e, r29	; 62
    220a:	0f be       	out	0x3f, r0	; 63
    220c:	cd bf       	out	0x3d, r28	; 61
        long biasTmp[3], biasTmp2[3];
        long biasPrev[3] = { 0 };
        extern tWriteBurst WriteBurst;
        extern tReadBurst ReadBurst;

        if (mlParams.biasUpdateFunc & ML_BIAS_FROM_NO_MOTION)
    220e:	80 91 66 00 	lds	r24, 0x0066
    2212:	80 fd       	sbrc	r24, 0
    2214:	02 c0       	rjmp	.+4      	; 0x221a <MLUpdateBias+0x40>
    2216:	80 e0       	ldi	r24, 0x00	; 0
    2218:	05 c2       	rjmp	.+1034   	; 0x2624 <MLUpdateBias+0x44a>
 **/
unsigned char MLUpdateBias(void)
{

        unsigned char i;
        unsigned char regs[12] = { 0 };
    221a:	ce 01       	movw	r24, r28
    221c:	01 96       	adiw	r24, 0x01	; 1
    221e:	9c af       	std	Y+60, r25	; 0x3c
    2220:	8b af       	std	Y+59, r24	; 0x3b
    2222:	8c e0       	ldi	r24, 0x0C	; 12
    2224:	ab ad       	ldd	r26, Y+59	; 0x3b
    2226:	bc ad       	ldd	r27, Y+60	; 0x3c
    2228:	1d 92       	st	X+, r1
    222a:	8a 95       	dec	r24
    222c:	e9 f7       	brne	.-6      	; 0x2228 <MLUpdateBias+0x4e>

        if (mlParams.biasUpdateFunc & ML_BIAS_FROM_NO_MOTION)
        {

                //Reset bias
                regs[0] = DINAA0 + 3;
    222e:	83 ea       	ldi	r24, 0xA3	; 163
    2230:	89 83       	std	Y+1, r24	; 0x01
                if (MLDLSetMemoryMPU(KEY_FCFG_6, 1, regs) != ML_SUCCESS)
    2232:	84 e0       	ldi	r24, 0x04	; 4
    2234:	90 e0       	ldi	r25, 0x00	; 0
    2236:	61 e0       	ldi	r22, 0x01	; 1
    2238:	70 e0       	ldi	r23, 0x00	; 0
    223a:	ae 01       	movw	r20, r28
    223c:	4f 5f       	subi	r20, 0xFF	; 255
    223e:	5f 4f       	sbci	r21, 0xFF	; 255
    2240:	0e 94 be 0a 	call	0x157c	; 0x157c <MLDLSetMemoryMPU>
    2244:	88 23       	and	r24, r24
    2246:	09 f0       	breq	.+2      	; 0x224a <MLUpdateBias+0x70>
    2248:	ec c1       	rjmp	.+984    	; 0x2622 <MLUpdateBias+0x448>
                        return ML_ERROR;

                if (MLDLGetMemoryMPU(KEY_D_1_244, 12, regs) != ML_SUCCESS)
    224a:	8a e2       	ldi	r24, 0x2A	; 42
    224c:	90 e0       	ldi	r25, 0x00	; 0
    224e:	6c e0       	ldi	r22, 0x0C	; 12
    2250:	70 e0       	ldi	r23, 0x00	; 0
    2252:	ae 01       	movw	r20, r28
    2254:	4f 5f       	subi	r20, 0xFF	; 255
    2256:	5f 4f       	sbci	r21, 0xFF	; 255
    2258:	0e 94 b4 0b 	call	0x1768	; 0x1768 <MLDLGetMemoryMPU>
    225c:	88 23       	and	r24, r24
    225e:	09 f0       	breq	.+2      	; 0x2262 <MLUpdateBias+0x88>
    2260:	e0 c1       	rjmp	.+960    	; 0x2622 <MLUpdateBias+0x448>
    2262:	1e 01       	movw	r2, r28
    2264:	08 94       	sec
    2266:	21 1c       	adc	r2, r1
    2268:	31 1c       	adc	r3, r1
    226a:	fe 01       	movw	r30, r28
    226c:	79 96       	adiw	r30, 0x19	; 25
    226e:	61 01       	movw	r12, r2
                        return ML_ERROR;

                for (i = 0; i < 3; i++)
    2270:	be 01       	movw	r22, r28
    2272:	63 5f       	subi	r22, 0xF3	; 243
    2274:	7f 4f       	sbci	r23, 0xFF	; 255
                {
                        biasTmp2[i] = (((long) regs[i * 4] << 24) + ((long) regs[i * 4 + 1] << 16) + ((long) regs[i * 4 + 2] << 8)
    2276:	d6 01       	movw	r26, r12
    2278:	2c 91       	ld	r18, X
    227a:	30 e0       	ldi	r19, 0x00	; 0
    227c:	40 e0       	ldi	r20, 0x00	; 0
    227e:	50 e0       	ldi	r21, 0x00	; 0
    2280:	52 2f       	mov	r21, r18
    2282:	44 27       	eor	r20, r20
    2284:	33 27       	eor	r19, r19
    2286:	22 27       	eor	r18, r18
    2288:	11 96       	adiw	r26, 0x01	; 1
    228a:	8c 91       	ld	r24, X
    228c:	90 e0       	ldi	r25, 0x00	; 0
    228e:	a0 e0       	ldi	r26, 0x00	; 0
    2290:	b0 e0       	ldi	r27, 0x00	; 0
    2292:	dc 01       	movw	r26, r24
    2294:	99 27       	eor	r25, r25
    2296:	88 27       	eor	r24, r24
    2298:	28 0f       	add	r18, r24
    229a:	39 1f       	adc	r19, r25
    229c:	4a 1f       	adc	r20, r26
    229e:	5b 1f       	adc	r21, r27
    22a0:	d6 01       	movw	r26, r12
    22a2:	13 96       	adiw	r26, 0x03	; 3
    22a4:	8c 91       	ld	r24, X
    22a6:	13 97       	sbiw	r26, 0x03	; 3
    22a8:	28 0f       	add	r18, r24
    22aa:	31 1d       	adc	r19, r1
    22ac:	41 1d       	adc	r20, r1
    22ae:	51 1d       	adc	r21, r1
    22b0:	12 96       	adiw	r26, 0x02	; 2
    22b2:	8c 91       	ld	r24, X
    22b4:	90 e0       	ldi	r25, 0x00	; 0
    22b6:	a0 e0       	ldi	r26, 0x00	; 0
    22b8:	b0 e0       	ldi	r27, 0x00	; 0
    22ba:	ba 2f       	mov	r27, r26
    22bc:	a9 2f       	mov	r26, r25
    22be:	98 2f       	mov	r25, r24
    22c0:	88 27       	eor	r24, r24
    22c2:	28 0f       	add	r18, r24
    22c4:	39 1f       	adc	r19, r25
    22c6:	4a 1f       	adc	r20, r26
    22c8:	5b 1f       	adc	r21, r27
    22ca:	21 93       	st	Z+, r18
    22cc:	31 93       	st	Z+, r19
    22ce:	41 93       	st	Z+, r20
    22d0:	51 93       	st	Z+, r21
    22d2:	84 e0       	ldi	r24, 0x04	; 4
    22d4:	90 e0       	ldi	r25, 0x00	; 0
    22d6:	c8 0e       	add	r12, r24
    22d8:	d9 1e       	adc	r13, r25
                        return ML_ERROR;

                if (MLDLGetMemoryMPU(KEY_D_1_244, 12, regs) != ML_SUCCESS)
                        return ML_ERROR;

                for (i = 0; i < 3; i++)
    22da:	c6 16       	cp	r12, r22
    22dc:	d7 06       	cpc	r13, r23
    22de:	59 f6       	brne	.-106    	; 0x2276 <MLUpdateBias+0x9c>
                                        + ((long) regs[i * 4 + 3]));
                }
                // Rotate bias vector by the transpose of the orientation matrix
                for (i = 0; i < 3; ++i)
                {
                        biasTmp[i] = (long) (biasTmp2[0] * (float) mlxData.mlGyroOrient[i] / (1L << 30) + biasTmp2[1]
    22e0:	69 8d       	ldd	r22, Y+25	; 0x19
    22e2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22e4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22e6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22e8:	0e 94 b0 36 	call	0x6d60	; 0x6d60 <__floatsisf>
    22ec:	6f ab       	std	Y+55, r22	; 0x37
    22ee:	78 af       	std	Y+56, r23	; 0x38
    22f0:	89 af       	std	Y+57, r24	; 0x39
    22f2:	9a af       	std	Y+58, r25	; 0x3a
    22f4:	6d 8d       	ldd	r22, Y+29	; 0x1d
    22f6:	7e 8d       	ldd	r23, Y+30	; 0x1e
    22f8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    22fa:	98 a1       	ldd	r25, Y+32	; 0x20
    22fc:	0e 94 b0 36 	call	0x6d60	; 0x6d60 <__floatsisf>
    2300:	6b ab       	std	Y+51, r22	; 0x33
    2302:	7c ab       	std	Y+52, r23	; 0x34
    2304:	8d ab       	std	Y+53, r24	; 0x35
    2306:	9e ab       	std	Y+54, r25	; 0x36
    2308:	69 a1       	ldd	r22, Y+33	; 0x21
    230a:	7a a1       	ldd	r23, Y+34	; 0x22
    230c:	8b a1       	ldd	r24, Y+35	; 0x23
    230e:	9c a1       	ldd	r25, Y+36	; 0x24
    2310:	0e 94 b0 36 	call	0x6d60	; 0x6d60 <__floatsisf>
    2314:	2b 01       	movw	r4, r22
    2316:	3c 01       	movw	r6, r24
    2318:	49 e4       	ldi	r20, 0x49	; 73
    231a:	a4 2e       	mov	r10, r20
    231c:	43 e0       	ldi	r20, 0x03	; 3
    231e:	b4 2e       	mov	r11, r20
    2320:	46 01       	movw	r8, r12
    2322:	da aa       	std	Y+50, r13	; 0x32
    2324:	c9 aa       	std	Y+49, r12	; 0x31
    2326:	d5 01       	movw	r26, r10
    2328:	6d 91       	ld	r22, X+
    232a:	7d 91       	ld	r23, X+
    232c:	8d 91       	ld	r24, X+
    232e:	9c 91       	ld	r25, X
    2330:	0e 94 b0 36 	call	0x6d60	; 0x6d60 <__floatsisf>
    2334:	9b 01       	movw	r18, r22
    2336:	ac 01       	movw	r20, r24
    2338:	6f a9       	ldd	r22, Y+55	; 0x37
    233a:	78 ad       	ldd	r23, Y+56	; 0x38
    233c:	89 ad       	ldd	r24, Y+57	; 0x39
    233e:	9a ad       	ldd	r25, Y+58	; 0x3a
    2340:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <__mulsf3>
    2344:	20 e0       	ldi	r18, 0x00	; 0
    2346:	30 e0       	ldi	r19, 0x00	; 0
    2348:	40 e8       	ldi	r20, 0x80	; 128
    234a:	50 e3       	ldi	r21, 0x30	; 48
    234c:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <__mulsf3>
    2350:	7b 01       	movw	r14, r22
    2352:	8c 01       	movw	r16, r24
    2354:	f5 01       	movw	r30, r10
    2356:	64 85       	ldd	r22, Z+12	; 0x0c
    2358:	75 85       	ldd	r23, Z+13	; 0x0d
    235a:	86 85       	ldd	r24, Z+14	; 0x0e
    235c:	97 85       	ldd	r25, Z+15	; 0x0f
    235e:	0e 94 b0 36 	call	0x6d60	; 0x6d60 <__floatsisf>
    2362:	9b 01       	movw	r18, r22
    2364:	ac 01       	movw	r20, r24
    2366:	6b a9       	ldd	r22, Y+51	; 0x33
    2368:	7c a9       	ldd	r23, Y+52	; 0x34
    236a:	8d a9       	ldd	r24, Y+53	; 0x35
    236c:	9e a9       	ldd	r25, Y+54	; 0x36
    236e:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <__mulsf3>
    2372:	20 e0       	ldi	r18, 0x00	; 0
    2374:	30 e0       	ldi	r19, 0x00	; 0
    2376:	40 e8       	ldi	r20, 0x80	; 128
    2378:	50 e3       	ldi	r21, 0x30	; 48
    237a:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <__mulsf3>
    237e:	9b 01       	movw	r18, r22
    2380:	ac 01       	movw	r20, r24
    2382:	c8 01       	movw	r24, r16
    2384:	b7 01       	movw	r22, r14
    2386:	0e 94 34 35 	call	0x6a68	; 0x6a68 <__addsf3>
    238a:	7b 01       	movw	r14, r22
    238c:	8c 01       	movw	r16, r24
    238e:	d5 01       	movw	r26, r10
    2390:	58 96       	adiw	r26, 0x18	; 24
    2392:	6d 91       	ld	r22, X+
    2394:	7d 91       	ld	r23, X+
    2396:	8d 91       	ld	r24, X+
    2398:	9c 91       	ld	r25, X
    239a:	5b 97       	sbiw	r26, 0x1b	; 27
    239c:	0e 94 b0 36 	call	0x6d60	; 0x6d60 <__floatsisf>
    23a0:	9b 01       	movw	r18, r22
    23a2:	ac 01       	movw	r20, r24
    23a4:	c3 01       	movw	r24, r6
    23a6:	b2 01       	movw	r22, r4
    23a8:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <__mulsf3>
    23ac:	20 e0       	ldi	r18, 0x00	; 0
    23ae:	30 e0       	ldi	r19, 0x00	; 0
    23b0:	40 e8       	ldi	r20, 0x80	; 128
    23b2:	50 e3       	ldi	r21, 0x30	; 48
    23b4:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <__mulsf3>
    23b8:	9b 01       	movw	r18, r22
    23ba:	ac 01       	movw	r20, r24
    23bc:	c8 01       	movw	r24, r16
    23be:	b7 01       	movw	r22, r14
    23c0:	0e 94 34 35 	call	0x6a68	; 0x6a68 <__addsf3>
    23c4:	0e 94 7d 36 	call	0x6cfa	; 0x6cfa <__fixsfsi>
    23c8:	e9 a9       	ldd	r30, Y+49	; 0x31
    23ca:	fa a9       	ldd	r31, Y+50	; 0x32
    23cc:	61 93       	st	Z+, r22
    23ce:	71 93       	st	Z+, r23
    23d0:	81 93       	st	Z+, r24
    23d2:	91 93       	st	Z+, r25
    23d4:	fa ab       	std	Y+50, r31	; 0x32
    23d6:	e9 ab       	std	Y+49, r30	; 0x31
    23d8:	84 e0       	ldi	r24, 0x04	; 4
    23da:	90 e0       	ldi	r25, 0x00	; 0
    23dc:	a8 0e       	add	r10, r24
    23de:	b9 1e       	adc	r11, r25
                {
                        biasTmp2[i] = (((long) regs[i * 4] << 24) + ((long) regs[i * 4 + 1] << 16) + ((long) regs[i * 4 + 2] << 8)
                                        + ((long) regs[i * 4 + 3]));
                }
                // Rotate bias vector by the transpose of the orientation matrix
                for (i = 0; i < 3; ++i)
    23e0:	95 e5       	ldi	r25, 0x55	; 85
    23e2:	a9 16       	cp	r10, r25
    23e4:	93 e0       	ldi	r25, 0x03	; 3
    23e6:	b9 06       	cpc	r11, r25
    23e8:	09 f0       	breq	.+2      	; 0x23ec <MLUpdateBias+0x212>
    23ea:	9d cf       	rjmp	.-198    	; 0x2326 <MLUpdateBias+0x14c>
                {
                        biasTmp[i] = (long) (biasTmp2[0] * (float) mlxData.mlGyroOrient[i] / (1L << 30) + biasTmp2[1]
                                        * (float) mlxData.mlGyroOrient[i + 3] / (1L << 30) + biasTmp2[2] * (float) mlxData.mlGyroOrient[i
                                        + 6] / (1L << 30));
                }
                regs[0] = DINAA0 + 15;
    23ec:	8f ea       	ldi	r24, 0xAF	; 175
    23ee:	89 83       	std	Y+1, r24	; 0x01
                if (MLDLSetMemoryMPU(KEY_FCFG_6, 1, regs) != ML_SUCCESS)
    23f0:	84 e0       	ldi	r24, 0x04	; 4
    23f2:	90 e0       	ldi	r25, 0x00	; 0
    23f4:	61 e0       	ldi	r22, 0x01	; 1
    23f6:	70 e0       	ldi	r23, 0x00	; 0
    23f8:	5e 01       	movw	r10, r28
    23fa:	08 94       	sec
    23fc:	a1 1c       	adc	r10, r1
    23fe:	b1 1c       	adc	r11, r1
    2400:	a5 01       	movw	r20, r10
    2402:	0e 94 be 0a 	call	0x157c	; 0x157c <MLDLSetMemoryMPU>
    2406:	88 23       	and	r24, r24
    2408:	09 f0       	breq	.+2      	; 0x240c <MLUpdateBias+0x232>
    240a:	0b c1       	rjmp	.+534    	; 0x2622 <MLUpdateBias+0x448>
{

        unsigned char i;
        unsigned char regs[12] = { 0 };
        long biasTmp[3], biasTmp2[3];
        long biasPrev[3] = { 0 };
    240c:	8e 01       	movw	r16, r28
    240e:	0b 5d       	subi	r16, 0xDB	; 219
    2410:	1f 4f       	sbci	r17, 0xFF	; 255
    2412:	8c e0       	ldi	r24, 0x0C	; 12
    2414:	d8 01       	movw	r26, r16
    2416:	1d 92       	st	X+, r1
    2418:	8a 95       	dec	r24
    241a:	e9 f7       	brne	.-6      	; 0x2416 <MLUpdateBias+0x23c>
                }
                regs[0] = DINAA0 + 15;
                if (MLDLSetMemoryMPU(KEY_FCFG_6, 1, regs) != ML_SUCCESS)
                        return ML_ERROR;

                ReadBurst(MLDLGetMPUSlaveAddr(), MPUREG_X_OFFS_USRH, 6, regs);
    241c:	e0 90 7e 00 	lds	r14, 0x007E
    2420:	f0 90 7f 00 	lds	r15, 0x007F
    2424:	0e 94 10 0a 	call	0x1420	; 0x1420 <MLDLGetMPUSlaveAddr>
    2428:	6c e0       	ldi	r22, 0x0C	; 12
    242a:	46 e0       	ldi	r20, 0x06	; 6
    242c:	50 e0       	ldi	r21, 0x00	; 0
    242e:	95 01       	movw	r18, r10
    2430:	f7 01       	movw	r30, r14
    2432:	09 95       	icall
    2434:	58 01       	movw	r10, r16
    2436:	86 01       	movw	r16, r12
    2438:	6e 01       	movw	r12, r28
    243a:	08 94       	sec
    243c:	c1 1c       	adc	r12, r1
    243e:	d1 1c       	adc	r13, r1
    2440:	75 01       	movw	r14, r10

                for (i = 0; i < 3; i++)
    2442:	39 e1       	ldi	r19, 0x19	; 25
    2444:	63 2e       	mov	r6, r19
    2446:	71 2c       	mov	r7, r1
    2448:	6c 0e       	add	r6, r28
    244a:	7d 1e       	adc	r7, r29
                {
                        biasTmp[i] /= 1430;
    244c:	f8 01       	movw	r30, r16
    244e:	60 81       	ld	r22, Z
    2450:	71 81       	ldd	r23, Z+1	; 0x01
    2452:	82 81       	ldd	r24, Z+2	; 0x02
    2454:	93 81       	ldd	r25, Z+3	; 0x03
    2456:	26 e9       	ldi	r18, 0x96	; 150
    2458:	35 e0       	ldi	r19, 0x05	; 5
    245a:	40 e0       	ldi	r20, 0x00	; 0
    245c:	50 e0       	ldi	r21, 0x00	; 0
    245e:	0e 94 c9 38 	call	0x7192	; 0x7192 <__divmodsi4>
    2462:	d8 01       	movw	r26, r16
    2464:	2d 93       	st	X+, r18
    2466:	3d 93       	st	X+, r19
    2468:	4d 93       	st	X+, r20
    246a:	5c 93       	st	X, r21
    246c:	13 97       	sbiw	r26, 0x03	; 3
                        biasPrev[i] = (long) regs[2 * i] * 256 + (long) regs[2 * i + 1];
    246e:	f6 01       	movw	r30, r12
    2470:	80 81       	ld	r24, Z
    2472:	90 e0       	ldi	r25, 0x00	; 0
    2474:	a0 e0       	ldi	r26, 0x00	; 0
    2476:	b0 e0       	ldi	r27, 0x00	; 0
    2478:	22 27       	eor	r18, r18
    247a:	38 2f       	mov	r19, r24
    247c:	49 2f       	mov	r20, r25
    247e:	5a 2f       	mov	r21, r26
    2480:	81 81       	ldd	r24, Z+1	; 0x01
    2482:	28 0f       	add	r18, r24
    2484:	31 1d       	adc	r19, r1
    2486:	41 1d       	adc	r20, r1
    2488:	51 1d       	adc	r21, r1
    248a:	d7 01       	movw	r26, r14
    248c:	2d 93       	st	X+, r18
    248e:	3d 93       	st	X+, r19
    2490:	4d 93       	st	X+, r20
    2492:	5c 93       	st	X, r21
    2494:	13 97       	sbiw	r26, 0x03	; 3
                        if (biasPrev[i] > 32767)
    2496:	20 30       	cpi	r18, 0x00	; 0
    2498:	b0 e8       	ldi	r27, 0x80	; 128
    249a:	3b 07       	cpc	r19, r27
    249c:	b0 e0       	ldi	r27, 0x00	; 0
    249e:	4b 07       	cpc	r20, r27
    24a0:	b0 e0       	ldi	r27, 0x00	; 0
    24a2:	5b 07       	cpc	r21, r27
    24a4:	4c f0       	brlt	.+18     	; 0x24b8 <MLUpdateBias+0x2de>
                                biasPrev[i] -= 65536L;
    24a6:	20 50       	subi	r18, 0x00	; 0
    24a8:	30 40       	sbci	r19, 0x00	; 0
    24aa:	41 40       	sbci	r20, 0x01	; 1
    24ac:	50 40       	sbci	r21, 0x00	; 0
    24ae:	f7 01       	movw	r30, r14
    24b0:	20 83       	st	Z, r18
    24b2:	31 83       	std	Z+1, r19	; 0x01
    24b4:	42 83       	std	Z+2, r20	; 0x02
    24b6:	53 83       	std	Z+3, r21	; 0x03
    24b8:	0c 5f       	subi	r16, 0xFC	; 252
    24ba:	1f 4f       	sbci	r17, 0xFF	; 255
    24bc:	82 e0       	ldi	r24, 0x02	; 2
    24be:	90 e0       	ldi	r25, 0x00	; 0
    24c0:	c8 0e       	add	r12, r24
    24c2:	d9 1e       	adc	r13, r25
    24c4:	a4 e0       	ldi	r26, 0x04	; 4
    24c6:	b0 e0       	ldi	r27, 0x00	; 0
    24c8:	ea 0e       	add	r14, r26
    24ca:	fb 1e       	adc	r15, r27
                if (MLDLSetMemoryMPU(KEY_FCFG_6, 1, regs) != ML_SUCCESS)
                        return ML_ERROR;

                ReadBurst(MLDLGetMPUSlaveAddr(), MPUREG_X_OFFS_USRH, 6, regs);

                for (i = 0; i < 3; i++)
    24cc:	06 15       	cp	r16, r6
    24ce:	17 05       	cpc	r17, r7
    24d0:	09 f0       	breq	.+2      	; 0x24d4 <MLUpdateBias+0x2fa>
    24d2:	bc cf       	rjmp	.-136    	; 0x244c <MLUpdateBias+0x272>
    24d4:	79 ee       	ldi	r23, 0xE9	; 233
    24d6:	c7 2e       	mov	r12, r23
    24d8:	72 e0       	ldi	r23, 0x02	; 2
    24da:	d7 2e       	mov	r13, r23
                        biasTmp[i] /= 1430;
                        biasPrev[i] = (long) regs[2 * i] * 256 + (long) regs[2 * i + 1];
                        if (biasPrev[i] > 32767)
                                biasPrev[i] -= 65536L;
                }
                for (i = 0; i < 3; i++)
    24dc:	61 e3       	ldi	r22, 0x31	; 49
    24de:	66 2e       	mov	r6, r22
    24e0:	71 2c       	mov	r7, r1
    24e2:	6c 0e       	add	r6, r28
    24e4:	7d 1e       	adc	r7, r29
                {
                        biasTmp[i] = biasPrev[i] - biasTmp[i];
    24e6:	f5 01       	movw	r30, r10
    24e8:	e0 80       	ld	r14, Z
    24ea:	f1 80       	ldd	r15, Z+1	; 0x01
    24ec:	02 81       	ldd	r16, Z+2	; 0x02
    24ee:	13 81       	ldd	r17, Z+3	; 0x03
    24f0:	f4 01       	movw	r30, r8
    24f2:	80 81       	ld	r24, Z
    24f4:	91 81       	ldd	r25, Z+1	; 0x01
    24f6:	a2 81       	ldd	r26, Z+2	; 0x02
    24f8:	b3 81       	ldd	r27, Z+3	; 0x03
    24fa:	e8 1a       	sub	r14, r24
    24fc:	f9 0a       	sbc	r15, r25
    24fe:	0a 0b       	sbc	r16, r26
    2500:	1b 0b       	sbc	r17, r27
    2502:	d4 01       	movw	r26, r8
    2504:	ed 92       	st	X+, r14
    2506:	fd 92       	st	X+, r15
    2508:	0d 93       	st	X+, r16
    250a:	1c 93       	st	X, r17
    250c:	13 97       	sbiw	r26, 0x03	; 3
                        mlxData.mlBias[i] = -biasTmp[i] * 2000;
    250e:	c8 01       	movw	r24, r16
    2510:	b7 01       	movw	r22, r14
    2512:	20 e3       	ldi	r18, 0x30	; 48
    2514:	38 ef       	ldi	r19, 0xF8	; 248
    2516:	4f ef       	ldi	r20, 0xFF	; 255
    2518:	5f ef       	ldi	r21, 0xFF	; 255
    251a:	0e 94 75 38 	call	0x70ea	; 0x70ea <__mulsi3>
    251e:	f6 01       	movw	r30, r12
    2520:	60 83       	st	Z, r22
    2522:	71 83       	std	Z+1, r23	; 0x01
    2524:	82 83       	std	Z+2, r24	; 0x02
    2526:	93 83       	std	Z+3, r25	; 0x03
                        if (biasTmp[i] < 0)
    2528:	17 ff       	sbrs	r17, 7
    252a:	0e c0       	rjmp	.+28     	; 0x2548 <MLUpdateBias+0x36e>
                                biasTmp[i] += 65536;
    252c:	80 e0       	ldi	r24, 0x00	; 0
    252e:	90 e0       	ldi	r25, 0x00	; 0
    2530:	a1 e0       	ldi	r26, 0x01	; 1
    2532:	b0 e0       	ldi	r27, 0x00	; 0
    2534:	e8 0e       	add	r14, r24
    2536:	f9 1e       	adc	r15, r25
    2538:	0a 1f       	adc	r16, r26
    253a:	1b 1f       	adc	r17, r27
    253c:	d4 01       	movw	r26, r8
    253e:	ed 92       	st	X+, r14
    2540:	fd 92       	st	X+, r15
    2542:	0d 93       	st	X+, r16
    2544:	1c 93       	st	X, r17
    2546:	13 97       	sbiw	r26, 0x03	; 3
                        regs[2 * i] = (unsigned char) (biasTmp[i] / 256);
    2548:	f4 01       	movw	r30, r8
    254a:	e1 90       	ld	r14, Z+
    254c:	f1 90       	ld	r15, Z+
    254e:	01 91       	ld	r16, Z+
    2550:	11 91       	ld	r17, Z+
    2552:	4f 01       	movw	r8, r30
    2554:	c8 01       	movw	r24, r16
    2556:	b7 01       	movw	r22, r14
    2558:	20 e0       	ldi	r18, 0x00	; 0
    255a:	31 e0       	ldi	r19, 0x01	; 1
    255c:	40 e0       	ldi	r20, 0x00	; 0
    255e:	50 e0       	ldi	r21, 0x00	; 0
    2560:	0e 94 c9 38 	call	0x7192	; 0x7192 <__divmodsi4>
    2564:	d1 01       	movw	r26, r2
    2566:	2c 93       	st	X, r18
                        regs[2 * i + 1] = (unsigned char) (biasTmp[i] % 256);
    2568:	c8 01       	movw	r24, r16
    256a:	b7 01       	movw	r22, r14
    256c:	20 e0       	ldi	r18, 0x00	; 0
    256e:	31 e0       	ldi	r19, 0x01	; 1
    2570:	40 e0       	ldi	r20, 0x00	; 0
    2572:	50 e0       	ldi	r21, 0x00	; 0
    2574:	0e 94 c9 38 	call	0x7192	; 0x7192 <__divmodsi4>
    2578:	f1 01       	movw	r30, r2
    257a:	61 83       	std	Z+1, r22	; 0x01
    257c:	84 e0       	ldi	r24, 0x04	; 4
    257e:	90 e0       	ldi	r25, 0x00	; 0
    2580:	a8 0e       	add	r10, r24
    2582:	b9 1e       	adc	r11, r25
    2584:	c8 0e       	add	r12, r24
    2586:	d9 1e       	adc	r13, r25
    2588:	a2 e0       	ldi	r26, 0x02	; 2
    258a:	b0 e0       	ldi	r27, 0x00	; 0
    258c:	2a 0e       	add	r2, r26
    258e:	3b 1e       	adc	r3, r27
                        biasTmp[i] /= 1430;
                        biasPrev[i] = (long) regs[2 * i] * 256 + (long) regs[2 * i + 1];
                        if (biasPrev[i] > 32767)
                                biasPrev[i] -= 65536L;
                }
                for (i = 0; i < 3; i++)
    2590:	a6 14       	cp	r10, r6
    2592:	b7 04       	cpc	r11, r7
    2594:	09 f0       	breq	.+2      	; 0x2598 <MLUpdateBias+0x3be>
    2596:	a7 cf       	rjmp	.-178    	; 0x24e6 <MLUpdateBias+0x30c>
                        if (biasTmp[i] < 0)
                                biasTmp[i] += 65536;
                        regs[2 * i] = (unsigned char) (biasTmp[i] / 256);
                        regs[2 * i + 1] = (unsigned char) (biasTmp[i] % 256);
                }
                biasTmp[0] = 0;
    2598:	1d 86       	std	Y+13, r1	; 0x0d
    259a:	1e 86       	std	Y+14, r1	; 0x0e
    259c:	1f 86       	std	Y+15, r1	; 0x0f
    259e:	18 8a       	std	Y+16, r1	; 0x10
                biasTmp[1] = 0;
    25a0:	19 8a       	std	Y+17, r1	; 0x11
    25a2:	1a 8a       	std	Y+18, r1	; 0x12
    25a4:	1b 8a       	std	Y+19, r1	; 0x13
    25a6:	1c 8a       	std	Y+20, r1	; 0x14
                biasTmp[2] = 0;
    25a8:	1d 8a       	std	Y+21, r1	; 0x15
    25aa:	1e 8a       	std	Y+22, r1	; 0x16
    25ac:	1f 8a       	std	Y+23, r1	; 0x17
    25ae:	18 8e       	std	Y+24, r1	; 0x18
                if (MLDLSetMemoryMPU(KEY_D_0_36, 12, (unsigned char*) biasTmp) != ML_SUCCESS)
    25b0:	8e 01       	movw	r16, r28
    25b2:	03 5f       	subi	r16, 0xF3	; 243
    25b4:	1f 4f       	sbci	r17, 0xFF	; 255
    25b6:	8a e1       	ldi	r24, 0x1A	; 26
    25b8:	90 e0       	ldi	r25, 0x00	; 0
    25ba:	6c e0       	ldi	r22, 0x0C	; 12
    25bc:	70 e0       	ldi	r23, 0x00	; 0
    25be:	a8 01       	movw	r20, r16
    25c0:	0e 94 be 0a 	call	0x157c	; 0x157c <MLDLSetMemoryMPU>
    25c4:	88 23       	and	r24, r24
    25c6:	69 f5       	brne	.+90     	; 0x2622 <MLUpdateBias+0x448>
                        return ML_ERROR;
                if (MLDLSetMemoryMPU(KEY_D_0_52, 12, (unsigned char*) biasTmp) != ML_SUCCESS)
    25c8:	8b e1       	ldi	r24, 0x1B	; 27
    25ca:	90 e0       	ldi	r25, 0x00	; 0
    25cc:	6c e0       	ldi	r22, 0x0C	; 12
    25ce:	70 e0       	ldi	r23, 0x00	; 0
    25d0:	a8 01       	movw	r20, r16
    25d2:	0e 94 be 0a 	call	0x157c	; 0x157c <MLDLSetMemoryMPU>
    25d6:	88 23       	and	r24, r24
    25d8:	21 f5       	brne	.+72     	; 0x2622 <MLUpdateBias+0x448>
                        return ML_ERROR;
                WriteBurst(MLDLGetMPUSlaveAddr(), MPUREG_X_OFFS_USRH, 6, regs);
    25da:	00 91 7c 00 	lds	r16, 0x007C
    25de:	10 91 7d 00 	lds	r17, 0x007D
    25e2:	0e 94 10 0a 	call	0x1420	; 0x1420 <MLDLGetMPUSlaveAddr>
    25e6:	6c e0       	ldi	r22, 0x0C	; 12
    25e8:	46 e0       	ldi	r20, 0x06	; 6
    25ea:	50 e0       	ldi	r21, 0x00	; 0
    25ec:	7e 01       	movw	r14, r28
    25ee:	08 94       	sec
    25f0:	e1 1c       	adc	r14, r1
    25f2:	f1 1c       	adc	r15, r1
    25f4:	97 01       	movw	r18, r14
    25f6:	f8 01       	movw	r30, r16
    25f8:	09 95       	icall
                ReadBurst(MLDLGetMPUSlaveAddr(), MPUREG_TEMP_OUT_H, 2, regs);
    25fa:	00 91 7e 00 	lds	r16, 0x007E
    25fe:	10 91 7f 00 	lds	r17, 0x007F
    2602:	0e 94 10 0a 	call	0x1420	; 0x1420 <MLDLGetMPUSlaveAddr>
    2606:	6b e1       	ldi	r22, 0x1B	; 27
    2608:	42 e0       	ldi	r20, 0x02	; 2
    260a:	50 e0       	ldi	r21, 0x00	; 0
    260c:	97 01       	movw	r18, r14
    260e:	f8 01       	movw	r30, r16
    2610:	09 95       	icall
                if (MLDLSetMemoryMPU(KEY_DMP_PREVPTAT, 2, regs) != ML_SUCCESS)
    2612:	84 e2       	ldi	r24, 0x24	; 36
    2614:	90 e0       	ldi	r25, 0x00	; 0
    2616:	62 e0       	ldi	r22, 0x02	; 2
    2618:	70 e0       	ldi	r23, 0x00	; 0
    261a:	a7 01       	movw	r20, r14
    261c:	0e 94 be 0a 	call	0x157c	; 0x157c <MLDLSetMemoryMPU>
    2620:	81 11       	cpse	r24, r1
    2622:	81 e0       	ldi	r24, 0x01	; 1
                        return ML_ERROR;
        }
        return ML_SUCCESS;
}
    2624:	ec 96       	adiw	r28, 0x3c	; 60
    2626:	0f b6       	in	r0, 0x3f	; 63
    2628:	f8 94       	cli
    262a:	de bf       	out	0x3e, r29	; 62
    262c:	0f be       	out	0x3f, r0	; 63
    262e:	cd bf       	out	0x3d, r28	; 61
    2630:	cf 91       	pop	r28
    2632:	df 91       	pop	r29
    2634:	1f 91       	pop	r17
    2636:	0f 91       	pop	r16
    2638:	ff 90       	pop	r15
    263a:	ef 90       	pop	r14
    263c:	df 90       	pop	r13
    263e:	cf 90       	pop	r12
    2640:	bf 90       	pop	r11
    2642:	af 90       	pop	r10
    2644:	9f 90       	pop	r9
    2646:	8f 90       	pop	r8
    2648:	7f 90       	pop	r7
    264a:	6f 90       	pop	r6
    264c:	5f 90       	pop	r5
    264e:	4f 90       	pop	r4
    2650:	3f 90       	pop	r3
    2652:	2f 90       	pop	r2
    2654:	08 95       	ret

00002656 <MLPollMotionStatus>:
 *          This function can be called periodically to check for the 
 *          'no motion' state and update the internal motion status and bias 
 *          calculations.
 **/
tMLError MLPollMotionStatus(void)
{
    2656:	0f 93       	push	r16
    2658:	1f 93       	push	r17
    265a:	df 93       	push	r29
    265c:	cf 93       	push	r28
    265e:	00 d0       	rcall	.+0      	; 0x2660 <MLPollMotionStatus+0xa>
    2660:	0f 92       	push	r0
    2662:	cd b7       	in	r28, 0x3d	; 61
    2664:	de b7       	in	r29, 0x3e	; 62

        unsigned char regs[3] = { 0 };
        unsigned short motionFlag = 0;

        if (mlxData.mlEngineMask & ML_MOTION_DETECT)
    2666:	80 91 e7 02 	lds	r24, 0x02E7
    266a:	82 ff       	sbrs	r24, 2
    266c:	7a c0       	rjmp	.+244    	; 0x2762 <MLPollMotionStatus+0x10c>
 *          calculations.
 **/
tMLError MLPollMotionStatus(void)
{

        unsigned char regs[3] = { 0 };
    266e:	8e 01       	movw	r16, r28
    2670:	0f 5f       	subi	r16, 0xFF	; 255
    2672:	1f 4f       	sbci	r17, 0xFF	; 255
    2674:	83 e0       	ldi	r24, 0x03	; 3
    2676:	f8 01       	movw	r30, r16
    2678:	11 92       	st	Z+, r1
    267a:	8a 95       	dec	r24
    267c:	e9 f7       	brne	.-6      	; 0x2678 <MLPollMotionStatus+0x22>
        unsigned short motionFlag = 0;

        if (mlxData.mlEngineMask & ML_MOTION_DETECT)
        {
                if (MLDLGetMemoryMPU(KEY_D_1_98, 2, regs) != ML_SUCCESS)
    267e:	86 e2       	ldi	r24, 0x26	; 38
    2680:	90 e0       	ldi	r25, 0x00	; 0
    2682:	62 e0       	ldi	r22, 0x02	; 2
    2684:	70 e0       	ldi	r23, 0x00	; 0
    2686:	a8 01       	movw	r20, r16
    2688:	0e 94 b4 0b 	call	0x1768	; 0x1768 <MLDLGetMemoryMPU>
    268c:	88 23       	and	r24, r24
    268e:	09 f0       	breq	.+2      	; 0x2692 <MLPollMotionStatus+0x3c>
    2690:	66 c0       	rjmp	.+204    	; 0x275e <MLPollMotionStatus+0x108>
                        return ML_ERROR;
                motionFlag = (unsigned short) regs[0] * 256 + (unsigned short) regs[1];
    2692:	99 81       	ldd	r25, Y+1	; 0x01
    2694:	80 e0       	ldi	r24, 0x00	; 0
    2696:	2a 81       	ldd	r18, Y+2	; 0x02
    2698:	82 0f       	add	r24, r18
    269a:	91 1d       	adc	r25, r1

                if (motionFlag == 1536)
    269c:	f6 e0       	ldi	r31, 0x06	; 6
    269e:	80 30       	cpi	r24, 0x00	; 0
    26a0:	9f 07       	cpc	r25, r31
    26a2:	41 f5       	brne	.+80     	; 0x26f4 <MLPollMotionStatus+0x9e>
                {
                        if (mlxData.mlMotionState == ML_MOTION)
    26a4:	80 91 bd 03 	lds	r24, 0x03BD
    26a8:	90 91 be 03 	lds	r25, 0x03BE
    26ac:	01 97       	sbiw	r24, 0x01	; 1
    26ae:	09 f0       	breq	.+2      	; 0x26b2 <MLPollMotionStatus+0x5c>
    26b0:	58 c0       	rjmp	.+176    	; 0x2762 <MLPollMotionStatus+0x10c>
                        {
                                MLUpdateBias();
    26b2:	0e 94 ed 10 	call	0x21da	; 0x21da <MLUpdateBias>

                                regs[0] = DINAD8 + 1;
    26b6:	89 ed       	ldi	r24, 0xD9	; 217
    26b8:	89 83       	std	Y+1, r24	; 0x01
                                regs[1] = DINA0C;
    26ba:	8c e0       	ldi	r24, 0x0C	; 12
    26bc:	8a 83       	std	Y+2, r24	; 0x02
                                regs[2] = DINAD8 + 2;
    26be:	8a ed       	ldi	r24, 0xDA	; 218
    26c0:	8b 83       	std	Y+3, r24	; 0x03
                                if (MLDLSetMemoryMPU(KEY_CFG_18, 3, regs) != ML_SUCCESS)
    26c2:	86 e1       	ldi	r24, 0x16	; 22
    26c4:	90 e0       	ldi	r25, 0x00	; 0
    26c6:	63 e0       	ldi	r22, 0x03	; 3
    26c8:	70 e0       	ldi	r23, 0x00	; 0
    26ca:	a8 01       	movw	r20, r16
    26cc:	0e 94 be 0a 	call	0x157c	; 0x157c <MLDLSetMemoryMPU>
    26d0:	88 23       	and	r24, r24
    26d2:	09 f0       	breq	.+2      	; 0x26d6 <MLPollMotionStatus+0x80>
    26d4:	44 c0       	rjmp	.+136    	; 0x275e <MLPollMotionStatus+0x108>
                                        return ML_ERROR;

                                regs[0] = 0;
    26d6:	19 82       	std	Y+1, r1	; 0x01
                                regs[1] = 5;
    26d8:	85 e0       	ldi	r24, 0x05	; 5
    26da:	8a 83       	std	Y+2, r24	; 0x02
                                if (MLDLSetMemoryMPU(KEY_D_1_106, 2, regs) != ML_SUCCESS)
    26dc:	87 e2       	ldi	r24, 0x27	; 39
    26de:	90 e0       	ldi	r25, 0x00	; 0
    26e0:	62 e0       	ldi	r22, 0x02	; 2
    26e2:	70 e0       	ldi	r23, 0x00	; 0
    26e4:	a8 01       	movw	r20, r16
    26e6:	0e 94 be 0a 	call	0x157c	; 0x157c <MLDLSetMemoryMPU>
    26ea:	88 23       	and	r24, r24
    26ec:	c1 f5       	brne	.+112    	; 0x275e <MLPollMotionStatus+0x108>
                                        return ML_ERROR;

                                //Trigger no motion callback
                                mlxData.mlMotionState = ML_NO_MOTION;
    26ee:	82 e0       	ldi	r24, 0x02	; 2
    26f0:	90 e0       	ldi	r25, 0x00	; 0
    26f2:	25 c0       	rjmp	.+74     	; 0x273e <MLPollMotionStatus+0xe8>
                                {
                                        mlParams.motionCallback(ML_NO_MOTION);
                                }
                        }
                }
                if (motionFlag == 5)
    26f4:	05 97       	sbiw	r24, 0x05	; 5
    26f6:	a9 f5       	brne	.+106    	; 0x2762 <MLPollMotionStatus+0x10c>
                {
                        if (mlxData.mlMotionState == ML_NO_MOTION)
    26f8:	80 91 bd 03 	lds	r24, 0x03BD
    26fc:	90 91 be 03 	lds	r25, 0x03BE
    2700:	02 97       	sbiw	r24, 0x02	; 2
    2702:	79 f5       	brne	.+94     	; 0x2762 <MLPollMotionStatus+0x10c>
                        {
                                regs[0] = DINAD8 + 2;
    2704:	8a ed       	ldi	r24, 0xDA	; 218
    2706:	89 83       	std	Y+1, r24	; 0x01
                                regs[1] = DINA0C;
    2708:	8c e0       	ldi	r24, 0x0C	; 12
    270a:	8a 83       	std	Y+2, r24	; 0x02
                                regs[2] = DINAD8 + 1;
    270c:	89 ed       	ldi	r24, 0xD9	; 217
    270e:	8b 83       	std	Y+3, r24	; 0x03
                                if (MLDLSetMemoryMPU(KEY_CFG_18, 3, regs) != ML_SUCCESS)
    2710:	86 e1       	ldi	r24, 0x16	; 22
    2712:	90 e0       	ldi	r25, 0x00	; 0
    2714:	63 e0       	ldi	r22, 0x03	; 3
    2716:	70 e0       	ldi	r23, 0x00	; 0
    2718:	a8 01       	movw	r20, r16
    271a:	0e 94 be 0a 	call	0x157c	; 0x157c <MLDLSetMemoryMPU>
    271e:	88 23       	and	r24, r24
    2720:	f1 f4       	brne	.+60     	; 0x275e <MLPollMotionStatus+0x108>
                                        return ML_ERROR;

                                regs[0] = 6;
    2722:	86 e0       	ldi	r24, 0x06	; 6
    2724:	89 83       	std	Y+1, r24	; 0x01
                                regs[1] = 0;
    2726:	1a 82       	std	Y+2, r1	; 0x02
                                if (MLDLSetMemoryMPU(KEY_D_1_106, 2, regs) != ML_SUCCESS)
    2728:	87 e2       	ldi	r24, 0x27	; 39
    272a:	90 e0       	ldi	r25, 0x00	; 0
    272c:	62 e0       	ldi	r22, 0x02	; 2
    272e:	70 e0       	ldi	r23, 0x00	; 0
    2730:	a8 01       	movw	r20, r16
    2732:	0e 94 be 0a 	call	0x157c	; 0x157c <MLDLSetMemoryMPU>
    2736:	88 23       	and	r24, r24
    2738:	91 f4       	brne	.+36     	; 0x275e <MLPollMotionStatus+0x108>
                                        return ML_ERROR;

                                //Trigger no motion callback
                                mlxData.mlMotionState = ML_MOTION;
    273a:	81 e0       	ldi	r24, 0x01	; 1
    273c:	90 e0       	ldi	r25, 0x00	; 0
    273e:	90 93 be 03 	sts	0x03BE, r25
    2742:	80 93 bd 03 	sts	0x03BD, r24
                                mlxData.mlFlags[ML_MOTION_STATE_CHANGE] = ML_MOTION;
    2746:	90 93 ba 03 	sts	0x03BA, r25
    274a:	80 93 b9 03 	sts	0x03B9, r24
                                if (mlParams.motionCallback)
    274e:	e0 91 6e 00 	lds	r30, 0x006E
    2752:	f0 91 6f 00 	lds	r31, 0x006F
    2756:	30 97       	sbiw	r30, 0x00	; 0
    2758:	21 f0       	breq	.+8      	; 0x2762 <MLPollMotionStatus+0x10c>
                                {
                                        mlParams.motionCallback(ML_MOTION);
    275a:	09 95       	icall
    275c:	02 c0       	rjmp	.+4      	; 0x2762 <MLPollMotionStatus+0x10c>
    275e:	81 e0       	ldi	r24, 0x01	; 1
    2760:	01 c0       	rjmp	.+2      	; 0x2764 <MLPollMotionStatus+0x10e>
    2762:	80 e0       	ldi	r24, 0x00	; 0
                        }
                }
        }

        return ML_SUCCESS;
}
    2764:	0f 90       	pop	r0
    2766:	0f 90       	pop	r0
    2768:	0f 90       	pop	r0
    276a:	cf 91       	pop	r28
    276c:	df 91       	pop	r29
    276e:	1f 91       	pop	r17
    2770:	0f 91       	pop	r16
    2772:	08 95       	ret

00002774 <MLSetDataMode>:
 *                   - 0 for none.
 *
 * @return  ML_SUCCESS if successful, error code on any error.
 */
tMLError MLSetDataMode(unsigned short dataMode)
{
    2774:	0f 93       	push	r16
    2776:	1f 93       	push	r17
    2778:	df 93       	push	r29
    277a:	cf 93       	push	r28
    277c:	0f 92       	push	r0
    277e:	cd b7       	in	r28, 0x3d	; 61
    2780:	de b7       	in	r29, 0x3e	; 62
    2782:	8c 01       	movw	r16, r24

        unsigned char regs[1];

        if (isCompatible(IMU_C_OPEN | IMU_C_START, IMU_C_OPEN_CALLED) != ML_SUCCESS)
    2784:	83 e0       	ldi	r24, 0x03	; 3
    2786:	61 e0       	ldi	r22, 0x01	; 1
    2788:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <isCompatible>
    278c:	88 23       	and	r24, r24
    278e:	09 f0       	breq	.+2      	; 0x2792 <MLSetDataMode+0x1e>
    2790:	45 c0       	rjmp	.+138    	; 0x281c <MLSetDataMode+0xa8>
                return ML_ERROR;

        /* check mutual exclusivity of data modes */
        if ((dataMode & ML_DATA_FIFO) && (dataMode & ML_DATA_POLL))
    2792:	98 01       	movw	r18, r16
    2794:	21 70       	andi	r18, 0x01	; 1
    2796:	30 70       	andi	r19, 0x00	; 0
    2798:	00 ff       	sbrs	r16, 0
    279a:	02 c0       	rjmp	.+4      	; 0x27a0 <MLSetDataMode+0x2c>
    279c:	01 fd       	sbrc	r16, 1
    279e:	40 c0       	rjmp	.+128    	; 0x2820 <MLSetDataMode+0xac>
        {
                return ML_ERROR_INVALID_PARAMETER;
        }
        /* check if dataMode contains other spurious bits other than
         * ML_DATA_FIFO and ML_DATA_POLL */
        if ((dataMode & (~(ML_DATA_FIFO | ML_DATA_POLL))) != 0)
    27a0:	c8 01       	movw	r24, r16
    27a2:	8c 7f       	andi	r24, 0xFC	; 252
    27a4:	89 2b       	or	r24, r25
    27a6:	e1 f5       	brne	.+120    	; 0x2820 <MLSetDataMode+0xac>
        {
                return ML_ERROR_INVALID_PARAMETER;
        }

        mlxData.mlDataMode = dataMode;
    27a8:	10 93 c0 03 	sts	0x03C0, r17
    27ac:	00 93 bf 03 	sts	0x03BF, r16

        if (mlxData.mlDataMode & ML_DATA_FIFO)
    27b0:	23 2b       	or	r18, r19
    27b2:	11 f0       	breq	.+4      	; 0x27b8 <MLSetDataMode+0x44>
        {
                regs[0] = DINA18;
    27b4:	88 e1       	ldi	r24, 0x18	; 24
    27b6:	01 c0       	rjmp	.+2      	; 0x27ba <MLSetDataMode+0x46>
        } else
        {
                regs[0] = DINA08;
    27b8:	88 e0       	ldi	r24, 0x08	; 8
    27ba:	89 83       	std	Y+1, r24	; 0x01
        }
        if (MLDLSetMemoryMPU(KEY_CFG_19, 1, regs) != ML_SUCCESS)
    27bc:	87 e1       	ldi	r24, 0x17	; 23
    27be:	90 e0       	ldi	r25, 0x00	; 0
    27c0:	61 e0       	ldi	r22, 0x01	; 1
    27c2:	70 e0       	ldi	r23, 0x00	; 0
    27c4:	8e 01       	movw	r16, r28
    27c6:	0f 5f       	subi	r16, 0xFF	; 255
    27c8:	1f 4f       	sbci	r17, 0xFF	; 255
    27ca:	a8 01       	movw	r20, r16
    27cc:	0e 94 be 0a 	call	0x157c	; 0x157c <MLDLSetMemoryMPU>
    27d0:	88 23       	and	r24, r24
    27d2:	21 f5       	brne	.+72     	; 0x281c <MLSetDataMode+0xa8>
                return ML_ERROR;

        if (mlxData.mlDataMode & ML_DATA_POLL)
    27d4:	80 91 bf 03 	lds	r24, 0x03BF
    27d8:	81 ff       	sbrs	r24, 1
    27da:	0b c0       	rjmp	.+22     	; 0x27f2 <MLSetDataMode+0x7e>
        {
                regs[0] = 1;
    27dc:	81 e0       	ldi	r24, 0x01	; 1
    27de:	89 83       	std	Y+1, r24	; 0x01
                if (MLDLSetMemoryMPU(KEY_D_1_179, 1, regs) != ML_SUCCESS)
    27e0:	88 e2       	ldi	r24, 0x28	; 40
    27e2:	90 e0       	ldi	r25, 0x00	; 0
    27e4:	61 e0       	ldi	r22, 0x01	; 1
    27e6:	70 e0       	ldi	r23, 0x00	; 0
    27e8:	a8 01       	movw	r20, r16
    27ea:	0e 94 be 0a 	call	0x157c	; 0x157c <MLDLSetMemoryMPU>
    27ee:	88 23       	and	r24, r24
    27f0:	a9 f4       	brne	.+42     	; 0x281c <MLSetDataMode+0xa8>
                        return ML_ERROR;
        }

        if ((mlxData.mlDataMode & ML_DATA_FIFO) || (mlxData.mlDataMode & ML_DATA_POLL))
    27f2:	80 91 bf 03 	lds	r24, 0x03BF
    27f6:	80 fd       	sbrc	r24, 0
    27f8:	02 c0       	rjmp	.+4      	; 0x27fe <MLSetDataMode+0x8a>
    27fa:	81 ff       	sbrs	r24, 1
    27fc:	02 c0       	rjmp	.+4      	; 0x2802 <MLSetDataMode+0x8e>
        {
                regs[0] = DINADD;
    27fe:	8d ed       	ldi	r24, 0xDD	; 221
    2800:	01 c0       	rjmp	.+2      	; 0x2804 <MLSetDataMode+0x90>
                if (MLDLSetMemoryMPU(KEY_CFG_17, 1, regs) != ML_SUCCESS)
                        return ML_ERROR;
        } else
        {
                regs[0] = DINAA0 + 3;
    2802:	83 ea       	ldi	r24, 0xA3	; 163
    2804:	89 83       	std	Y+1, r24	; 0x01
                if (MLDLSetMemoryMPU(KEY_CFG_17, 1, regs) != ML_SUCCESS)
    2806:	85 e1       	ldi	r24, 0x15	; 21
    2808:	90 e0       	ldi	r25, 0x00	; 0
    280a:	61 e0       	ldi	r22, 0x01	; 1
    280c:	70 e0       	ldi	r23, 0x00	; 0
    280e:	ae 01       	movw	r20, r28
    2810:	4f 5f       	subi	r20, 0xFF	; 255
    2812:	5f 4f       	sbci	r21, 0xFF	; 255
    2814:	0e 94 be 0a 	call	0x157c	; 0x157c <MLDLSetMemoryMPU>
    2818:	88 23       	and	r24, r24
    281a:	19 f0       	breq	.+6      	; 0x2822 <MLSetDataMode+0xae>
    281c:	81 e0       	ldi	r24, 0x01	; 1
    281e:	01 c0       	rjmp	.+2      	; 0x2822 <MLSetDataMode+0xae>
    2820:	82 e0       	ldi	r24, 0x02	; 2
                        return ML_ERROR;
        }

        return ML_SUCCESS;
}
    2822:	0f 90       	pop	r0
    2824:	cf 91       	pop	r28
    2826:	df 91       	pop	r29
    2828:	1f 91       	pop	r17
    282a:	0f 91       	pop	r16
    282c:	08 95       	ret

0000282e <MLSetInterrupts>:
 * @param   interrupts  A bit field specifying the interrupt sources.
 *
 * @return  ML_SUCCESS on success, ML error code on any failure.
 */
tMLError MLSetInterrupts(uint_fast8_t interrupts)
{
    282e:	0f 93       	push	r16
    2830:	1f 93       	push	r17
    2832:	df 93       	push	r29
    2834:	cf 93       	push	r28
    2836:	00 d0       	rcall	.+0      	; 0x2838 <MLSetInterrupts+0xa>
    2838:	cd b7       	in	r28, 0x3d	; 61
    283a:	de b7       	in	r29, 0x3e	; 62
    283c:	18 2f       	mov	r17, r24

        unsigned char regs[2] = { 0 };
    283e:	1a 82       	std	Y+2, r1	; 0x02
    2840:	19 82       	std	Y+1, r1	; 0x01
        unsigned short intMask = (ML_INT_MOTION | ML_INT_FIFO);

        if (isCompatible(IMU_C_OPEN | IMU_C_START, IMU_C_OPEN_CALLED) != ML_SUCCESS)
    2842:	83 e0       	ldi	r24, 0x03	; 3
    2844:	61 e0       	ldi	r22, 0x01	; 1
    2846:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <isCompatible>
    284a:	88 23       	and	r24, r24
    284c:	f1 f4       	brne	.+60     	; 0x288a <MLSetInterrupts+0x5c>
                return ML_ERROR;

        if ((interrupts & (~intMask)) != 0)
    284e:	01 2f       	mov	r16, r17
    2850:	10 e0       	ldi	r17, 0x00	; 0
    2852:	c8 01       	movw	r24, r16
    2854:	8c 7f       	andi	r24, 0xFC	; 252
    2856:	89 2b       	or	r24, r25
    2858:	11 f0       	breq	.+4      	; 0x285e <MLSetInterrupts+0x30>
    285a:	82 e0       	ldi	r24, 0x02	; 2
    285c:	17 c0       	rjmp	.+46     	; 0x288c <MLSetInterrupts+0x5e>
                return ML_ERROR_INVALID_PARAMETER;

        if (interrupts & ML_INT_FIFO)
    285e:	01 ff       	sbrs	r16, 1
    2860:	02 c0       	rjmp	.+4      	; 0x2866 <MLSetInterrupts+0x38>
        {
                regs[0] = DINAFE;
    2862:	8e ef       	ldi	r24, 0xFE	; 254
    2864:	01 c0       	rjmp	.+2      	; 0x2868 <MLSetInterrupts+0x3a>
        } else
        {
                regs[0] = DINAD8;
    2866:	88 ed       	ldi	r24, 0xD8	; 216
    2868:	89 83       	std	Y+1, r24	; 0x01
        }
        if (MLDLSetMemoryMPU(KEY_CFG_6, 1, regs) != ML_SUCCESS)
    286a:	8d e0       	ldi	r24, 0x0D	; 13
    286c:	90 e0       	ldi	r25, 0x00	; 0
    286e:	61 e0       	ldi	r22, 0x01	; 1
    2870:	70 e0       	ldi	r23, 0x00	; 0
    2872:	ae 01       	movw	r20, r28
    2874:	4f 5f       	subi	r20, 0xFF	; 255
    2876:	5f 4f       	sbci	r21, 0xFF	; 255
    2878:	0e 94 be 0a 	call	0x157c	; 0x157c <MLDLSetMemoryMPU>
    287c:	88 23       	and	r24, r24
    287e:	29 f4       	brne	.+10     	; 0x288a <MLSetInterrupts+0x5c>
                return ML_ERROR;

        mlxData.mlInterruptSources = interrupts;
    2880:	10 93 c2 03 	sts	0x03C2, r17
    2884:	00 93 c1 03 	sts	0x03C1, r16
    2888:	01 c0       	rjmp	.+2      	; 0x288c <MLSetInterrupts+0x5e>

        return ML_SUCCESS;
    288a:	81 e0       	ldi	r24, 0x01	; 1
}
    288c:	0f 90       	pop	r0
    288e:	0f 90       	pop	r0
    2890:	cf 91       	pop	r28
    2892:	df 91       	pop	r29
    2894:	1f 91       	pop	r17
    2896:	0f 91       	pop	r16
    2898:	08 95       	ret

0000289a <MLSetGyroCalibration>:
 *             example corresponds to a 3 by 3 identity matrix.
 *
 *  @return    ML_SUCCESS if successful or Non-zero error code otherwise.
 */
tMLError MLSetGyroCalibration(float range, float *orientation)
{
    289a:	6f 92       	push	r6
    289c:	7f 92       	push	r7
    289e:	8f 92       	push	r8
    28a0:	9f 92       	push	r9
    28a2:	af 92       	push	r10
    28a4:	bf 92       	push	r11
    28a6:	cf 92       	push	r12
    28a8:	df 92       	push	r13
    28aa:	ef 92       	push	r14
    28ac:	ff 92       	push	r15
    28ae:	0f 93       	push	r16
    28b0:	1f 93       	push	r17
    28b2:	df 93       	push	r29
    28b4:	cf 93       	push	r28
    28b6:	cd b7       	in	r28, 0x3d	; 61
    28b8:	de b7       	in	r29, 0x3e	; 62
    28ba:	2c 97       	sbiw	r28, 0x0c	; 12
    28bc:	0f b6       	in	r0, 0x3f	; 63
    28be:	f8 94       	cli
    28c0:	de bf       	out	0x3e, r29	; 62
    28c2:	0f be       	out	0x3f, r0	; 63
    28c4:	cd bf       	out	0x3d, r28	; 61
    28c6:	7b 01       	movw	r14, r22
    28c8:	8c 01       	movw	r16, r24
    28ca:	d4 2e       	mov	r13, r20
    28cc:	c5 2e       	mov	r12, r21

        int kk;
        float scale = range / 32768.f;
    28ce:	20 e0       	ldi	r18, 0x00	; 0
    28d0:	30 e0       	ldi	r19, 0x00	; 0
    28d2:	40 e0       	ldi	r20, 0x00	; 0
    28d4:	58 e3       	ldi	r21, 0x38	; 56
    28d6:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <__mulsf3>
    28da:	3b 01       	movw	r6, r22
    28dc:	4c 01       	movw	r8, r24

        unsigned char regs[12] = { 0 };
    28de:	fe 01       	movw	r30, r28
    28e0:	31 96       	adiw	r30, 0x01	; 1
    28e2:	8c e0       	ldi	r24, 0x0C	; 12
    28e4:	df 01       	movw	r26, r30
    28e6:	1d 92       	st	X+, r1
    28e8:	8a 95       	dec	r24
    28ea:	e9 f7       	brne	.-6      	; 0x28e6 <MLSetGyroCalibration+0x4c>
        unsigned char tmpPtr = 0;
        unsigned char tmpSign = 0;
        unsigned char i = 0;
        long sf = 0;

        if (isCompatible(IMU_C_OPEN | IMU_C_START, IMU_C_OPEN_CALLED) != ML_SUCCESS)
    28ec:	83 e0       	ldi	r24, 0x03	; 3
    28ee:	61 e0       	ldi	r22, 0x01	; 1
    28f0:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <isCompatible>
    28f4:	88 23       	and	r24, r24
    28f6:	09 f0       	breq	.+2      	; 0x28fa <MLSetGyroCalibration+0x60>
    28f8:	f2 c1       	rjmp	.+996    	; 0x2cde <MLSetGyroCalibration+0x444>
                return ML_ERROR;

        mlxData.mlGyroSens = (long) (range * 32768);
    28fa:	c8 01       	movw	r24, r16
    28fc:	b7 01       	movw	r22, r14
    28fe:	20 e0       	ldi	r18, 0x00	; 0
    2900:	30 e0       	ldi	r19, 0x00	; 0
    2902:	40 e0       	ldi	r20, 0x00	; 0
    2904:	57 e4       	ldi	r21, 0x47	; 71
    2906:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <__mulsf3>
    290a:	0e 94 7d 36 	call	0x6cfa	; 0x6cfa <__fixsfsi>
    290e:	60 93 71 03 	sts	0x0371, r22
    2912:	70 93 72 03 	sts	0x0372, r23
    2916:	80 93 73 03 	sts	0x0373, r24
    291a:	90 93 74 03 	sts	0x0374, r25
    291e:	2d 2d       	mov	r18, r13
    2920:	3c 2d       	mov	r19, r12
    2922:	c9 01       	movw	r24, r18
    2924:	5c 01       	movw	r10, r24
    2926:	e5 e2       	ldi	r30, 0x25	; 37
    2928:	ce 2e       	mov	r12, r30
    292a:	e3 e0       	ldi	r30, 0x03	; 3
    292c:	de 2e       	mov	r13, r30

        for (kk = 0; kk < 9; ++kk)
        {
                mlxData.mlGyroCal[kk] = (long) (scale * orientation[kk]); // Deprecated
    292e:	f5 01       	movw	r30, r10
    2930:	e1 90       	ld	r14, Z+
    2932:	f1 90       	ld	r15, Z+
    2934:	01 91       	ld	r16, Z+
    2936:	11 91       	ld	r17, Z+
    2938:	5f 01       	movw	r10, r30
    293a:	c4 01       	movw	r24, r8
    293c:	b3 01       	movw	r22, r6
    293e:	a8 01       	movw	r20, r16
    2940:	97 01       	movw	r18, r14
    2942:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <__mulsf3>
    2946:	0e 94 7d 36 	call	0x6cfa	; 0x6cfa <__fixsfsi>
    294a:	d6 01       	movw	r26, r12
    294c:	6d 93       	st	X+, r22
    294e:	7d 93       	st	X+, r23
    2950:	8d 93       	st	X+, r24
    2952:	9c 93       	st	X, r25
    2954:	13 97       	sbiw	r26, 0x03	; 3
                mlxData.mlGyroOrient[kk] = (long) (orientation[kk] * (1L << 30));
    2956:	c8 01       	movw	r24, r16
    2958:	b7 01       	movw	r22, r14
    295a:	20 e0       	ldi	r18, 0x00	; 0
    295c:	30 e0       	ldi	r19, 0x00	; 0
    295e:	40 e8       	ldi	r20, 0x80	; 128
    2960:	5e e4       	ldi	r21, 0x4E	; 78
    2962:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <__mulsf3>
    2966:	0e 94 7d 36 	call	0x6cfa	; 0x6cfa <__fixsfsi>
    296a:	f6 01       	movw	r30, r12
    296c:	64 a3       	std	Z+36, r22	; 0x24
    296e:	75 a3       	std	Z+37, r23	; 0x25
    2970:	86 a3       	std	Z+38, r24	; 0x26
    2972:	97 a3       	std	Z+39, r25	; 0x27
    2974:	84 e0       	ldi	r24, 0x04	; 4
    2976:	90 e0       	ldi	r25, 0x00	; 0
    2978:	c8 0e       	add	r12, r24
    297a:	d9 1e       	adc	r13, r25
        if (isCompatible(IMU_C_OPEN | IMU_C_START, IMU_C_OPEN_CALLED) != ML_SUCCESS)
                return ML_ERROR;

        mlxData.mlGyroSens = (long) (range * 32768);

        for (kk = 0; kk < 9; ++kk)
    297c:	99 e4       	ldi	r25, 0x49	; 73
    297e:	c9 16       	cp	r12, r25
    2980:	93 e0       	ldi	r25, 0x03	; 3
    2982:	d9 06       	cpc	r13, r25
    2984:	a1 f6       	brne	.-88     	; 0x292e <MLSetGyroCalibration+0x94>

        {
                unsigned char tmpD = DINAC9;
                unsigned char tmpE = DINA2C;
                unsigned char tmpF = DINACB;
                regs[3] = DINA36;
    2986:	86 e3       	ldi	r24, 0x36	; 54
    2988:	8c 83       	std	Y+4, r24	; 0x04
                regs[4] = DINA56;
    298a:	86 e5       	ldi	r24, 0x56	; 86
    298c:	8d 83       	std	Y+5, r24	; 0x05
                regs[5] = DINA76;
    298e:	86 e7       	ldi	r24, 0x76	; 118
    2990:	8e 83       	std	Y+6, r24	; 0x06
    2992:	56 01       	movw	r10, r12
    2994:	fe 01       	movw	r30, r28
    2996:	31 96       	adiw	r30, 0x01	; 1
    2998:	99 24       	eor	r9, r9
    299a:	93 94       	inc	r9
                                regs[tmpPtr++] = tmpD;
                                if (tmpSign)
                                        regs[tmpPtr + 2] |= 0x01;
                        } else if (maxVal == 1)
                        {
                                regs[tmpPtr++] = tmpE;
    299c:	7c e2       	ldi	r23, 0x2C	; 44
    299e:	67 2e       	mov	r6, r23
                                if (mlxData.mlGyroOrient[2 + 3 * i] < 0)
                                        tmpSign = 1;
                        }
                        if (maxVal == 0)
                        {
                                regs[tmpPtr++] = tmpD;
    29a0:	69 ec       	ldi	r22, 0xC9	; 201
    29a2:	76 2e       	mov	r7, r22
                                regs[tmpPtr++] = tmpE;
                                if (tmpSign)
                                        regs[tmpPtr + 2] |= 0x01;
                        } else
                        {
                                regs[tmpPtr++] = tmpF;
    29a4:	5b ec       	ldi	r21, 0xCB	; 203
    29a6:	85 2e       	mov	r8, r21

                for (i = 0; i < 3; i++)
                {
                        maxVal = 0;
                        tmpSign = 0;
                        if (mlxData.mlGyroOrient[0 + 3 * i] < 0)
    29a8:	d5 01       	movw	r26, r10
    29aa:	2d 91       	ld	r18, X+
    29ac:	3d 91       	ld	r19, X+
    29ae:	4d 91       	ld	r20, X+
    29b0:	5c 91       	ld	r21, X
    29b2:	da 01       	movw	r26, r20
    29b4:	c9 01       	movw	r24, r18
    29b6:	88 27       	eor	r24, r24
    29b8:	b7 fd       	sbrc	r27, 7
    29ba:	83 95       	inc	r24
    29bc:	99 27       	eor	r25, r25
    29be:	aa 27       	eor	r26, r26
    29c0:	bb 27       	eor	r27, r27
                                tmpSign = 1;
                        if (abs(mlxData.mlGyroOrient[1 + 3 * i]) > abs(mlxData.mlGyroOrient[0 + 3 * i]))
    29c2:	d5 01       	movw	r26, r10
    29c4:	14 96       	adiw	r26, 0x04	; 4
    29c6:	ed 90       	ld	r14, X+
    29c8:	fd 90       	ld	r15, X+
    29ca:	0d 91       	ld	r16, X+
    29cc:	1c 91       	ld	r17, X
    29ce:	17 97       	sbiw	r26, 0x07	; 7
    29d0:	67 01       	movw	r12, r14
    29d2:	f7 fe       	sbrs	r15, 7
    29d4:	04 c0       	rjmp	.+8      	; 0x29de <MLSetGyroCalibration+0x144>
    29d6:	d0 94       	com	r13
    29d8:	c1 94       	neg	r12
    29da:	d1 08       	sbc	r13, r1
    29dc:	d3 94       	inc	r13
    29de:	b9 01       	movw	r22, r18
    29e0:	37 ff       	sbrs	r19, 7
    29e2:	03 c0       	rjmp	.+6      	; 0x29ea <MLSetGyroCalibration+0x150>
    29e4:	70 95       	com	r23
    29e6:	61 95       	neg	r22
    29e8:	7f 4f       	sbci	r23, 0xFF	; 255
    29ea:	6c 15       	cp	r22, r12
    29ec:	7d 05       	cpc	r23, r13
    29ee:	14 f0       	brlt	.+4      	; 0x29f4 <MLSetGyroCalibration+0x15a>
    29f0:	10 e0       	ldi	r17, 0x00	; 0
    29f2:	06 c0       	rjmp	.+12     	; 0x2a00 <MLSetGyroCalibration+0x166>
                        {
                                maxVal = 1;
                                if (mlxData.mlGyroOrient[1 + 3 * i] < 0)
    29f4:	17 ff       	sbrs	r17, 7
    29f6:	03 c0       	rjmp	.+6      	; 0x29fe <MLSetGyroCalibration+0x164>
    29f8:	11 e0       	ldi	r17, 0x01	; 1
    29fa:	81 e0       	ldi	r24, 0x01	; 1
    29fc:	01 c0       	rjmp	.+2      	; 0x2a00 <MLSetGyroCalibration+0x166>
    29fe:	11 e0       	ldi	r17, 0x01	; 1
                                        tmpSign = 1;
                        }
                        if (abs(mlxData.mlGyroOrient[2 + 3 * i]) > abs(mlxData.mlGyroOrient[1 + 3 * i]))
    2a00:	d5 01       	movw	r26, r10
    2a02:	18 96       	adiw	r26, 0x08	; 8
    2a04:	2d 91       	ld	r18, X+
    2a06:	3d 91       	ld	r19, X+
    2a08:	4d 91       	ld	r20, X+
    2a0a:	5c 91       	ld	r21, X
    2a0c:	1b 97       	sbiw	r26, 0x0b	; 11
    2a0e:	b9 01       	movw	r22, r18
    2a10:	37 ff       	sbrs	r19, 7
    2a12:	03 c0       	rjmp	.+6      	; 0x2a1a <MLSetGyroCalibration+0x180>
    2a14:	70 95       	com	r23
    2a16:	61 95       	neg	r22
    2a18:	7f 4f       	sbci	r23, 0xFF	; 255
    2a1a:	c6 16       	cp	r12, r22
    2a1c:	d7 06       	cpc	r13, r23
    2a1e:	24 f4       	brge	.+8      	; 0x2a28 <MLSetGyroCalibration+0x18e>
                                regs[tmpPtr++] = tmpE;
                                if (tmpSign)
                                        regs[tmpPtr + 2] |= 0x01;
                        } else
                        {
                                regs[tmpPtr++] = tmpF;
    2a20:	80 82       	st	Z, r8
                                if (tmpSign)
    2a22:	57 fd       	sbrc	r21, 7
    2a24:	08 c0       	rjmp	.+16     	; 0x2a36 <MLSetGyroCalibration+0x19c>
    2a26:	0a c0       	rjmp	.+20     	; 0x2a3c <MLSetGyroCalibration+0x1a2>
                                tmpSign = 0;
                                maxVal = 2;
                                if (mlxData.mlGyroOrient[2 + 3 * i] < 0)
                                        tmpSign = 1;
                        }
                        if (maxVal == 0)
    2a28:	11 23       	and	r17, r17
    2a2a:	11 f4       	brne	.+4      	; 0x2a30 <MLSetGyroCalibration+0x196>
                        {
                                regs[tmpPtr++] = tmpD;
    2a2c:	70 82       	st	Z, r7
    2a2e:	01 c0       	rjmp	.+2      	; 0x2a32 <MLSetGyroCalibration+0x198>
                                if (tmpSign)
                                        regs[tmpPtr + 2] |= 0x01;
                        } else if (maxVal == 1)
                        {
                                regs[tmpPtr++] = tmpE;
    2a30:	60 82       	st	Z, r6
                                if (tmpSign)
    2a32:	88 23       	and	r24, r24
    2a34:	19 f0       	breq	.+6      	; 0x2a3c <MLSetGyroCalibration+0x1a2>
                                        regs[tmpPtr + 2] |= 0x01;
                        } else
                        {
                                regs[tmpPtr++] = tmpF;
                                if (tmpSign)
                                        regs[tmpPtr + 2] |= 0x01;
    2a36:	83 81       	ldd	r24, Z+3	; 0x03
    2a38:	81 60       	ori	r24, 0x01	; 1
    2a3a:	83 83       	std	Z+3, r24	; 0x03
    2a3c:	93 94       	inc	r9
    2a3e:	8c e0       	ldi	r24, 0x0C	; 12
    2a40:	90 e0       	ldi	r25, 0x00	; 0
    2a42:	a8 0e       	add	r10, r24
    2a44:	b9 1e       	adc	r11, r25
    2a46:	31 96       	adiw	r30, 0x01	; 1
                unsigned char tmpF = DINACB;
                regs[3] = DINA36;
                regs[4] = DINA56;
                regs[5] = DINA76;

                for (i = 0; i < 3; i++)
    2a48:	94 e0       	ldi	r25, 0x04	; 4
    2a4a:	99 16       	cp	r9, r25
    2a4c:	09 f0       	breq	.+2      	; 0x2a50 <MLSetGyroCalibration+0x1b6>
    2a4e:	ac cf       	rjmp	.-168    	; 0x29a8 <MLSetGyroCalibration+0x10e>
                                regs[tmpPtr++] = tmpF;
                                if (tmpSign)
                                        regs[tmpPtr + 2] |= 0x01;
                        }
                }
                if (MLDLSetMemoryMPU(KEY_FCFG_1, 3, regs) != ML_SUCCESS)
    2a50:	80 e0       	ldi	r24, 0x00	; 0
    2a52:	90 e0       	ldi	r25, 0x00	; 0
    2a54:	63 e0       	ldi	r22, 0x03	; 3
    2a56:	70 e0       	ldi	r23, 0x00	; 0
    2a58:	ae 01       	movw	r20, r28
    2a5a:	4f 5f       	subi	r20, 0xFF	; 255
    2a5c:	5f 4f       	sbci	r21, 0xFF	; 255
    2a5e:	0e 94 be 0a 	call	0x157c	; 0x157c <MLDLSetMemoryMPU>
    2a62:	88 23       	and	r24, r24
    2a64:	09 f0       	breq	.+2      	; 0x2a68 <MLSetGyroCalibration+0x1ce>
    2a66:	3b c1       	rjmp	.+630    	; 0x2cde <MLSetGyroCalibration+0x444>
                        return ML_ERROR;
                if (MLDLSetMemoryMPU(KEY_FCFG_3, 3, &regs[3]) != ML_SUCCESS)
    2a68:	82 e0       	ldi	r24, 0x02	; 2
    2a6a:	90 e0       	ldi	r25, 0x00	; 0
    2a6c:	63 e0       	ldi	r22, 0x03	; 3
    2a6e:	70 e0       	ldi	r23, 0x00	; 0
    2a70:	ae 01       	movw	r20, r28
    2a72:	4c 5f       	subi	r20, 0xFC	; 252
    2a74:	5f 4f       	sbci	r21, 0xFF	; 255
    2a76:	0e 94 be 0a 	call	0x157c	; 0x157c <MLDLSetMemoryMPU>
    2a7a:	88 23       	and	r24, r24
    2a7c:	09 f0       	breq	.+2      	; 0x2a80 <MLSetGyroCalibration+0x1e6>
    2a7e:	2f c1       	rjmp	.+606    	; 0x2cde <MLSetGyroCalibration+0x444>
                        return ML_ERROR;

                //sf = (gyroSens) * (0.5 * (pi/180) / 200.0) * 16384
                sf = (long) (((long long) mlxData.mlGyroSens * 767603923LL) / 1073741824LL);
    2a80:	80 91 71 03 	lds	r24, 0x0371
    2a84:	90 91 72 03 	lds	r25, 0x0372
    2a88:	a0 91 73 03 	lds	r26, 0x0373
    2a8c:	b0 91 74 03 	lds	r27, 0x0374
    2a90:	7c 01       	movw	r14, r24
    2a92:	8d 01       	movw	r16, r26
    2a94:	11 0f       	add	r17, r17
    2a96:	ee 08       	sbc	r14, r14
    2a98:	fe 2c       	mov	r15, r14
    2a9a:	87 01       	movw	r16, r14
    2a9c:	9c 01       	movw	r18, r24
    2a9e:	ad 01       	movw	r20, r26
    2aa0:	6e 2d       	mov	r22, r14
    2aa2:	7e 2d       	mov	r23, r14
    2aa4:	8e 2d       	mov	r24, r14
    2aa6:	9e 2d       	mov	r25, r14
    2aa8:	b3 ed       	ldi	r27, 0xD3	; 211
    2aaa:	ab 2e       	mov	r10, r27
    2aac:	a4 eb       	ldi	r26, 0xB4	; 180
    2aae:	ba 2e       	mov	r11, r26
    2ab0:	f0 ec       	ldi	r31, 0xC0	; 192
    2ab2:	cf 2e       	mov	r12, r31
    2ab4:	ed e2       	ldi	r30, 0x2D	; 45
    2ab6:	de 2e       	mov	r13, r30
    2ab8:	ee 24       	eor	r14, r14
    2aba:	ff 24       	eor	r15, r15
    2abc:	00 e0       	ldi	r16, 0x00	; 0
    2abe:	10 e0       	ldi	r17, 0x00	; 0
    2ac0:	0e 94 0c 2b 	call	0x5618	; 0x5618 <__muldi3>
    2ac4:	15 2f       	mov	r17, r21
    2ac6:	06 2f       	mov	r16, r22
    2ac8:	f7 2e       	mov	r15, r23
    2aca:	e8 2e       	mov	r14, r24
    2acc:	d9 2e       	mov	r13, r25
    2ace:	a2 2f       	mov	r26, r18
    2ad0:	f3 2f       	mov	r31, r19
    2ad2:	e4 2f       	mov	r30, r20
    2ad4:	60 2f       	mov	r22, r16
    2ad6:	7f 2d       	mov	r23, r15
    2ad8:	8e 2d       	mov	r24, r14
    2ada:	9d 2d       	mov	r25, r13
    2adc:	dd 20       	and	r13, r13
    2ade:	0c f0       	brlt	.+2      	; 0x2ae2 <MLSetGyroCalibration+0x248>
    2ae0:	43 c0       	rjmp	.+134    	; 0x2b68 <MLSetGyroCalibration+0x2ce>
    2ae2:	c2 2e       	mov	r12, r18
    2ae4:	ca 94       	dec	r12
    2ae6:	f1 e0       	ldi	r31, 0x01	; 1
    2ae8:	c2 16       	cp	r12, r18
    2aea:	08 f0       	brcs	.+2      	; 0x2aee <MLSetGyroCalibration+0x254>
    2aec:	f0 e0       	ldi	r31, 0x00	; 0
    2aee:	e3 2f       	mov	r30, r19
    2af0:	e1 50       	subi	r30, 0x01	; 1
    2af2:	a1 e0       	ldi	r26, 0x01	; 1
    2af4:	e3 17       	cp	r30, r19
    2af6:	08 f0       	brcs	.+2      	; 0x2afa <MLSetGyroCalibration+0x260>
    2af8:	a0 e0       	ldi	r26, 0x00	; 0
    2afa:	3f 2f       	mov	r19, r31
    2afc:	3e 0f       	add	r19, r30
    2afe:	f1 e0       	ldi	r31, 0x01	; 1
    2b00:	3e 17       	cp	r19, r30
    2b02:	08 f0       	brcs	.+2      	; 0x2b06 <MLSetGyroCalibration+0x26c>
    2b04:	f0 e0       	ldi	r31, 0x00	; 0
    2b06:	af 2b       	or	r26, r31
    2b08:	e4 2f       	mov	r30, r20
    2b0a:	e1 50       	subi	r30, 0x01	; 1
    2b0c:	b1 e0       	ldi	r27, 0x01	; 1
    2b0e:	e4 17       	cp	r30, r20
    2b10:	08 f0       	brcs	.+2      	; 0x2b14 <MLSetGyroCalibration+0x27a>
    2b12:	b0 e0       	ldi	r27, 0x00	; 0
    2b14:	4a 2f       	mov	r20, r26
    2b16:	4e 0f       	add	r20, r30
    2b18:	f1 e0       	ldi	r31, 0x01	; 1
    2b1a:	4e 17       	cp	r20, r30
    2b1c:	08 f0       	brcs	.+2      	; 0x2b20 <MLSetGyroCalibration+0x286>
    2b1e:	f0 e0       	ldi	r31, 0x00	; 0
    2b20:	bf 2b       	or	r27, r31
    2b22:	e1 2f       	mov	r30, r17
    2b24:	e1 5c       	subi	r30, 0xC1	; 193
    2b26:	a1 e0       	ldi	r26, 0x01	; 1
    2b28:	e1 17       	cp	r30, r17
    2b2a:	08 f0       	brcs	.+2      	; 0x2b2e <MLSetGyroCalibration+0x294>
    2b2c:	a0 e0       	ldi	r26, 0x00	; 0
    2b2e:	5b 2f       	mov	r21, r27
    2b30:	5e 0f       	add	r21, r30
    2b32:	f1 e0       	ldi	r31, 0x01	; 1
    2b34:	5e 17       	cp	r21, r30
    2b36:	08 f0       	brcs	.+2      	; 0x2b3a <MLSetGyroCalibration+0x2a0>
    2b38:	f0 e0       	ldi	r31, 0x00	; 0
    2b3a:	6a 2f       	mov	r22, r26
    2b3c:	6f 2b       	or	r22, r31
    2b3e:	60 0f       	add	r22, r16
    2b40:	e1 e0       	ldi	r30, 0x01	; 1
    2b42:	60 17       	cp	r22, r16
    2b44:	08 f0       	brcs	.+2      	; 0x2b48 <MLSetGyroCalibration+0x2ae>
    2b46:	e0 e0       	ldi	r30, 0x00	; 0
    2b48:	7e 2f       	mov	r23, r30
    2b4a:	7f 0d       	add	r23, r15
    2b4c:	e1 e0       	ldi	r30, 0x01	; 1
    2b4e:	7f 15       	cp	r23, r15
    2b50:	08 f0       	brcs	.+2      	; 0x2b54 <MLSetGyroCalibration+0x2ba>
    2b52:	e0 e0       	ldi	r30, 0x00	; 0
    2b54:	8e 2f       	mov	r24, r30
    2b56:	8e 0d       	add	r24, r14
    2b58:	91 e0       	ldi	r25, 0x01	; 1
    2b5a:	8e 15       	cp	r24, r14
    2b5c:	08 f0       	brcs	.+2      	; 0x2b60 <MLSetGyroCalibration+0x2c6>
    2b5e:	90 e0       	ldi	r25, 0x00	; 0
    2b60:	ac 2d       	mov	r26, r12
    2b62:	f3 2f       	mov	r31, r19
    2b64:	e4 2f       	mov	r30, r20
    2b66:	9d 0d       	add	r25, r13
    2b68:	2a 2f       	mov	r18, r26
    2b6a:	3f 2f       	mov	r19, r31
    2b6c:	4e 2f       	mov	r20, r30
    2b6e:	0e e1       	ldi	r16, 0x1E	; 30
    2b70:	0e 94 86 2c 	call	0x590c	; 0x590c <__ashrdi3>
    2b74:	12 2f       	mov	r17, r18
    2b76:	03 2f       	mov	r16, r19
    2b78:	f4 2e       	mov	r15, r20
    2b7a:	e5 2e       	mov	r14, r21
                regs[0] = (unsigned char) (sf / 16777216L);
    2b7c:	62 2f       	mov	r22, r18
    2b7e:	70 2f       	mov	r23, r16
    2b80:	8f 2d       	mov	r24, r15
    2b82:	9e 2d       	mov	r25, r14
    2b84:	20 e0       	ldi	r18, 0x00	; 0
    2b86:	30 e0       	ldi	r19, 0x00	; 0
    2b88:	40 e0       	ldi	r20, 0x00	; 0
    2b8a:	51 e0       	ldi	r21, 0x01	; 1
    2b8c:	0e 94 c9 38 	call	0x7192	; 0x7192 <__divmodsi4>
    2b90:	29 83       	std	Y+1, r18	; 0x01
                regs[1] = (unsigned char) ((sf / 65536L) % 256);
    2b92:	61 2f       	mov	r22, r17
    2b94:	70 2f       	mov	r23, r16
    2b96:	8f 2d       	mov	r24, r15
    2b98:	9e 2d       	mov	r25, r14
    2b9a:	20 e0       	ldi	r18, 0x00	; 0
    2b9c:	30 e0       	ldi	r19, 0x00	; 0
    2b9e:	41 e0       	ldi	r20, 0x01	; 1
    2ba0:	50 e0       	ldi	r21, 0x00	; 0
    2ba2:	0e 94 c9 38 	call	0x7192	; 0x7192 <__divmodsi4>
    2ba6:	ca 01       	movw	r24, r20
    2ba8:	b9 01       	movw	r22, r18
    2baa:	20 e0       	ldi	r18, 0x00	; 0
    2bac:	31 e0       	ldi	r19, 0x01	; 1
    2bae:	40 e0       	ldi	r20, 0x00	; 0
    2bb0:	50 e0       	ldi	r21, 0x00	; 0
    2bb2:	0e 94 c9 38 	call	0x7192	; 0x7192 <__divmodsi4>
    2bb6:	6a 83       	std	Y+2, r22	; 0x02
                regs[2] = (unsigned char) ((sf / 256) % 256);
    2bb8:	61 2f       	mov	r22, r17
    2bba:	70 2f       	mov	r23, r16
    2bbc:	8f 2d       	mov	r24, r15
    2bbe:	9e 2d       	mov	r25, r14
    2bc0:	20 e0       	ldi	r18, 0x00	; 0
    2bc2:	31 e0       	ldi	r19, 0x01	; 1
    2bc4:	40 e0       	ldi	r20, 0x00	; 0
    2bc6:	50 e0       	ldi	r21, 0x00	; 0
    2bc8:	0e 94 c9 38 	call	0x7192	; 0x7192 <__divmodsi4>
    2bcc:	ca 01       	movw	r24, r20
    2bce:	b9 01       	movw	r22, r18
    2bd0:	20 e0       	ldi	r18, 0x00	; 0
    2bd2:	31 e0       	ldi	r19, 0x01	; 1
    2bd4:	40 e0       	ldi	r20, 0x00	; 0
    2bd6:	50 e0       	ldi	r21, 0x00	; 0
    2bd8:	0e 94 c9 38 	call	0x7192	; 0x7192 <__divmodsi4>
    2bdc:	6b 83       	std	Y+3, r22	; 0x03
                regs[3] = (unsigned char) (sf % 256);
    2bde:	61 2f       	mov	r22, r17
    2be0:	70 2f       	mov	r23, r16
    2be2:	8f 2d       	mov	r24, r15
    2be4:	9e 2d       	mov	r25, r14
    2be6:	20 e0       	ldi	r18, 0x00	; 0
    2be8:	31 e0       	ldi	r19, 0x01	; 1
    2bea:	40 e0       	ldi	r20, 0x00	; 0
    2bec:	50 e0       	ldi	r21, 0x00	; 0
    2bee:	0e 94 c9 38 	call	0x7192	; 0x7192 <__divmodsi4>
    2bf2:	6c 83       	std	Y+4, r22	; 0x04
                if (MLDLSetMemoryMPU(KEY_D_0_104, 4, regs) != ML_SUCCESS)
    2bf4:	81 e2       	ldi	r24, 0x21	; 33
    2bf6:	90 e0       	ldi	r25, 0x00	; 0
    2bf8:	64 e0       	ldi	r22, 0x04	; 4
    2bfa:	70 e0       	ldi	r23, 0x00	; 0
    2bfc:	ae 01       	movw	r20, r28
    2bfe:	4f 5f       	subi	r20, 0xFF	; 255
    2c00:	5f 4f       	sbci	r21, 0xFF	; 255
    2c02:	0e 94 be 0a 	call	0x157c	; 0x157c <MLDLSetMemoryMPU>
    2c06:	88 23       	and	r24, r24
    2c08:	09 f0       	breq	.+2      	; 0x2c0c <MLSetGyroCalibration+0x372>
    2c0a:	69 c0       	rjmp	.+210    	; 0x2cde <MLSetGyroCalibration+0x444>
                        return ML_ERROR;

                if (mlxData.mlGyroSens != 0)
    2c0c:	e0 90 71 03 	lds	r14, 0x0371
    2c10:	f0 90 72 03 	lds	r15, 0x0372
    2c14:	00 91 73 03 	lds	r16, 0x0373
    2c18:	10 91 74 03 	lds	r17, 0x0374
    2c1c:	e1 14       	cp	r14, r1
    2c1e:	f1 04       	cpc	r15, r1
    2c20:	01 05       	cpc	r16, r1
    2c22:	11 05       	cpc	r17, r1
    2c24:	21 f4       	brne	.+8      	; 0x2c2e <MLSetGyroCalibration+0x394>
    2c26:	ee 24       	eor	r14, r14
    2c28:	ff 24       	eor	r15, r15
    2c2a:	87 01       	movw	r16, r14
    2c2c:	1a c0       	rjmp	.+52     	; 0x2c62 <MLSetGyroCalibration+0x3c8>
                {
                        sf = (long) ((long long) 23832619764371LL / mlxData.mlGyroSens);
    2c2e:	37 01       	movw	r6, r14
    2c30:	48 01       	movw	r8, r16
    2c32:	99 0c       	add	r9, r9
    2c34:	66 08       	sbc	r6, r6
    2c36:	76 2c       	mov	r7, r6
    2c38:	43 01       	movw	r8, r6
    2c3a:	23 e9       	ldi	r18, 0x93	; 147
    2c3c:	3a ec       	ldi	r19, 0xCA	; 202
    2c3e:	45 ed       	ldi	r20, 0xD5	; 213
    2c40:	56 ef       	ldi	r21, 0xF6	; 246
    2c42:	6c ea       	ldi	r22, 0xAC	; 172
    2c44:	75 e1       	ldi	r23, 0x15	; 21
    2c46:	80 e0       	ldi	r24, 0x00	; 0
    2c48:	90 e0       	ldi	r25, 0x00	; 0
    2c4a:	57 01       	movw	r10, r14
    2c4c:	68 01       	movw	r12, r16
    2c4e:	e6 2c       	mov	r14, r6
    2c50:	f6 2c       	mov	r15, r6
    2c52:	06 2d       	mov	r16, r6
    2c54:	16 2d       	mov	r17, r6
    2c56:	0e 94 0b 2d 	call	0x5a16	; 0x5a16 <__divdi3>
    2c5a:	c9 01       	movw	r24, r18
    2c5c:	da 01       	movw	r26, r20
    2c5e:	7c 01       	movw	r14, r24
    2c60:	8d 01       	movw	r16, r26
                } else
                {
                        sf = 0;
                }
                regs[0] = (unsigned char) (sf / 16777216L);
    2c62:	c8 01       	movw	r24, r16
    2c64:	b7 01       	movw	r22, r14
    2c66:	20 e0       	ldi	r18, 0x00	; 0
    2c68:	30 e0       	ldi	r19, 0x00	; 0
    2c6a:	40 e0       	ldi	r20, 0x00	; 0
    2c6c:	51 e0       	ldi	r21, 0x01	; 1
    2c6e:	0e 94 c9 38 	call	0x7192	; 0x7192 <__divmodsi4>
    2c72:	29 83       	std	Y+1, r18	; 0x01
                regs[1] = (unsigned char) ((sf / 65536L) % 256);
    2c74:	c8 01       	movw	r24, r16
    2c76:	b7 01       	movw	r22, r14
    2c78:	20 e0       	ldi	r18, 0x00	; 0
    2c7a:	30 e0       	ldi	r19, 0x00	; 0
    2c7c:	41 e0       	ldi	r20, 0x01	; 1
    2c7e:	50 e0       	ldi	r21, 0x00	; 0
    2c80:	0e 94 c9 38 	call	0x7192	; 0x7192 <__divmodsi4>
    2c84:	ca 01       	movw	r24, r20
    2c86:	b9 01       	movw	r22, r18
    2c88:	20 e0       	ldi	r18, 0x00	; 0
    2c8a:	31 e0       	ldi	r19, 0x01	; 1
    2c8c:	40 e0       	ldi	r20, 0x00	; 0
    2c8e:	50 e0       	ldi	r21, 0x00	; 0
    2c90:	0e 94 c9 38 	call	0x7192	; 0x7192 <__divmodsi4>
    2c94:	6a 83       	std	Y+2, r22	; 0x02
                regs[2] = (unsigned char) ((sf / 256) % 256);
    2c96:	c8 01       	movw	r24, r16
    2c98:	b7 01       	movw	r22, r14
    2c9a:	20 e0       	ldi	r18, 0x00	; 0
    2c9c:	31 e0       	ldi	r19, 0x01	; 1
    2c9e:	40 e0       	ldi	r20, 0x00	; 0
    2ca0:	50 e0       	ldi	r21, 0x00	; 0
    2ca2:	0e 94 c9 38 	call	0x7192	; 0x7192 <__divmodsi4>
    2ca6:	ca 01       	movw	r24, r20
    2ca8:	b9 01       	movw	r22, r18
    2caa:	20 e0       	ldi	r18, 0x00	; 0
    2cac:	31 e0       	ldi	r19, 0x01	; 1
    2cae:	40 e0       	ldi	r20, 0x00	; 0
    2cb0:	50 e0       	ldi	r21, 0x00	; 0
    2cb2:	0e 94 c9 38 	call	0x7192	; 0x7192 <__divmodsi4>
    2cb6:	6b 83       	std	Y+3, r22	; 0x03
                regs[3] = (unsigned char) (sf % 256);
    2cb8:	c8 01       	movw	r24, r16
    2cba:	b7 01       	movw	r22, r14
    2cbc:	20 e0       	ldi	r18, 0x00	; 0
    2cbe:	31 e0       	ldi	r19, 0x01	; 1
    2cc0:	40 e0       	ldi	r20, 0x00	; 0
    2cc2:	50 e0       	ldi	r21, 0x00	; 0
    2cc4:	0e 94 c9 38 	call	0x7192	; 0x7192 <__divmodsi4>
    2cc8:	6c 83       	std	Y+4, r22	; 0x04
                if (MLDLSetMemoryMPU(KEY_D_0_24, 4, regs) != ML_SUCCESS)
    2cca:	89 e1       	ldi	r24, 0x19	; 25
    2ccc:	90 e0       	ldi	r25, 0x00	; 0
    2cce:	64 e0       	ldi	r22, 0x04	; 4
    2cd0:	70 e0       	ldi	r23, 0x00	; 0
    2cd2:	ae 01       	movw	r20, r28
    2cd4:	4f 5f       	subi	r20, 0xFF	; 255
    2cd6:	5f 4f       	sbci	r21, 0xFF	; 255
    2cd8:	0e 94 be 0a 	call	0x157c	; 0x157c <MLDLSetMemoryMPU>
    2cdc:	81 11       	cpse	r24, r1
    2cde:	81 e0       	ldi	r24, 0x01	; 1
                        return ML_ERROR;
        }
        return ML_SUCCESS;
}
    2ce0:	2c 96       	adiw	r28, 0x0c	; 12
    2ce2:	0f b6       	in	r0, 0x3f	; 63
    2ce4:	f8 94       	cli
    2ce6:	de bf       	out	0x3e, r29	; 62
    2ce8:	0f be       	out	0x3f, r0	; 63
    2cea:	cd bf       	out	0x3d, r28	; 61
    2cec:	cf 91       	pop	r28
    2cee:	df 91       	pop	r29
    2cf0:	1f 91       	pop	r17
    2cf2:	0f 91       	pop	r16
    2cf4:	ff 90       	pop	r15
    2cf6:	ef 90       	pop	r14
    2cf8:	df 90       	pop	r13
    2cfa:	cf 90       	pop	r12
    2cfc:	bf 90       	pop	r11
    2cfe:	af 90       	pop	r10
    2d00:	9f 90       	pop	r9
    2d02:	8f 90       	pop	r8
    2d04:	7f 90       	pop	r7
    2d06:	6f 90       	pop	r6
    2d08:	08 95       	ret

00002d0a <MLSetAccelCalibration>:
 *             example corresponds to a 3 by 3 identity matrix.
 *
 *  @return    ML_SUCCESS if successful or Non-zero error code otherwise.
 */
tMLError MLSetAccelCalibration(float range, float *orientation)
{
    2d0a:	7f 92       	push	r7
    2d0c:	8f 92       	push	r8
    2d0e:	9f 92       	push	r9
    2d10:	af 92       	push	r10
    2d12:	bf 92       	push	r11
    2d14:	cf 92       	push	r12
    2d16:	df 92       	push	r13
    2d18:	ef 92       	push	r14
    2d1a:	ff 92       	push	r15
    2d1c:	0f 93       	push	r16
    2d1e:	1f 93       	push	r17
    2d20:	df 93       	push	r29
    2d22:	cf 93       	push	r28
    2d24:	cd b7       	in	r28, 0x3d	; 61
    2d26:	de b7       	in	r29, 0x3e	; 62
    2d28:	2c 97       	sbiw	r28, 0x0c	; 12
    2d2a:	0f b6       	in	r0, 0x3f	; 63
    2d2c:	f8 94       	cli
    2d2e:	de bf       	out	0x3e, r29	; 62
    2d30:	0f be       	out	0x3f, r0	; 63
    2d32:	cd bf       	out	0x3d, r28	; 61
    2d34:	7b 01       	movw	r14, r22
    2d36:	8c 01       	movw	r16, r24
    2d38:	b4 2e       	mov	r11, r20
    2d3a:	a5 2e       	mov	r10, r21
        unsigned char maxVal = 0;
        unsigned char tmpPtr = 0;
        unsigned char tmpSign = 0;
        int_fast8_t i = 0;
        long sf = 0;
        unsigned char regs[12] = { 0 }; // fixme
    2d3c:	fe 01       	movw	r30, r28
    2d3e:	31 96       	adiw	r30, 0x01	; 1
    2d40:	8c e0       	ldi	r24, 0x0C	; 12
    2d42:	df 01       	movw	r26, r30
    2d44:	1d 92       	st	X+, r1
    2d46:	8a 95       	dec	r24
    2d48:	e9 f7       	brne	.-6      	; 0x2d44 <MLSetAccelCalibration+0x3a>

        if (isCompatible(IMU_C_OPEN | IMU_C_START, IMU_C_OPEN_CALLED) != ML_SUCCESS)
    2d4a:	83 e0       	ldi	r24, 0x03	; 3
    2d4c:	61 e0       	ldi	r22, 0x01	; 1
    2d4e:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <isCompatible>
    2d52:	88 23       	and	r24, r24
    2d54:	09 f0       	breq	.+2      	; 0x2d58 <MLSetAccelCalibration+0x4e>
    2d56:	26 c1       	rjmp	.+588    	; 0x2fa4 <MLSetAccelCalibration+0x29a>
 *  @return    ML_SUCCESS if successful or Non-zero error code otherwise.
 */
tMLError MLSetAccelCalibration(float range, float *orientation)
{
        int kk;
        float scale = range / 32768.f;
    2d58:	c8 01       	movw	r24, r16
    2d5a:	b7 01       	movw	r22, r14
    2d5c:	20 e0       	ldi	r18, 0x00	; 0
    2d5e:	30 e0       	ldi	r19, 0x00	; 0
    2d60:	40 e0       	ldi	r20, 0x00	; 0
    2d62:	58 e3       	ldi	r21, 0x38	; 56
    2d64:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <__mulsf3>
    2d68:	6b 01       	movw	r12, r22
    2d6a:	7c 01       	movw	r14, r24
        unsigned char regs[12] = { 0 }; // fixme

        if (isCompatible(IMU_C_OPEN | IMU_C_START, IMU_C_OPEN_CALLED) != ML_SUCCESS)
                return ML_ERROR;

        if (scale == 0)
    2d6c:	20 e0       	ldi	r18, 0x00	; 0
    2d6e:	30 e0       	ldi	r19, 0x00	; 0
    2d70:	40 e0       	ldi	r20, 0x00	; 0
    2d72:	50 e0       	ldi	r21, 0x00	; 0
    2d74:	0e 94 11 36 	call	0x6c22	; 0x6c22 <__cmpsf2>
    2d78:	88 23       	and	r24, r24
    2d7a:	41 f4       	brne	.+16     	; 0x2d8c <MLSetAccelCalibration+0x82>
        {
                mlxData.mlAccelSens = 0;
    2d7c:	10 92 6d 03 	sts	0x036D, r1
    2d80:	10 92 6e 03 	sts	0x036E, r1
    2d84:	10 92 6f 03 	sts	0x036F, r1
    2d88:	10 92 70 03 	sts	0x0370, r1
    2d8c:	8b 2d       	mov	r24, r11
    2d8e:	9a 2d       	mov	r25, r10
    2d90:	9c 01       	movw	r18, r24
    2d92:	59 01       	movw	r10, r18
    2d94:	21 e0       	ldi	r18, 0x01	; 1
    2d96:	82 2e       	mov	r8, r18
    2d98:	23 e0       	ldi	r18, 0x03	; 3
    2d9a:	92 2e       	mov	r9, r18
    2d9c:	84 01       	movw	r16, r8
        }

        for (kk = 0; kk < 9; ++kk)
                mlxData.mlAccelCal[kk] = (long) (scale * orientation[kk] * 1073741824L);
    2d9e:	c7 01       	movw	r24, r14
    2da0:	b6 01       	movw	r22, r12
    2da2:	f5 01       	movw	r30, r10
    2da4:	21 91       	ld	r18, Z+
    2da6:	31 91       	ld	r19, Z+
    2da8:	41 91       	ld	r20, Z+
    2daa:	51 91       	ld	r21, Z+
    2dac:	5f 01       	movw	r10, r30
    2dae:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <__mulsf3>
    2db2:	20 e0       	ldi	r18, 0x00	; 0
    2db4:	30 e0       	ldi	r19, 0x00	; 0
    2db6:	40 e8       	ldi	r20, 0x80	; 128
    2db8:	5e e4       	ldi	r21, 0x4E	; 78
    2dba:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <__mulsf3>
    2dbe:	0e 94 7d 36 	call	0x6cfa	; 0x6cfa <__fixsfsi>
    2dc2:	d8 01       	movw	r26, r16
    2dc4:	6d 93       	st	X+, r22
    2dc6:	7d 93       	st	X+, r23
    2dc8:	8d 93       	st	X+, r24
    2dca:	9d 93       	st	X+, r25
    2dcc:	8d 01       	movw	r16, r26
        if (scale == 0)
        {
                mlxData.mlAccelSens = 0;
        }

        for (kk = 0; kk < 9; ++kk)
    2dce:	b3 e0       	ldi	r27, 0x03	; 3
    2dd0:	05 32       	cpi	r16, 0x25	; 37
    2dd2:	1b 07       	cpc	r17, r27
    2dd4:	21 f7       	brne	.-56     	; 0x2d9e <MLSetAccelCalibration+0x94>

        {
                unsigned char tmpA = DINA4C;
                unsigned char tmpB = DINACD;
                unsigned char tmpC = DINA6C;
                regs[3] = DINA26;
    2dd6:	86 e2       	ldi	r24, 0x26	; 38
    2dd8:	8c 83       	std	Y+4, r24	; 0x04
                regs[4] = DINA46;
    2dda:	86 e4       	ldi	r24, 0x46	; 70
    2ddc:	8d 83       	std	Y+5, r24	; 0x05
                regs[5] = DINA66;
    2dde:	86 e6       	ldi	r24, 0x66	; 102
    2de0:	8e 83       	std	Y+6, r24	; 0x06
    2de2:	fe 01       	movw	r30, r28
    2de4:	31 96       	adiw	r30, 0x01	; 1
    2de6:	dd 24       	eor	r13, r13
    2de8:	d3 94       	inc	r13
                                regs[tmpPtr++] = tmpA;
                                if (tmpSign)
                                        regs[tmpPtr + 2] |= 0x01;
                        } else if (maxVal == 1)
                        {
                                regs[tmpPtr++] = tmpB;
    2dea:	9d ec       	ldi	r25, 0xCD	; 205
    2dec:	a9 2e       	mov	r10, r25
                                if (mlxData.mlAccelCal[2 + 3 * i] < 0)
                                        tmpSign = 1;
                        }
                        if (maxVal == 0)
                        {
                                regs[tmpPtr++] = tmpA;
    2dee:	8c e4       	ldi	r24, 0x4C	; 76
    2df0:	b8 2e       	mov	r11, r24
                                regs[tmpPtr++] = tmpB;
                                if (tmpSign)
                                        regs[tmpPtr + 2] |= 0x01;
                        } else
                        {
                                regs[tmpPtr++] = tmpC;
    2df2:	0c e6       	ldi	r16, 0x6C	; 108
    2df4:	c0 2e       	mov	r12, r16
                regs[5] = DINA66;
                for (i = 0; i < 3; i++)
                {
                        maxVal = 0;
                        tmpSign = 0;
                        if (mlxData.mlAccelCal[0 + 3 * i] < 0)
    2df6:	d4 01       	movw	r26, r8
    2df8:	2d 91       	ld	r18, X+
    2dfa:	3d 91       	ld	r19, X+
    2dfc:	4d 91       	ld	r20, X+
    2dfe:	5c 91       	ld	r21, X
    2e00:	da 01       	movw	r26, r20
    2e02:	c9 01       	movw	r24, r18
    2e04:	88 27       	eor	r24, r24
    2e06:	b7 fd       	sbrc	r27, 7
    2e08:	83 95       	inc	r24
    2e0a:	99 27       	eor	r25, r25
    2e0c:	aa 27       	eor	r26, r26
    2e0e:	bb 27       	eor	r27, r27
    2e10:	78 2e       	mov	r7, r24
                                tmpSign = 1;
                        if (abs(mlxData.mlAccelCal[1 + 3 * i]) > abs(mlxData.mlAccelCal[0 + 3 * i]))
    2e12:	d4 01       	movw	r26, r8
    2e14:	14 96       	adiw	r26, 0x04	; 4
    2e16:	ed 90       	ld	r14, X+
    2e18:	fd 90       	ld	r15, X+
    2e1a:	0d 91       	ld	r16, X+
    2e1c:	1c 91       	ld	r17, X
    2e1e:	17 97       	sbiw	r26, 0x07	; 7
    2e20:	c7 01       	movw	r24, r14
    2e22:	f7 fe       	sbrs	r15, 7
    2e24:	03 c0       	rjmp	.+6      	; 0x2e2c <MLSetAccelCalibration+0x122>
    2e26:	90 95       	com	r25
    2e28:	81 95       	neg	r24
    2e2a:	9f 4f       	sbci	r25, 0xFF	; 255
    2e2c:	b9 01       	movw	r22, r18
    2e2e:	37 ff       	sbrs	r19, 7
    2e30:	03 c0       	rjmp	.+6      	; 0x2e38 <MLSetAccelCalibration+0x12e>
    2e32:	70 95       	com	r23
    2e34:	61 95       	neg	r22
    2e36:	7f 4f       	sbci	r23, 0xFF	; 255
    2e38:	68 17       	cp	r22, r24
    2e3a:	79 07       	cpc	r23, r25
    2e3c:	14 f0       	brlt	.+4      	; 0x2e42 <MLSetAccelCalibration+0x138>
    2e3e:	10 e0       	ldi	r17, 0x00	; 0
    2e40:	07 c0       	rjmp	.+14     	; 0x2e50 <MLSetAccelCalibration+0x146>
                        {
                                maxVal = 1;
                                if (mlxData.mlAccelCal[1 + 3 * i] < 0)
    2e42:	17 ff       	sbrs	r17, 7
    2e44:	04 c0       	rjmp	.+8      	; 0x2e4e <MLSetAccelCalibration+0x144>
    2e46:	11 e0       	ldi	r17, 0x01	; 1
    2e48:	77 24       	eor	r7, r7
    2e4a:	73 94       	inc	r7
    2e4c:	01 c0       	rjmp	.+2      	; 0x2e50 <MLSetAccelCalibration+0x146>
    2e4e:	11 e0       	ldi	r17, 0x01	; 1
                                        tmpSign = 1;
                        }
                        if (abs(mlxData.mlAccelCal[2 + 3 * i]) > abs(mlxData.mlAccelCal[1 + 3 * i]))
    2e50:	d4 01       	movw	r26, r8
    2e52:	18 96       	adiw	r26, 0x08	; 8
    2e54:	2d 91       	ld	r18, X+
    2e56:	3d 91       	ld	r19, X+
    2e58:	4d 91       	ld	r20, X+
    2e5a:	5c 91       	ld	r21, X
    2e5c:	1b 97       	sbiw	r26, 0x0b	; 11
    2e5e:	b9 01       	movw	r22, r18
    2e60:	37 ff       	sbrs	r19, 7
    2e62:	03 c0       	rjmp	.+6      	; 0x2e6a <MLSetAccelCalibration+0x160>
    2e64:	70 95       	com	r23
    2e66:	61 95       	neg	r22
    2e68:	7f 4f       	sbci	r23, 0xFF	; 255
    2e6a:	86 17       	cp	r24, r22
    2e6c:	97 07       	cpc	r25, r23
    2e6e:	24 f4       	brge	.+8      	; 0x2e78 <MLSetAccelCalibration+0x16e>
                                regs[tmpPtr++] = tmpB;
                                if (tmpSign)
                                        regs[tmpPtr + 2] |= 0x01;
                        } else
                        {
                                regs[tmpPtr++] = tmpC;
    2e70:	c0 82       	st	Z, r12
                                if (tmpSign)
    2e72:	57 fd       	sbrc	r21, 7
    2e74:	08 c0       	rjmp	.+16     	; 0x2e86 <MLSetAccelCalibration+0x17c>
    2e76:	0a c0       	rjmp	.+20     	; 0x2e8c <MLSetAccelCalibration+0x182>
                                tmpSign = 0;
                                maxVal = 2;
                                if (mlxData.mlAccelCal[2 + 3 * i] < 0)
                                        tmpSign = 1;
                        }
                        if (maxVal == 0)
    2e78:	11 23       	and	r17, r17
    2e7a:	11 f4       	brne	.+4      	; 0x2e80 <MLSetAccelCalibration+0x176>
                        {
                                regs[tmpPtr++] = tmpA;
    2e7c:	b0 82       	st	Z, r11
    2e7e:	01 c0       	rjmp	.+2      	; 0x2e82 <MLSetAccelCalibration+0x178>
                                if (tmpSign)
                                        regs[tmpPtr + 2] |= 0x01;
                        } else if (maxVal == 1)
                        {
                                regs[tmpPtr++] = tmpB;
    2e80:	a0 82       	st	Z, r10
                                if (tmpSign)
    2e82:	77 20       	and	r7, r7
    2e84:	19 f0       	breq	.+6      	; 0x2e8c <MLSetAccelCalibration+0x182>
                                        regs[tmpPtr + 2] |= 0x01;
                        } else
                        {
                                regs[tmpPtr++] = tmpC;
                                if (tmpSign)
                                        regs[tmpPtr + 2] |= 0x01;
    2e86:	83 81       	ldd	r24, Z+3	; 0x03
    2e88:	81 60       	ori	r24, 0x01	; 1
    2e8a:	83 83       	std	Z+3, r24	; 0x03
    2e8c:	d3 94       	inc	r13
    2e8e:	8c e0       	ldi	r24, 0x0C	; 12
    2e90:	90 e0       	ldi	r25, 0x00	; 0
    2e92:	88 0e       	add	r8, r24
    2e94:	99 1e       	adc	r9, r25
    2e96:	31 96       	adiw	r30, 0x01	; 1
                unsigned char tmpB = DINACD;
                unsigned char tmpC = DINA6C;
                regs[3] = DINA26;
                regs[4] = DINA46;
                regs[5] = DINA66;
                for (i = 0; i < 3; i++)
    2e98:	94 e0       	ldi	r25, 0x04	; 4
    2e9a:	d9 16       	cp	r13, r25
    2e9c:	09 f0       	breq	.+2      	; 0x2ea0 <MLSetAccelCalibration+0x196>
    2e9e:	ab cf       	rjmp	.-170    	; 0x2df6 <MLSetAccelCalibration+0xec>
                                regs[tmpPtr++] = tmpC;
                                if (tmpSign)
                                        regs[tmpPtr + 2] |= 0x01;
                        }
                }
                if (MLDLSetMemoryMPU(KEY_FCFG_2, 3, regs) != ML_SUCCESS)
    2ea0:	81 e0       	ldi	r24, 0x01	; 1
    2ea2:	90 e0       	ldi	r25, 0x00	; 0
    2ea4:	63 e0       	ldi	r22, 0x03	; 3
    2ea6:	70 e0       	ldi	r23, 0x00	; 0
    2ea8:	ae 01       	movw	r20, r28
    2eaa:	4f 5f       	subi	r20, 0xFF	; 255
    2eac:	5f 4f       	sbci	r21, 0xFF	; 255
    2eae:	0e 94 be 0a 	call	0x157c	; 0x157c <MLDLSetMemoryMPU>
    2eb2:	88 23       	and	r24, r24
    2eb4:	09 f0       	breq	.+2      	; 0x2eb8 <MLSetAccelCalibration+0x1ae>
    2eb6:	76 c0       	rjmp	.+236    	; 0x2fa4 <MLSetAccelCalibration+0x29a>
                        return ML_ERROR;
                if (MLDLSetMemoryMPU(KEY_FCFG_7, 3, &regs[3]) != ML_SUCCESS)
    2eb8:	85 e0       	ldi	r24, 0x05	; 5
    2eba:	90 e0       	ldi	r25, 0x00	; 0
    2ebc:	63 e0       	ldi	r22, 0x03	; 3
    2ebe:	70 e0       	ldi	r23, 0x00	; 0
    2ec0:	ae 01       	movw	r20, r28
    2ec2:	4c 5f       	subi	r20, 0xFC	; 252
    2ec4:	5f 4f       	sbci	r21, 0xFF	; 255
    2ec6:	0e 94 be 0a 	call	0x157c	; 0x157c <MLDLSetMemoryMPU>
    2eca:	88 23       	and	r24, r24
    2ecc:	09 f0       	breq	.+2      	; 0x2ed0 <MLSetAccelCalibration+0x1c6>
    2ece:	6a c0       	rjmp	.+212    	; 0x2fa4 <MLSetAccelCalibration+0x29a>
                        return ML_ERROR;
        }

        if (mlxData.mlAccelSens != 0)
    2ed0:	20 91 6d 03 	lds	r18, 0x036D
    2ed4:	30 91 6e 03 	lds	r19, 0x036E
    2ed8:	40 91 6f 03 	lds	r20, 0x036F
    2edc:	50 91 70 03 	lds	r21, 0x0370
    2ee0:	21 15       	cp	r18, r1
    2ee2:	31 05       	cpc	r19, r1
    2ee4:	41 05       	cpc	r20, r1
    2ee6:	51 05       	cpc	r21, r1
    2ee8:	21 f4       	brne	.+8      	; 0x2ef2 <MLSetAccelCalibration+0x1e8>
    2eea:	ee 24       	eor	r14, r14
    2eec:	ff 24       	eor	r15, r15
    2eee:	87 01       	movw	r16, r14
    2ef0:	0a c0       	rjmp	.+20     	; 0x2f06 <MLSetAccelCalibration+0x1fc>
        {
                sf = 1073741824 / mlxData.mlAccelSens;
    2ef2:	60 e0       	ldi	r22, 0x00	; 0
    2ef4:	70 e0       	ldi	r23, 0x00	; 0
    2ef6:	80 e0       	ldi	r24, 0x00	; 0
    2ef8:	90 e4       	ldi	r25, 0x40	; 64
    2efa:	0e 94 c9 38 	call	0x7192	; 0x7192 <__divmodsi4>
    2efe:	c9 01       	movw	r24, r18
    2f00:	da 01       	movw	r26, r20
    2f02:	7c 01       	movw	r14, r24
    2f04:	8d 01       	movw	r16, r26
        } else
        {
                sf = 0;
        }

        regs[0] = (unsigned char) (sf / 256);
    2f06:	c8 01       	movw	r24, r16
    2f08:	b7 01       	movw	r22, r14
    2f0a:	20 e0       	ldi	r18, 0x00	; 0
    2f0c:	31 e0       	ldi	r19, 0x01	; 1
    2f0e:	40 e0       	ldi	r20, 0x00	; 0
    2f10:	50 e0       	ldi	r21, 0x00	; 0
    2f12:	0e 94 c9 38 	call	0x7192	; 0x7192 <__divmodsi4>
    2f16:	29 83       	std	Y+1, r18	; 0x01
        regs[1] = (unsigned char) (sf % 256);
    2f18:	c8 01       	movw	r24, r16
    2f1a:	b7 01       	movw	r22, r14
    2f1c:	20 e0       	ldi	r18, 0x00	; 0
    2f1e:	31 e0       	ldi	r19, 0x01	; 1
    2f20:	40 e0       	ldi	r20, 0x00	; 0
    2f22:	50 e0       	ldi	r21, 0x00	; 0
    2f24:	0e 94 c9 38 	call	0x7192	; 0x7192 <__divmodsi4>
    2f28:	6a 83       	std	Y+2, r22	; 0x02
        if (MLDLSetMemoryMPU(KEY_D_0_108, 2, regs) != ML_SUCCESS)
    2f2a:	82 e2       	ldi	r24, 0x22	; 34
    2f2c:	90 e0       	ldi	r25, 0x00	; 0
    2f2e:	62 e0       	ldi	r22, 0x02	; 2
    2f30:	70 e0       	ldi	r23, 0x00	; 0
    2f32:	6e 01       	movw	r12, r28
    2f34:	08 94       	sec
    2f36:	c1 1c       	adc	r12, r1
    2f38:	d1 1c       	adc	r13, r1
    2f3a:	a6 01       	movw	r20, r12
    2f3c:	0e 94 be 0a 	call	0x157c	; 0x157c <MLDLSetMemoryMPU>
    2f40:	88 23       	and	r24, r24
    2f42:	81 f5       	brne	.+96     	; 0x2fa4 <MLSetAccelCalibration+0x29a>
                return ML_ERROR;

        sf = mlxData.mlAccelSens / 1024;
    2f44:	60 91 6d 03 	lds	r22, 0x036D
    2f48:	70 91 6e 03 	lds	r23, 0x036E
    2f4c:	80 91 6f 03 	lds	r24, 0x036F
    2f50:	90 91 70 03 	lds	r25, 0x0370
    2f54:	20 e0       	ldi	r18, 0x00	; 0
    2f56:	34 e0       	ldi	r19, 0x04	; 4
    2f58:	40 e0       	ldi	r20, 0x00	; 0
    2f5a:	50 e0       	ldi	r21, 0x00	; 0
    2f5c:	0e 94 c9 38 	call	0x7192	; 0x7192 <__divmodsi4>
    2f60:	12 2f       	mov	r17, r18
    2f62:	03 2f       	mov	r16, r19
    2f64:	f4 2e       	mov	r15, r20
    2f66:	e5 2e       	mov	r14, r21
        regs[0] = (unsigned char) (sf / 256);
    2f68:	62 2f       	mov	r22, r18
    2f6a:	73 2f       	mov	r23, r19
    2f6c:	84 2f       	mov	r24, r20
    2f6e:	95 2f       	mov	r25, r21
    2f70:	20 e0       	ldi	r18, 0x00	; 0
    2f72:	31 e0       	ldi	r19, 0x01	; 1
    2f74:	40 e0       	ldi	r20, 0x00	; 0
    2f76:	50 e0       	ldi	r21, 0x00	; 0
    2f78:	0e 94 c9 38 	call	0x7192	; 0x7192 <__divmodsi4>
    2f7c:	29 83       	std	Y+1, r18	; 0x01
        regs[1] = (unsigned char) (sf % 256);
    2f7e:	61 2f       	mov	r22, r17
    2f80:	70 2f       	mov	r23, r16
    2f82:	8f 2d       	mov	r24, r15
    2f84:	9e 2d       	mov	r25, r14
    2f86:	20 e0       	ldi	r18, 0x00	; 0
    2f88:	31 e0       	ldi	r19, 0x01	; 1
    2f8a:	40 e0       	ldi	r20, 0x00	; 0
    2f8c:	50 e0       	ldi	r21, 0x00	; 0
    2f8e:	0e 94 c9 38 	call	0x7192	; 0x7192 <__divmodsi4>
    2f92:	6a 83       	std	Y+2, r22	; 0x02
        if (MLDLSetMemoryMPU(KEY_D_0_96, 2, regs) != ML_SUCCESS)
    2f94:	80 e2       	ldi	r24, 0x20	; 32
    2f96:	90 e0       	ldi	r25, 0x00	; 0
    2f98:	62 e0       	ldi	r22, 0x02	; 2
    2f9a:	70 e0       	ldi	r23, 0x00	; 0
    2f9c:	a6 01       	movw	r20, r12
    2f9e:	0e 94 be 0a 	call	0x157c	; 0x157c <MLDLSetMemoryMPU>
    2fa2:	81 11       	cpse	r24, r1
    2fa4:	81 e0       	ldi	r24, 0x01	; 1
                return ML_ERROR;

        return ML_SUCCESS;
}
    2fa6:	2c 96       	adiw	r28, 0x0c	; 12
    2fa8:	0f b6       	in	r0, 0x3f	; 63
    2faa:	f8 94       	cli
    2fac:	de bf       	out	0x3e, r29	; 62
    2fae:	0f be       	out	0x3f, r0	; 63
    2fb0:	cd bf       	out	0x3d, r28	; 61
    2fb2:	cf 91       	pop	r28
    2fb4:	df 91       	pop	r29
    2fb6:	1f 91       	pop	r17
    2fb8:	0f 91       	pop	r16
    2fba:	ff 90       	pop	r15
    2fbc:	ef 90       	pop	r14
    2fbe:	df 90       	pop	r13
    2fc0:	cf 90       	pop	r12
    2fc2:	bf 90       	pop	r11
    2fc4:	af 90       	pop	r10
    2fc6:	9f 90       	pop	r9
    2fc8:	8f 90       	pop	r8
    2fca:	7f 90       	pop	r7
    2fcc:	08 95       	ret

00002fce <MLDisableControl>:
 */
tMLError MLDisableControl(void)
{


        if (isCompatible(IMU_C_OPEN | IMU_C_START, IMU_C_OPEN_CALLED | IMU_C_START_CALLED) != ML_SUCCESS)
    2fce:	83 e0       	ldi	r24, 0x03	; 3
    2fd0:	63 e0       	ldi	r22, 0x03	; 3
    2fd2:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <isCompatible>
    2fd6:	88 23       	and	r24, r24
    2fd8:	11 f0       	breq	.+4      	; 0x2fde <MLDisableControl+0x10>
    2fda:	81 e0       	ldi	r24, 0x01	; 1
    2fdc:	08 95       	ret
                return ML_ERROR;

        mlxData.mlEngineMask &= (~ML_CONTROL);
    2fde:	80 91 e7 02 	lds	r24, 0x02E7
    2fe2:	90 91 e8 02 	lds	r25, 0x02E8
    2fe6:	8f 7b       	andi	r24, 0xBF	; 191
    2fe8:	90 93 e8 02 	sts	0x02E8, r25
    2fec:	80 93 e7 02 	sts	0x02E7, r24
    2ff0:	80 e0       	ldi	r24, 0x00	; 0
        return ML_SUCCESS;
}
    2ff2:	08 95       	ret

00002ff4 <MLEnableControl>:
 */
tMLError MLEnableControl(void)
{


        if (isCompatible(IMU_C_OPEN | IMU_C_START, IMU_C_OPEN_CALLED) != ML_SUCCESS)
    2ff4:	83 e0       	ldi	r24, 0x03	; 3
    2ff6:	61 e0       	ldi	r22, 0x01	; 1
    2ff8:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <isCompatible>
    2ffc:	88 23       	and	r24, r24
    2ffe:	11 f0       	breq	.+4      	; 0x3004 <MLEnableControl+0x10>
    3000:	81 e0       	ldi	r24, 0x01	; 1
    3002:	08 95       	ret
                return ML_ERROR;

        mlxData.mlEngineMask |= ML_CONTROL;
    3004:	80 91 e7 02 	lds	r24, 0x02E7
    3008:	90 91 e8 02 	lds	r25, 0x02E8
    300c:	80 64       	ori	r24, 0x40	; 64
    300e:	90 93 e8 02 	sts	0x02E8, r25
    3012:	80 93 e7 02 	sts	0x02E7, r24
    3016:	80 e0       	ldi	r24, 0x00	; 0
        return ML_SUCCESS;
}
    3018:	08 95       	ret

0000301a <IMUsetMotionCallback>:
 *                  motionState parameter, the new motion state.
 *                  May be one of ML_MOTION or ML_NO_MOTION.
 *  @return ML_SUCCESS if successful or Non-zero error code otherwise.
 */
tMLError IMUsetMotionCallback(void(*func)(unsigned short motionState))
{
    301a:	cf 93       	push	r28
    301c:	df 93       	push	r29
    301e:	ec 01       	movw	r28, r24

        if (isCompatible(IMU_C_OPEN | IMU_C_START, IMU_C_OPEN_CALLED) != ML_SUCCESS)
    3020:	83 e0       	ldi	r24, 0x03	; 3
    3022:	61 e0       	ldi	r22, 0x01	; 1
    3024:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <isCompatible>
    3028:	88 23       	and	r24, r24
    302a:	11 f0       	breq	.+4      	; 0x3030 <IMUsetMotionCallback+0x16>
    302c:	81 e0       	ldi	r24, 0x01	; 1
    302e:	05 c0       	rjmp	.+10     	; 0x303a <IMUsetMotionCallback+0x20>
                return ML_ERROR;

        mlParams.motionCallback = func;
    3030:	d0 93 6f 00 	sts	0x006F, r29
    3034:	c0 93 6e 00 	sts	0x006E, r28
    3038:	80 e0       	ldi	r24, 0x00	; 0

        return ML_SUCCESS;
}
    303a:	df 91       	pop	r29
    303c:	cf 91       	pop	r28
    303e:	08 95       	ret

00003040 <MLSetAuxSlaveAddr>:
 *          the accelerometer type at runtime (prior to MLDmpOpen() call).
 *  @param  auxSlaveAddr AUX slave address
 *  @return ML_SUCCESS if successful or Non-zero error code otherwise.
 */
tMLError MLSetAuxSlaveAddr(unsigned char auxSlaveAddr)
{
    3040:	0f 93       	push	r16
    3042:	1f 93       	push	r17
    3044:	18 2f       	mov	r17, r24
        tMLError result = ML_SUCCESS;

        if (isCompatible(IMU_C_OPEN | IMU_C_START, IMU_C_OPEN_CALLED) != ML_SUCCESS)
    3046:	83 e0       	ldi	r24, 0x03	; 3
    3048:	61 e0       	ldi	r22, 0x01	; 1
    304a:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <isCompatible>
    304e:	88 23       	and	r24, r24
    3050:	11 f0       	breq	.+4      	; 0x3056 <MLSetAuxSlaveAddr+0x16>
    3052:	81 e0       	ldi	r24, 0x01	; 1
    3054:	31 c0       	rjmp	.+98     	; 0x30b8 <MLSetAuxSlaveAddr+0x78>
                return ML_ERROR;

        result += MLDLSetAuxParams(auxSlaveAddr);
    3056:	81 2f       	mov	r24, r17
    3058:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <MLDLSetAuxParams>
    305c:	08 2f       	mov	r16, r24
 * @param   auxSlaveAddr    AUX slave address
 **/
void MLXAccelInit(unsigned char auxSlaveAddr)
{

        if (auxSlaveAddr == KIONIX_AUX_SLAVEADDR)
    305e:	1f 30       	cpi	r17, 0x0F	; 15
    3060:	41 f4       	brne	.+16     	; 0x3072 <MLSetAuxSlaveAddr+0x32>
        {
                mlxData.mlAccelSens = (int) 65536;
    3062:	10 92 6d 03 	sts	0x036D, r1
    3066:	10 92 6e 03 	sts	0x036E, r1
    306a:	10 92 6f 03 	sts	0x036F, r1
    306e:	10 92 70 03 	sts	0x0370, r1
        }

        // Default assumes orientation the same as the gyros
        mlxData.mlAccelCal[0] = mlxData.mlAccelSens; // mlRotMatrix[0]
    3072:	80 91 6d 03 	lds	r24, 0x036D
    3076:	90 91 6e 03 	lds	r25, 0x036E
    307a:	a0 91 6f 03 	lds	r26, 0x036F
    307e:	b0 91 70 03 	lds	r27, 0x0370
    3082:	80 93 01 03 	sts	0x0301, r24
    3086:	90 93 02 03 	sts	0x0302, r25
    308a:	a0 93 03 03 	sts	0x0303, r26
    308e:	b0 93 04 03 	sts	0x0304, r27
        mlxData.mlAccelCal[4] = mlxData.mlAccelSens; // mlRotMatrix[4]
    3092:	80 93 11 03 	sts	0x0311, r24
    3096:	90 93 12 03 	sts	0x0312, r25
    309a:	a0 93 13 03 	sts	0x0313, r26
    309e:	b0 93 14 03 	sts	0x0314, r27
        mlxData.mlAccelCal[8] = mlxData.mlAccelSens; // mlRotMatrix[8]
    30a2:	80 93 21 03 	sts	0x0321, r24
    30a6:	90 93 22 03 	sts	0x0322, r25
    30aa:	a0 93 23 03 	sts	0x0323, r26
    30ae:	b0 93 24 03 	sts	0x0324, r27
        if (isCompatible(IMU_C_OPEN | IMU_C_START, IMU_C_OPEN_CALLED) != ML_SUCCESS)
                return ML_ERROR;

        result += MLDLSetAuxParams(auxSlaveAddr);
        MLXAccelInit(auxSlaveAddr);
        result += MLDLDmpAccelInit();
    30b2:	0e 94 0c 0c 	call	0x1818	; 0x1818 <MLDLDmpAccelInit>
    30b6:	80 0f       	add	r24, r16

        return result;
}
    30b8:	1f 91       	pop	r17
    30ba:	0f 91       	pop	r16
    30bc:	08 95       	ret

000030be <MLGetDMPData>:
tMLError MLGetDMPData(void)
{

        int_fast8_t got, ftry = 0;

        if (mlxData.mlDataMode & ML_DATA_FIFO)
    30be:	80 91 bf 03 	lds	r24, 0x03BF
    30c2:	90 91 c0 03 	lds	r25, 0x03C0
    30c6:	80 ff       	sbrs	r24, 0
    30c8:	02 c0       	rjmp	.+4      	; 0x30ce <MLGetDMPData+0x10>
    30ca:	84 e6       	ldi	r24, 0x64	; 100
    30cc:	03 c0       	rjmp	.+6      	; 0x30d4 <MLGetDMPData+0x16>
    30ce:	96 95       	lsr	r25
    30d0:	87 95       	ror	r24
    30d2:	81 70       	andi	r24, 0x01	; 1
                ftry = 100;
        } else if (mlxData.mlDataMode & ML_DATA_POLL)
        {
                ftry = 1;
        }
        got = readAndProcessFIFO(ftry);
    30d4:	0e 94 a7 2a 	call	0x554e	; 0x554e <readAndProcessFIFO>
        if (got > 0)
    30d8:	18 16       	cp	r1, r24
    30da:	1c f4       	brge	.+6      	; 0x30e2 <MLGetDMPData+0x24>
                mlxData.newData = 1;
    30dc:	81 e0       	ldi	r24, 0x01	; 1
    30de:	80 93 c4 03 	sts	0x03C4, r24

        if (MLDLGetFifoStatus() != 0)
    30e2:	0e 94 2b 0a 	call	0x1456	; 0x1456 <MLDLGetFifoStatus>
    30e6:	20 e0       	ldi	r18, 0x00	; 0
    30e8:	89 2b       	or	r24, r25
    30ea:	09 f0       	breq	.+2      	; 0x30ee <MLGetDMPData+0x30>
    30ec:	21 e0       	ldi	r18, 0x01	; 1
                return ML_ERROR;

        return ML_SUCCESS;
}
    30ee:	82 2f       	mov	r24, r18
    30f0:	08 95       	ret

000030f2 <MLProcessInts>:
tMLError MLProcessInts(void)
{


        //Check if interrupt was from MPU
        if (MLDLGetIntTrigger(INTSRC_IMU))
    30f2:	80 e0       	ldi	r24, 0x00	; 0
    30f4:	0e 94 13 0a 	call	0x1426	; 0x1426 <MLDLGetIntTrigger>
    30f8:	88 23       	and	r24, r24
    30fa:	f9 f0       	breq	.+62     	; 0x313a <MLProcessInts+0x48>
        {
                MLDLClearIntTrigger(INTSRC_IMU);
    30fc:	80 e0       	ldi	r24, 0x00	; 0
    30fe:	0e 94 19 0a 	call	0x1432	; 0x1432 <MLDLClearIntTrigger>

                //Check if interrupt was from FIFO
                if (mlxData.mlInterruptSources & ML_INT_FIFO)
    3102:	80 91 c1 03 	lds	r24, 0x03C1
    3106:	81 ff       	sbrs	r24, 1
    3108:	12 c0       	rjmp	.+36     	; 0x312e <MLProcessInts+0x3c>
                {
                        int_fast8_t got, ftry = 0;

                        if (mlxData.mlDataMode & ML_DATA_FIFO)
    310a:	80 91 bf 03 	lds	r24, 0x03BF
    310e:	90 91 c0 03 	lds	r25, 0x03C0
    3112:	80 ff       	sbrs	r24, 0
    3114:	02 c0       	rjmp	.+4      	; 0x311a <MLProcessInts+0x28>
    3116:	84 e6       	ldi	r24, 0x64	; 100
    3118:	03 c0       	rjmp	.+6      	; 0x3120 <MLProcessInts+0x2e>
    311a:	96 95       	lsr	r25
    311c:	87 95       	ror	r24
    311e:	81 70       	andi	r24, 0x01	; 1
                                ftry = 100;
                        } else if (mlxData.mlDataMode & ML_DATA_POLL)
                        {
                                ftry = 1;
                        }
                        got = readAndProcessFIFO(ftry);
    3120:	0e 94 a7 2a 	call	0x554e	; 0x554e <readAndProcessFIFO>
                        if (got > 0)
    3124:	18 16       	cp	r1, r24
    3126:	1c f4       	brge	.+6      	; 0x312e <MLProcessInts+0x3c>
                                mlxData.newData = 1;
    3128:	81 e0       	ldi	r24, 0x01	; 1
    312a:	80 93 c4 03 	sts	0x03C4, r24
                }

                //Check if interrupt was from motion/no motion
                if (mlxData.mlInterruptSources & ML_INT_MOTION)
    312e:	80 91 c1 03 	lds	r24, 0x03C1
    3132:	80 ff       	sbrs	r24, 0
    3134:	02 c0       	rjmp	.+4      	; 0x313a <MLProcessInts+0x48>
                {
                        MLPollMotionStatus();
    3136:	0e 94 2b 13 	call	0x2656	; 0x2656 <MLPollMotionStatus>
                }

        }

        return ML_SUCCESS;
}
    313a:	80 e0       	ldi	r24, 0x00	; 0
    313c:	08 95       	ret

0000313e <IMUupdateData>:
 * @return
 * - ML_SUCCESS
 * - Non-zero error code
 */
tMLError IMUupdateData(void)
{
    313e:	1f 93       	push	r17

        static unsigned long polltimeNoMotion = 0;
        tMLError result = ML_SUCCESS;

        if (isCompatible(IMU_C_OPEN | IMU_C_START, IMU_C_OPEN_CALLED | IMU_C_START_CALLED) != ML_SUCCESS)
    3140:	83 e0       	ldi	r24, 0x03	; 3
    3142:	63 e0       	ldi	r22, 0x03	; 3
    3144:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <isCompatible>
    3148:	88 23       	and	r24, r24
    314a:	11 f0       	breq	.+4      	; 0x3150 <IMUupdateData+0x12>
    314c:	11 e0       	ldi	r17, 0x01	; 1
    314e:	40 c0       	rjmp	.+128    	; 0x31d0 <IMUupdateData+0x92>
                return ML_ERROR;

        //Process all interrupts
        MLProcessInts();
    3150:	0e 94 79 18 	call	0x30f2	; 0x30f2 <MLProcessInts>

        //"No motion" and bias tracker manager
        if (!(mlxData.mlInterruptSources & ML_INT_MOTION))
    3154:	80 91 c1 03 	lds	r24, 0x03C1
    3158:	80 fd       	sbrc	r24, 0
    315a:	2d c0       	rjmp	.+90     	; 0x31b6 <IMUupdateData+0x78>
        {
                // at the beginning and every second
                if ((polltimeNoMotion == 0) || (((unsigned int) MLOSGetTickCount() - polltimeNoMotion) > 1000))
    315c:	80 91 02 02 	lds	r24, 0x0202
    3160:	90 91 03 02 	lds	r25, 0x0203
    3164:	a0 91 04 02 	lds	r26, 0x0204
    3168:	b0 91 05 02 	lds	r27, 0x0205
    316c:	00 97       	sbiw	r24, 0x00	; 0
    316e:	a1 05       	cpc	r26, r1
    3170:	b1 05       	cpc	r27, r1
    3172:	a9 f0       	breq	.+42     	; 0x319e <IMUupdateData+0x60>
    3174:	0e 94 c0 1d 	call	0x3b80	; 0x3b80 <MLOSGetTickCount>
    3178:	80 e0       	ldi	r24, 0x00	; 0
    317a:	90 e0       	ldi	r25, 0x00	; 0
    317c:	20 91 02 02 	lds	r18, 0x0202
    3180:	30 91 03 02 	lds	r19, 0x0203
    3184:	40 91 04 02 	lds	r20, 0x0204
    3188:	50 91 05 02 	lds	r21, 0x0205
    318c:	62 1b       	sub	r22, r18
    318e:	73 0b       	sbc	r23, r19
    3190:	84 0b       	sbc	r24, r20
    3192:	95 0b       	sbc	r25, r21
    3194:	69 5e       	subi	r22, 0xE9	; 233
    3196:	73 40       	sbci	r23, 0x03	; 3
    3198:	80 40       	sbci	r24, 0x00	; 0
    319a:	90 40       	sbci	r25, 0x00	; 0
    319c:	60 f0       	brcs	.+24     	; 0x31b6 <IMUupdateData+0x78>
                {
                        polltimeNoMotion = MLOSGetTickCount();
    319e:	0e 94 c0 1d 	call	0x3b80	; 0x3b80 <MLOSGetTickCount>
    31a2:	60 93 02 02 	sts	0x0202, r22
    31a6:	70 93 03 02 	sts	0x0203, r23
    31aa:	80 93 04 02 	sts	0x0204, r24
    31ae:	90 93 05 02 	sts	0x0205, r25
                        MLPollMotionStatus();
    31b2:	0e 94 2b 13 	call	0x2656	; 0x2656 <MLPollMotionStatus>
                }
        }

        //If FIFO interrupt is not set, poll DMP data
        if ((mlxData.mlInterruptSources & ML_INT_FIFO) == 0)
    31b6:	80 91 c1 03 	lds	r24, 0x03C1
    31ba:	81 ff       	sbrs	r24, 1
    31bc:	02 c0       	rjmp	.+4      	; 0x31c2 <IMUupdateData+0x84>
    31be:	10 e0       	ldi	r17, 0x00	; 0
    31c0:	03 c0       	rjmp	.+6      	; 0x31c8 <IMUupdateData+0x8a>
        {
                result = MLGetDMPData();
    31c2:	0e 94 5f 18 	call	0x30be	; 0x30be <MLGetDMPData>
    31c6:	18 2f       	mov	r17, r24
        }

        //Update control data
        MLControlUpdate();
    31c8:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <MLControlUpdate>

        mlxData.newData = 0;
    31cc:	10 92 c4 03 	sts	0x03C4, r1

        return result;
}
    31d0:	81 2f       	mov	r24, r17
    31d2:	1f 91       	pop	r17
    31d4:	08 95       	ret

000031d6 <IMUclose>:
 */
tMLError IMUclose(void)
{


        if (isCompatible(IMU_C_OPEN, IMU_C_OPEN_CALLED) != ML_SUCCESS)
    31d6:	81 e0       	ldi	r24, 0x01	; 1
    31d8:	61 e0       	ldi	r22, 0x01	; 1
    31da:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <isCompatible>
    31de:	88 23       	and	r24, r24
    31e0:	11 f0       	breq	.+4      	; 0x31e6 <IMUclose+0x10>
    31e2:	81 e0       	ldi	r24, 0x01	; 1
    31e4:	08 95       	ret
                return ML_ERROR;

        //put MPU back into passthrough mode
        MLDLSetI2CPassThrough(1);
    31e6:	81 e0       	ldi	r24, 0x01	; 1
    31e8:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <MLDLSetI2CPassThrough>

        // Close Serial Interface
        IMUserialClose();
    31ec:	0e 94 22 1d 	call	0x3a44	; 0x3a44 <IMUserialClose>

        clearCompatible();
    31f0:	0e 94 03 2b 	call	0x5606	; 0x5606 <clearCompatible>
    31f4:	80 e0       	ldi	r24, 0x00	; 0

        return ML_SUCCESS;
}
    31f6:	08 95       	ret

000031f8 <IMUstart>:
 */
tMLError IMUstart(void)
{
        tMLError result;

        if (isCompatible(IMU_C_OPEN | IMU_C_START, IMU_C_OPEN_CALLED) != ML_SUCCESS)
    31f8:	83 e0       	ldi	r24, 0x03	; 3
    31fa:	61 e0       	ldi	r22, 0x01	; 1
    31fc:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <isCompatible>
    3200:	88 23       	and	r24, r24
    3202:	11 f0       	breq	.+4      	; 0x3208 <IMUstart+0x10>
    3204:	81 e0       	ldi	r24, 0x01	; 1
    3206:	08 95       	ret
                return ML_ERROR;

        setCompatible(IMU_C_START_CALLED);
    3208:	82 e0       	ldi	r24, 0x02	; 2
    320a:	0e 94 06 2b 	call	0x560c	; 0x560c <setCompatible>

        result = MLDLDmpStart();
    320e:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <MLDLDmpStart>

        return result;
}
    3212:	08 95       	ret

00003214 <IMUsetTemperatureSlope>:
/**
 * Set the temperature slope
 * @param[in] data Length 3.
 */
tMLError IMUsetTemperatureSlope(const long *data)
{
    3214:	ef 92       	push	r14
    3216:	ff 92       	push	r15
    3218:	0f 93       	push	r16
    321a:	1f 93       	push	r17
    321c:	fc 01       	movw	r30, r24
        long sf;
        unsigned char reg;

        mlxData.mlTempSlope[0] = data[0];
    321e:	60 81       	ld	r22, Z
    3220:	71 81       	ldd	r23, Z+1	; 0x01
    3222:	82 81       	ldd	r24, Z+2	; 0x02
    3224:	93 81       	ldd	r25, Z+3	; 0x03
    3226:	60 93 75 03 	sts	0x0375, r22
    322a:	70 93 76 03 	sts	0x0376, r23
    322e:	80 93 77 03 	sts	0x0377, r24
    3232:	90 93 78 03 	sts	0x0378, r25
        mlxData.mlTempSlope[1] = data[1];
    3236:	24 81       	ldd	r18, Z+4	; 0x04
    3238:	35 81       	ldd	r19, Z+5	; 0x05
    323a:	46 81       	ldd	r20, Z+6	; 0x06
    323c:	57 81       	ldd	r21, Z+7	; 0x07
    323e:	20 93 79 03 	sts	0x0379, r18
    3242:	30 93 7a 03 	sts	0x037A, r19
    3246:	40 93 7b 03 	sts	0x037B, r20
    324a:	50 93 7c 03 	sts	0x037C, r21
        mlxData.mlTempSlope[2] = data[2];
    324e:	20 85       	ldd	r18, Z+8	; 0x08
    3250:	31 85       	ldd	r19, Z+9	; 0x09
    3252:	42 85       	ldd	r20, Z+10	; 0x0a
    3254:	53 85       	ldd	r21, Z+11	; 0x0b
    3256:	20 93 7d 03 	sts	0x037D, r18
    325a:	30 93 7e 03 	sts	0x037E, r19
    325e:	40 93 7f 03 	sts	0x037F, r20
    3262:	50 93 80 03 	sts	0x0380, r21
        sf = -mlxData.mlTempSlope[0] / 1278;
    3266:	22 e0       	ldi	r18, 0x02	; 2
    3268:	3b ef       	ldi	r19, 0xFB	; 251
    326a:	4f ef       	ldi	r20, 0xFF	; 255
    326c:	5f ef       	ldi	r21, 0xFF	; 255
    326e:	0e 94 c9 38 	call	0x7192	; 0x7192 <__divmodsi4>
    3272:	c9 01       	movw	r24, r18
    3274:	da 01       	movw	r26, r20
    3276:	7c 01       	movw	r14, r24
    3278:	8d 01       	movw	r16, r26
        if (sf > 127)
    327a:	80 e8       	ldi	r24, 0x80	; 128
    327c:	e8 16       	cp	r14, r24
    327e:	f1 04       	cpc	r15, r1
    3280:	01 05       	cpc	r16, r1
    3282:	11 05       	cpc	r17, r1
    3284:	44 f0       	brlt	.+16     	; 0x3296 <IMUsetTemperatureSlope+0x82>
        {
                sf -= 256;
    3286:	80 e0       	ldi	r24, 0x00	; 0
    3288:	9f ef       	ldi	r25, 0xFF	; 255
    328a:	af ef       	ldi	r26, 0xFF	; 255
    328c:	bf ef       	ldi	r27, 0xFF	; 255
    328e:	e8 0e       	add	r14, r24
    3290:	f9 1e       	adc	r15, r25
    3292:	0a 1f       	adc	r16, r26
    3294:	1b 1f       	adc	r17, r27
        }
        reg = (unsigned char) sf;
        MLSLSerialWriteSingle(MLDLGetMPUSlaveAddr(), MPUREG_05_RSVD, reg);
    3296:	0e 94 10 0a 	call	0x1420	; 0x1420 <MLDLGetMPUSlaveAddr>
    329a:	65 e0       	ldi	r22, 0x05	; 5
    329c:	4e 2d       	mov	r20, r14
    329e:	0e 94 4e 1d 	call	0x3a9c	; 0x3a9c <MLSLSerialWriteSingle>
        sf = -mlxData.mlTempSlope[1] / 1278;
    32a2:	60 91 79 03 	lds	r22, 0x0379
    32a6:	70 91 7a 03 	lds	r23, 0x037A
    32aa:	80 91 7b 03 	lds	r24, 0x037B
    32ae:	90 91 7c 03 	lds	r25, 0x037C
    32b2:	22 e0       	ldi	r18, 0x02	; 2
    32b4:	3b ef       	ldi	r19, 0xFB	; 251
    32b6:	4f ef       	ldi	r20, 0xFF	; 255
    32b8:	5f ef       	ldi	r21, 0xFF	; 255
    32ba:	0e 94 c9 38 	call	0x7192	; 0x7192 <__divmodsi4>
    32be:	c9 01       	movw	r24, r18
    32c0:	da 01       	movw	r26, r20
    32c2:	7c 01       	movw	r14, r24
    32c4:	8d 01       	movw	r16, r26
        if (sf > 127)
    32c6:	90 e8       	ldi	r25, 0x80	; 128
    32c8:	e9 16       	cp	r14, r25
    32ca:	f1 04       	cpc	r15, r1
    32cc:	01 05       	cpc	r16, r1
    32ce:	11 05       	cpc	r17, r1
    32d0:	44 f0       	brlt	.+16     	; 0x32e2 <IMUsetTemperatureSlope+0xce>
        {
                sf -= 256;
    32d2:	80 e0       	ldi	r24, 0x00	; 0
    32d4:	9f ef       	ldi	r25, 0xFF	; 255
    32d6:	af ef       	ldi	r26, 0xFF	; 255
    32d8:	bf ef       	ldi	r27, 0xFF	; 255
    32da:	e8 0e       	add	r14, r24
    32dc:	f9 1e       	adc	r15, r25
    32de:	0a 1f       	adc	r16, r26
    32e0:	1b 1f       	adc	r17, r27
        }
        reg = (unsigned char) sf;
        MLSLSerialWriteSingle(MLDLGetMPUSlaveAddr(), MPUREG_08_RSVD, reg);
    32e2:	0e 94 10 0a 	call	0x1420	; 0x1420 <MLDLGetMPUSlaveAddr>
    32e6:	68 e0       	ldi	r22, 0x08	; 8
    32e8:	4e 2d       	mov	r20, r14
    32ea:	0e 94 4e 1d 	call	0x3a9c	; 0x3a9c <MLSLSerialWriteSingle>
        sf = -mlxData.mlTempSlope[2] / 1278;
    32ee:	60 91 7d 03 	lds	r22, 0x037D
    32f2:	70 91 7e 03 	lds	r23, 0x037E
    32f6:	80 91 7f 03 	lds	r24, 0x037F
    32fa:	90 91 80 03 	lds	r25, 0x0380
    32fe:	22 e0       	ldi	r18, 0x02	; 2
    3300:	3b ef       	ldi	r19, 0xFB	; 251
    3302:	4f ef       	ldi	r20, 0xFF	; 255
    3304:	5f ef       	ldi	r21, 0xFF	; 255
    3306:	0e 94 c9 38 	call	0x7192	; 0x7192 <__divmodsi4>
    330a:	c9 01       	movw	r24, r18
    330c:	da 01       	movw	r26, r20
    330e:	7c 01       	movw	r14, r24
    3310:	8d 01       	movw	r16, r26
        if (sf > 127)
    3312:	90 e8       	ldi	r25, 0x80	; 128
    3314:	e9 16       	cp	r14, r25
    3316:	f1 04       	cpc	r15, r1
    3318:	01 05       	cpc	r16, r1
    331a:	11 05       	cpc	r17, r1
    331c:	44 f0       	brlt	.+16     	; 0x332e <IMUsetTemperatureSlope+0x11a>
        {
                sf -= 256;
    331e:	80 e0       	ldi	r24, 0x00	; 0
    3320:	9f ef       	ldi	r25, 0xFF	; 255
    3322:	af ef       	ldi	r26, 0xFF	; 255
    3324:	bf ef       	ldi	r27, 0xFF	; 255
    3326:	e8 0e       	add	r14, r24
    3328:	f9 1e       	adc	r15, r25
    332a:	0a 1f       	adc	r16, r26
    332c:	1b 1f       	adc	r17, r27
        }
        reg = (unsigned char) sf;
        MLSLSerialWriteSingle(MLDLGetMPUSlaveAddr(), MPUREG_0B_RSVD, reg);
    332e:	0e 94 10 0a 	call	0x1420	; 0x1420 <MLDLGetMPUSlaveAddr>
    3332:	6b e0       	ldi	r22, 0x0B	; 11
    3334:	4e 2d       	mov	r20, r14
    3336:	0e 94 4e 1d 	call	0x3a9c	; 0x3a9c <MLSLSerialWriteSingle>
        return ML_SUCCESS;
}
    333a:	80 e0       	ldi	r24, 0x00	; 0
    333c:	1f 91       	pop	r17
    333e:	0f 91       	pop	r16
    3340:	ff 90       	pop	r15
    3342:	ef 90       	pop	r14
    3344:	08 95       	ret

00003346 <IMUsetBiasUpdateFunc>:
 *                      - ML_ALL.
 *
 *  @return ML_SUCCESS if successful or Non-zero error code otherwise.
 */
tMLError IMUsetBiasUpdateFunc(unsigned short function)
{
    3346:	0f 93       	push	r16
    3348:	1f 93       	push	r17
    334a:	df 93       	push	r29
    334c:	cf 93       	push	r28
    334e:	cd b7       	in	r28, 0x3d	; 61
    3350:	de b7       	in	r29, 0x3e	; 62
    3352:	61 97       	sbiw	r28, 0x11	; 17
    3354:	0f b6       	in	r0, 0x3f	; 63
    3356:	f8 94       	cli
    3358:	de bf       	out	0x3e, r29	; 62
    335a:	0f be       	out	0x3f, r0	; 63
    335c:	cd bf       	out	0x3d, r28	; 61
    335e:	18 2f       	mov	r17, r24
    3360:	09 2f       	mov	r16, r25

        unsigned char regs[5] = { 0 };
    3362:	fe 01       	movw	r30, r28
    3364:	31 96       	adiw	r30, 0x01	; 1
    3366:	85 e0       	ldi	r24, 0x05	; 5
    3368:	df 01       	movw	r26, r30
    336a:	1d 92       	st	X+, r1
    336c:	8a 95       	dec	r24
    336e:	e9 f7       	brne	.-6      	; 0x336a <IMUsetBiasUpdateFunc+0x24>
        long tmp[3] = { 0, 0, 0 };
    3370:	de 01       	movw	r26, r28
    3372:	16 96       	adiw	r26, 0x06	; 6
    3374:	e0 e7       	ldi	r30, 0x70	; 112
    3376:	f0 e0       	ldi	r31, 0x00	; 0
    3378:	8c e0       	ldi	r24, 0x0C	; 12
    337a:	01 90       	ld	r0, Z+
    337c:	0d 92       	st	X+, r0
    337e:	81 50       	subi	r24, 0x01	; 1
    3380:	e1 f7       	brne	.-8      	; 0x337a <IMUsetBiasUpdateFunc+0x34>
        tMLError retval = ML_SUCCESS;
        extern tMLCTRLParams mlCtrlParams;

        if (isCompatible(IMU_C_OPEN | IMU_C_START, IMU_C_OPEN_CALLED) != ML_SUCCESS)
    3382:	83 e0       	ldi	r24, 0x03	; 3
    3384:	61 e0       	ldi	r22, 0x01	; 1
    3386:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <isCompatible>
    338a:	88 23       	and	r24, r24
    338c:	11 f0       	breq	.+4      	; 0x3392 <IMUsetBiasUpdateFunc+0x4c>
    338e:	81 e0       	ldi	r24, 0x01	; 1
    3390:	5a c0       	rjmp	.+180    	; 0x3446 <IMUsetBiasUpdateFunc+0x100>
                return ML_ERROR;

        mlParams.biasUpdateFunc = function;
    3392:	10 93 66 00 	sts	0x0066, r17
    3396:	00 93 67 00 	sts	0x0067, r16

        if (mlParams.biasUpdateFunc & ML_BIAS_FROM_LPF)
    339a:	13 ff       	sbrs	r17, 3
    339c:	0a c0       	rjmp	.+20     	; 0x33b2 <IMUsetBiasUpdateFunc+0x6c>
        {
                regs[0] = DINA80 + 2;
    339e:	82 e8       	ldi	r24, 0x82	; 130
    33a0:	89 83       	std	Y+1, r24	; 0x01
                regs[1] = DINA2D;
    33a2:	8d e2       	ldi	r24, 0x2D	; 45
    33a4:	8a 83       	std	Y+2, r24	; 0x02
                regs[2] = DINA55;
    33a6:	85 e5       	ldi	r24, 0x55	; 85
    33a8:	8b 83       	std	Y+3, r24	; 0x03
                regs[3] = DINA7D;
    33aa:	8d e7       	ldi	r24, 0x7D	; 125
    33ac:	8c 83       	std	Y+4, r24	; 0x04
                regs[4] = 0x02;
    33ae:	82 e0       	ldi	r24, 0x02	; 2
    33b0:	0e c0       	rjmp	.+28     	; 0x33ce <IMUsetBiasUpdateFunc+0x88>
        } else
        {
                regs[0] = DINA80 + 7;
    33b2:	87 e8       	ldi	r24, 0x87	; 135
    33b4:	89 83       	std	Y+1, r24	; 0x01
                regs[1] = DINA2D;
    33b6:	8d e2       	ldi	r24, 0x2D	; 45
    33b8:	8a 83       	std	Y+2, r24	; 0x02
                regs[2] = DINA35;
    33ba:	85 e3       	ldi	r24, 0x35	; 53
    33bc:	8b 83       	std	Y+3, r24	; 0x03
                regs[3] = DINA3D;
    33be:	8d e3       	ldi	r24, 0x3D	; 61
    33c0:	8c 83       	std	Y+4, r24	; 0x04
                regs[4] = 0x00;
    33c2:	1d 82       	std	Y+5, r1	; 0x05
                if (mlCtrlParams.functions & ML_DEAD_ZONE)
    33c4:	80 91 89 00 	lds	r24, 0x0089
    33c8:	82 ff       	sbrs	r24, 2
    33ca:	02 c0       	rjmp	.+4      	; 0x33d0 <IMUsetBiasUpdateFunc+0x8a>
                {
                        regs[4] = 0x08;
    33cc:	88 e0       	ldi	r24, 0x08	; 8
    33ce:	8d 83       	std	Y+5, r24	; 0x05
                }
        }
        retval += MLDLSetMemoryMPU(KEY_FCFG_5, 4, regs);
    33d0:	83 e0       	ldi	r24, 0x03	; 3
    33d2:	90 e0       	ldi	r25, 0x00	; 0
    33d4:	64 e0       	ldi	r22, 0x04	; 4
    33d6:	70 e0       	ldi	r23, 0x00	; 0
    33d8:	ae 01       	movw	r20, r28
    33da:	4f 5f       	subi	r20, 0xFF	; 255
    33dc:	5f 4f       	sbci	r21, 0xFF	; 255
    33de:	0e 94 be 0a 	call	0x157c	; 0x157c <MLDLSetMemoryMPU>
    33e2:	08 2f       	mov	r16, r24
        retval += MLDLSetMemoryMPU(KEY_D_0_163, 1, &regs[4]);
    33e4:	83 e2       	ldi	r24, 0x23	; 35
    33e6:	90 e0       	ldi	r25, 0x00	; 0
    33e8:	61 e0       	ldi	r22, 0x01	; 1
    33ea:	70 e0       	ldi	r23, 0x00	; 0
    33ec:	ae 01       	movw	r20, r28
    33ee:	4b 5f       	subi	r20, 0xFB	; 251
    33f0:	5f 4f       	sbci	r21, 0xFF	; 255
    33f2:	0e 94 be 0a 	call	0x157c	; 0x157c <MLDLSetMemoryMPU>
    33f6:	18 2f       	mov	r17, r24

        if (mlParams.biasUpdateFunc & ML_BIAS_FROM_GRAVITY)
    33f8:	80 91 66 00 	lds	r24, 0x0066
    33fc:	81 ff       	sbrs	r24, 1
    33fe:	06 c0       	rjmp	.+12     	; 0x340c <IMUsetBiasUpdateFunc+0xc6>
        {
                regs[0] = DINAA0 + 5;
    3400:	85 ea       	ldi	r24, 0xA5	; 165
    3402:	89 83       	std	Y+1, r24	; 0x01
                regs[1] = DINA90 + 7;
    3404:	87 e9       	ldi	r24, 0x97	; 151
    3406:	8a 83       	std	Y+2, r24	; 0x02
                regs[2] = DINA80 + 10;
    3408:	8a e8       	ldi	r24, 0x8A	; 138
    340a:	05 c0       	rjmp	.+10     	; 0x3416 <IMUsetBiasUpdateFunc+0xd0>
        } else
        {
                regs[0] = DINA28;
    340c:	88 e2       	ldi	r24, 0x28	; 40
    340e:	89 83       	std	Y+1, r24	; 0x01
                regs[1] = DINA4C;
    3410:	8c e4       	ldi	r24, 0x4C	; 76
    3412:	8a 83       	std	Y+2, r24	; 0x02
                regs[2] = DINA6C;
    3414:	8c e6       	ldi	r24, 0x6C	; 108
    3416:	8b 83       	std	Y+3, r24	; 0x03
        }
        retval += MLDLSetMemoryMPU(KEY_CFG_2, 3, regs);
    3418:	87 e0       	ldi	r24, 0x07	; 7
    341a:	90 e0       	ldi	r25, 0x00	; 0
    341c:	63 e0       	ldi	r22, 0x03	; 3
    341e:	70 e0       	ldi	r23, 0x00	; 0
    3420:	ae 01       	movw	r20, r28
    3422:	4f 5f       	subi	r20, 0xFF	; 255
    3424:	5f 4f       	sbci	r21, 0xFF	; 255
    3426:	0e 94 be 0a 	call	0x157c	; 0x157c <MLDLSetMemoryMPU>
                {
                        regs[4] = 0x08;
                }
        }
        retval += MLDLSetMemoryMPU(KEY_FCFG_5, 4, regs);
        retval += MLDLSetMemoryMPU(KEY_D_0_163, 1, &regs[4]);
    342a:	10 0f       	add	r17, r16
        {
                regs[0] = DINA28;
                regs[1] = DINA4C;
                regs[2] = DINA6C;
        }
        retval += MLDLSetMemoryMPU(KEY_CFG_2, 3, regs);
    342c:	18 0f       	add	r17, r24

        if (mlParams.biasUpdateFunc & ML_BIAS_FROM_TEMPERATURE)
    342e:	80 91 66 00 	lds	r24, 0x0066
    3432:	82 ff       	sbrs	r24, 2
    3434:	03 c0       	rjmp	.+6      	; 0x343c <IMUsetBiasUpdateFunc+0xf6>
        {
                retval += IMUsetTemperatureSlope(mlxData.mlTempSlope);
    3436:	85 e7       	ldi	r24, 0x75	; 117
    3438:	93 e0       	ldi	r25, 0x03	; 3
    343a:	02 c0       	rjmp	.+4      	; 0x3440 <IMUsetBiasUpdateFunc+0xfa>
        } else
        {
                retval += IMUsetTemperatureSlope(tmp);
    343c:	ce 01       	movw	r24, r28
    343e:	06 96       	adiw	r24, 0x06	; 6
    3440:	0e 94 0a 19 	call	0x3214	; 0x3214 <IMUsetTemperatureSlope>
    3444:	81 0f       	add	r24, r17
        }

        return retval;
}
    3446:	61 96       	adiw	r28, 0x11	; 17
    3448:	0f b6       	in	r0, 0x3f	; 63
    344a:	f8 94       	cli
    344c:	de bf       	out	0x3e, r29	; 62
    344e:	0f be       	out	0x3f, r0	; 63
    3450:	cd bf       	out	0x3d, r28	; 61
    3452:	cf 91       	pop	r28
    3454:	df 91       	pop	r29
    3456:	1f 91       	pop	r17
    3458:	0f 91       	pop	r16
    345a:	08 95       	ret

0000345c <MLXInit>:
 * @internal
 * @brief   Initialize MLX data.  This should be called to setup the mlx
 *          output buffers before any motion processing is done.
 **/
void MLXInit(void)
{
    345c:	df 93       	push	r29
    345e:	cf 93       	push	r28
    3460:	cd b7       	in	r28, 0x3d	; 61
    3462:	de b7       	in	r29, 0x3e	; 62
    3464:	a4 97       	sbiw	r28, 0x24	; 36
    3466:	0f b6       	in	r0, 0x3f	; 63
    3468:	f8 94       	cli
    346a:	de bf       	out	0x3e, r29	; 62
    346c:	0f be       	out	0x3f, r0	; 63
    346e:	cd bf       	out	0x3d, r28	; 61

        unsigned char auxSlaveAddr;
        float identity[9];

        // Set all values to zero by default
        memset(&mlxData, 0, sizeof(tMLXData));
    3470:	8e ed       	ldi	r24, 0xDE	; 222
    3472:	e7 ee       	ldi	r30, 0xE7	; 231
    3474:	f2 e0       	ldi	r31, 0x02	; 2
    3476:	df 01       	movw	r26, r30
    3478:	1d 92       	st	X+, r1
    347a:	8a 95       	dec	r24
    347c:	e9 f7       	brne	.-6      	; 0x3478 <MLXInit+0x1c>
        memset(identity, 0, 9 * sizeof(float));
    347e:	fe 01       	movw	r30, r28
    3480:	31 96       	adiw	r30, 0x01	; 1
    3482:	84 e2       	ldi	r24, 0x24	; 36
    3484:	df 01       	movw	r26, r30
    3486:	1d 92       	st	X+, r1
    3488:	8a 95       	dec	r24
    348a:	e9 f7       	brne	.-6      	; 0x3486 <MLXInit+0x2a>

        // Now set all the non-zero values
        mlxData.mlEngineMask = ML_BASIC; // mlEngineMask
    348c:	8c e1       	ldi	r24, 0x1C	; 28
    348e:	90 e0       	ldi	r25, 0x00	; 0
    3490:	90 93 e8 02 	sts	0x02E8, r25
    3494:	80 93 e7 02 	sts	0x02E7, r24

        mlxData.mlMotionState = ML_MOTION; //Motion state
    3498:	81 e0       	ldi	r24, 0x01	; 1
    349a:	90 e0       	ldi	r25, 0x00	; 0
    349c:	90 93 be 03 	sts	0x03BE, r25
    34a0:	80 93 bd 03 	sts	0x03BD, r24

        mlxData.internalMotionState = ML_MOT_STATE_MOVING;
    34a4:	10 92 c3 03 	sts	0x03C3, r1

        identity[0] = 1.f;
    34a8:	80 e0       	ldi	r24, 0x00	; 0
    34aa:	90 e0       	ldi	r25, 0x00	; 0
    34ac:	a0 e8       	ldi	r26, 0x80	; 128
    34ae:	bf e3       	ldi	r27, 0x3F	; 63
    34b0:	89 83       	std	Y+1, r24	; 0x01
    34b2:	9a 83       	std	Y+2, r25	; 0x02
    34b4:	ab 83       	std	Y+3, r26	; 0x03
    34b6:	bc 83       	std	Y+4, r27	; 0x04
        identity[4] = 1.f;
    34b8:	89 8b       	std	Y+17, r24	; 0x11
    34ba:	9a 8b       	std	Y+18, r25	; 0x12
    34bc:	ab 8b       	std	Y+19, r26	; 0x13
    34be:	bc 8b       	std	Y+20, r27	; 0x14
        identity[8] = 1.f;
    34c0:	89 a3       	std	Y+33, r24	; 0x21
    34c2:	9a a3       	std	Y+34, r25	; 0x22
    34c4:	ab a3       	std	Y+35, r26	; 0x23
    34c6:	bc a3       	std	Y+36, r27	; 0x24
        MLSetGyroCalibration(2000., identity);
    34c8:	60 e0       	ldi	r22, 0x00	; 0
    34ca:	70 e0       	ldi	r23, 0x00	; 0
    34cc:	8a ef       	ldi	r24, 0xFA	; 250
    34ce:	94 e4       	ldi	r25, 0x44	; 68
    34d0:	af 01       	movw	r20, r30
    34d2:	0e 94 4d 14 	call	0x289a	; 0x289a <MLSetGyroCalibration>

        auxSlaveAddr = MLDLGetDefaultAuxSlaveAddr();
    34d6:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <MLDLGetDefaultAuxSlaveAddr>
 * @param   auxSlaveAddr    AUX slave address
 **/
void MLXAccelInit(unsigned char auxSlaveAddr)
{

        if (auxSlaveAddr == KIONIX_AUX_SLAVEADDR)
    34da:	8f 30       	cpi	r24, 0x0F	; 15
    34dc:	41 f4       	brne	.+16     	; 0x34ee <MLXInit+0x92>
        {
                mlxData.mlAccelSens = (int) 65536;
    34de:	10 92 6d 03 	sts	0x036D, r1
    34e2:	10 92 6e 03 	sts	0x036E, r1
    34e6:	10 92 6f 03 	sts	0x036F, r1
    34ea:	10 92 70 03 	sts	0x0370, r1
        }

        // Default assumes orientation the same as the gyros
        mlxData.mlAccelCal[0] = mlxData.mlAccelSens; // mlRotMatrix[0]
    34ee:	80 91 6d 03 	lds	r24, 0x036D
    34f2:	90 91 6e 03 	lds	r25, 0x036E
    34f6:	a0 91 6f 03 	lds	r26, 0x036F
    34fa:	b0 91 70 03 	lds	r27, 0x0370
    34fe:	80 93 01 03 	sts	0x0301, r24
    3502:	90 93 02 03 	sts	0x0302, r25
    3506:	a0 93 03 03 	sts	0x0303, r26
    350a:	b0 93 04 03 	sts	0x0304, r27
        mlxData.mlAccelCal[4] = mlxData.mlAccelSens; // mlRotMatrix[4]
    350e:	80 93 11 03 	sts	0x0311, r24
    3512:	90 93 12 03 	sts	0x0312, r25
    3516:	a0 93 13 03 	sts	0x0313, r26
    351a:	b0 93 14 03 	sts	0x0314, r27
        mlxData.mlAccelCal[8] = mlxData.mlAccelSens; // mlRotMatrix[8]
    351e:	80 93 21 03 	sts	0x0321, r24
    3522:	90 93 22 03 	sts	0x0322, r25
    3526:	a0 93 23 03 	sts	0x0323, r26
    352a:	b0 93 24 03 	sts	0x0324, r27
        identity[8] = 1.f;
        MLSetGyroCalibration(2000., identity);

        auxSlaveAddr = MLDLGetDefaultAuxSlaveAddr();
        MLXAccelInit(auxSlaveAddr);
}
    352e:	a4 96       	adiw	r28, 0x24	; 36
    3530:	0f b6       	in	r0, 0x3f	; 63
    3532:	f8 94       	cli
    3534:	de bf       	out	0x3e, r29	; 62
    3536:	0f be       	out	0x3f, r0	; 63
    3538:	cd bf       	out	0x3d, r28	; 61
    353a:	cf 91       	pop	r28
    353c:	df 91       	pop	r29
    353e:	08 95       	ret

00003540 <IMUopen>:
 *          to talk to the hardware (IMUserialOpen).
 *  @return ML_SUCCESS on success; ML_ERROR on any failure.
 *
 */
tMLError IMUopen(void)
{
    3540:	1f 93       	push	r17
    3542:	df 93       	push	r29
    3544:	cf 93       	push	r28
    3546:	0f 92       	push	r0
    3548:	cd b7       	in	r28, 0x3d	; 61
    354a:	de b7       	in	r29, 0x3e	; 62
        tMLError result;
        unsigned char regs;

        void *dmpInfo;

        clearCompatible();
    354c:	0e 94 03 2b 	call	0x5606	; 0x5606 <clearCompatible>
        setCompatible(IMU_C_OPEN_CALLED);
    3550:	81 e0       	ldi	r24, 0x01	; 1
    3552:	0e 94 06 2b 	call	0x560c	; 0x560c <setCompatible>

        // Initialize the driver layer
        MLDLSetDefaultParams();
    3556:	0e 94 f6 09 	call	0x13ec	; 0x13ec <MLDLSetDefaultParams>

        MLDLInit();
    355a:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <MLDLInit>

        FIFOParamInit();
    355e:	0e 94 e1 2a 	call	0x55c2	; 0x55c2 <FIFOParamInit>

        // Init vars.
        MLXInit();
    3562:	0e 94 2e 1a 	call	0x345c	; 0x345c <MLXInit>

        dmpInfo = dmpDefault();
    3566:	0e 94 fe 1d 	call	0x3bfc	; 0x3bfc <dmpDefault>

        // DMP Init.
        result = MLDLDMPInit();
    356a:	0e 94 99 0c 	call	0x1932	; 0x1932 <MLDLDMPInit>
    356e:	18 2f       	mov	r17, r24

        // Send data out of the FIFO
        mlxData.mlDataMode = ML_DATA_FIFO;
    3570:	81 e0       	ldi	r24, 0x01	; 1
    3572:	90 e0       	ldi	r25, 0x00	; 0
    3574:	90 93 c0 03 	sts	0x03C0, r25
    3578:	80 93 bf 03 	sts	0x03BF, r24
        regs = DINADD;
    357c:	8d ed       	ldi	r24, 0xDD	; 221
    357e:	89 83       	std	Y+1, r24	; 0x01
        if (MLDLSetMemoryMPU(KEY_CFG_17, 1, &regs) != ML_SUCCESS)
    3580:	85 e1       	ldi	r24, 0x15	; 21
    3582:	90 e0       	ldi	r25, 0x00	; 0
    3584:	61 e0       	ldi	r22, 0x01	; 1
    3586:	70 e0       	ldi	r23, 0x00	; 0
    3588:	ae 01       	movw	r20, r28
    358a:	4f 5f       	subi	r20, 0xFF	; 255
    358c:	5f 4f       	sbci	r21, 0xFF	; 255
    358e:	0e 94 be 0a 	call	0x157c	; 0x157c <MLDLSetMemoryMPU>
    3592:	81 11       	cpse	r24, r1
    3594:	11 e0       	ldi	r17, 0x01	; 1
                return ML_ERROR;

        return result;
}
    3596:	81 2f       	mov	r24, r17
    3598:	0f 90       	pop	r0
    359a:	cf 91       	pop	r28
    359c:	df 91       	pop	r29
    359e:	1f 91       	pop	r17
    35a0:	08 95       	ret

000035a2 <twi_setAddress>:
 * Output   none
 */
void twi_setAddress(uint8_t address)
{
  // set twi slave address (skip over TWGCE bit)
  TWAR = address << 1;
    35a2:	88 0f       	add	r24, r24
    35a4:	82 b9       	out	0x02, r24	; 2
}
    35a6:	08 95       	ret

000035a8 <twi_readFrom>:
 *          data: pointer to byte array
 *          length: number of bytes to read into array
 * Output   number of bytes read
 */
uint8_t twi_readFrom(uint8_t address, uint8_t* data, uint8_t length)
{
    35a8:	98 2f       	mov	r25, r24
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    35aa:	41 32       	cpi	r20, 0x21	; 33
    35ac:	10 f0       	brcs	.+4      	; 0x35b2 <twi_readFrom+0xa>
    35ae:	40 e0       	ldi	r20, 0x00	; 0
    35b0:	30 c0       	rjmp	.+96     	; 0x3612 <twi_readFrom+0x6a>
    return 0;
  }

  // wait until twi is ready, become master receiver
  while(TWI_READY != twi_state){
    35b2:	80 91 06 02 	lds	r24, 0x0206
    35b6:	88 23       	and	r24, r24
    35b8:	e1 f7       	brne	.-8      	; 0x35b2 <twi_readFrom+0xa>
    continue;
  }
  twi_state = TWI_MRX;
    35ba:	81 e0       	ldi	r24, 0x01	; 1
    35bc:	80 93 06 02 	sts	0x0206, r24
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    35c0:	8f ef       	ldi	r24, 0xFF	; 255
    35c2:	80 93 17 02 	sts	0x0217, r24

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    35c6:	10 92 0e 02 	sts	0x020E, r1
  twi_masterBufferLength = length-1;  // This is not intuitive, read on...
    35ca:	41 50       	subi	r20, 0x01	; 1
    35cc:	40 93 0f 02 	sts	0x020F, r20
    35d0:	4f 5f       	subi	r20, 0xFF	; 255
  // received, causing that NACK to be sent in response to receiving the last
  // expected byte of data.

  // build sla+w, slave device address + w bit
  twi_slarw = TW_READ;
  twi_slarw |= address << 1;
    35d2:	99 0f       	add	r25, r25
    35d4:	91 60       	ori	r25, 0x01	; 1
    35d6:	90 93 07 02 	sts	0x0207, r25

  // send start condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    35da:	85 ee       	ldi	r24, 0xE5	; 229
    35dc:	86 bf       	out	0x36, r24	; 54

  // wait for read operation to complete
  while(TWI_MRX == twi_state){
    35de:	80 91 06 02 	lds	r24, 0x0206
    35e2:	81 30       	cpi	r24, 0x01	; 1
    35e4:	e1 f3       	breq	.-8      	; 0x35de <twi_readFrom+0x36>
    continue;
  }

  if (twi_masterBufferIndex < length)
    35e6:	80 91 0e 02 	lds	r24, 0x020E
    35ea:	84 17       	cp	r24, r20
    35ec:	10 f4       	brcc	.+4      	; 0x35f2 <twi_readFrom+0x4a>
    length = twi_masterBufferIndex;
    35ee:	40 91 0e 02 	lds	r20, 0x020E
    35f2:	a0 91 0c 02 	lds	r26, 0x020C
    35f6:	b0 91 0d 02 	lds	r27, 0x020D
    35fa:	20 e0       	ldi	r18, 0x00	; 0
    35fc:	30 e0       	ldi	r19, 0x00	; 0
    35fe:	07 c0       	rjmp	.+14     	; 0x360e <twi_readFrom+0x66>

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    data[i] = twi_masterBuffer[i];
    3600:	fb 01       	movw	r30, r22
    3602:	e2 0f       	add	r30, r18
    3604:	f3 1f       	adc	r31, r19
    3606:	8d 91       	ld	r24, X+
    3608:	80 83       	st	Z, r24
    360a:	2f 5f       	subi	r18, 0xFF	; 255
    360c:	3f 4f       	sbci	r19, 0xFF	; 255

  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    360e:	24 17       	cp	r18, r20
    3610:	b8 f3       	brcs	.-18     	; 0x3600 <twi_readFrom+0x58>
    data[i] = twi_masterBuffer[i];
  }
        
  return length;
}
    3612:	84 2f       	mov	r24, r20
    3614:	08 95       	ret

00003616 <twi_writeTo>:
 *          2 .. address send, NACK received
 *          3 .. data send, NACK received
 *          4 .. other twi error (lost bus arbitration, bus error, ..)
 */
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait)
{
    3616:	1f 93       	push	r17
    3618:	58 2f       	mov	r21, r24
    361a:	12 2f       	mov	r17, r18
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    361c:	41 32       	cpi	r20, 0x21	; 33
    361e:	10 f0       	brcs	.+4      	; 0x3624 <twi_writeTo+0xe>
    3620:	81 e0       	ldi	r24, 0x01	; 1
    3622:	3b c0       	rjmp	.+118    	; 0x369a <twi_writeTo+0x84>
    return 1;
  }

  // wait until twi is ready, become master transmitter
  while(TWI_READY != twi_state){
    3624:	80 91 06 02 	lds	r24, 0x0206
    3628:	88 23       	and	r24, r24
    362a:	e1 f7       	brne	.-8      	; 0x3624 <twi_writeTo+0xe>
    continue;
  }
  twi_state = TWI_MTX;
    362c:	82 e0       	ldi	r24, 0x02	; 2
    362e:	80 93 06 02 	sts	0x0206, r24
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    3632:	8f ef       	ldi	r24, 0xFF	; 255
    3634:	80 93 17 02 	sts	0x0217, r24

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    3638:	10 92 0e 02 	sts	0x020E, r1
  twi_masterBufferLength = length;
    363c:	40 93 0f 02 	sts	0x020F, r20
    3640:	a0 91 0c 02 	lds	r26, 0x020C
    3644:	b0 91 0d 02 	lds	r27, 0x020D
    3648:	fb 01       	movw	r30, r22
    364a:	02 c0       	rjmp	.+4      	; 0x3650 <twi_writeTo+0x3a>
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    twi_masterBuffer[i] = data[i];
    364c:	81 91       	ld	r24, Z+
    364e:	8d 93       	st	X+, r24
  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length;
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    3650:	8e 2f       	mov	r24, r30
    3652:	86 1b       	sub	r24, r22
    3654:	84 17       	cp	r24, r20
    3656:	d0 f3       	brcs	.-12     	; 0x364c <twi_writeTo+0x36>
    twi_masterBuffer[i] = data[i];
  }
  
  // build sla+w, slave device address + w bit
  twi_slarw = TW_WRITE;
  twi_slarw |= address << 1;
    3658:	85 2f       	mov	r24, r21
    365a:	90 e0       	ldi	r25, 0x00	; 0
    365c:	88 0f       	add	r24, r24
    365e:	99 1f       	adc	r25, r25
    3660:	80 93 07 02 	sts	0x0207, r24
  
  // send start condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    3664:	85 ee       	ldi	r24, 0xE5	; 229
    3666:	86 bf       	out	0x36, r24	; 54

  // wait for write operation to complete
  while(wait && (TWI_MTX == twi_state)){
    3668:	11 23       	and	r17, r17
    366a:	21 f0       	breq	.+8      	; 0x3674 <twi_writeTo+0x5e>
    366c:	80 91 06 02 	lds	r24, 0x0206
    3670:	82 30       	cpi	r24, 0x02	; 2
    3672:	e1 f3       	breq	.-8      	; 0x366c <twi_writeTo+0x56>
    continue;
  }
  
  if (twi_error == 0xFF)
    3674:	80 91 17 02 	lds	r24, 0x0217
    3678:	8f 3f       	cpi	r24, 0xFF	; 255
    367a:	11 f4       	brne	.+4      	; 0x3680 <twi_writeTo+0x6a>
    367c:	80 e0       	ldi	r24, 0x00	; 0
    367e:	0d c0       	rjmp	.+26     	; 0x369a <twi_writeTo+0x84>
    return 0;   // success
  else if (twi_error == TW_MT_SLA_NACK)
    3680:	80 91 17 02 	lds	r24, 0x0217
    3684:	80 32       	cpi	r24, 0x20	; 32
    3686:	11 f4       	brne	.+4      	; 0x368c <twi_writeTo+0x76>
    3688:	82 e0       	ldi	r24, 0x02	; 2
    368a:	07 c0       	rjmp	.+14     	; 0x369a <twi_writeTo+0x84>
    return 2;   // error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
    368c:	80 91 17 02 	lds	r24, 0x0217
    3690:	80 33       	cpi	r24, 0x30	; 48
    3692:	11 f0       	breq	.+4      	; 0x3698 <twi_writeTo+0x82>
    3694:	84 e0       	ldi	r24, 0x04	; 4
    3696:	01 c0       	rjmp	.+2      	; 0x369a <twi_writeTo+0x84>
    3698:	83 e0       	ldi	r24, 0x03	; 3
    return 3;   // error: data send, nack received
  else
    return 4;   // other twi error
}
    369a:	1f 91       	pop	r17
    369c:	08 95       	ret

0000369e <twi_transmit>:
 * Output   1 length too long for buffer
 *          2 not slave transmitter
 *          0 ok
 */
uint8_t twi_transmit(uint8_t* data, uint8_t length)
{
    369e:	48 2f       	mov	r20, r24
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    36a0:	61 32       	cpi	r22, 0x21	; 33
    36a2:	10 f0       	brcs	.+4      	; 0x36a8 <twi_transmit+0xa>
    36a4:	81 e0       	ldi	r24, 0x01	; 1
    36a6:	08 95       	ret
    return 1;
  }
  
  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
    36a8:	80 91 06 02 	lds	r24, 0x0206
    36ac:	84 30       	cpi	r24, 0x04	; 4
    36ae:	11 f0       	breq	.+4      	; 0x36b4 <twi_transmit+0x16>
    36b0:	82 e0       	ldi	r24, 0x02	; 2
    36b2:	08 95       	ret
    return 2;
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
    36b4:	60 93 13 02 	sts	0x0213, r22
    36b8:	a0 91 10 02 	lds	r26, 0x0210
    36bc:	b0 91 11 02 	lds	r27, 0x0211
    36c0:	84 2f       	mov	r24, r20
    36c2:	9c 01       	movw	r18, r24
    36c4:	f9 01       	movw	r30, r18
    36c6:	02 c0       	rjmp	.+4      	; 0x36cc <twi_transmit+0x2e>
  for(i = 0; i < length; ++i){
    twi_txBuffer[i] = data[i];
    36c8:	81 91       	ld	r24, Z+
    36ca:	8d 93       	st	X+, r24
    return 2;
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
  for(i = 0; i < length; ++i){
    36cc:	8e 2f       	mov	r24, r30
    36ce:	84 1b       	sub	r24, r20
    36d0:	86 17       	cp	r24, r22
    36d2:	d0 f3       	brcs	.-12     	; 0x36c8 <twi_transmit+0x2a>
    36d4:	80 e0       	ldi	r24, 0x00	; 0
    twi_txBuffer[i] = data[i];
  }
  
  return 0;
}
    36d6:	08 95       	ret

000036d8 <twi_attachSlaveRxEvent>:
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveRxEvent( void (*function)(uint8_t*, int) )
{
  twi_onSlaveReceive = function;
    36d8:	90 93 0b 02 	sts	0x020B, r25
    36dc:	80 93 0a 02 	sts	0x020A, r24
}
    36e0:	08 95       	ret

000036e2 <twi_attachSlaveTxEvent>:
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveTxEvent( void (*function)(void) )
{
  twi_onSlaveTransmit = function;
    36e2:	90 93 09 02 	sts	0x0209, r25
    36e6:	80 93 08 02 	sts	0x0208, r24
}
    36ea:	08 95       	ret

000036ec <twi_reply>:
 * Output   none
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    36ec:	88 23       	and	r24, r24
    36ee:	11 f0       	breq	.+4      	; 0x36f4 <twi_reply+0x8>
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    36f0:	85 ec       	ldi	r24, 0xC5	; 197
    36f2:	01 c0       	rjmp	.+2      	; 0x36f6 <twi_reply+0xa>
  }else{
          TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    36f4:	85 e8       	ldi	r24, 0x85	; 133
    36f6:	86 bf       	out	0x36, r24	; 54
    36f8:	08 95       	ret

000036fa <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    36fa:	85 ed       	ldi	r24, 0xD5	; 213
    36fc:	86 bf       	out	0x36, r24	; 54

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    36fe:	06 b6       	in	r0, 0x36	; 54
    3700:	04 fc       	sbrc	r0, 4
    3702:	fd cf       	rjmp	.-6      	; 0x36fe <twi_stop+0x4>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    3704:	10 92 06 02 	sts	0x0206, r1
}
    3708:	08 95       	ret

0000370a <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    370a:	85 ec       	ldi	r24, 0xC5	; 197
    370c:	86 bf       	out	0x36, r24	; 54

  // update twi state
  twi_state = TWI_READY;
    370e:	10 92 06 02 	sts	0x0206, r1
}
    3712:	08 95       	ret

00003714 <__vector_19>:

SIGNAL(TWI_vect)
{
    3714:	1f 92       	push	r1
    3716:	0f 92       	push	r0
    3718:	0f b6       	in	r0, 0x3f	; 63
    371a:	0f 92       	push	r0
    371c:	11 24       	eor	r1, r1
    371e:	2f 93       	push	r18
    3720:	3f 93       	push	r19
    3722:	4f 93       	push	r20
    3724:	5f 93       	push	r21
    3726:	6f 93       	push	r22
    3728:	7f 93       	push	r23
    372a:	8f 93       	push	r24
    372c:	9f 93       	push	r25
    372e:	af 93       	push	r26
    3730:	bf 93       	push	r27
    3732:	ef 93       	push	r30
    3734:	ff 93       	push	r31
  switch(TW_STATUS){
    3736:	81 b1       	in	r24, 0x01	; 1
    3738:	90 e0       	ldi	r25, 0x00	; 0
    373a:	88 7f       	andi	r24, 0xF8	; 248
    373c:	90 70       	andi	r25, 0x00	; 0
    373e:	80 36       	cpi	r24, 0x60	; 96
    3740:	91 05       	cpc	r25, r1
    3742:	09 f4       	brne	.+2      	; 0x3746 <__vector_19+0x32>
    3744:	d6 c0       	rjmp	.+428    	; 0x38f2 <__vector_19+0x1de>
    3746:	81 36       	cpi	r24, 0x61	; 97
    3748:	91 05       	cpc	r25, r1
    374a:	cc f5       	brge	.+114    	; 0x37be <__vector_19+0xaa>
    374c:	88 32       	cpi	r24, 0x28	; 40
    374e:	91 05       	cpc	r25, r1
    3750:	09 f4       	brne	.+2      	; 0x3754 <__vector_19+0x40>
    3752:	7a c0       	rjmp	.+244    	; 0x3848 <__vector_19+0x134>
    3754:	89 32       	cpi	r24, 0x29	; 41
    3756:	91 05       	cpc	r25, r1
    3758:	b4 f4       	brge	.+44     	; 0x3786 <__vector_19+0x72>
    375a:	80 31       	cpi	r24, 0x10	; 16
    375c:	91 05       	cpc	r25, r1
    375e:	09 f4       	brne	.+2      	; 0x3762 <__vector_19+0x4e>
    3760:	6f c0       	rjmp	.+222    	; 0x3840 <__vector_19+0x12c>
    3762:	81 31       	cpi	r24, 0x11	; 17
    3764:	91 05       	cpc	r25, r1
    3766:	3c f4       	brge	.+14     	; 0x3776 <__vector_19+0x62>
    3768:	00 97       	sbiw	r24, 0x00	; 0
    376a:	09 f4       	brne	.+2      	; 0x376e <__vector_19+0x5a>
    376c:	28 c1       	rjmp	.+592    	; 0x39be <__vector_19+0x2aa>
    376e:	08 97       	sbiw	r24, 0x08	; 8
    3770:	09 f0       	breq	.+2      	; 0x3774 <__vector_19+0x60>
    3772:	2e c1       	rjmp	.+604    	; 0x39d0 <__vector_19+0x2bc>
    3774:	65 c0       	rjmp	.+202    	; 0x3840 <__vector_19+0x12c>
    3776:	88 31       	cpi	r24, 0x18	; 24
    3778:	91 05       	cpc	r25, r1
    377a:	09 f4       	brne	.+2      	; 0x377e <__vector_19+0x6a>
    377c:	65 c0       	rjmp	.+202    	; 0x3848 <__vector_19+0x134>
    377e:	80 97       	sbiw	r24, 0x20	; 32
    3780:	09 f0       	breq	.+2      	; 0x3784 <__vector_19+0x70>
    3782:	26 c1       	rjmp	.+588    	; 0x39d0 <__vector_19+0x2bc>
    3784:	7b c0       	rjmp	.+246    	; 0x387c <__vector_19+0x168>
    3786:	80 34       	cpi	r24, 0x40	; 64
    3788:	91 05       	cpc	r25, r1
    378a:	09 f4       	brne	.+2      	; 0x378e <__vector_19+0x7a>
    378c:	9a c0       	rjmp	.+308    	; 0x38c2 <__vector_19+0x1ae>
    378e:	81 34       	cpi	r24, 0x41	; 65
    3790:	91 05       	cpc	r25, r1
    3792:	44 f4       	brge	.+16     	; 0x37a4 <__vector_19+0x90>
    3794:	80 33       	cpi	r24, 0x30	; 48
    3796:	91 05       	cpc	r25, r1
    3798:	09 f4       	brne	.+2      	; 0x379c <__vector_19+0x88>
    379a:	79 c0       	rjmp	.+242    	; 0x388e <__vector_19+0x17a>
    379c:	c8 97       	sbiw	r24, 0x38	; 56
    379e:	09 f0       	breq	.+2      	; 0x37a2 <__vector_19+0x8e>
    37a0:	17 c1       	rjmp	.+558    	; 0x39d0 <__vector_19+0x2bc>
    37a2:	7e c0       	rjmp	.+252    	; 0x38a0 <__vector_19+0x18c>
    37a4:	80 35       	cpi	r24, 0x50	; 80
    37a6:	91 05       	cpc	r25, r1
    37a8:	09 f4       	brne	.+2      	; 0x37ac <__vector_19+0x98>
    37aa:	7e c0       	rjmp	.+252    	; 0x38a8 <__vector_19+0x194>
    37ac:	88 35       	cpi	r24, 0x58	; 88
    37ae:	91 05       	cpc	r25, r1
    37b0:	09 f4       	brne	.+2      	; 0x37b4 <__vector_19+0xa0>
    37b2:	8c c0       	rjmp	.+280    	; 0x38cc <__vector_19+0x1b8>
    37b4:	88 34       	cpi	r24, 0x48	; 72
    37b6:	91 05       	cpc	r25, r1
    37b8:	09 f0       	breq	.+2      	; 0x37bc <__vector_19+0xa8>
    37ba:	0a c1       	rjmp	.+532    	; 0x39d0 <__vector_19+0x2bc>
    37bc:	94 c0       	rjmp	.+296    	; 0x38e6 <__vector_19+0x1d2>
    37be:	88 39       	cpi	r24, 0x98	; 152
    37c0:	91 05       	cpc	r25, r1
    37c2:	09 f4       	brne	.+2      	; 0x37c6 <__vector_19+0xb2>
    37c4:	f6 c0       	rjmp	.+492    	; 0x39b2 <__vector_19+0x29e>
    37c6:	89 39       	cpi	r24, 0x99	; 153
    37c8:	91 05       	cpc	r25, r1
    37ca:	ec f4       	brge	.+58     	; 0x3806 <__vector_19+0xf2>
    37cc:	88 37       	cpi	r24, 0x78	; 120
    37ce:	91 05       	cpc	r25, r1
    37d0:	09 f4       	brne	.+2      	; 0x37d4 <__vector_19+0xc0>
    37d2:	8f c0       	rjmp	.+286    	; 0x38f2 <__vector_19+0x1de>
    37d4:	89 37       	cpi	r24, 0x79	; 121
    37d6:	91 05       	cpc	r25, r1
    37d8:	4c f4       	brge	.+18     	; 0x37ec <__vector_19+0xd8>
    37da:	88 36       	cpi	r24, 0x68	; 104
    37dc:	91 05       	cpc	r25, r1
    37de:	09 f4       	brne	.+2      	; 0x37e2 <__vector_19+0xce>
    37e0:	88 c0       	rjmp	.+272    	; 0x38f2 <__vector_19+0x1de>
    37e2:	80 37       	cpi	r24, 0x70	; 112
    37e4:	91 05       	cpc	r25, r1
    37e6:	09 f0       	breq	.+2      	; 0x37ea <__vector_19+0xd6>
    37e8:	f3 c0       	rjmp	.+486    	; 0x39d0 <__vector_19+0x2bc>
    37ea:	83 c0       	rjmp	.+262    	; 0x38f2 <__vector_19+0x1de>
    37ec:	88 38       	cpi	r24, 0x88	; 136
    37ee:	91 05       	cpc	r25, r1
    37f0:	09 f4       	brne	.+2      	; 0x37f4 <__vector_19+0xe0>
    37f2:	df c0       	rjmp	.+446    	; 0x39b2 <__vector_19+0x29e>
    37f4:	80 39       	cpi	r24, 0x90	; 144
    37f6:	91 05       	cpc	r25, r1
    37f8:	09 f4       	brne	.+2      	; 0x37fc <__vector_19+0xe8>
    37fa:	81 c0       	rjmp	.+258    	; 0x38fe <__vector_19+0x1ea>
    37fc:	80 38       	cpi	r24, 0x80	; 128
    37fe:	91 05       	cpc	r25, r1
    3800:	09 f0       	breq	.+2      	; 0x3804 <__vector_19+0xf0>
    3802:	e6 c0       	rjmp	.+460    	; 0x39d0 <__vector_19+0x2bc>
    3804:	7c c0       	rjmp	.+248    	; 0x38fe <__vector_19+0x1ea>
    3806:	80 3b       	cpi	r24, 0xB0	; 176
    3808:	91 05       	cpc	r25, r1
    380a:	09 f4       	brne	.+2      	; 0x380e <__vector_19+0xfa>
    380c:	a5 c0       	rjmp	.+330    	; 0x3958 <__vector_19+0x244>
    380e:	81 3b       	cpi	r24, 0xB1	; 177
    3810:	91 05       	cpc	r25, r1
    3812:	4c f4       	brge	.+18     	; 0x3826 <__vector_19+0x112>
    3814:	80 3a       	cpi	r24, 0xA0	; 160
    3816:	91 05       	cpc	r25, r1
    3818:	09 f4       	brne	.+2      	; 0x381c <__vector_19+0x108>
    381a:	84 c0       	rjmp	.+264    	; 0x3924 <__vector_19+0x210>
    381c:	88 3a       	cpi	r24, 0xA8	; 168
    381e:	91 05       	cpc	r25, r1
    3820:	09 f0       	breq	.+2      	; 0x3824 <__vector_19+0x110>
    3822:	d6 c0       	rjmp	.+428    	; 0x39d0 <__vector_19+0x2bc>
    3824:	99 c0       	rjmp	.+306    	; 0x3958 <__vector_19+0x244>
    3826:	80 3c       	cpi	r24, 0xC0	; 192
    3828:	91 05       	cpc	r25, r1
    382a:	09 f4       	brne	.+2      	; 0x382e <__vector_19+0x11a>
    382c:	c5 c0       	rjmp	.+394    	; 0x39b8 <__vector_19+0x2a4>
    382e:	88 3c       	cpi	r24, 0xC8	; 200
    3830:	91 05       	cpc	r25, r1
    3832:	09 f4       	brne	.+2      	; 0x3836 <__vector_19+0x122>
    3834:	c1 c0       	rjmp	.+386    	; 0x39b8 <__vector_19+0x2a4>
    3836:	88 3b       	cpi	r24, 0xB8	; 184
    3838:	91 05       	cpc	r25, r1
    383a:	09 f0       	breq	.+2      	; 0x383e <__vector_19+0x12a>
    383c:	c9 c0       	rjmp	.+402    	; 0x39d0 <__vector_19+0x2bc>
    383e:	a4 c0       	rjmp	.+328    	; 0x3988 <__vector_19+0x274>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    3840:	80 91 07 02 	lds	r24, 0x0207
    3844:	83 b9       	out	0x03, r24	; 3
    3846:	b3 c0       	rjmp	.+358    	; 0x39ae <__vector_19+0x29a>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    3848:	90 91 0e 02 	lds	r25, 0x020E
    384c:	80 91 0f 02 	lds	r24, 0x020F
    3850:	98 17       	cp	r25, r24
    3852:	70 f4       	brcc	.+28     	; 0x3870 <__vector_19+0x15c>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    3854:	90 91 0e 02 	lds	r25, 0x020E
    3858:	e0 91 0c 02 	lds	r30, 0x020C
    385c:	f0 91 0d 02 	lds	r31, 0x020D
    3860:	e9 0f       	add	r30, r25
    3862:	f1 1d       	adc	r31, r1
    3864:	80 81       	ld	r24, Z
    3866:	83 b9       	out	0x03, r24	; 3
    3868:	9f 5f       	subi	r25, 0xFF	; 255
    386a:	90 93 0e 02 	sts	0x020E, r25
    386e:	9f c0       	rjmp	.+318    	; 0x39ae <__vector_19+0x29a>
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    3870:	85 ed       	ldi	r24, 0xD5	; 213
    3872:	86 bf       	out	0x36, r24	; 54

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    3874:	06 b6       	in	r0, 0x36	; 54
    3876:	04 fc       	sbrc	r0, 4
    3878:	fd cf       	rjmp	.-6      	; 0x3874 <__vector_19+0x160>
    387a:	a8 c0       	rjmp	.+336    	; 0x39cc <__vector_19+0x2b8>
      }else{
        twi_stop();
      }
      break;
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
    387c:	80 e2       	ldi	r24, 0x20	; 32
    387e:	80 93 17 02 	sts	0x0217, r24
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    3882:	85 ed       	ldi	r24, 0xD5	; 213
    3884:	86 bf       	out	0x36, r24	; 54

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    3886:	06 b6       	in	r0, 0x36	; 54
    3888:	04 fc       	sbrc	r0, 4
    388a:	fd cf       	rjmp	.-6      	; 0x3886 <__vector_19+0x172>
    388c:	9f c0       	rjmp	.+318    	; 0x39cc <__vector_19+0x2b8>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    388e:	80 e3       	ldi	r24, 0x30	; 48
    3890:	80 93 17 02 	sts	0x0217, r24
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    3894:	85 ed       	ldi	r24, 0xD5	; 213
    3896:	86 bf       	out	0x36, r24	; 54

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    3898:	06 b6       	in	r0, 0x36	; 54
    389a:	04 fc       	sbrc	r0, 4
    389c:	fd cf       	rjmp	.-6      	; 0x3898 <__vector_19+0x184>
    389e:	96 c0       	rjmp	.+300    	; 0x39cc <__vector_19+0x2b8>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    38a0:	88 e3       	ldi	r24, 0x38	; 56
    38a2:	80 93 17 02 	sts	0x0217, r24
    38a6:	88 c0       	rjmp	.+272    	; 0x39b8 <__vector_19+0x2a4>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    38a8:	80 91 0e 02 	lds	r24, 0x020E
    38ac:	93 b1       	in	r25, 0x03	; 3
    38ae:	e0 91 0c 02 	lds	r30, 0x020C
    38b2:	f0 91 0d 02 	lds	r31, 0x020D
    38b6:	e8 0f       	add	r30, r24
    38b8:	f1 1d       	adc	r31, r1
    38ba:	90 83       	st	Z, r25
    38bc:	8f 5f       	subi	r24, 0xFF	; 255
    38be:	80 93 0e 02 	sts	0x020E, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    38c2:	90 91 0e 02 	lds	r25, 0x020E
    38c6:	80 91 0f 02 	lds	r24, 0x020F
    38ca:	6f c0       	rjmp	.+222    	; 0x39aa <__vector_19+0x296>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    38cc:	80 91 0e 02 	lds	r24, 0x020E
    38d0:	93 b1       	in	r25, 0x03	; 3
    38d2:	e0 91 0c 02 	lds	r30, 0x020C
    38d6:	f0 91 0d 02 	lds	r31, 0x020D
    38da:	e8 0f       	add	r30, r24
    38dc:	f1 1d       	adc	r31, r1
    38de:	90 83       	st	Z, r25
    38e0:	8f 5f       	subi	r24, 0xFF	; 255
    38e2:	80 93 0e 02 	sts	0x020E, r24
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    38e6:	85 ed       	ldi	r24, 0xD5	; 213
    38e8:	86 bf       	out	0x36, r24	; 54

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    38ea:	06 b6       	in	r0, 0x36	; 54
    38ec:	04 fc       	sbrc	r0, 4
    38ee:	fd cf       	rjmp	.-6      	; 0x38ea <__vector_19+0x1d6>
    38f0:	6d c0       	rjmp	.+218    	; 0x39cc <__vector_19+0x2b8>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    38f2:	83 e0       	ldi	r24, 0x03	; 3
    38f4:	80 93 06 02 	sts	0x0206, r24
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    38f8:	10 92 16 02 	sts	0x0216, r1
    38fc:	58 c0       	rjmp	.+176    	; 0x39ae <__vector_19+0x29a>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    38fe:	80 91 16 02 	lds	r24, 0x0216
    3902:	80 32       	cpi	r24, 0x20	; 32
    3904:	08 f0       	brcs	.+2      	; 0x3908 <__vector_19+0x1f4>
    3906:	55 c0       	rjmp	.+170    	; 0x39b2 <__vector_19+0x29e>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    3908:	80 91 16 02 	lds	r24, 0x0216
    390c:	93 b1       	in	r25, 0x03	; 3
    390e:	e0 91 14 02 	lds	r30, 0x0214
    3912:	f0 91 15 02 	lds	r31, 0x0215
    3916:	e8 0f       	add	r30, r24
    3918:	f1 1d       	adc	r31, r1
    391a:	90 83       	st	Z, r25
    391c:	8f 5f       	subi	r24, 0xFF	; 255
    391e:	80 93 16 02 	sts	0x0216, r24
    3922:	45 c0       	rjmp	.+138    	; 0x39ae <__vector_19+0x29a>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    3924:	80 91 16 02 	lds	r24, 0x0216
    3928:	80 32       	cpi	r24, 0x20	; 32
    392a:	48 f4       	brcc	.+18     	; 0x393e <__vector_19+0x22a>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    392c:	80 91 16 02 	lds	r24, 0x0216
    3930:	e0 91 14 02 	lds	r30, 0x0214
    3934:	f0 91 15 02 	lds	r31, 0x0215
    3938:	e8 0f       	add	r30, r24
    393a:	f1 1d       	adc	r31, r1
    393c:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    393e:	60 91 16 02 	lds	r22, 0x0216
    3942:	e0 91 0a 02 	lds	r30, 0x020A
    3946:	f0 91 0b 02 	lds	r31, 0x020B
    394a:	80 91 14 02 	lds	r24, 0x0214
    394e:	90 91 15 02 	lds	r25, 0x0215
    3952:	70 e0       	ldi	r23, 0x00	; 0
    3954:	09 95       	icall
    3956:	30 c0       	rjmp	.+96     	; 0x39b8 <__vector_19+0x2a4>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    3958:	84 e0       	ldi	r24, 0x04	; 4
    395a:	80 93 06 02 	sts	0x0206, r24
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    395e:	10 92 12 02 	sts	0x0212, r1
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    3962:	10 92 13 02 	sts	0x0213, r1
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    3966:	e0 91 08 02 	lds	r30, 0x0208
    396a:	f0 91 09 02 	lds	r31, 0x0209
    396e:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    3970:	80 91 13 02 	lds	r24, 0x0213
    3974:	88 23       	and	r24, r24
    3976:	41 f4       	brne	.+16     	; 0x3988 <__vector_19+0x274>
        twi_txBufferLength = 1;
    3978:	81 e0       	ldi	r24, 0x01	; 1
    397a:	80 93 13 02 	sts	0x0213, r24
        twi_txBuffer[0] = 0x00;
    397e:	e0 91 10 02 	lds	r30, 0x0210
    3982:	f0 91 11 02 	lds	r31, 0x0211
    3986:	10 82       	st	Z, r1
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    3988:	90 91 12 02 	lds	r25, 0x0212
    398c:	e0 91 10 02 	lds	r30, 0x0210
    3990:	f0 91 11 02 	lds	r31, 0x0211
    3994:	e9 0f       	add	r30, r25
    3996:	f1 1d       	adc	r31, r1
    3998:	80 81       	ld	r24, Z
    399a:	83 b9       	out	0x03, r24	; 3
    399c:	9f 5f       	subi	r25, 0xFF	; 255
    399e:	90 93 12 02 	sts	0x0212, r25
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    39a2:	90 91 12 02 	lds	r25, 0x0212
    39a6:	80 91 13 02 	lds	r24, 0x0213
    39aa:	98 17       	cp	r25, r24
    39ac:	10 f4       	brcc	.+4      	; 0x39b2 <__vector_19+0x29e>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    39ae:	85 ec       	ldi	r24, 0xC5	; 197
    39b0:	01 c0       	rjmp	.+2      	; 0x39b4 <__vector_19+0x2a0>
  }else{
          TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    39b2:	85 e8       	ldi	r24, 0x85	; 133
    39b4:	86 bf       	out	0x36, r24	; 54
    39b6:	0c c0       	rjmp	.+24     	; 0x39d0 <__vector_19+0x2bc>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    39b8:	85 ec       	ldi	r24, 0xC5	; 197
    39ba:	86 bf       	out	0x36, r24	; 54
    39bc:	07 c0       	rjmp	.+14     	; 0x39cc <__vector_19+0x2b8>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    39be:	10 92 17 02 	sts	0x0217, r1
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    39c2:	85 ed       	ldi	r24, 0xD5	; 213
    39c4:	86 bf       	out	0x36, r24	; 54

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    39c6:	06 b6       	in	r0, 0x36	; 54
    39c8:	04 fc       	sbrc	r0, 4
    39ca:	fd cf       	rjmp	.-6      	; 0x39c6 <__vector_19+0x2b2>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    39cc:	10 92 06 02 	sts	0x0206, r1
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
    39d0:	ff 91       	pop	r31
    39d2:	ef 91       	pop	r30
    39d4:	bf 91       	pop	r27
    39d6:	af 91       	pop	r26
    39d8:	9f 91       	pop	r25
    39da:	8f 91       	pop	r24
    39dc:	7f 91       	pop	r23
    39de:	6f 91       	pop	r22
    39e0:	5f 91       	pop	r21
    39e2:	4f 91       	pop	r20
    39e4:	3f 91       	pop	r19
    39e6:	2f 91       	pop	r18
    39e8:	0f 90       	pop	r0
    39ea:	0f be       	out	0x3f, r0	; 63
    39ec:	0f 90       	pop	r0
    39ee:	1f 90       	pop	r1
    39f0:	18 95       	reti

000039f2 <twi_init>:
 * Output   none
 */
void twi_init(void)
{
  // initialize state
  twi_state = TWI_READY;
    39f2:	10 92 06 02 	sts	0x0206, r1
    sbi(PORTC, 4);
    sbi(PORTC, 5);
  #else
    // activate internal pull-ups for twi
    // as per note from atmega128 manual pg204
    sbi(PORTD, 0);
    39f6:	90 9a       	sbi	0x12, 0	; 18
    sbi(PORTD, 1);
    39f8:	91 9a       	sbi	0x12, 1	; 18
  #endif

  // initialize twi prescaler and bit rate
  cbi(TWSR, TWPS0);
    39fa:	08 98       	cbi	0x01, 0	; 1
  cbi(TWSR, TWPS1);
    39fc:	09 98       	cbi	0x01, 1	; 1
  TWBR = ((CPU_FREQ / TWI_FREQ) - 16) / 2;
    39fe:	8c e0       	ldi	r24, 0x0C	; 12
    3a00:	80 b9       	out	0x00, r24	; 0
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */

  // enable twi module, acks, and twi interrupt
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
    3a02:	85 e4       	ldi	r24, 0x45	; 69
    3a04:	86 bf       	out	0x36, r24	; 54
        
  // allocate buffers
  twi_masterBuffer = (uint8_t*) calloc(TWI_BUFFER_LENGTH, sizeof(uint8_t));
    3a06:	80 e2       	ldi	r24, 0x20	; 32
    3a08:	90 e0       	ldi	r25, 0x00	; 0
    3a0a:	61 e0       	ldi	r22, 0x01	; 1
    3a0c:	70 e0       	ldi	r23, 0x00	; 0
    3a0e:	0e 94 2f 39 	call	0x725e	; 0x725e <calloc>
    3a12:	80 93 0c 02 	sts	0x020C, r24
    3a16:	90 93 0d 02 	sts	0x020D, r25
  twi_txBuffer = (uint8_t*) calloc(TWI_BUFFER_LENGTH, sizeof(uint8_t));
    3a1a:	80 e2       	ldi	r24, 0x20	; 32
    3a1c:	90 e0       	ldi	r25, 0x00	; 0
    3a1e:	61 e0       	ldi	r22, 0x01	; 1
    3a20:	70 e0       	ldi	r23, 0x00	; 0
    3a22:	0e 94 2f 39 	call	0x725e	; 0x725e <calloc>
    3a26:	80 93 10 02 	sts	0x0210, r24
    3a2a:	90 93 11 02 	sts	0x0211, r25
  twi_rxBuffer = (uint8_t*) calloc(TWI_BUFFER_LENGTH, sizeof(uint8_t));
    3a2e:	80 e2       	ldi	r24, 0x20	; 32
    3a30:	90 e0       	ldi	r25, 0x00	; 0
    3a32:	61 e0       	ldi	r22, 0x01	; 1
    3a34:	70 e0       	ldi	r23, 0x00	; 0
    3a36:	0e 94 2f 39 	call	0x725e	; 0x725e <calloc>
    3a3a:	80 93 14 02 	sts	0x0214, r24
    3a3e:	90 93 15 02 	sts	0x0215, r25
}
    3a42:	08 95       	ret

00003a44 <IMUserialClose>:
}

tMLError IMUserialClose(void)
{
        return ML_SUCCESS;
}
    3a44:	80 e0       	ldi	r24, 0x00	; 0
    3a46:	08 95       	ret

00003a48 <MLSLIntHandler>:
 *  @return Zero if the command is successful, an error code otherwise.
 */
tMLError MLSLIntHandler( unsigned char intSource )
{
    return ML_SUCCESS;
}
    3a48:	80 e0       	ldi	r24, 0x00	; 0
    3a4a:	08 95       	ret

00003a4c <MLSLSerialWriteBurst>:
 *  @param  data            Pointer to block of data.
 *
 *  @return Zero if the command is successful, an error code otherwise.
 */
tMLError MLSLSerialWriteBurst(unsigned char slaveAddr, unsigned char registerAddr, unsigned short length, const unsigned char *data)
{
    3a4c:	0f 93       	push	r16
    3a4e:	1f 93       	push	r17
    3a50:	df 93       	push	r29
    3a52:	cf 93       	push	r28
    3a54:	00 d0       	rcall	.+0      	; 0x3a56 <MLSLSerialWriteBurst+0xa>
    3a56:	0f 92       	push	r0
    3a58:	cd b7       	in	r28, 0x3d	; 61
    3a5a:	de b7       	in	r29, 0x3e	; 62
    3a5c:	18 2f       	mov	r17, r24
    3a5e:	69 83       	std	Y+1, r22	; 0x01
    3a60:	04 2f       	mov	r16, r20
    3a62:	3b 83       	std	Y+3, r19	; 0x03
    3a64:	2a 83       	std	Y+2, r18	; 0x02
        // avr_serialPrintf("WriteBurst(%x, 0x%x (%d), %d)\n", slaveAddr, registerAddr, registerAddr, length);

        // Write target register
        int result = twi_writeTo(slaveAddr, &registerAddr, 1, 1);
    3a66:	be 01       	movw	r22, r28
    3a68:	6f 5f       	subi	r22, 0xFF	; 255
    3a6a:	7f 4f       	sbci	r23, 0xFF	; 255
    3a6c:	41 e0       	ldi	r20, 0x01	; 1
    3a6e:	21 e0       	ldi	r18, 0x01	; 1
    3a70:	0e 94 0b 1b 	call	0x3616	; 0x3616 <twi_writeTo>
        if (result) return ML_ERROR;
    3a74:	88 23       	and	r24, r24
    3a76:	49 f4       	brne	.+18     	; 0x3a8a <MLSLSerialWriteBurst+0x3e>

        // Write data
        result = twi_writeTo((uint8_t)slaveAddr, (uint8_t*)&data, length, 1);
    3a78:	81 2f       	mov	r24, r17
    3a7a:	be 01       	movw	r22, r28
    3a7c:	6e 5f       	subi	r22, 0xFE	; 254
    3a7e:	7f 4f       	sbci	r23, 0xFF	; 255
    3a80:	40 2f       	mov	r20, r16
    3a82:	21 e0       	ldi	r18, 0x01	; 1
    3a84:	0e 94 0b 1b 	call	0x3616	; 0x3616 <twi_writeTo>
    3a88:	81 11       	cpse	r24, r1
    3a8a:	81 e0       	ldi	r24, 0x01	; 1
        if (result) return ML_ERROR;

        return ML_SUCCESS;
}
    3a8c:	0f 90       	pop	r0
    3a8e:	0f 90       	pop	r0
    3a90:	0f 90       	pop	r0
    3a92:	cf 91       	pop	r28
    3a94:	df 91       	pop	r29
    3a96:	1f 91       	pop	r17
    3a98:	0f 91       	pop	r16
    3a9a:	08 95       	ret

00003a9c <MLSLSerialWriteSingle>:
 *  @param  data            Single byte of data to write.
 *
 *  @return Zero if the command is successful, an error code otherwise.
 */
tMLError MLSLSerialWriteSingle(unsigned char slaveAddr, unsigned char registerAddr, unsigned char data)
{
    3a9c:	df 93       	push	r29
    3a9e:	cf 93       	push	r28
    3aa0:	00 d0       	rcall	.+0      	; 0x3aa2 <MLSLSerialWriteSingle+0x6>
    3aa2:	cd b7       	in	r28, 0x3d	; 61
    3aa4:	de b7       	in	r29, 0x3e	; 62
        // avr_serialPrintf("WriteSingle(%x, 0x%x (%d), %d)\n", slaveAddr, registerAddr, registerAddr, data);

        unsigned char buf[2] = { registerAddr, data };
    3aa6:	69 83       	std	Y+1, r22	; 0x01
    3aa8:	4a 83       	std	Y+2, r20	; 0x02
        int result = twi_writeTo(slaveAddr, buf, 2, 1);
    3aaa:	be 01       	movw	r22, r28
    3aac:	6f 5f       	subi	r22, 0xFF	; 255
    3aae:	7f 4f       	sbci	r23, 0xFF	; 255
    3ab0:	42 e0       	ldi	r20, 0x02	; 2
    3ab2:	21 e0       	ldi	r18, 0x01	; 1
    3ab4:	0e 94 0b 1b 	call	0x3616	; 0x3616 <twi_writeTo>
        if (result) return ML_ERROR;

        return ML_ERROR;
}
    3ab8:	81 e0       	ldi	r24, 0x01	; 1
    3aba:	0f 90       	pop	r0
    3abc:	0f 90       	pop	r0
    3abe:	cf 91       	pop	r28
    3ac0:	df 91       	pop	r29
    3ac2:	08 95       	ret

00003ac4 <MLSLSerialReadBurst>:
 *  @param  data            Pointer to block of data.
 *
 *  @return Zero if the command is successful; an error code otherwise
 */
tMLError MLSLSerialReadBurst(unsigned char slaveAddr, unsigned char registerAddr, unsigned short length, unsigned char *data)
{
    3ac4:	df 92       	push	r13
    3ac6:	ef 92       	push	r14
    3ac8:	ff 92       	push	r15
    3aca:	0f 93       	push	r16
    3acc:	1f 93       	push	r17
    3ace:	df 93       	push	r29
    3ad0:	cf 93       	push	r28
    3ad2:	0f 92       	push	r0
    3ad4:	cd b7       	in	r28, 0x3d	; 61
    3ad6:	de b7       	in	r29, 0x3e	; 62
    3ad8:	d8 2e       	mov	r13, r24
    3ada:	69 83       	std	Y+1, r22	; 0x01
    3adc:	7a 01       	movw	r14, r20
    3ade:	89 01       	movw	r16, r18
        // avr_serialPrintf("ReadBurst(%x, 0x%x (%d), %d)\n", slaveAddr, registerAddr, registerAddr, length);

        // Write target register
        int result = twi_writeTo(slaveAddr, &registerAddr, 1, 1);
    3ae0:	be 01       	movw	r22, r28
    3ae2:	6f 5f       	subi	r22, 0xFF	; 255
    3ae4:	7f 4f       	sbci	r23, 0xFF	; 255
    3ae6:	41 e0       	ldi	r20, 0x01	; 1
    3ae8:	21 e0       	ldi	r18, 0x01	; 1
    3aea:	0e 94 0b 1b 	call	0x3616	; 0x3616 <twi_writeTo>
        if (result) return ML_ERROR;
    3aee:	88 23       	and	r24, r24
    3af0:	51 f4       	brne	.+20     	; 0x3b06 <MLSLSerialReadBurst+0x42>

        // Read data
        result = twi_readFrom(slaveAddr, data, length);
    3af2:	8d 2d       	mov	r24, r13
    3af4:	b8 01       	movw	r22, r16
    3af6:	4e 2d       	mov	r20, r14
    3af8:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <twi_readFrom>
    3afc:	20 e0       	ldi	r18, 0x00	; 0
    3afe:	90 e0       	ldi	r25, 0x00	; 0
    3b00:	8e 15       	cp	r24, r14
    3b02:	9f 05       	cpc	r25, r15
    3b04:	09 f0       	breq	.+2      	; 0x3b08 <MLSLSerialReadBurst+0x44>
    3b06:	21 e0       	ldi	r18, 0x01	; 1
        if (result!=length) return ML_ERROR;

        return ML_SUCCESS;
}
    3b08:	82 2f       	mov	r24, r18
    3b0a:	0f 90       	pop	r0
    3b0c:	cf 91       	pop	r28
    3b0e:	df 91       	pop	r29
    3b10:	1f 91       	pop	r17
    3b12:	0f 91       	pop	r16
    3b14:	ff 90       	pop	r15
    3b16:	ef 90       	pop	r14
    3b18:	df 90       	pop	r13
    3b1a:	08 95       	ret

00003b1c <MLSLSerialReadSingle>:
 *  @param  data            Single byte of data to read.
 *
 *  @return Zero if the command is successful, an error code otherwise.
 */
tMLError MLSLSerialReadSingle(unsigned char slaveAddr, unsigned char registerAddr, unsigned char *data)
{
    3b1c:	ff 92       	push	r15
    3b1e:	0f 93       	push	r16
    3b20:	1f 93       	push	r17
    3b22:	df 93       	push	r29
    3b24:	cf 93       	push	r28
    3b26:	0f 92       	push	r0
    3b28:	cd b7       	in	r28, 0x3d	; 61
    3b2a:	de b7       	in	r29, 0x3e	; 62
    3b2c:	f8 2e       	mov	r15, r24
    3b2e:	69 83       	std	Y+1, r22	; 0x01
    3b30:	8a 01       	movw	r16, r20
        // avr_serialPrintf("ReadSingle(%x, 0x%x (%d))\n", slaveAddr, registerAddr, registerAddr);

        // Write target register
        int result = twi_writeTo(slaveAddr, &registerAddr, 1, 1);
    3b32:	be 01       	movw	r22, r28
    3b34:	6f 5f       	subi	r22, 0xFF	; 255
    3b36:	7f 4f       	sbci	r23, 0xFF	; 255
    3b38:	41 e0       	ldi	r20, 0x01	; 1
    3b3a:	21 e0       	ldi	r18, 0x01	; 1
    3b3c:	0e 94 0b 1b 	call	0x3616	; 0x3616 <twi_writeTo>
        if (result) return ML_ERROR;
    3b40:	88 23       	and	r24, r24
    3b42:	41 f4       	brne	.+16     	; 0x3b54 <MLSLSerialReadSingle+0x38>

        // Read data
        result = twi_readFrom(slaveAddr, data, 1);
    3b44:	8f 2d       	mov	r24, r15
    3b46:	b8 01       	movw	r22, r16
    3b48:	41 e0       	ldi	r20, 0x01	; 1
    3b4a:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <twi_readFrom>
    3b4e:	90 e0       	ldi	r25, 0x00	; 0
    3b50:	81 30       	cpi	r24, 0x01	; 1
    3b52:	09 f0       	breq	.+2      	; 0x3b56 <MLSLSerialReadSingle+0x3a>
    3b54:	91 e0       	ldi	r25, 0x01	; 1
        if (result!=1) return ML_ERROR;

        return ML_SUCCESS;
}
    3b56:	89 2f       	mov	r24, r25
    3b58:	0f 90       	pop	r0
    3b5a:	cf 91       	pop	r28
    3b5c:	df 91       	pop	r29
    3b5e:	1f 91       	pop	r17
    3b60:	0f 91       	pop	r16
    3b62:	ff 90       	pop	r15
    3b64:	08 95       	ret

00003b66 <MLSLSerialReset>:
 *  @brief  used to reset any buffering the driver may be doing
 *  @return Zero if the command is successful, an error code otherwise.
 */
tMLError MLSLSerialReset( void )
{
        twi_init();
    3b66:	0e 94 f9 1c 	call	0x39f2	; 0x39f2 <twi_init>
    return ML_SUCCESS;
}
    3b6a:	80 e0       	ldi	r24, 0x00	; 0
    3b6c:	08 95       	ret

00003b6e <IMUserialOpen>:
tWriteBurst WriteBurst = &MLSLSerialWriteBurst;
tReadBurst ReadBurst = &MLSLSerialReadBurst;

tMLError IMUserialOpen(int_fast8_t port)
{
        twi_init();
    3b6e:	0e 94 f9 1c 	call	0x39f2	; 0x39f2 <twi_init>
        return ML_SUCCESS;
}
    3b72:	80 e0       	ldi	r24, 0x00	; 0
    3b74:	08 95       	ret

00003b76 <MLOSMalloc>:
void *MLOSMalloc(unsigned int numBytes)
{
        // TODO implement
        // Not used ?
        return NULL;
}
    3b76:	80 e0       	ldi	r24, 0x00	; 0
    3b78:	90 e0       	ldi	r25, 0x00	; 0
    3b7a:	08 95       	ret

00003b7c <MLOSFree>:
unsigned char MLOSFree(void *ptr)
{
        // TODO implement
        // Not used ?
        return MLOS_SUCCESS;
}
    3b7c:	80 e0       	ldi	r24, 0x00	; 0
    3b7e:	08 95       	ret

00003b80 <MLOSGetTickCount>:
 *          Used for time reference.
 *  @return current tick count.
 **/
unsigned long MLOSGetTickCount()
{
        return (long)avr_millis();
    3b80:	0e 94 23 01 	call	0x246	; 0x246 <avr_millis>
}
    3b84:	08 95       	ret

00003b86 <MLOSSleep>:
/**
 *  @brief  Sleep function.
 */
void MLOSSleep(int mSecs)
{
        avr_delay(mSecs);
    3b86:	aa 27       	eor	r26, r26
    3b88:	97 fd       	sbrc	r25, 7
    3b8a:	a0 95       	com	r26
    3b8c:	ba 2f       	mov	r27, r26
    3b8e:	bc 01       	movw	r22, r24
    3b90:	cd 01       	movw	r24, r26
    3b92:	0e 94 44 01 	call	0x288	; 0x288 <avr_delay>
        return;
}
    3b96:	08 95       	ret

00003b98 <dmpDefaultGetAddress>:
};

static tKeyLabel keys[NUM_KEYS];

static unsigned short dmpDefaultGetAddress(unsigned short key)
{
    3b98:	dc 01       	movw	r26, r24
        static int isSorted = 0;
        if (!isSorted)
    3b9a:	80 91 18 02 	lds	r24, 0x0218
    3b9e:	90 91 19 02 	lds	r25, 0x0219
    3ba2:	89 2b       	or	r24, r25
    3ba4:	d9 f4       	brne	.+54     	; 0x3bdc <dmpDefaultGetAddress+0x44>
    3ba6:	ea e1       	ldi	r30, 0x1A	; 26
    3ba8:	f2 e0       	ldi	r31, 0x02	; 2
    3baa:	80 e0       	ldi	r24, 0x00	; 0
    3bac:	90 e0       	ldi	r25, 0x00	; 0
        {
                unsigned short kk;
                for (kk = 0; kk < NUM_KEYS; ++kk)
                {
                        keys[kk].addr = 0xffff;
    3bae:	2f ef       	ldi	r18, 0xFF	; 255
    3bb0:	3f ef       	ldi	r19, 0xFF	; 255
    3bb2:	33 83       	std	Z+3, r19	; 0x03
    3bb4:	22 83       	std	Z+2, r18	; 0x02
                        keys[kk].key = kk;
    3bb6:	91 83       	std	Z+1, r25	; 0x01
    3bb8:	80 83       	st	Z, r24
{
        static int isSorted = 0;
        if (!isSorted)
        {
                unsigned short kk;
                for (kk = 0; kk < NUM_KEYS; ++kk)
    3bba:	01 96       	adiw	r24, 0x01	; 1
    3bbc:	34 96       	adiw	r30, 0x04	; 4
    3bbe:	8b 32       	cpi	r24, 0x2B	; 43
    3bc0:	91 05       	cpc	r25, r1
    3bc2:	b9 f7       	brne	.-18     	; 0x3bb2 <dmpDefaultGetAddress+0x1a>
                        keys[kk].addr = 0xffff;
                        keys[kk].key = kk;
                }
                for (kk = 0; kk < NUM_LOCAL_KEYS; ++kk)
                {
                        keys[dmpTConfig[kk].key].addr = dmpTConfig[kk].addr;
    3bc4:	8a e0       	ldi	r24, 0x0A	; 10
    3bc6:	93 e0       	ldi	r25, 0x03	; 3
    3bc8:	90 93 79 02 	sts	0x0279, r25
    3bcc:	80 93 78 02 	sts	0x0278, r24
                }
                isSorted = 1;
    3bd0:	81 e0       	ldi	r24, 0x01	; 1
    3bd2:	90 e0       	ldi	r25, 0x00	; 0
    3bd4:	90 93 19 02 	sts	0x0219, r25
    3bd8:	80 93 18 02 	sts	0x0218, r24
        }
        if (key >= NUM_KEYS)
    3bdc:	ab 32       	cpi	r26, 0x2B	; 43
    3bde:	b1 05       	cpc	r27, r1
    3be0:	18 f0       	brcs	.+6      	; 0x3be8 <dmpDefaultGetAddress+0x50>
    3be2:	2f ef       	ldi	r18, 0xFF	; 255
    3be4:	3f ef       	ldi	r19, 0xFF	; 255
    3be6:	08 c0       	rjmp	.+16     	; 0x3bf8 <dmpDefaultGetAddress+0x60>
                return 0xffff;
        return keys[key].addr;
    3be8:	aa 0f       	add	r26, r26
    3bea:	bb 1f       	adc	r27, r27
    3bec:	aa 0f       	add	r26, r26
    3bee:	bb 1f       	adc	r27, r27
    3bf0:	a4 5e       	subi	r26, 0xE4	; 228
    3bf2:	bd 4f       	sbci	r27, 0xFD	; 253
    3bf4:	2d 91       	ld	r18, X+
    3bf6:	3c 91       	ld	r19, X
}
    3bf8:	c9 01       	movw	r24, r18
    3bfa:	08 95       	ret

00003bfc <dmpDefault>:

void *dmpDefault()
{
        tMLError result;
        setGetAddress(dmpDefaultGetAddress);
    3bfc:	8c ec       	ldi	r24, 0xCC	; 204
    3bfe:	9d e1       	ldi	r25, 0x1D	; 29
    3c00:	0e 94 ee 09 	call	0x13dc	; 0x13dc <setGetAddress>

        result = MLDLClockSource(CLK_PLLGYROZ);
    3c04:	83 e0       	ldi	r24, 0x03	; 3
    3c06:	0e 94 ac 0c 	call	0x1958	; 0x1958 <MLDLClockSource>
        result = MLDLCfgSamplingMPU(MPUFILTER_42HZ, MPUFS_2000DPS, 4);
    3c0a:	83 e0       	ldi	r24, 0x03	; 3
    3c0c:	63 e0       	ldi	r22, 0x03	; 3
    3c0e:	44 e0       	ldi	r20, 0x04	; 4
    3c10:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <MLDLCfgSamplingMPU>
        loadDMP(dmpMemory, 1024, sStartAddress);
    3c14:	80 e8       	ldi	r24, 0x80	; 128
    3c16:	90 e0       	ldi	r25, 0x00	; 0
    3c18:	60 e0       	ldi	r22, 0x00	; 0
    3c1a:	74 e0       	ldi	r23, 0x04	; 4
    3c1c:	47 e6       	ldi	r20, 0x67	; 103
    3c1e:	51 e0       	ldi	r21, 0x01	; 1
    3c20:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <loadDMP>

        return NULL;
}
    3c24:	80 e0       	ldi	r24, 0x00	; 0
    3c26:	90 e0       	ldi	r25, 0x00	; 0
    3c28:	08 95       	ret

00003c2a <MLGetControlData>:
 *
 *  @return Zero if the command is successful; an ML error code otherwise.
 */

tMLError MLGetControlData(int *controlSignal, int *gridNum, int *gridChange)
{
    3c2a:	ef 92       	push	r14
    3c2c:	ff 92       	push	r15
    3c2e:	0f 93       	push	r16
    3c30:	1f 93       	push	r17
    3c32:	cf 93       	push	r28
    3c34:	df 93       	push	r29
    3c36:	7c 01       	movw	r14, r24
    3c38:	8b 01       	movw	r16, r22
    3c3a:	ea 01       	movw	r28, r20

    int_fast8_t i=0;
    
    if ( isCompatible( IMU_C_OPEN | IMU_C_START, IMU_C_OPEN_CALLED | IMU_C_START_CALLED) != ML_SUCCESS)
    3c3c:	83 e0       	ldi	r24, 0x03	; 3
    3c3e:	63 e0       	ldi	r22, 0x03	; 3
    3c40:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <isCompatible>
    3c44:	88 23       	and	r24, r24
    3c46:	11 f0       	breq	.+4      	; 0x3c4c <MLGetControlData+0x22>
    3c48:	81 e0       	ldi	r24, 0x01	; 1
    3c4a:	25 c0       	rjmp	.+74     	; 0x3c96 <MLGetControlData+0x6c>
    3c4c:	a5 ec       	ldi	r26, 0xC5	; 197
    3c4e:	b3 e0       	ldi	r27, 0x03	; 3
    3c50:	20 e0       	ldi	r18, 0x00	; 0
    3c52:	30 e0       	ldi	r19, 0x00	; 0
        return ML_ERROR;    

    for (i=0; i<4; i++) {
        controlSignal[i] = mlCtrlxData.controlInt[i];
    3c54:	f7 01       	movw	r30, r14
    3c56:	e2 0f       	add	r30, r18
    3c58:	f3 1f       	adc	r31, r19
    3c5a:	18 96       	adiw	r26, 0x08	; 8
    3c5c:	8d 91       	ld	r24, X+
    3c5e:	9c 91       	ld	r25, X
    3c60:	19 97       	sbiw	r26, 0x09	; 9
    3c62:	91 83       	std	Z+1, r25	; 0x01
    3c64:	80 83       	st	Z, r24
        gridNum[i] = mlCtrlxData.gridNum[i];
    3c66:	f8 01       	movw	r30, r16
    3c68:	e2 0f       	add	r30, r18
    3c6a:	f3 1f       	adc	r31, r19
    3c6c:	8d 91       	ld	r24, X+
    3c6e:	9c 91       	ld	r25, X
    3c70:	11 97       	sbiw	r26, 0x01	; 1
    3c72:	91 83       	std	Z+1, r25	; 0x01
    3c74:	80 83       	st	Z, r24
        gridChange[i] = mlCtrlxData.gridChange[i];
    3c76:	fe 01       	movw	r30, r28
    3c78:	e2 0f       	add	r30, r18
    3c7a:	f3 1f       	adc	r31, r19
    3c7c:	5c 96       	adiw	r26, 0x1c	; 28
    3c7e:	8d 91       	ld	r24, X+
    3c80:	9c 91       	ld	r25, X
    3c82:	5d 97       	sbiw	r26, 0x1d	; 29
    3c84:	91 83       	std	Z+1, r25	; 0x01
    3c86:	80 83       	st	Z, r24
    3c88:	2e 5f       	subi	r18, 0xFE	; 254
    3c8a:	3f 4f       	sbci	r19, 0xFF	; 255
    3c8c:	12 96       	adiw	r26, 0x02	; 2
    int_fast8_t i=0;
    
    if ( isCompatible( IMU_C_OPEN | IMU_C_START, IMU_C_OPEN_CALLED | IMU_C_START_CALLED) != ML_SUCCESS)
        return ML_ERROR;    

    for (i=0; i<4; i++) {
    3c8e:	28 30       	cpi	r18, 0x08	; 8
    3c90:	31 05       	cpc	r19, r1
    3c92:	01 f7       	brne	.-64     	; 0x3c54 <MLGetControlData+0x2a>
    3c94:	80 e0       	ldi	r24, 0x00	; 0
        controlSignal[i] = mlCtrlxData.controlInt[i];
        gridNum[i] = mlCtrlxData.gridNum[i];
        gridChange[i] = mlCtrlxData.gridChange[i];
    }
    return ML_SUCCESS;
}
    3c96:	df 91       	pop	r29
    3c98:	cf 91       	pop	r28
    3c9a:	1f 91       	pop	r17
    3c9c:	0f 91       	pop	r16
    3c9e:	ff 90       	pop	r15
    3ca0:	ef 90       	pop	r14
    3ca2:	08 95       	ret

00003ca4 <MLSetControlSignals>:
 *
 *  @return Zero if the command is successful; an ML error code otherwise.
 */

tMLError MLSetControlSignals(unsigned short controlSignals)
{
    3ca4:	cf 93       	push	r28
    3ca6:	df 93       	push	r29
    3ca8:	ec 01       	movw	r28, r24


    if ( isCompatible( IMU_C_OPEN | IMU_C_START, IMU_C_OPEN_CALLED ) != ML_SUCCESS)
    3caa:	83 e0       	ldi	r24, 0x03	; 3
    3cac:	61 e0       	ldi	r22, 0x01	; 1
    3cae:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <isCompatible>
    3cb2:	88 23       	and	r24, r24
    3cb4:	11 f0       	breq	.+4      	; 0x3cba <MLSetControlSignals+0x16>
    3cb6:	81 e0       	ldi	r24, 0x01	; 1
    3cb8:	05 c0       	rjmp	.+10     	; 0x3cc4 <MLSetControlSignals+0x20>
        return ML_ERROR;    

    mlCtrlParams.controlSignals = controlSignals;
    3cba:	d0 93 8c 00 	sts	0x008C, r29
    3cbe:	c0 93 8b 00 	sts	0x008B, r28
    3cc2:	80 e0       	ldi	r24, 0x00	; 0
    return ML_SUCCESS;
}
    3cc4:	df 91       	pop	r29
    3cc6:	cf 91       	pop	r28
    3cc8:	08 95       	ret

00003cca <MLSetGridCallback>:
 *
 *  @param  func    A user defined callback function
 *  @return Zero if the command is successful; an ML error code otherwise.
 */
tMLError MLSetGridCallback(GridCallbackPtr func)
{
    3cca:	cf 93       	push	r28
    3ccc:	df 93       	push	r29
    3cce:	ec 01       	movw	r28, r24


    if ( isCompatible( IMU_C_OPEN, IMU_C_OPEN_CALLED ) != ML_SUCCESS)
    3cd0:	81 e0       	ldi	r24, 0x01	; 1
    3cd2:	61 e0       	ldi	r22, 0x01	; 1
    3cd4:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <isCompatible>
    3cd8:	88 23       	and	r24, r24
    3cda:	11 f0       	breq	.+4      	; 0x3ce0 <MLSetGridCallback+0x16>
    3cdc:	81 e0       	ldi	r24, 0x01	; 1
    3cde:	05 c0       	rjmp	.+10     	; 0x3cea <MLSetGridCallback+0x20>
        return ML_ERROR;    

    mlCtrlParams.gridCallback = func;
    3ce0:	d0 93 ae 00 	sts	0x00AE, r29
    3ce4:	c0 93 ad 00 	sts	0x00AD, r28
    3ce8:	80 e0       	ldi	r24, 0x00	; 0
    return ML_SUCCESS;
}
    3cea:	df 91       	pop	r29
    3cec:	cf 91       	pop	r28
    3cee:	08 95       	ret

00003cf0 <MLSetGridMax>:
 *  @param  maximum         The maximum grid number for a control signal.
 *  @return Zero if the command is successful; an ML error code otherwise.
 */

tMLError MLSetGridMax(unsigned short controlSignal, int maximum)
{
    3cf0:	0f 93       	push	r16
    3cf2:	1f 93       	push	r17
    3cf4:	cf 93       	push	r28
    3cf6:	df 93       	push	r29
    3cf8:	ec 01       	movw	r28, r24
    3cfa:	8b 01       	movw	r16, r22


    if ( isCompatible( IMU_C_OPEN | IMU_C_START, IMU_C_OPEN_CALLED ) != ML_SUCCESS)
    3cfc:	83 e0       	ldi	r24, 0x03	; 3
    3cfe:	61 e0       	ldi	r22, 0x01	; 1
    3d00:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <isCompatible>
    3d04:	88 23       	and	r24, r24
    3d06:	11 f0       	breq	.+4      	; 0x3d0c <MLSetGridMax+0x1c>
    3d08:	81 e0       	ldi	r24, 0x01	; 1
    3d0a:	24 c0       	rjmp	.+72     	; 0x3d54 <MLSetGridMax+0x64>
        return ML_ERROR;    

    switch (controlSignal) {
    3d0c:	c2 30       	cpi	r28, 0x02	; 2
    3d0e:	d1 05       	cpc	r29, r1
    3d10:	91 f0       	breq	.+36     	; 0x3d36 <MLSetGridMax+0x46>
    3d12:	c3 30       	cpi	r28, 0x03	; 3
    3d14:	d1 05       	cpc	r29, r1
    3d16:	18 f4       	brcc	.+6      	; 0x3d1e <MLSetGridMax+0x2e>
    3d18:	21 97       	sbiw	r28, 0x01	; 1
    3d1a:	31 f4       	brne	.+12     	; 0x3d28 <MLSetGridMax+0x38>
    3d1c:	07 c0       	rjmp	.+14     	; 0x3d2c <MLSetGridMax+0x3c>
    3d1e:	c4 30       	cpi	r28, 0x04	; 4
    3d20:	d1 05       	cpc	r29, r1
    3d22:	71 f0       	breq	.+28     	; 0x3d40 <MLSetGridMax+0x50>
    3d24:	28 97       	sbiw	r28, 0x08	; 8
    3d26:	89 f0       	breq	.+34     	; 0x3d4a <MLSetGridMax+0x5a>
    3d28:	82 e0       	ldi	r24, 0x02	; 2
    3d2a:	14 c0       	rjmp	.+40     	; 0x3d54 <MLSetGridMax+0x64>
        case ML_CONTROL_1:
            mlCtrlParams.gridMaximum[0] = maximum;
    3d2c:	10 93 a6 00 	sts	0x00A6, r17
    3d30:	00 93 a5 00 	sts	0x00A5, r16
    3d34:	0e c0       	rjmp	.+28     	; 0x3d52 <MLSetGridMax+0x62>
            break;
        case ML_CONTROL_2:
            mlCtrlParams.gridMaximum[1] = maximum;
    3d36:	10 93 a8 00 	sts	0x00A8, r17
    3d3a:	00 93 a7 00 	sts	0x00A7, r16
    3d3e:	09 c0       	rjmp	.+18     	; 0x3d52 <MLSetGridMax+0x62>
            break;
        case ML_CONTROL_3:
            mlCtrlParams.gridMaximum[2] = maximum;
    3d40:	10 93 aa 00 	sts	0x00AA, r17
    3d44:	00 93 a9 00 	sts	0x00A9, r16
    3d48:	04 c0       	rjmp	.+8      	; 0x3d52 <MLSetGridMax+0x62>
            break;
        case ML_CONTROL_4:
            mlCtrlParams.gridMaximum[3] = maximum;
    3d4a:	10 93 ac 00 	sts	0x00AC, r17
    3d4e:	00 93 ab 00 	sts	0x00AB, r16
    3d52:	80 e0       	ldi	r24, 0x00	; 0
            return ML_ERROR_INVALID_PARAMETER;
            break;
    }

    return ML_SUCCESS;
}
    3d54:	df 91       	pop	r29
    3d56:	cf 91       	pop	r28
    3d58:	1f 91       	pop	r17
    3d5a:	0f 91       	pop	r16
    3d5c:	08 95       	ret

00003d5e <MLSetGridThresh>:
 *                          number will be incremented or decremented.
 *  @return Zero if the command is successful; an ML error code otherwise.
 */

tMLError MLSetGridThresh(unsigned short controlSignal, int threshold)
{
    3d5e:	0f 93       	push	r16
    3d60:	1f 93       	push	r17
    3d62:	cf 93       	push	r28
    3d64:	df 93       	push	r29
    3d66:	ec 01       	movw	r28, r24
    3d68:	8b 01       	movw	r16, r22

    
    if ( isCompatible( IMU_C_OPEN | IMU_C_START, IMU_C_OPEN_CALLED | IMU_C_START_CALLED) != ML_SUCCESS)
    3d6a:	83 e0       	ldi	r24, 0x03	; 3
    3d6c:	63 e0       	ldi	r22, 0x03	; 3
    3d6e:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <isCompatible>
    3d72:	88 23       	and	r24, r24
    3d74:	11 f0       	breq	.+4      	; 0x3d7a <MLSetGridThresh+0x1c>
    3d76:	81 e0       	ldi	r24, 0x01	; 1
    3d78:	24 c0       	rjmp	.+72     	; 0x3dc2 <MLSetGridThresh+0x64>
        return ML_ERROR;    

    switch (controlSignal) {
    3d7a:	c2 30       	cpi	r28, 0x02	; 2
    3d7c:	d1 05       	cpc	r29, r1
    3d7e:	91 f0       	breq	.+36     	; 0x3da4 <MLSetGridThresh+0x46>
    3d80:	c3 30       	cpi	r28, 0x03	; 3
    3d82:	d1 05       	cpc	r29, r1
    3d84:	18 f4       	brcc	.+6      	; 0x3d8c <MLSetGridThresh+0x2e>
    3d86:	21 97       	sbiw	r28, 0x01	; 1
    3d88:	31 f4       	brne	.+12     	; 0x3d96 <MLSetGridThresh+0x38>
    3d8a:	07 c0       	rjmp	.+14     	; 0x3d9a <MLSetGridThresh+0x3c>
    3d8c:	c4 30       	cpi	r28, 0x04	; 4
    3d8e:	d1 05       	cpc	r29, r1
    3d90:	71 f0       	breq	.+28     	; 0x3dae <MLSetGridThresh+0x50>
    3d92:	28 97       	sbiw	r28, 0x08	; 8
    3d94:	89 f0       	breq	.+34     	; 0x3db8 <MLSetGridThresh+0x5a>
    3d96:	82 e0       	ldi	r24, 0x02	; 2
    3d98:	14 c0       	rjmp	.+40     	; 0x3dc2 <MLSetGridThresh+0x64>
        case ML_CONTROL_1:
            mlCtrlParams.gridThreshold[0] = threshold;
    3d9a:	10 93 9e 00 	sts	0x009E, r17
    3d9e:	00 93 9d 00 	sts	0x009D, r16
    3da2:	0e c0       	rjmp	.+28     	; 0x3dc0 <MLSetGridThresh+0x62>
            break;
        case ML_CONTROL_2:
            mlCtrlParams.gridThreshold[1] = threshold;
    3da4:	10 93 a0 00 	sts	0x00A0, r17
    3da8:	00 93 9f 00 	sts	0x009F, r16
    3dac:	09 c0       	rjmp	.+18     	; 0x3dc0 <MLSetGridThresh+0x62>
            break;
        case ML_CONTROL_3:
            mlCtrlParams.gridThreshold[2] = threshold;
    3dae:	10 93 a2 00 	sts	0x00A2, r17
    3db2:	00 93 a1 00 	sts	0x00A1, r16
    3db6:	04 c0       	rjmp	.+8      	; 0x3dc0 <MLSetGridThresh+0x62>
            break;
        case ML_CONTROL_4:
            mlCtrlParams.gridThreshold[3] = threshold;
    3db8:	10 93 a4 00 	sts	0x00A4, r17
    3dbc:	00 93 a3 00 	sts	0x00A3, r16
    3dc0:	80 e0       	ldi	r24, 0x00	; 0
            return ML_ERROR_INVALID_PARAMETER;
            break;
    }

    return ML_SUCCESS;
}
    3dc2:	df 91       	pop	r29
    3dc4:	cf 91       	pop	r28
    3dc6:	1f 91       	pop	r17
    3dc8:	0f 91       	pop	r16
    3dca:	08 95       	ret

00003dcc <MLGetGridNum>:
 *
 *  @return Zero if the command is successful; an ML error code otherwise.
 */

tMLError MLGetGridNum(unsigned short controlSignal, unsigned short reset,int *data)
{
    3dcc:	ef 92       	push	r14
    3dce:	ff 92       	push	r15
    3dd0:	0f 93       	push	r16
    3dd2:	1f 93       	push	r17
    3dd4:	cf 93       	push	r28
    3dd6:	df 93       	push	r29
    3dd8:	ec 01       	movw	r28, r24
    3dda:	7b 01       	movw	r14, r22
    3ddc:	8a 01       	movw	r16, r20

    
    if ( isCompatible( IMU_C_OPEN | IMU_C_START, IMU_C_OPEN_CALLED | IMU_C_START_CALLED) != ML_SUCCESS)
    3dde:	83 e0       	ldi	r24, 0x03	; 3
    3de0:	63 e0       	ldi	r22, 0x03	; 3
    3de2:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <isCompatible>
    3de6:	88 23       	and	r24, r24
    3de8:	11 f0       	breq	.+4      	; 0x3dee <MLGetGridNum+0x22>
    3dea:	81 e0       	ldi	r24, 0x01	; 1
    3dec:	51 c0       	rjmp	.+162    	; 0x3e90 <MLGetGridNum+0xc4>
        return ML_ERROR;    

    switch (controlSignal) {
    3dee:	c2 30       	cpi	r28, 0x02	; 2
    3df0:	d1 05       	cpc	r29, r1
    3df2:	f1 f0       	breq	.+60     	; 0x3e30 <MLGetGridNum+0x64>
    3df4:	c3 30       	cpi	r28, 0x03	; 3
    3df6:	d1 05       	cpc	r29, r1
    3df8:	20 f4       	brcc	.+8      	; 0x3e02 <MLGetGridNum+0x36>
    3dfa:	21 97       	sbiw	r28, 0x01	; 1
    3dfc:	09 f0       	breq	.+2      	; 0x3e00 <MLGetGridNum+0x34>
    3dfe:	47 c0       	rjmp	.+142    	; 0x3e8e <MLGetGridNum+0xc2>
    3e00:	07 c0       	rjmp	.+14     	; 0x3e10 <MLGetGridNum+0x44>
    3e02:	c4 30       	cpi	r28, 0x04	; 4
    3e04:	d1 05       	cpc	r29, r1
    3e06:	21 f1       	breq	.+72     	; 0x3e50 <MLGetGridNum+0x84>
    3e08:	28 97       	sbiw	r28, 0x08	; 8
    3e0a:	09 f0       	breq	.+2      	; 0x3e0e <MLGetGridNum+0x42>
    3e0c:	40 c0       	rjmp	.+128    	; 0x3e8e <MLGetGridNum+0xc2>
    3e0e:	30 c0       	rjmp	.+96     	; 0x3e70 <MLGetGridNum+0xa4>
        case ML_CONTROL_1:
            *data = mlCtrlxData.gridNum[0];
    3e10:	80 91 c5 03 	lds	r24, 0x03C5
    3e14:	90 91 c6 03 	lds	r25, 0x03C6
    3e18:	f8 01       	movw	r30, r16
    3e1a:	91 83       	std	Z+1, r25	; 0x01
    3e1c:	80 83       	st	Z, r24
            if (reset == ML_RESET) {
    3e1e:	f1 e0       	ldi	r31, 0x01	; 1
    3e20:	ef 16       	cp	r14, r31
    3e22:	f1 04       	cpc	r15, r1
    3e24:	a1 f5       	brne	.+104    	; 0x3e8e <MLGetGridNum+0xc2>
                mlCtrlxData.gridNum[0] = 0;
    3e26:	10 92 c6 03 	sts	0x03C6, r1
    3e2a:	10 92 c5 03 	sts	0x03C5, r1
    3e2e:	2f c0       	rjmp	.+94     	; 0x3e8e <MLGetGridNum+0xc2>
            }
            break;
        case ML_CONTROL_2:
            *data = mlCtrlxData.gridNum[1];
    3e30:	80 91 c7 03 	lds	r24, 0x03C7
    3e34:	90 91 c8 03 	lds	r25, 0x03C8
    3e38:	f8 01       	movw	r30, r16
    3e3a:	91 83       	std	Z+1, r25	; 0x01
    3e3c:	80 83       	st	Z, r24
            if (reset == ML_RESET) {
    3e3e:	f1 e0       	ldi	r31, 0x01	; 1
    3e40:	ef 16       	cp	r14, r31
    3e42:	f1 04       	cpc	r15, r1
    3e44:	21 f5       	brne	.+72     	; 0x3e8e <MLGetGridNum+0xc2>
                mlCtrlxData.gridNum[1] = 0;
    3e46:	10 92 c8 03 	sts	0x03C8, r1
    3e4a:	10 92 c7 03 	sts	0x03C7, r1
    3e4e:	1f c0       	rjmp	.+62     	; 0x3e8e <MLGetGridNum+0xc2>
            }
            break;
        case ML_CONTROL_3:
            *data = mlCtrlxData.gridNum[2];
    3e50:	80 91 c9 03 	lds	r24, 0x03C9
    3e54:	90 91 ca 03 	lds	r25, 0x03CA
    3e58:	f8 01       	movw	r30, r16
    3e5a:	91 83       	std	Z+1, r25	; 0x01
    3e5c:	80 83       	st	Z, r24
            if (reset == ML_RESET) {
    3e5e:	f1 e0       	ldi	r31, 0x01	; 1
    3e60:	ef 16       	cp	r14, r31
    3e62:	f1 04       	cpc	r15, r1
    3e64:	a1 f4       	brne	.+40     	; 0x3e8e <MLGetGridNum+0xc2>
                mlCtrlxData.gridNum[2] = 0;
    3e66:	10 92 ca 03 	sts	0x03CA, r1
    3e6a:	10 92 c9 03 	sts	0x03C9, r1
    3e6e:	0f c0       	rjmp	.+30     	; 0x3e8e <MLGetGridNum+0xc2>
            }
            break;
        case ML_CONTROL_4:
            *data = mlCtrlxData.gridNum[3];
    3e70:	80 91 cb 03 	lds	r24, 0x03CB
    3e74:	90 91 cc 03 	lds	r25, 0x03CC
    3e78:	f8 01       	movw	r30, r16
    3e7a:	91 83       	std	Z+1, r25	; 0x01
    3e7c:	80 83       	st	Z, r24
            if (reset == ML_RESET) {
    3e7e:	f1 e0       	ldi	r31, 0x01	; 1
    3e80:	ef 16       	cp	r14, r31
    3e82:	f1 04       	cpc	r15, r1
    3e84:	21 f4       	brne	.+8      	; 0x3e8e <MLGetGridNum+0xc2>
                mlCtrlxData.gridNum[3] = 0;
    3e86:	10 92 cc 03 	sts	0x03CC, r1
    3e8a:	10 92 cb 03 	sts	0x03CB, r1
    3e8e:	80 e0       	ldi	r24, 0x00	; 0
        default:
            break;
    }

    return ML_SUCCESS;
}
    3e90:	df 91       	pop	r29
    3e92:	cf 91       	pop	r28
    3e94:	1f 91       	pop	r17
    3e96:	0f 91       	pop	r16
    3e98:	ff 90       	pop	r15
    3e9a:	ef 90       	pop	r14
    3e9c:	08 95       	ret

00003e9e <MLGetControlSignal>:
 *  @param  data    A pointer to the current control signal data.
 *
 *  @return Zero if the command is successful; an ML error code otherwise.
 */
tMLError MLGetControlSignal(unsigned short controlSignal, unsigned short reset, int *data)
{
    3e9e:	ef 92       	push	r14
    3ea0:	ff 92       	push	r15
    3ea2:	0f 93       	push	r16
    3ea4:	1f 93       	push	r17
    3ea6:	cf 93       	push	r28
    3ea8:	df 93       	push	r29
    3eaa:	ec 01       	movw	r28, r24
    3eac:	7b 01       	movw	r14, r22
    3eae:	8a 01       	movw	r16, r20


    if ( isCompatible( IMU_C_OPEN | IMU_C_START, IMU_C_OPEN_CALLED | IMU_C_START_CALLED) != ML_SUCCESS)
    3eb0:	83 e0       	ldi	r24, 0x03	; 3
    3eb2:	63 e0       	ldi	r22, 0x03	; 3
    3eb4:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <isCompatible>
    3eb8:	88 23       	and	r24, r24
    3eba:	11 f0       	breq	.+4      	; 0x3ec0 <MLGetControlSignal+0x22>
    3ebc:	81 e0       	ldi	r24, 0x01	; 1
    3ebe:	51 c0       	rjmp	.+162    	; 0x3f62 <MLGetControlSignal+0xc4>
        return ML_ERROR;    

    switch (controlSignal) {
    3ec0:	c2 30       	cpi	r28, 0x02	; 2
    3ec2:	d1 05       	cpc	r29, r1
    3ec4:	f1 f0       	breq	.+60     	; 0x3f02 <MLGetControlSignal+0x64>
    3ec6:	c3 30       	cpi	r28, 0x03	; 3
    3ec8:	d1 05       	cpc	r29, r1
    3eca:	20 f4       	brcc	.+8      	; 0x3ed4 <MLGetControlSignal+0x36>
    3ecc:	21 97       	sbiw	r28, 0x01	; 1
    3ece:	09 f0       	breq	.+2      	; 0x3ed2 <MLGetControlSignal+0x34>
    3ed0:	47 c0       	rjmp	.+142    	; 0x3f60 <MLGetControlSignal+0xc2>
    3ed2:	07 c0       	rjmp	.+14     	; 0x3ee2 <MLGetControlSignal+0x44>
    3ed4:	c4 30       	cpi	r28, 0x04	; 4
    3ed6:	d1 05       	cpc	r29, r1
    3ed8:	21 f1       	breq	.+72     	; 0x3f22 <MLGetControlSignal+0x84>
    3eda:	28 97       	sbiw	r28, 0x08	; 8
    3edc:	09 f0       	breq	.+2      	; 0x3ee0 <MLGetControlSignal+0x42>
    3ede:	40 c0       	rjmp	.+128    	; 0x3f60 <MLGetControlSignal+0xc2>
    3ee0:	30 c0       	rjmp	.+96     	; 0x3f42 <MLGetControlSignal+0xa4>
        case ML_CONTROL_1:
            *data = mlCtrlxData.controlInt[0];
    3ee2:	80 91 cd 03 	lds	r24, 0x03CD
    3ee6:	90 91 ce 03 	lds	r25, 0x03CE
    3eea:	f8 01       	movw	r30, r16
    3eec:	91 83       	std	Z+1, r25	; 0x01
    3eee:	80 83       	st	Z, r24
            if (reset == ML_RESET) {
    3ef0:	f1 e0       	ldi	r31, 0x01	; 1
    3ef2:	ef 16       	cp	r14, r31
    3ef4:	f1 04       	cpc	r15, r1
    3ef6:	a1 f5       	brne	.+104    	; 0x3f60 <MLGetControlSignal+0xc2>
                mlCtrlxData.controlInt[0] = 0;
    3ef8:	10 92 ce 03 	sts	0x03CE, r1
    3efc:	10 92 cd 03 	sts	0x03CD, r1
    3f00:	2f c0       	rjmp	.+94     	; 0x3f60 <MLGetControlSignal+0xc2>
            }
            break;
        case ML_CONTROL_2:
            *data = mlCtrlxData.controlInt[1];
    3f02:	80 91 cf 03 	lds	r24, 0x03CF
    3f06:	90 91 d0 03 	lds	r25, 0x03D0
    3f0a:	f8 01       	movw	r30, r16
    3f0c:	91 83       	std	Z+1, r25	; 0x01
    3f0e:	80 83       	st	Z, r24
            if (reset == ML_RESET) {
    3f10:	f1 e0       	ldi	r31, 0x01	; 1
    3f12:	ef 16       	cp	r14, r31
    3f14:	f1 04       	cpc	r15, r1
    3f16:	21 f5       	brne	.+72     	; 0x3f60 <MLGetControlSignal+0xc2>
                mlCtrlxData.controlInt[1] = 0;
    3f18:	10 92 d0 03 	sts	0x03D0, r1
    3f1c:	10 92 cf 03 	sts	0x03CF, r1
    3f20:	1f c0       	rjmp	.+62     	; 0x3f60 <MLGetControlSignal+0xc2>
            }
            break;
        case ML_CONTROL_3:
            *data = mlCtrlxData.controlInt[2];
    3f22:	80 91 d1 03 	lds	r24, 0x03D1
    3f26:	90 91 d2 03 	lds	r25, 0x03D2
    3f2a:	f8 01       	movw	r30, r16
    3f2c:	91 83       	std	Z+1, r25	; 0x01
    3f2e:	80 83       	st	Z, r24
            if (reset == ML_RESET) {
    3f30:	f1 e0       	ldi	r31, 0x01	; 1
    3f32:	ef 16       	cp	r14, r31
    3f34:	f1 04       	cpc	r15, r1
    3f36:	a1 f4       	brne	.+40     	; 0x3f60 <MLGetControlSignal+0xc2>
                mlCtrlxData.controlInt[2] = 0;
    3f38:	10 92 d2 03 	sts	0x03D2, r1
    3f3c:	10 92 d1 03 	sts	0x03D1, r1
    3f40:	0f c0       	rjmp	.+30     	; 0x3f60 <MLGetControlSignal+0xc2>
            }
            break;
        case ML_CONTROL_4:
            *data = mlCtrlxData.controlInt[3];
    3f42:	80 91 d3 03 	lds	r24, 0x03D3
    3f46:	90 91 d4 03 	lds	r25, 0x03D4
    3f4a:	f8 01       	movw	r30, r16
    3f4c:	91 83       	std	Z+1, r25	; 0x01
    3f4e:	80 83       	st	Z, r24
            if (reset == ML_RESET) {
    3f50:	f1 e0       	ldi	r31, 0x01	; 1
    3f52:	ef 16       	cp	r14, r31
    3f54:	f1 04       	cpc	r15, r1
    3f56:	21 f4       	brne	.+8      	; 0x3f60 <MLGetControlSignal+0xc2>
                mlCtrlxData.controlInt[3] = 0;
    3f58:	10 92 d4 03 	sts	0x03D4, r1
    3f5c:	10 92 d3 03 	sts	0x03D3, r1
    3f60:	80 e0       	ldi	r24, 0x00	; 0
            break;
        default:
            break;
    }
    return ML_SUCCESS;
}
    3f62:	df 91       	pop	r29
    3f64:	cf 91       	pop	r28
    3f66:	1f 91       	pop	r17
    3f68:	0f 91       	pop	r16
    3f6a:	ff 90       	pop	r15
    3f6c:	ef 90       	pop	r14
    3f6e:	08 95       	ret

00003f70 <MLSetControlData>:
 *                          - ML_PITCH, or
 *                          - ML_YAW.
 */

tMLError MLSetControlData(unsigned short controlSignal, unsigned short parameterArray, unsigned short parameterAxis)
{
    3f70:	cf 92       	push	r12
    3f72:	df 92       	push	r13
    3f74:	ef 92       	push	r14
    3f76:	ff 92       	push	r15
    3f78:	0f 93       	push	r16
    3f7a:	1f 93       	push	r17
    3f7c:	df 93       	push	r29
    3f7e:	cf 93       	push	r28
    3f80:	00 d0       	rcall	.+0      	; 0x3f82 <MLSetControlData+0x12>
    3f82:	cd b7       	in	r28, 0x3d	; 61
    3f84:	de b7       	in	r29, 0x3e	; 62
    3f86:	7c 01       	movw	r14, r24
    3f88:	6b 01       	movw	r12, r22
    3f8a:	8a 01       	movw	r16, r20

    unsigned char regs[2] = {DINA80+10, DINA20};
    3f8c:	8a e8       	ldi	r24, 0x8A	; 138
    3f8e:	89 83       	std	Y+1, r24	; 0x01
    3f90:	80 e2       	ldi	r24, 0x20	; 32
    3f92:	8a 83       	std	Y+2, r24	; 0x02
    
    if ( isCompatible( IMU_C_OPEN | IMU_C_START, IMU_C_OPEN_CALLED ) != ML_SUCCESS)
    3f94:	83 e0       	ldi	r24, 0x03	; 3
    3f96:	61 e0       	ldi	r22, 0x01	; 1
    3f98:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <isCompatible>
    3f9c:	88 23       	and	r24, r24
    3f9e:	09 f0       	breq	.+2      	; 0x3fa2 <MLSetControlData+0x32>
    3fa0:	c5 c0       	rjmp	.+394    	; 0x412c <MLSetControlData+0x1bc>
        return ML_ERROR;    

    if (parameterArray == ML_ANGULAR_VELOCITY) {
    3fa2:	8a e0       	ldi	r24, 0x0A	; 10
    3fa4:	c8 16       	cp	r12, r24
    3fa6:	d1 04       	cpc	r13, r1
    3fa8:	19 f4       	brne	.+6      	; 0x3fb0 <MLSetControlData+0x40>
        regs[0] = DINA80+5;
    3faa:	85 e8       	ldi	r24, 0x85	; 133
    3fac:	89 83       	std	Y+1, r24	; 0x01
        regs[1] = DINA00;
    3fae:	1a 82       	std	Y+2, r1	; 0x02
    }
    switch (controlSignal) {
    3fb0:	82 e0       	ldi	r24, 0x02	; 2
    3fb2:	e8 16       	cp	r14, r24
    3fb4:	f1 04       	cpc	r15, r1
    3fb6:	e1 f1       	breq	.+120    	; 0x4030 <MLSetControlData+0xc0>
    3fb8:	83 e0       	ldi	r24, 0x03	; 3
    3fba:	e8 16       	cp	r14, r24
    3fbc:	f1 04       	cpc	r15, r1
    3fbe:	28 f4       	brcc	.+10     	; 0x3fca <MLSetControlData+0x5a>
    3fc0:	81 e0       	ldi	r24, 0x01	; 1
    3fc2:	e8 16       	cp	r14, r24
    3fc4:	f1 04       	cpc	r15, r1
    3fc6:	59 f4       	brne	.+22     	; 0x3fde <MLSetControlData+0x6e>
    3fc8:	0c c0       	rjmp	.+24     	; 0x3fe2 <MLSetControlData+0x72>
    3fca:	84 e0       	ldi	r24, 0x04	; 4
    3fcc:	e8 16       	cp	r14, r24
    3fce:	f1 04       	cpc	r15, r1
    3fd0:	09 f4       	brne	.+2      	; 0x3fd4 <MLSetControlData+0x64>
    3fd2:	57 c0       	rjmp	.+174    	; 0x4082 <MLSetControlData+0x112>
    3fd4:	88 e0       	ldi	r24, 0x08	; 8
    3fd6:	e8 16       	cp	r14, r24
    3fd8:	f1 04       	cpc	r15, r1
    3fda:	09 f4       	brne	.+2      	; 0x3fde <MLSetControlData+0x6e>
    3fdc:	79 c0       	rjmp	.+242    	; 0x40d0 <MLSetControlData+0x160>
    3fde:	82 e0       	ldi	r24, 0x02	; 2
    3fe0:	a6 c0       	rjmp	.+332    	; 0x412e <MLSetControlData+0x1be>
        case ML_CONTROL_1:
            mlCtrlParams.parameterArray[0] = parameterArray;
    3fe2:	d0 92 8e 00 	sts	0x008E, r13
    3fe6:	c0 92 8d 00 	sts	0x008D, r12
            switch (parameterAxis) {
    3fea:	02 30       	cpi	r16, 0x02	; 2
    3fec:	11 05       	cpc	r17, r1
    3fee:	71 f0       	breq	.+28     	; 0x400c <MLSetControlData+0x9c>
    3ff0:	04 30       	cpi	r16, 0x04	; 4
    3ff2:	11 05       	cpc	r17, r1
    3ff4:	91 f0       	breq	.+36     	; 0x401a <MLSetControlData+0xaa>
    3ff6:	01 30       	cpi	r16, 0x01	; 1
    3ff8:	11 05       	cpc	r17, r1
    3ffa:	b9 f4       	brne	.+46     	; 0x402a <MLSetControlData+0xba>
                case ML_PITCH:
                    regs[1] += 0x02;
    3ffc:	8a 81       	ldd	r24, Y+2	; 0x02
    3ffe:	8e 5f       	subi	r24, 0xFE	; 254
    4000:	8a 83       	std	Y+2, r24	; 0x02
                    mlCtrlParams.parameterAxis[0] = 0;
    4002:	10 92 96 00 	sts	0x0096, r1
    4006:	10 92 95 00 	sts	0x0095, r1
    400a:	0f c0       	rjmp	.+30     	; 0x402a <MLSetControlData+0xba>
                    break;
                case ML_ROLL:
                    regs[1] = DINA22;
    400c:	82 e2       	ldi	r24, 0x22	; 34
    400e:	8a 83       	std	Y+2, r24	; 0x02
                    mlCtrlParams.parameterAxis[0] = 1;
    4010:	f0 92 96 00 	sts	0x0096, r15
    4014:	e0 92 95 00 	sts	0x0095, r14
    4018:	08 c0       	rjmp	.+16     	; 0x402a <MLSetControlData+0xba>
                    break;
                case ML_YAW:
                    regs[1] = DINA42;
    401a:	82 e4       	ldi	r24, 0x42	; 66
    401c:	8a 83       	std	Y+2, r24	; 0x02
                    mlCtrlParams.parameterAxis[0] = 2;
    401e:	82 e0       	ldi	r24, 0x02	; 2
    4020:	90 e0       	ldi	r25, 0x00	; 0
    4022:	90 93 96 00 	sts	0x0096, r25
    4026:	80 93 95 00 	sts	0x0095, r24
                    break;
            }
            if ( MLDLSetMemoryMPU(KEY_CFG_3, 2, regs ) != ML_SUCCESS )
    402a:	88 e0       	ldi	r24, 0x08	; 8
    402c:	90 e0       	ldi	r25, 0x00	; 0
    402e:	76 c0       	rjmp	.+236    	; 0x411c <MLSetControlData+0x1ac>
                return ML_ERROR;
            break;
        case ML_CONTROL_2:
            mlCtrlParams.parameterArray[1] = parameterArray;
    4030:	d0 92 90 00 	sts	0x0090, r13
    4034:	c0 92 8f 00 	sts	0x008F, r12
            switch (parameterAxis) {
    4038:	02 30       	cpi	r16, 0x02	; 2
    403a:	11 05       	cpc	r17, r1
    403c:	71 f0       	breq	.+28     	; 0x405a <MLSetControlData+0xea>
    403e:	04 30       	cpi	r16, 0x04	; 4
    4040:	11 05       	cpc	r17, r1
    4042:	a9 f0       	breq	.+42     	; 0x406e <MLSetControlData+0xfe>
    4044:	01 30       	cpi	r16, 0x01	; 1
    4046:	11 05       	cpc	r17, r1
    4048:	c9 f4       	brne	.+50     	; 0x407c <MLSetControlData+0x10c>
                case ML_PITCH:
                    regs[1] += DINA0E;
    404a:	8a 81       	ldd	r24, Y+2	; 0x02
    404c:	82 5f       	subi	r24, 0xF2	; 242
    404e:	8a 83       	std	Y+2, r24	; 0x02
                    mlCtrlParams.parameterAxis[1] = 0;
    4050:	10 92 98 00 	sts	0x0098, r1
    4054:	10 92 97 00 	sts	0x0097, r1
    4058:	11 c0       	rjmp	.+34     	; 0x407c <MLSetControlData+0x10c>
                    break;
                case ML_ROLL:
                    regs[1] += DINA2E;
    405a:	8a 81       	ldd	r24, Y+2	; 0x02
    405c:	82 5d       	subi	r24, 0xD2	; 210
    405e:	8a 83       	std	Y+2, r24	; 0x02
                    mlCtrlParams.parameterAxis[1] = 1;
    4060:	81 e0       	ldi	r24, 0x01	; 1
    4062:	90 e0       	ldi	r25, 0x00	; 0
    4064:	90 93 98 00 	sts	0x0098, r25
    4068:	80 93 97 00 	sts	0x0097, r24
    406c:	07 c0       	rjmp	.+14     	; 0x407c <MLSetControlData+0x10c>
                    break;
                case ML_YAW:
                    regs[1] += DINA4E;
    406e:	8a 81       	ldd	r24, Y+2	; 0x02
    4070:	82 5b       	subi	r24, 0xB2	; 178
    4072:	8a 83       	std	Y+2, r24	; 0x02
                    mlCtrlParams.parameterAxis[1] = 2;
    4074:	f0 92 98 00 	sts	0x0098, r15
    4078:	e0 92 97 00 	sts	0x0097, r14
                    break;
            }
            if ( MLDLSetMemoryMPU(KEY_CFG_3B, 2, regs ) != ML_SUCCESS )
    407c:	89 e0       	ldi	r24, 0x09	; 9
    407e:	90 e0       	ldi	r25, 0x00	; 0
    4080:	4d c0       	rjmp	.+154    	; 0x411c <MLSetControlData+0x1ac>
                return ML_ERROR;
            break;
        case ML_CONTROL_3:
            mlCtrlParams.parameterArray[2] = parameterArray;
    4082:	d0 92 92 00 	sts	0x0092, r13
    4086:	c0 92 91 00 	sts	0x0091, r12
            switch (parameterAxis) {
    408a:	02 30       	cpi	r16, 0x02	; 2
    408c:	11 05       	cpc	r17, r1
    408e:	71 f0       	breq	.+28     	; 0x40ac <MLSetControlData+0x13c>
    4090:	04 30       	cpi	r16, 0x04	; 4
    4092:	11 05       	cpc	r17, r1
    4094:	89 f0       	breq	.+34     	; 0x40b8 <MLSetControlData+0x148>
    4096:	01 30       	cpi	r16, 0x01	; 1
    4098:	11 05       	cpc	r17, r1
    409a:	b9 f4       	brne	.+46     	; 0x40ca <MLSetControlData+0x15a>
                case ML_PITCH:
                    regs[1] += DINA0E;
    409c:	8a 81       	ldd	r24, Y+2	; 0x02
    409e:	82 5f       	subi	r24, 0xF2	; 242
    40a0:	8a 83       	std	Y+2, r24	; 0x02
                    mlCtrlParams.parameterAxis[2] = 0;
    40a2:	10 92 9a 00 	sts	0x009A, r1
    40a6:	10 92 99 00 	sts	0x0099, r1
    40aa:	0f c0       	rjmp	.+30     	; 0x40ca <MLSetControlData+0x15a>
                    break;
                case ML_ROLL:
                    regs[1] += DINA2E;
    40ac:	8a 81       	ldd	r24, Y+2	; 0x02
    40ae:	82 5d       	subi	r24, 0xD2	; 210
    40b0:	8a 83       	std	Y+2, r24	; 0x02
                    mlCtrlParams.parameterAxis[2] = 1;
    40b2:	81 e0       	ldi	r24, 0x01	; 1
    40b4:	90 e0       	ldi	r25, 0x00	; 0
    40b6:	05 c0       	rjmp	.+10     	; 0x40c2 <MLSetControlData+0x152>
                    break;
                case ML_YAW:
                    regs[1] += DINA4E;
    40b8:	8a 81       	ldd	r24, Y+2	; 0x02
    40ba:	82 5b       	subi	r24, 0xB2	; 178
    40bc:	8a 83       	std	Y+2, r24	; 0x02
                    mlCtrlParams.parameterAxis[2] = 2;
    40be:	82 e0       	ldi	r24, 0x02	; 2
    40c0:	90 e0       	ldi	r25, 0x00	; 0
    40c2:	90 93 9a 00 	sts	0x009A, r25
    40c6:	80 93 99 00 	sts	0x0099, r24
                    break;
            }
            if ( MLDLSetMemoryMPU(KEY_CFG_3C, 2, regs ) != ML_SUCCESS )
    40ca:	8a e0       	ldi	r24, 0x0A	; 10
    40cc:	90 e0       	ldi	r25, 0x00	; 0
    40ce:	26 c0       	rjmp	.+76     	; 0x411c <MLSetControlData+0x1ac>
                return ML_ERROR;
            break;
        case ML_CONTROL_4:
            mlCtrlParams.parameterArray[3] = parameterArray;
    40d0:	d0 92 94 00 	sts	0x0094, r13
    40d4:	c0 92 93 00 	sts	0x0093, r12
            switch (parameterAxis) {
    40d8:	02 30       	cpi	r16, 0x02	; 2
    40da:	11 05       	cpc	r17, r1
    40dc:	71 f0       	breq	.+28     	; 0x40fa <MLSetControlData+0x18a>
    40de:	04 30       	cpi	r16, 0x04	; 4
    40e0:	11 05       	cpc	r17, r1
    40e2:	89 f0       	breq	.+34     	; 0x4106 <MLSetControlData+0x196>
    40e4:	01 30       	cpi	r16, 0x01	; 1
    40e6:	11 05       	cpc	r17, r1
    40e8:	b9 f4       	brne	.+46     	; 0x4118 <MLSetControlData+0x1a8>
                case ML_PITCH:
                    regs[1] += DINA0E;
    40ea:	8a 81       	ldd	r24, Y+2	; 0x02
    40ec:	82 5f       	subi	r24, 0xF2	; 242
    40ee:	8a 83       	std	Y+2, r24	; 0x02
                    mlCtrlParams.parameterAxis[3] = 0;
    40f0:	10 92 9c 00 	sts	0x009C, r1
    40f4:	10 92 9b 00 	sts	0x009B, r1
    40f8:	0f c0       	rjmp	.+30     	; 0x4118 <MLSetControlData+0x1a8>
                    break;
                case ML_ROLL:
                    regs[1] += DINA2E;
    40fa:	8a 81       	ldd	r24, Y+2	; 0x02
    40fc:	82 5d       	subi	r24, 0xD2	; 210
    40fe:	8a 83       	std	Y+2, r24	; 0x02
                    mlCtrlParams.parameterAxis[3] = 1;
    4100:	81 e0       	ldi	r24, 0x01	; 1
    4102:	90 e0       	ldi	r25, 0x00	; 0
    4104:	05 c0       	rjmp	.+10     	; 0x4110 <MLSetControlData+0x1a0>
                    break;
                case ML_YAW:
                    regs[1] += DINA4E;
    4106:	8a 81       	ldd	r24, Y+2	; 0x02
    4108:	82 5b       	subi	r24, 0xB2	; 178
    410a:	8a 83       	std	Y+2, r24	; 0x02
                    mlCtrlParams.parameterAxis[3] = 2;
    410c:	82 e0       	ldi	r24, 0x02	; 2
    410e:	90 e0       	ldi	r25, 0x00	; 0
    4110:	90 93 9c 00 	sts	0x009C, r25
    4114:	80 93 9b 00 	sts	0x009B, r24
                    break;
            }
            if ( MLDLSetMemoryMPU(KEY_CFG_3D, 2, regs ) != ML_SUCCESS )
    4118:	8b e0       	ldi	r24, 0x0B	; 11
    411a:	90 e0       	ldi	r25, 0x00	; 0
    411c:	62 e0       	ldi	r22, 0x02	; 2
    411e:	70 e0       	ldi	r23, 0x00	; 0
    4120:	ae 01       	movw	r20, r28
    4122:	4f 5f       	subi	r20, 0xFF	; 255
    4124:	5f 4f       	sbci	r21, 0xFF	; 255
    4126:	0e 94 be 0a 	call	0x157c	; 0x157c <MLDLSetMemoryMPU>
    412a:	81 11       	cpse	r24, r1
    412c:	81 e0       	ldi	r24, 0x01	; 1
        default:
            return ML_ERROR_INVALID_PARAMETER;
            break;
    }
    return ML_SUCCESS;
}
    412e:	0f 90       	pop	r0
    4130:	0f 90       	pop	r0
    4132:	cf 91       	pop	r28
    4134:	df 91       	pop	r29
    4136:	1f 91       	pop	r17
    4138:	0f 91       	pop	r16
    413a:	ff 90       	pop	r15
    413c:	ef 90       	pop	r14
    413e:	df 90       	pop	r13
    4140:	cf 90       	pop	r12
    4142:	08 95       	ret

00004144 <MLSetControlFunc>:
 *                      Can be a bitwise OR of several values.
 *
 *  @return Zero if the command is successful; an ML error code otherwise.
 */
tMLError MLSetControlFunc(unsigned short function)
{
    4144:	ef 92       	push	r14
    4146:	ff 92       	push	r15
    4148:	0f 93       	push	r16
    414a:	1f 93       	push	r17
    414c:	df 93       	push	r29
    414e:	cf 93       	push	r28
    4150:	cd b7       	in	r28, 0x3d	; 61
    4152:	de b7       	in	r29, 0x3e	; 62
    4154:	28 97       	sbiw	r28, 0x08	; 8
    4156:	0f b6       	in	r0, 0x3f	; 63
    4158:	f8 94       	cli
    415a:	de bf       	out	0x3e, r29	; 62
    415c:	0f be       	out	0x3f, r0	; 63
    415e:	cd bf       	out	0x3d, r28	; 61
    4160:	f8 2e       	mov	r15, r24
    4162:	e9 2e       	mov	r14, r25

    unsigned char regs[8] = { DINA06, DINA26,
                              DINA46, DINA66,
                              DINA0E, DINA2E,
                              DINA4E, DINA6E };
    4164:	de 01       	movw	r26, r28
    4166:	11 96       	adiw	r26, 0x01	; 1
    4168:	ef ea       	ldi	r30, 0xAF	; 175
    416a:	f0 e0       	ldi	r31, 0x00	; 0
    416c:	88 e0       	ldi	r24, 0x08	; 8
    416e:	01 90       	ld	r0, Z+
    4170:	0d 92       	st	X+, r0
    4172:	81 50       	subi	r24, 0x01	; 1
    4174:	e1 f7       	brne	.-8      	; 0x416e <MLSetControlFunc+0x2a>
    unsigned char i;

    if ( isCompatible( IMU_C_OPEN | IMU_C_START, IMU_C_OPEN_CALLED ) != ML_SUCCESS)
    4176:	83 e0       	ldi	r24, 0x03	; 3
    4178:	61 e0       	ldi	r22, 0x01	; 1
    417a:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <isCompatible>
    417e:	88 23       	and	r24, r24
    4180:	49 f5       	brne	.+82     	; 0x41d4 <MLSetControlFunc+0x90>
        return ML_ERROR;    

    if ((function & ML_SMOOTH)==0) {
    4182:	f1 fc       	sbrc	r15, 1
    4184:	09 c0       	rjmp	.+18     	; 0x4198 <MLSetControlFunc+0x54>
    4186:	fe 01       	movw	r30, r28
    4188:	31 96       	adiw	r30, 0x01	; 1
        for (i=0; i<8; i++) {
            regs[i] = DINA80+3;
    418a:	23 e8       	ldi	r18, 0x83	; 131

    if ( isCompatible( IMU_C_OPEN | IMU_C_START, IMU_C_OPEN_CALLED ) != ML_SUCCESS)
        return ML_ERROR;    

    if ((function & ML_SMOOTH)==0) {
        for (i=0; i<8; i++) {
    418c:	ce 01       	movw	r24, r28
    418e:	09 96       	adiw	r24, 0x09	; 9
            regs[i] = DINA80+3;
    4190:	21 93       	st	Z+, r18

    if ( isCompatible( IMU_C_OPEN | IMU_C_START, IMU_C_OPEN_CALLED ) != ML_SUCCESS)
        return ML_ERROR;    

    if ((function & ML_SMOOTH)==0) {
        for (i=0; i<8; i++) {
    4192:	e8 17       	cp	r30, r24
    4194:	f9 07       	cpc	r31, r25
    4196:	e1 f7       	brne	.-8      	; 0x4190 <MLSetControlFunc+0x4c>
            regs[i] = DINA80+3;
        }
    }
    if ( MLDLSetMemoryMPU(KEY_CFG_4, 8, regs ) != ML_SUCCESS )
    4198:	8c e0       	ldi	r24, 0x0C	; 12
    419a:	90 e0       	ldi	r25, 0x00	; 0
    419c:	68 e0       	ldi	r22, 0x08	; 8
    419e:	70 e0       	ldi	r23, 0x00	; 0
    41a0:	8e 01       	movw	r16, r28
    41a2:	0f 5f       	subi	r16, 0xFF	; 255
    41a4:	1f 4f       	sbci	r17, 0xFF	; 255
    41a6:	a8 01       	movw	r20, r16
    41a8:	0e 94 be 0a 	call	0x157c	; 0x157c <MLDLSetMemoryMPU>
    41ac:	88 23       	and	r24, r24
    41ae:	91 f4       	brne	.+36     	; 0x41d4 <MLSetControlFunc+0x90>
        return ML_ERROR;
    mlCtrlParams.functions = function;
    41b0:	f0 92 89 00 	sts	0x0089, r15
    41b4:	e0 92 8a 00 	sts	0x008A, r14
    if (function & ML_DEAD_ZONE) {
    41b8:	f2 fe       	sbrs	r15, 2
    41ba:	03 c0       	rjmp	.+6      	; 0x41c2 <MLSetControlFunc+0x7e>
        regs[0] = 0x08;
    41bc:	88 e0       	ldi	r24, 0x08	; 8
    41be:	89 83       	std	Y+1, r24	; 0x01
    41c0:	01 c0       	rjmp	.+2      	; 0x41c4 <MLSetControlFunc+0x80>
        if ( MLDLSetMemoryMPU(KEY_D_0_163, 1, regs ) != ML_SUCCESS )
            return ML_ERROR;
    } else {
        regs[0] = 0x00;
    41c2:	19 82       	std	Y+1, r1	; 0x01
        if ( MLDLSetMemoryMPU(KEY_D_0_163, 1, regs ) != ML_SUCCESS )
    41c4:	83 e2       	ldi	r24, 0x23	; 35
    41c6:	90 e0       	ldi	r25, 0x00	; 0
    41c8:	61 e0       	ldi	r22, 0x01	; 1
    41ca:	70 e0       	ldi	r23, 0x00	; 0
    41cc:	a8 01       	movw	r20, r16
    41ce:	0e 94 be 0a 	call	0x157c	; 0x157c <MLDLSetMemoryMPU>
    41d2:	81 11       	cpse	r24, r1
    41d4:	81 e0       	ldi	r24, 0x01	; 1
            return ML_ERROR;
    }
    return ML_SUCCESS;
}
    41d6:	28 96       	adiw	r28, 0x08	; 8
    41d8:	0f b6       	in	r0, 0x3f	; 63
    41da:	f8 94       	cli
    41dc:	de bf       	out	0x3e, r29	; 62
    41de:	0f be       	out	0x3f, r0	; 63
    41e0:	cd bf       	out	0x3d, r28	; 61
    41e2:	cf 91       	pop	r28
    41e4:	df 91       	pop	r29
    41e6:	1f 91       	pop	r17
    41e8:	0f 91       	pop	r16
    41ea:	ff 90       	pop	r15
    41ec:	ef 90       	pop	r14
    41ee:	08 95       	ret

000041f0 <MLSetControlSensitivity>:
 *  @param sensitivity      The sensitivity of the control signal.
 *
 *  @return error code
 */
tMLError MLSetControlSensitivity(unsigned short controlSignal, int sensitivity)
{
    41f0:	6f 92       	push	r6
    41f2:	7f 92       	push	r7
    41f4:	8f 92       	push	r8
    41f6:	9f 92       	push	r9
    41f8:	af 92       	push	r10
    41fa:	bf 92       	push	r11
    41fc:	cf 92       	push	r12
    41fe:	df 92       	push	r13
    4200:	ef 92       	push	r14
    4202:	ff 92       	push	r15
    4204:	0f 93       	push	r16
    4206:	1f 93       	push	r17
    4208:	df 93       	push	r29
    420a:	cf 93       	push	r28
    420c:	00 d0       	rcall	.+0      	; 0x420e <MLSetControlSensitivity+0x1e>
    420e:	cd b7       	in	r28, 0x3d	; 61
    4210:	de b7       	in	r29, 0x3e	; 62
    4212:	8c 01       	movw	r16, r24
    4214:	3b 01       	movw	r6, r22

    unsigned char regs[2];
    long finalSens = 0;

    if ( isCompatible( IMU_C_OPEN | IMU_C_START, IMU_C_OPEN_CALLED ) != ML_SUCCESS)
    4216:	83 e0       	ldi	r24, 0x03	; 3
    4218:	61 e0       	ldi	r22, 0x01	; 1
    421a:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <isCompatible>
    421e:	88 23       	and	r24, r24
    4220:	09 f0       	breq	.+2      	; 0x4224 <MLSetControlSensitivity+0x34>
    4222:	8c c0       	rjmp	.+280    	; 0x433c <MLSetControlSensitivity+0x14c>
        return ML_ERROR;    

    finalSens = sensitivity * 100;
    4224:	84 e6       	ldi	r24, 0x64	; 100
    4226:	90 e0       	ldi	r25, 0x00	; 0
    4228:	9c 01       	movw	r18, r24
    422a:	62 9e       	mul	r6, r18
    422c:	c0 01       	movw	r24, r0
    422e:	63 9e       	mul	r6, r19
    4230:	90 0d       	add	r25, r0
    4232:	72 9e       	mul	r7, r18
    4234:	90 0d       	add	r25, r0
    4236:	11 24       	eor	r1, r1
    4238:	4c 01       	movw	r8, r24
    423a:	aa 24       	eor	r10, r10
    423c:	97 fc       	sbrc	r9, 7
    423e:	a0 94       	com	r10
    4240:	ba 2c       	mov	r11, r10
    4242:	75 01       	movw	r14, r10
    4244:	64 01       	movw	r12, r8
    4246:	31 e0       	ldi	r19, 0x01	; 1
    4248:	83 16       	cp	r8, r19
    424a:	30 e4       	ldi	r19, 0x40	; 64
    424c:	93 06       	cpc	r9, r19
    424e:	30 e0       	ldi	r19, 0x00	; 0
    4250:	a3 06       	cpc	r10, r19
    4252:	30 e0       	ldi	r19, 0x00	; 0
    4254:	b3 06       	cpc	r11, r19
    4256:	2c f0       	brlt	.+10     	; 0x4262 <MLSetControlSensitivity+0x72>
    4258:	c1 2c       	mov	r12, r1
    425a:	80 e4       	ldi	r24, 0x40	; 64
    425c:	d8 2e       	mov	r13, r24
    425e:	e1 2c       	mov	r14, r1
    4260:	f1 2c       	mov	r15, r1
    if (finalSens > 16384) {
        finalSens = 16384;
    }
    regs[0] = (unsigned char)(finalSens/256);
    4262:	c7 01       	movw	r24, r14
    4264:	b6 01       	movw	r22, r12
    4266:	20 e0       	ldi	r18, 0x00	; 0
    4268:	31 e0       	ldi	r19, 0x01	; 1
    426a:	40 e0       	ldi	r20, 0x00	; 0
    426c:	50 e0       	ldi	r21, 0x00	; 0
    426e:	0e 94 c9 38 	call	0x7192	; 0x7192 <__divmodsi4>
    4272:	29 83       	std	Y+1, r18	; 0x01
    regs[1] = (unsigned char)(finalSens%256);
    4274:	c7 01       	movw	r24, r14
    4276:	b6 01       	movw	r22, r12
    4278:	20 e0       	ldi	r18, 0x00	; 0
    427a:	31 e0       	ldi	r19, 0x01	; 1
    427c:	40 e0       	ldi	r20, 0x00	; 0
    427e:	50 e0       	ldi	r21, 0x00	; 0
    4280:	0e 94 c9 38 	call	0x7192	; 0x7192 <__divmodsi4>
    4284:	6a 83       	std	Y+2, r22	; 0x02
    switch (controlSignal) {
    4286:	02 30       	cpi	r16, 0x02	; 2
    4288:	11 05       	cpc	r17, r1
    428a:	01 f1       	breq	.+64     	; 0x42cc <MLSetControlSensitivity+0xdc>
    428c:	03 30       	cpi	r16, 0x03	; 3
    428e:	11 05       	cpc	r17, r1
    4290:	28 f4       	brcc	.+10     	; 0x429c <MLSetControlSensitivity+0xac>
    4292:	01 30       	cpi	r16, 0x01	; 1
    4294:	11 05       	cpc	r17, r1
    4296:	09 f0       	breq	.+2      	; 0x429a <MLSetControlSensitivity+0xaa>
    4298:	48 c0       	rjmp	.+144    	; 0x432a <MLSetControlSensitivity+0x13a>
    429a:	08 c0       	rjmp	.+16     	; 0x42ac <MLSetControlSensitivity+0xbc>
    429c:	04 30       	cpi	r16, 0x04	; 4
    429e:	11 05       	cpc	r17, r1
    42a0:	29 f1       	breq	.+74     	; 0x42ec <MLSetControlSensitivity+0xfc>
    42a2:	08 30       	cpi	r16, 0x08	; 8
    42a4:	11 05       	cpc	r17, r1
    42a6:	09 f0       	breq	.+2      	; 0x42aa <MLSetControlSensitivity+0xba>
    42a8:	40 c0       	rjmp	.+128    	; 0x432a <MLSetControlSensitivity+0x13a>
    42aa:	30 c0       	rjmp	.+96     	; 0x430c <MLSetControlSensitivity+0x11c>
        case ML_CONTROL_1:
            if ( MLDLSetMemoryMPU(KEY_D_0_224, 2, regs ) != ML_SUCCESS )
    42ac:	8c e1       	ldi	r24, 0x1C	; 28
    42ae:	90 e0       	ldi	r25, 0x00	; 0
    42b0:	62 e0       	ldi	r22, 0x02	; 2
    42b2:	70 e0       	ldi	r23, 0x00	; 0
    42b4:	ae 01       	movw	r20, r28
    42b6:	4f 5f       	subi	r20, 0xFF	; 255
    42b8:	5f 4f       	sbci	r21, 0xFF	; 255
    42ba:	0e 94 be 0a 	call	0x157c	; 0x157c <MLDLSetMemoryMPU>
    42be:	88 23       	and	r24, r24
    42c0:	e9 f5       	brne	.+122    	; 0x433c <MLSetControlSensitivity+0x14c>
                return ML_ERROR;
            mlCtrlParams.sensitivity[0] = (unsigned short)sensitivity;
    42c2:	70 92 82 00 	sts	0x0082, r7
    42c6:	60 92 81 00 	sts	0x0081, r6
    42ca:	2f c0       	rjmp	.+94     	; 0x432a <MLSetControlSensitivity+0x13a>
            break;
        case ML_CONTROL_2:
            if ( MLDLSetMemoryMPU(KEY_D_0_228, 2, regs ) != ML_SUCCESS )
    42cc:	8d e1       	ldi	r24, 0x1D	; 29
    42ce:	90 e0       	ldi	r25, 0x00	; 0
    42d0:	62 e0       	ldi	r22, 0x02	; 2
    42d2:	70 e0       	ldi	r23, 0x00	; 0
    42d4:	ae 01       	movw	r20, r28
    42d6:	4f 5f       	subi	r20, 0xFF	; 255
    42d8:	5f 4f       	sbci	r21, 0xFF	; 255
    42da:	0e 94 be 0a 	call	0x157c	; 0x157c <MLDLSetMemoryMPU>
    42de:	88 23       	and	r24, r24
    42e0:	69 f5       	brne	.+90     	; 0x433c <MLSetControlSensitivity+0x14c>
                return ML_ERROR;
            mlCtrlParams.sensitivity[1] = (unsigned short)sensitivity;
    42e2:	70 92 84 00 	sts	0x0084, r7
    42e6:	60 92 83 00 	sts	0x0083, r6
    42ea:	1f c0       	rjmp	.+62     	; 0x432a <MLSetControlSensitivity+0x13a>
            break;
        case ML_CONTROL_3:
            if ( MLDLSetMemoryMPU(KEY_D_0_232, 2, regs ) != ML_SUCCESS )
    42ec:	8e e1       	ldi	r24, 0x1E	; 30
    42ee:	90 e0       	ldi	r25, 0x00	; 0
    42f0:	62 e0       	ldi	r22, 0x02	; 2
    42f2:	70 e0       	ldi	r23, 0x00	; 0
    42f4:	ae 01       	movw	r20, r28
    42f6:	4f 5f       	subi	r20, 0xFF	; 255
    42f8:	5f 4f       	sbci	r21, 0xFF	; 255
    42fa:	0e 94 be 0a 	call	0x157c	; 0x157c <MLDLSetMemoryMPU>
    42fe:	88 23       	and	r24, r24
    4300:	e9 f4       	brne	.+58     	; 0x433c <MLSetControlSensitivity+0x14c>
                return ML_ERROR;
            mlCtrlParams.sensitivity[2] = (unsigned short)sensitivity;
    4302:	70 92 86 00 	sts	0x0086, r7
    4306:	60 92 85 00 	sts	0x0085, r6
    430a:	0f c0       	rjmp	.+30     	; 0x432a <MLSetControlSensitivity+0x13a>
            break;
        case ML_CONTROL_4:
            if ( MLDLSetMemoryMPU(KEY_D_0_236, 2, regs ) != ML_SUCCESS )
    430c:	8f e1       	ldi	r24, 0x1F	; 31
    430e:	90 e0       	ldi	r25, 0x00	; 0
    4310:	62 e0       	ldi	r22, 0x02	; 2
    4312:	70 e0       	ldi	r23, 0x00	; 0
    4314:	ae 01       	movw	r20, r28
    4316:	4f 5f       	subi	r20, 0xFF	; 255
    4318:	5f 4f       	sbci	r21, 0xFF	; 255
    431a:	0e 94 be 0a 	call	0x157c	; 0x157c <MLDLSetMemoryMPU>
    431e:	88 23       	and	r24, r24
    4320:	69 f4       	brne	.+26     	; 0x433c <MLSetControlSensitivity+0x14c>
                return ML_ERROR;
            mlCtrlParams.sensitivity[3] = (unsigned short)sensitivity;
    4322:	70 92 88 00 	sts	0x0088, r7
    4326:	60 92 87 00 	sts	0x0087, r6
            break;
        default:
            break;
    }
    if (finalSens != sensitivity * 100) {
    432a:	c8 14       	cp	r12, r8
    432c:	d9 04       	cpc	r13, r9
    432e:	ea 04       	cpc	r14, r10
    4330:	fb 04       	cpc	r15, r11
    4332:	11 f4       	brne	.+4      	; 0x4338 <MLSetControlSensitivity+0x148>
    4334:	80 e0       	ldi	r24, 0x00	; 0
    4336:	03 c0       	rjmp	.+6      	; 0x433e <MLSetControlSensitivity+0x14e>
    4338:	82 e0       	ldi	r24, 0x02	; 2
    433a:	01 c0       	rjmp	.+2      	; 0x433e <MLSetControlSensitivity+0x14e>
    433c:	81 e0       	ldi	r24, 0x01	; 1
        return ML_ERROR_INVALID_PARAMETER;
    } else {
        return ML_SUCCESS;
    }
}
    433e:	0f 90       	pop	r0
    4340:	0f 90       	pop	r0
    4342:	cf 91       	pop	r28
    4344:	df 91       	pop	r29
    4346:	1f 91       	pop	r17
    4348:	0f 91       	pop	r16
    434a:	ff 90       	pop	r15
    434c:	ef 90       	pop	r14
    434e:	df 90       	pop	r13
    4350:	cf 90       	pop	r12
    4352:	bf 90       	pop	r11
    4354:	af 90       	pop	r10
    4356:	9f 90       	pop	r9
    4358:	8f 90       	pop	r8
    435a:	7f 90       	pop	r7
    435c:	6f 90       	pop	r6
    435e:	08 95       	ret

00004360 <MLProcessFIFOData>:
 *          results in an internal data structure.
 * @param[in]   dmpData Pointer to the buffer containing the fifo data.
 * @return  error code.
 **/
tMLError MLProcessFIFOData(const unsigned char* dmpData)
{
    4360:	2f 92       	push	r2
    4362:	3f 92       	push	r3
    4364:	4f 92       	push	r4
    4366:	5f 92       	push	r5
    4368:	6f 92       	push	r6
    436a:	7f 92       	push	r7
    436c:	8f 92       	push	r8
    436e:	9f 92       	push	r9
    4370:	af 92       	push	r10
    4372:	bf 92       	push	r11
    4374:	cf 92       	push	r12
    4376:	df 92       	push	r13
    4378:	ef 92       	push	r14
    437a:	ff 92       	push	r15
    437c:	0f 93       	push	r16
    437e:	1f 93       	push	r17
    4380:	df 93       	push	r29
    4382:	cf 93       	push	r28
    4384:	00 d0       	rcall	.+0      	; 0x4386 <MLProcessFIFOData+0x26>
    4386:	00 d0       	rcall	.+0      	; 0x4388 <MLProcessFIFOData+0x28>
    4388:	0f 92       	push	r0
    438a:	cd b7       	in	r28, 0x3d	; 61
    438c:	de b7       	in	r29, 0x3e	; 62
    438e:	1c 01       	movw	r2, r24

        int_fast8_t FIFOPtr = 0;
        int_fast8_t i;

        if (FIFOData.mlFIFODataConfig[ML_QUATERNION] & ML_32_BIT)
    4390:	80 91 64 04 	lds	r24, 0x0464
    4394:	87 ff       	sbrs	r24, 7
    4396:	4e c0       	rjmp	.+156    	; 0x4434 <MLProcessFIFOData+0xd4>
    4398:	25 e0       	ldi	r18, 0x05	; 5
    439a:	e2 2e       	mov	r14, r18
    439c:	24 e0       	ldi	r18, 0x04	; 4
    439e:	f2 2e       	mov	r15, r18
    43a0:	77 24       	eor	r7, r7
    43a2:	60 e0       	ldi	r22, 0x00	; 0
    43a4:	70 e0       	ldi	r23, 0x00	; 0
        {
                for (i = 0; i < 4; i++)
                {
                        if ((FIFOData.mlFIFODataConfig[ML_QUATERNION] >> i) & 0x0001)
    43a6:	08 2f       	mov	r16, r24
    43a8:	10 e0       	ldi	r17, 0x00	; 0
    43aa:	c8 01       	movw	r24, r16
    43ac:	06 2e       	mov	r0, r22
    43ae:	02 c0       	rjmp	.+4      	; 0x43b4 <MLProcessFIFOData+0x54>
    43b0:	95 95       	asr	r25
    43b2:	87 95       	ror	r24
    43b4:	0a 94       	dec	r0
    43b6:	e2 f7       	brpl	.-8      	; 0x43b0 <MLProcessFIFOData+0x50>
    43b8:	80 ff       	sbrs	r24, 0
    43ba:	31 c0       	rjmp	.+98     	; 0x441e <MLProcessFIFOData+0xbe>
                        {
                                FIFOData.mlQuat[i] = (((long) dmpData[FIFOPtr] << 24) + ((long) dmpData[FIFOPtr + 1] << 16)
    43bc:	e7 2d       	mov	r30, r7
    43be:	ff 27       	eor	r31, r31
    43c0:	e7 fd       	sbrc	r30, 7
    43c2:	f0 95       	com	r31
    43c4:	e2 0d       	add	r30, r2
    43c6:	f3 1d       	adc	r31, r3
    43c8:	83 81       	ldd	r24, Z+3	; 0x03
    43ca:	20 81       	ld	r18, Z
    43cc:	30 e0       	ldi	r19, 0x00	; 0
    43ce:	40 e0       	ldi	r20, 0x00	; 0
    43d0:	50 e0       	ldi	r21, 0x00	; 0
    43d2:	52 2f       	mov	r21, r18
    43d4:	44 27       	eor	r20, r20
    43d6:	33 27       	eor	r19, r19
    43d8:	22 27       	eor	r18, r18
    43da:	28 0f       	add	r18, r24
    43dc:	31 1d       	adc	r19, r1
    43de:	41 1d       	adc	r20, r1
    43e0:	51 1d       	adc	r21, r1
    43e2:	81 81       	ldd	r24, Z+1	; 0x01
    43e4:	90 e0       	ldi	r25, 0x00	; 0
    43e6:	a0 e0       	ldi	r26, 0x00	; 0
    43e8:	b0 e0       	ldi	r27, 0x00	; 0
    43ea:	dc 01       	movw	r26, r24
    43ec:	99 27       	eor	r25, r25
    43ee:	88 27       	eor	r24, r24
    43f0:	28 0f       	add	r18, r24
    43f2:	39 1f       	adc	r19, r25
    43f4:	4a 1f       	adc	r20, r26
    43f6:	5b 1f       	adc	r21, r27
    43f8:	82 81       	ldd	r24, Z+2	; 0x02
    43fa:	90 e0       	ldi	r25, 0x00	; 0
    43fc:	a0 e0       	ldi	r26, 0x00	; 0
    43fe:	b0 e0       	ldi	r27, 0x00	; 0
    4400:	ba 2f       	mov	r27, r26
    4402:	a9 2f       	mov	r26, r25
    4404:	98 2f       	mov	r25, r24
    4406:	88 27       	eor	r24, r24
    4408:	28 0f       	add	r18, r24
    440a:	39 1f       	adc	r19, r25
    440c:	4a 1f       	adc	r20, r26
    440e:	5b 1f       	adc	r21, r27
    4410:	f7 01       	movw	r30, r14
    4412:	20 83       	st	Z, r18
    4414:	31 83       	std	Z+1, r19	; 0x01
    4416:	42 83       	std	Z+2, r20	; 0x02
    4418:	53 83       	std	Z+3, r21	; 0x03
                                                + ((long) dmpData[FIFOPtr + 2] << 8) + ((int) dmpData[FIFOPtr + 3]));
                                FIFOPtr += 4;
    441a:	f4 e0       	ldi	r31, 0x04	; 4
    441c:	7f 0e       	add	r7, r31
    441e:	6f 5f       	subi	r22, 0xFF	; 255
    4420:	7f 4f       	sbci	r23, 0xFF	; 255
    4422:	24 e0       	ldi	r18, 0x04	; 4
    4424:	30 e0       	ldi	r19, 0x00	; 0
    4426:	e2 0e       	add	r14, r18
    4428:	f3 1e       	adc	r15, r19
        int_fast8_t FIFOPtr = 0;
        int_fast8_t i;

        if (FIFOData.mlFIFODataConfig[ML_QUATERNION] & ML_32_BIT)
        {
                for (i = 0; i < 4; i++)
    442a:	64 30       	cpi	r22, 0x04	; 4
    442c:	71 05       	cpc	r23, r1
    442e:	09 f0       	breq	.+2      	; 0x4432 <MLProcessFIFOData+0xd2>
    4430:	bc cf       	rjmp	.-136    	; 0x43aa <MLProcessFIFOData+0x4a>
    4432:	3f c0       	rjmp	.+126    	; 0x44b2 <MLProcessFIFOData+0x152>
                                FIFOData.mlQuat[i] = (((long) dmpData[FIFOPtr] << 24) + ((long) dmpData[FIFOPtr + 1] << 16)
                                                + ((long) dmpData[FIFOPtr + 2] << 8) + ((int) dmpData[FIFOPtr + 3]));
                                FIFOPtr += 4;
                        }
                }
        } else if (FIFOData.mlFIFODataConfig[ML_QUATERNION] & ML_16_BIT)
    4434:	08 2f       	mov	r16, r24
    4436:	10 e0       	ldi	r17, 0x00	; 0
    4438:	86 fd       	sbrc	r24, 6
    443a:	02 c0       	rjmp	.+4      	; 0x4440 <MLProcessFIFOData+0xe0>
    443c:	77 24       	eor	r7, r7
    443e:	39 c0       	rjmp	.+114    	; 0x44b2 <MLProcessFIFOData+0x152>
    4440:	b5 e0       	ldi	r27, 0x05	; 5
    4442:	eb 2e       	mov	r14, r27
    4444:	b4 e0       	ldi	r27, 0x04	; 4
    4446:	fb 2e       	mov	r15, r27
    4448:	77 24       	eor	r7, r7
    444a:	60 e0       	ldi	r22, 0x00	; 0
    444c:	70 e0       	ldi	r23, 0x00	; 0
        {
                for (i = 0; i < 4; i++)
                {
                        if ((FIFOData.mlFIFODataConfig[ML_QUATERNION] >> i) & 0x0001)
    444e:	c8 01       	movw	r24, r16
    4450:	06 2e       	mov	r0, r22
    4452:	02 c0       	rjmp	.+4      	; 0x4458 <MLProcessFIFOData+0xf8>
    4454:	95 95       	asr	r25
    4456:	87 95       	ror	r24
    4458:	0a 94       	dec	r0
    445a:	e2 f7       	brpl	.-8      	; 0x4454 <MLProcessFIFOData+0xf4>
    445c:	80 ff       	sbrs	r24, 0
    445e:	20 c0       	rjmp	.+64     	; 0x44a0 <MLProcessFIFOData+0x140>
                        {
                                FIFOData.mlQuat[i] = (((long) dmpData[FIFOPtr] << 24) + ((long) dmpData[FIFOPtr + 1] << 16));
    4460:	e7 2d       	mov	r30, r7
    4462:	ff 27       	eor	r31, r31
    4464:	e7 fd       	sbrc	r30, 7
    4466:	f0 95       	com	r31
    4468:	e2 0d       	add	r30, r2
    446a:	f3 1d       	adc	r31, r3
    446c:	21 81       	ldd	r18, Z+1	; 0x01
    446e:	30 e0       	ldi	r19, 0x00	; 0
    4470:	40 e0       	ldi	r20, 0x00	; 0
    4472:	50 e0       	ldi	r21, 0x00	; 0
    4474:	a9 01       	movw	r20, r18
    4476:	33 27       	eor	r19, r19
    4478:	22 27       	eor	r18, r18
    447a:	80 81       	ld	r24, Z
    447c:	90 e0       	ldi	r25, 0x00	; 0
    447e:	a0 e0       	ldi	r26, 0x00	; 0
    4480:	b0 e0       	ldi	r27, 0x00	; 0
    4482:	b8 2f       	mov	r27, r24
    4484:	aa 27       	eor	r26, r26
    4486:	99 27       	eor	r25, r25
    4488:	88 27       	eor	r24, r24
    448a:	28 0f       	add	r18, r24
    448c:	39 1f       	adc	r19, r25
    448e:	4a 1f       	adc	r20, r26
    4490:	5b 1f       	adc	r21, r27
    4492:	f7 01       	movw	r30, r14
    4494:	20 83       	st	Z, r18
    4496:	31 83       	std	Z+1, r19	; 0x01
    4498:	42 83       	std	Z+2, r20	; 0x02
    449a:	53 83       	std	Z+3, r21	; 0x03
                                FIFOPtr += 2;
    449c:	f2 e0       	ldi	r31, 0x02	; 2
    449e:	7f 0e       	add	r7, r31
    44a0:	6f 5f       	subi	r22, 0xFF	; 255
    44a2:	7f 4f       	sbci	r23, 0xFF	; 255
    44a4:	24 e0       	ldi	r18, 0x04	; 4
    44a6:	30 e0       	ldi	r19, 0x00	; 0
    44a8:	e2 0e       	add	r14, r18
    44aa:	f3 1e       	adc	r15, r19
                                FIFOPtr += 4;
                        }
                }
        } else if (FIFOData.mlFIFODataConfig[ML_QUATERNION] & ML_16_BIT)
        {
                for (i = 0; i < 4; i++)
    44ac:	64 30       	cpi	r22, 0x04	; 4
    44ae:	71 05       	cpc	r23, r1
    44b0:	71 f6       	brne	.-100    	; 0x444e <MLProcessFIFOData+0xee>
                                FIFOData.mlQuat[i] = (((long) dmpData[FIFOPtr] << 24) + ((long) dmpData[FIFOPtr + 1] << 16));
                                FIFOPtr += 2;
                        }
                }
        }
        if (FIFOData.mlFIFODataConfig[ML_GYROS] & ML_32_BIT)
    44b2:	80 91 62 04 	lds	r24, 0x0462
    44b6:	87 ff       	sbrs	r24, 7
    44b8:	6f c0       	rjmp	.+222    	; 0x4598 <MLProcessFIFOData+0x238>
    44ba:	ed e2       	ldi	r30, 0x2D	; 45
    44bc:	f4 e0       	ldi	r31, 0x04	; 4
    44be:	fd 83       	std	Y+5, r31	; 0x05
    44c0:	ec 83       	std	Y+4, r30	; 0x04
    44c2:	88 24       	eor	r8, r8
    44c4:	99 24       	eor	r9, r9
        {
                for (i = 0; i < 3; i++)
                {
                        if ((FIFOData.mlFIFODataConfig[ML_GYROS] >> i) & 0x0001)
    44c6:	48 2e       	mov	r4, r24
    44c8:	55 24       	eor	r5, r5
    44ca:	c2 01       	movw	r24, r4
    44cc:	08 2c       	mov	r0, r8
    44ce:	02 c0       	rjmp	.+4      	; 0x44d4 <MLProcessFIFOData+0x174>
    44d0:	95 95       	asr	r25
    44d2:	87 95       	ror	r24
    44d4:	0a 94       	dec	r0
    44d6:	e2 f7       	brpl	.-8      	; 0x44d0 <MLProcessFIFOData+0x170>
    44d8:	80 ff       	sbrs	r24, 0
    44da:	4f c0       	rjmp	.+158    	; 0x457a <MLProcessFIFOData+0x21a>
                        {
                                FIFOData.mlCalibratedData[i] = (((long) dmpData[FIFOPtr] << 24) + ((long) dmpData[FIFOPtr + 1] << 16)
    44dc:	e7 2d       	mov	r30, r7
    44de:	ff 27       	eor	r31, r31
    44e0:	e7 fd       	sbrc	r30, 7
    44e2:	f0 95       	com	r31
    44e4:	e2 0d       	add	r30, r2
    44e6:	f3 1d       	adc	r31, r3
    44e8:	23 81       	ldd	r18, Z+3	; 0x03
    44ea:	80 81       	ld	r24, Z
    44ec:	90 e0       	ldi	r25, 0x00	; 0
    44ee:	a0 e0       	ldi	r26, 0x00	; 0
    44f0:	b0 e0       	ldi	r27, 0x00	; 0
    44f2:	b8 2f       	mov	r27, r24
    44f4:	aa 27       	eor	r26, r26
    44f6:	99 27       	eor	r25, r25
    44f8:	88 27       	eor	r24, r24
    44fa:	82 0f       	add	r24, r18
    44fc:	91 1d       	adc	r25, r1
    44fe:	a1 1d       	adc	r26, r1
    4500:	b1 1d       	adc	r27, r1
    4502:	21 81       	ldd	r18, Z+1	; 0x01
    4504:	30 e0       	ldi	r19, 0x00	; 0
    4506:	40 e0       	ldi	r20, 0x00	; 0
    4508:	50 e0       	ldi	r21, 0x00	; 0
    450a:	a9 01       	movw	r20, r18
    450c:	33 27       	eor	r19, r19
    450e:	22 27       	eor	r18, r18
    4510:	82 0f       	add	r24, r18
    4512:	93 1f       	adc	r25, r19
    4514:	a4 1f       	adc	r26, r20
    4516:	b5 1f       	adc	r27, r21
    4518:	22 81       	ldd	r18, Z+2	; 0x02
    451a:	30 e0       	ldi	r19, 0x00	; 0
    451c:	40 e0       	ldi	r20, 0x00	; 0
    451e:	50 e0       	ldi	r21, 0x00	; 0
    4520:	54 2f       	mov	r21, r20
    4522:	43 2f       	mov	r20, r19
    4524:	32 2f       	mov	r19, r18
    4526:	22 27       	eor	r18, r18
    4528:	82 0f       	add	r24, r18
    452a:	93 1f       	adc	r25, r19
    452c:	a4 1f       	adc	r26, r20
    452e:	b5 1f       	adc	r27, r21
                                                + ((long) dmpData[FIFOPtr + 2] << 8) + ((int) dmpData[FIFOPtr + 3]));
                                FIFOData.mlCalibratedData[i] = (long) (((long long) FIFOData.mlCalibratedData[i] * 65536L)
    4530:	7c 01       	movw	r14, r24
    4532:	8d 01       	movw	r16, r26
    4534:	11 0f       	add	r17, r17
    4536:	ee 08       	sbc	r14, r14
    4538:	fe 2c       	mov	r15, r14
    453a:	87 01       	movw	r16, r14
    453c:	9c 01       	movw	r18, r24
    453e:	ad 01       	movw	r20, r26
    4540:	6e 2d       	mov	r22, r14
    4542:	7e 2d       	mov	r23, r14
    4544:	8e 2d       	mov	r24, r14
    4546:	9e 2d       	mov	r25, r14
    4548:	00 e1       	ldi	r16, 0x10	; 16
    454a:	0e 94 07 2c 	call	0x580e	; 0x580e <__ashldi3>
    454e:	fd e0       	ldi	r31, 0x0D	; 13
    4550:	af 2e       	mov	r10, r31
    4552:	e7 eb       	ldi	r30, 0xB7	; 183
    4554:	be 2e       	mov	r11, r30
    4556:	cc 24       	eor	r12, r12
    4558:	dd 24       	eor	r13, r13
    455a:	ee 24       	eor	r14, r14
    455c:	ff 24       	eor	r15, r15
    455e:	00 e0       	ldi	r16, 0x00	; 0
    4560:	10 e0       	ldi	r17, 0x00	; 0
    4562:	0e 94 0b 2d 	call	0x5a16	; 0x5a16 <__divdi3>
    4566:	c9 01       	movw	r24, r18
    4568:	ba 01       	movw	r22, r20
    456a:	ec 81       	ldd	r30, Y+4	; 0x04
    456c:	fd 81       	ldd	r31, Y+5	; 0x05
    456e:	20 83       	st	Z, r18
    4570:	91 83       	std	Z+1, r25	; 0x01
    4572:	42 83       	std	Z+2, r20	; 0x02
    4574:	73 83       	std	Z+3, r23	; 0x03
                                                / ML_CALIBRATED_GYRO_SCALE);

                                FIFOPtr += 4;
    4576:	f4 e0       	ldi	r31, 0x04	; 4
    4578:	7f 0e       	add	r7, r31
    457a:	08 94       	sec
    457c:	81 1c       	adc	r8, r1
    457e:	91 1c       	adc	r9, r1
    4580:	2c 81       	ldd	r18, Y+4	; 0x04
    4582:	3d 81       	ldd	r19, Y+5	; 0x05
    4584:	2c 5f       	subi	r18, 0xFC	; 252
    4586:	3f 4f       	sbci	r19, 0xFF	; 255
    4588:	3d 83       	std	Y+5, r19	; 0x05
    458a:	2c 83       	std	Y+4, r18	; 0x04
                        }
                }
        }
        if (FIFOData.mlFIFODataConfig[ML_GYROS] & ML_32_BIT)
        {
                for (i = 0; i < 3; i++)
    458c:	33 e0       	ldi	r19, 0x03	; 3
    458e:	83 16       	cp	r8, r19
    4590:	91 04       	cpc	r9, r1
    4592:	09 f0       	breq	.+2      	; 0x4596 <MLProcessFIFOData+0x236>
    4594:	9a cf       	rjmp	.-204    	; 0x44ca <MLProcessFIFOData+0x16a>
    4596:	5f c0       	rjmp	.+190    	; 0x4656 <MLProcessFIFOData+0x2f6>
                                                / ML_CALIBRATED_GYRO_SCALE);

                                FIFOPtr += 4;
                        }
                }
        } else if (FIFOData.mlFIFODataConfig[ML_GYROS] & ML_16_BIT)
    4598:	48 2e       	mov	r4, r24
    459a:	55 24       	eor	r5, r5
    459c:	86 ff       	sbrs	r24, 6
    459e:	5b c0       	rjmp	.+182    	; 0x4656 <MLProcessFIFOData+0x2f6>
    45a0:	8d e2       	ldi	r24, 0x2D	; 45
    45a2:	94 e0       	ldi	r25, 0x04	; 4
    45a4:	9d 83       	std	Y+5, r25	; 0x05
    45a6:	8c 83       	std	Y+4, r24	; 0x04
    45a8:	88 24       	eor	r8, r8
    45aa:	99 24       	eor	r9, r9
        {
                for (i = 0; i < 3; i++)
                {
                        if ((FIFOData.mlFIFODataConfig[ML_GYROS] >> i) & 0x0001)
    45ac:	c2 01       	movw	r24, r4
    45ae:	08 2c       	mov	r0, r8
    45b0:	02 c0       	rjmp	.+4      	; 0x45b6 <MLProcessFIFOData+0x256>
    45b2:	95 95       	asr	r25
    45b4:	87 95       	ror	r24
    45b6:	0a 94       	dec	r0
    45b8:	e2 f7       	brpl	.-8      	; 0x45b2 <MLProcessFIFOData+0x252>
    45ba:	80 ff       	sbrs	r24, 0
    45bc:	3e c0       	rjmp	.+124    	; 0x463a <MLProcessFIFOData+0x2da>
                        {
                                FIFOData.mlCalibratedData[i] = (((long) dmpData[FIFOPtr] << 24) + ((long) dmpData[FIFOPtr + 1] << 16));
    45be:	e7 2d       	mov	r30, r7
    45c0:	ff 27       	eor	r31, r31
    45c2:	e7 fd       	sbrc	r30, 7
    45c4:	f0 95       	com	r31
    45c6:	e2 0d       	add	r30, r2
    45c8:	f3 1d       	adc	r31, r3
    45ca:	e1 80       	ldd	r14, Z+1	; 0x01
    45cc:	ff 24       	eor	r15, r15
    45ce:	00 e0       	ldi	r16, 0x00	; 0
    45d0:	10 e0       	ldi	r17, 0x00	; 0
    45d2:	87 01       	movw	r16, r14
    45d4:	ff 24       	eor	r15, r15
    45d6:	ee 24       	eor	r14, r14
    45d8:	80 81       	ld	r24, Z
    45da:	90 e0       	ldi	r25, 0x00	; 0
    45dc:	a0 e0       	ldi	r26, 0x00	; 0
    45de:	b0 e0       	ldi	r27, 0x00	; 0
    45e0:	b8 2f       	mov	r27, r24
    45e2:	aa 27       	eor	r26, r26
    45e4:	99 27       	eor	r25, r25
    45e6:	88 27       	eor	r24, r24
    45e8:	e8 0e       	add	r14, r24
    45ea:	f9 1e       	adc	r15, r25
    45ec:	0a 1f       	adc	r16, r26
    45ee:	1b 1f       	adc	r17, r27
                                FIFOData.mlCalibratedData[i] = (long) (((long long) FIFOData.mlCalibratedData[i] * 65536L)
    45f0:	57 01       	movw	r10, r14
    45f2:	68 01       	movw	r12, r16
    45f4:	dd 0c       	add	r13, r13
    45f6:	aa 08       	sbc	r10, r10
    45f8:	ba 2c       	mov	r11, r10
    45fa:	65 01       	movw	r12, r10
    45fc:	97 01       	movw	r18, r14
    45fe:	a8 01       	movw	r20, r16
    4600:	6a 2d       	mov	r22, r10
    4602:	7a 2d       	mov	r23, r10
    4604:	8a 2d       	mov	r24, r10
    4606:	9a 2d       	mov	r25, r10
    4608:	00 e1       	ldi	r16, 0x10	; 16
    460a:	0e 94 07 2c 	call	0x580e	; 0x580e <__ashldi3>
    460e:	fd e0       	ldi	r31, 0x0D	; 13
    4610:	af 2e       	mov	r10, r31
    4612:	e7 eb       	ldi	r30, 0xB7	; 183
    4614:	be 2e       	mov	r11, r30
    4616:	cc 24       	eor	r12, r12
    4618:	dd 24       	eor	r13, r13
    461a:	ee 24       	eor	r14, r14
    461c:	ff 24       	eor	r15, r15
    461e:	00 e0       	ldi	r16, 0x00	; 0
    4620:	10 e0       	ldi	r17, 0x00	; 0
    4622:	0e 94 0b 2d 	call	0x5a16	; 0x5a16 <__divdi3>
    4626:	c9 01       	movw	r24, r18
    4628:	ba 01       	movw	r22, r20
    462a:	ec 81       	ldd	r30, Y+4	; 0x04
    462c:	fd 81       	ldd	r31, Y+5	; 0x05
    462e:	20 83       	st	Z, r18
    4630:	91 83       	std	Z+1, r25	; 0x01
    4632:	42 83       	std	Z+2, r20	; 0x02
    4634:	73 83       	std	Z+3, r23	; 0x03
                                                / ML_CALIBRATED_GYRO_SCALE);

                                FIFOPtr += 2;
    4636:	f2 e0       	ldi	r31, 0x02	; 2
    4638:	7f 0e       	add	r7, r31
    463a:	08 94       	sec
    463c:	81 1c       	adc	r8, r1
    463e:	91 1c       	adc	r9, r1
    4640:	2c 81       	ldd	r18, Y+4	; 0x04
    4642:	3d 81       	ldd	r19, Y+5	; 0x05
    4644:	2c 5f       	subi	r18, 0xFC	; 252
    4646:	3f 4f       	sbci	r19, 0xFF	; 255
    4648:	3d 83       	std	Y+5, r19	; 0x05
    464a:	2c 83       	std	Y+4, r18	; 0x04
                                FIFOPtr += 4;
                        }
                }
        } else if (FIFOData.mlFIFODataConfig[ML_GYROS] & ML_16_BIT)
        {
                for (i = 0; i < 3; i++)
    464c:	33 e0       	ldi	r19, 0x03	; 3
    464e:	83 16       	cp	r8, r19
    4650:	91 04       	cpc	r9, r1
    4652:	09 f0       	breq	.+2      	; 0x4656 <MLProcessFIFOData+0x2f6>
    4654:	ab cf       	rjmp	.-170    	; 0x45ac <MLProcessFIFOData+0x24c>

                                FIFOPtr += 2;
                        }
                }
        }
        if (FIFOData.mlFIFODataConfig[ML_ACCELS] & ML_32_BIT)
    4656:	80 91 63 04 	lds	r24, 0x0463
    465a:	87 ff       	sbrs	r24, 7
    465c:	6f c0       	rjmp	.+222    	; 0x473c <MLProcessFIFOData+0x3dc>
                {
                        if ((FIFOData.mlFIFODataConfig[ML_ACCELS] >> i) & 0x0001)
                        {
                                FIFOData.mlCalibratedData[i + 3] = (((long) dmpData[FIFOPtr] << 24) + ((long) dmpData[FIFOPtr + 1]
                                                << 16) + ((long) dmpData[FIFOPtr + 2] << 8) + ((int) dmpData[FIFOPtr + 3]));
                                if (mlxData.mlAccelSens != 0)
    465e:	80 90 6d 03 	lds	r8, 0x036D
    4662:	90 90 6e 03 	lds	r9, 0x036E
    4666:	a0 90 6f 03 	lds	r10, 0x036F
    466a:	b0 90 70 03 	lds	r11, 0x0370
    466e:	49 e3       	ldi	r20, 0x39	; 57
    4670:	c4 2e       	mov	r12, r20
    4672:	44 e0       	ldi	r20, 0x04	; 4
    4674:	d4 2e       	mov	r13, r20
    4676:	1d 82       	std	Y+5, r1	; 0x05
    4678:	1c 82       	std	Y+4, r1	; 0x04
        }
        if (FIFOData.mlFIFODataConfig[ML_ACCELS] & ML_32_BIT)
        {
                for (i = 0; i < 3; i++)
                {
                        if ((FIFOData.mlFIFODataConfig[ML_ACCELS] >> i) & 0x0001)
    467a:	48 2e       	mov	r4, r24
    467c:	55 24       	eor	r5, r5
    467e:	c2 01       	movw	r24, r4
    4680:	0c 80       	ldd	r0, Y+4	; 0x04
    4682:	02 c0       	rjmp	.+4      	; 0x4688 <MLProcessFIFOData+0x328>
    4684:	95 95       	asr	r25
    4686:	87 95       	ror	r24
    4688:	0a 94       	dec	r0
    468a:	e2 f7       	brpl	.-8      	; 0x4684 <MLProcessFIFOData+0x324>
    468c:	80 ff       	sbrs	r24, 0
    468e:	47 c0       	rjmp	.+142    	; 0x471e <MLProcessFIFOData+0x3be>
                        {
                                FIFOData.mlCalibratedData[i + 3] = (((long) dmpData[FIFOPtr] << 24) + ((long) dmpData[FIFOPtr + 1]
    4690:	e7 2d       	mov	r30, r7
    4692:	ff 27       	eor	r31, r31
    4694:	e7 fd       	sbrc	r30, 7
    4696:	f0 95       	com	r31
    4698:	e2 0d       	add	r30, r2
    469a:	f3 1d       	adc	r31, r3
    469c:	23 81       	ldd	r18, Z+3	; 0x03
    469e:	80 81       	ld	r24, Z
    46a0:	90 e0       	ldi	r25, 0x00	; 0
    46a2:	a0 e0       	ldi	r26, 0x00	; 0
    46a4:	b0 e0       	ldi	r27, 0x00	; 0
    46a6:	18 2f       	mov	r17, r24
    46a8:	00 27       	eor	r16, r16
    46aa:	ff 24       	eor	r15, r15
    46ac:	ee 24       	eor	r14, r14
    46ae:	e2 0e       	add	r14, r18
    46b0:	f1 1c       	adc	r15, r1
    46b2:	01 1d       	adc	r16, r1
    46b4:	11 1d       	adc	r17, r1
    46b6:	81 81       	ldd	r24, Z+1	; 0x01
    46b8:	90 e0       	ldi	r25, 0x00	; 0
    46ba:	a0 e0       	ldi	r26, 0x00	; 0
    46bc:	b0 e0       	ldi	r27, 0x00	; 0
    46be:	dc 01       	movw	r26, r24
    46c0:	99 27       	eor	r25, r25
    46c2:	88 27       	eor	r24, r24
    46c4:	e8 0e       	add	r14, r24
    46c6:	f9 1e       	adc	r15, r25
    46c8:	0a 1f       	adc	r16, r26
    46ca:	1b 1f       	adc	r17, r27
    46cc:	82 81       	ldd	r24, Z+2	; 0x02
    46ce:	90 e0       	ldi	r25, 0x00	; 0
    46d0:	a0 e0       	ldi	r26, 0x00	; 0
    46d2:	b0 e0       	ldi	r27, 0x00	; 0
    46d4:	ba 2f       	mov	r27, r26
    46d6:	a9 2f       	mov	r26, r25
    46d8:	98 2f       	mov	r25, r24
    46da:	88 27       	eor	r24, r24
    46dc:	e8 0e       	add	r14, r24
    46de:	f9 1e       	adc	r15, r25
    46e0:	0a 1f       	adc	r16, r26
    46e2:	1b 1f       	adc	r17, r27
    46e4:	f6 01       	movw	r30, r12
    46e6:	e0 82       	st	Z, r14
    46e8:	f1 82       	std	Z+1, r15	; 0x01
    46ea:	02 83       	std	Z+2, r16	; 0x02
    46ec:	13 83       	std	Z+3, r17	; 0x03
                                                << 16) + ((long) dmpData[FIFOPtr + 2] << 8) + ((int) dmpData[FIFOPtr + 3]));
                                if (mlxData.mlAccelSens != 0)
    46ee:	81 14       	cp	r8, r1
    46f0:	91 04       	cpc	r9, r1
    46f2:	a1 04       	cpc	r10, r1
    46f4:	b1 04       	cpc	r11, r1
    46f6:	89 f0       	breq	.+34     	; 0x471a <MLProcessFIFOData+0x3ba>
                                {
                                        FIFOData.mlCalibratedData[i + 3] /= (0x20000000 / mlxData.mlAccelSens);
    46f8:	60 e0       	ldi	r22, 0x00	; 0
    46fa:	70 e0       	ldi	r23, 0x00	; 0
    46fc:	80 e0       	ldi	r24, 0x00	; 0
    46fe:	90 e2       	ldi	r25, 0x20	; 32
    4700:	a5 01       	movw	r20, r10
    4702:	94 01       	movw	r18, r8
    4704:	0e 94 c9 38 	call	0x7192	; 0x7192 <__divmodsi4>
    4708:	c8 01       	movw	r24, r16
    470a:	b7 01       	movw	r22, r14
    470c:	0e 94 c9 38 	call	0x7192	; 0x7192 <__divmodsi4>
    4710:	f6 01       	movw	r30, r12
    4712:	20 83       	st	Z, r18
    4714:	31 83       	std	Z+1, r19	; 0x01
    4716:	42 83       	std	Z+2, r20	; 0x02
    4718:	53 83       	std	Z+3, r21	; 0x03
                                }
                                FIFOPtr += 4;
    471a:	f4 e0       	ldi	r31, 0x04	; 4
    471c:	7f 0e       	add	r7, r31
    471e:	2c 81       	ldd	r18, Y+4	; 0x04
    4720:	3d 81       	ldd	r19, Y+5	; 0x05
    4722:	2f 5f       	subi	r18, 0xFF	; 255
    4724:	3f 4f       	sbci	r19, 0xFF	; 255
    4726:	3d 83       	std	Y+5, r19	; 0x05
    4728:	2c 83       	std	Y+4, r18	; 0x04
    472a:	84 e0       	ldi	r24, 0x04	; 4
    472c:	90 e0       	ldi	r25, 0x00	; 0
    472e:	c8 0e       	add	r12, r24
    4730:	d9 1e       	adc	r13, r25
                        }
                }
        }
        if (FIFOData.mlFIFODataConfig[ML_ACCELS] & ML_32_BIT)
        {
                for (i = 0; i < 3; i++)
    4732:	23 30       	cpi	r18, 0x03	; 3
    4734:	31 05       	cpc	r19, r1
    4736:	09 f0       	breq	.+2      	; 0x473a <MLProcessFIFOData+0x3da>
    4738:	a2 cf       	rjmp	.-188    	; 0x467e <MLProcessFIFOData+0x31e>
    473a:	65 c0       	rjmp	.+202    	; 0x4806 <MLProcessFIFOData+0x4a6>
                                        FIFOData.mlCalibratedData[i + 3] /= (0x20000000 / mlxData.mlAccelSens);
                                }
                                FIFOPtr += 4;
                        }
                }
        } else if (FIFOData.mlFIFODataConfig[ML_ACCELS] & ML_16_BIT)
    473c:	48 2e       	mov	r4, r24
    473e:	55 24       	eor	r5, r5
    4740:	86 ff       	sbrs	r24, 6
    4742:	61 c0       	rjmp	.+194    	; 0x4806 <MLProcessFIFOData+0x4a6>
                {
                        if ((FIFOData.mlFIFODataConfig[ML_ACCELS] >> i) & 0x0001)
                        {
                                FIFOData.mlCalibratedData[i + 3] = (((long) dmpData[FIFOPtr] << 24) + ((long) dmpData[FIFOPtr + 1]
                                                << 16));
                                if (mlxData.mlAccelSens != 0)
    4744:	a0 90 6d 03 	lds	r10, 0x036D
    4748:	b0 90 6e 03 	lds	r11, 0x036E
    474c:	c0 90 6f 03 	lds	r12, 0x036F
    4750:	d0 90 70 03 	lds	r13, 0x0370
                                {
                                        FIFOData.mlCalibratedData[i + 3] /= (0x20000000UL / mlxData.mlAccelSens);
    4754:	a9 82       	std	Y+1, r10	; 0x01
    4756:	ba 82       	std	Y+2, r11	; 0x02
    4758:	cb 82       	std	Y+3, r12	; 0x03
    475a:	6d 2c       	mov	r6, r13
    475c:	e9 e3       	ldi	r30, 0x39	; 57
    475e:	8e 2e       	mov	r8, r30
    4760:	e4 e0       	ldi	r30, 0x04	; 4
    4762:	9e 2e       	mov	r9, r30
    4764:	1d 82       	std	Y+5, r1	; 0x05
    4766:	1c 82       	std	Y+4, r1	; 0x04
                }
        } else if (FIFOData.mlFIFODataConfig[ML_ACCELS] & ML_16_BIT)
        {
                for (i = 0; i < 3; i++)
                {
                        if ((FIFOData.mlFIFODataConfig[ML_ACCELS] >> i) & 0x0001)
    4768:	c2 01       	movw	r24, r4
    476a:	0c 80       	ldd	r0, Y+4	; 0x04
    476c:	02 c0       	rjmp	.+4      	; 0x4772 <MLProcessFIFOData+0x412>
    476e:	95 95       	asr	r25
    4770:	87 95       	ror	r24
    4772:	0a 94       	dec	r0
    4774:	e2 f7       	brpl	.-8      	; 0x476e <MLProcessFIFOData+0x40e>
    4776:	80 ff       	sbrs	r24, 0
    4778:	38 c0       	rjmp	.+112    	; 0x47ea <MLProcessFIFOData+0x48a>
                        {
                                FIFOData.mlCalibratedData[i + 3] = (((long) dmpData[FIFOPtr] << 24) + ((long) dmpData[FIFOPtr + 1]
    477a:	e7 2d       	mov	r30, r7
    477c:	ff 27       	eor	r31, r31
    477e:	e7 fd       	sbrc	r30, 7
    4780:	f0 95       	com	r31
    4782:	e2 0d       	add	r30, r2
    4784:	f3 1d       	adc	r31, r3
    4786:	81 81       	ldd	r24, Z+1	; 0x01
    4788:	90 e0       	ldi	r25, 0x00	; 0
    478a:	a0 e0       	ldi	r26, 0x00	; 0
    478c:	b0 e0       	ldi	r27, 0x00	; 0
    478e:	8c 01       	movw	r16, r24
    4790:	ff 24       	eor	r15, r15
    4792:	ee 24       	eor	r14, r14
    4794:	80 81       	ld	r24, Z
    4796:	90 e0       	ldi	r25, 0x00	; 0
    4798:	a0 e0       	ldi	r26, 0x00	; 0
    479a:	b0 e0       	ldi	r27, 0x00	; 0
    479c:	b8 2f       	mov	r27, r24
    479e:	aa 27       	eor	r26, r26
    47a0:	99 27       	eor	r25, r25
    47a2:	88 27       	eor	r24, r24
    47a4:	e8 0e       	add	r14, r24
    47a6:	f9 1e       	adc	r15, r25
    47a8:	0a 1f       	adc	r16, r26
    47aa:	1b 1f       	adc	r17, r27
    47ac:	f4 01       	movw	r30, r8
    47ae:	e0 82       	st	Z, r14
    47b0:	f1 82       	std	Z+1, r15	; 0x01
    47b2:	02 83       	std	Z+2, r16	; 0x02
    47b4:	13 83       	std	Z+3, r17	; 0x03
                                                << 16));
                                if (mlxData.mlAccelSens != 0)
    47b6:	a1 14       	cp	r10, r1
    47b8:	b1 04       	cpc	r11, r1
    47ba:	c1 04       	cpc	r12, r1
    47bc:	d1 04       	cpc	r13, r1
    47be:	99 f0       	breq	.+38     	; 0x47e6 <MLProcessFIFOData+0x486>
                                {
                                        FIFOData.mlCalibratedData[i + 3] /= (0x20000000UL / mlxData.mlAccelSens);
    47c0:	60 e0       	ldi	r22, 0x00	; 0
    47c2:	70 e0       	ldi	r23, 0x00	; 0
    47c4:	80 e0       	ldi	r24, 0x00	; 0
    47c6:	90 e2       	ldi	r25, 0x20	; 32
    47c8:	29 81       	ldd	r18, Y+1	; 0x01
    47ca:	3a 81       	ldd	r19, Y+2	; 0x02
    47cc:	4b 81       	ldd	r20, Y+3	; 0x03
    47ce:	56 2d       	mov	r21, r6
    47d0:	0e 94 a7 38 	call	0x714e	; 0x714e <__udivmodsi4>
    47d4:	c8 01       	movw	r24, r16
    47d6:	b7 01       	movw	r22, r14
    47d8:	0e 94 a7 38 	call	0x714e	; 0x714e <__udivmodsi4>
    47dc:	f4 01       	movw	r30, r8
    47de:	20 83       	st	Z, r18
    47e0:	31 83       	std	Z+1, r19	; 0x01
    47e2:	42 83       	std	Z+2, r20	; 0x02
    47e4:	53 83       	std	Z+3, r21	; 0x03
                                }
                                FIFOPtr += 2;
    47e6:	f2 e0       	ldi	r31, 0x02	; 2
    47e8:	7f 0e       	add	r7, r31
    47ea:	2c 81       	ldd	r18, Y+4	; 0x04
    47ec:	3d 81       	ldd	r19, Y+5	; 0x05
    47ee:	2f 5f       	subi	r18, 0xFF	; 255
    47f0:	3f 4f       	sbci	r19, 0xFF	; 255
    47f2:	3d 83       	std	Y+5, r19	; 0x05
    47f4:	2c 83       	std	Y+4, r18	; 0x04
    47f6:	84 e0       	ldi	r24, 0x04	; 4
    47f8:	90 e0       	ldi	r25, 0x00	; 0
    47fa:	88 0e       	add	r8, r24
    47fc:	99 1e       	adc	r9, r25
                                FIFOPtr += 4;
                        }
                }
        } else if (FIFOData.mlFIFODataConfig[ML_ACCELS] & ML_16_BIT)
        {
                for (i = 0; i < 3; i++)
    47fe:	23 30       	cpi	r18, 0x03	; 3
    4800:	31 05       	cpc	r19, r1
    4802:	09 f0       	breq	.+2      	; 0x4806 <MLProcessFIFOData+0x4a6>
    4804:	b1 cf       	rjmp	.-158    	; 0x4768 <MLProcessFIFOData+0x408>
                                FIFOPtr += 2;
                        }
                }
        }

        if (FIFOData.mlFIFODataConfig[ML_LINEAR_ACCELERATION] & ML_32_BIT)
    4806:	80 91 65 04 	lds	r24, 0x0465
    480a:	87 ff       	sbrs	r24, 7
    480c:	6f c0       	rjmp	.+222    	; 0x48ec <MLProcessFIFOData+0x58c>
                        if ((FIFOData.mlFIFODataConfig[ML_LINEAR_ACCELERATION] >> i) & 0x0001)
                        {
                                FIFOData.mlLinearAccBody[i] = (((long) dmpData[FIFOPtr] << 24) + ((long) dmpData[FIFOPtr + 1] << 16)
                                                + ((long) dmpData[FIFOPtr + 2] << 8) + ((int) dmpData[FIFOPtr + 3]));
                                // 2^29 = 536870912
                                if (mlxData.mlAccelSens != 0)
    480e:	80 90 6d 03 	lds	r8, 0x036D
    4812:	90 90 6e 03 	lds	r9, 0x036E
    4816:	a0 90 6f 03 	lds	r10, 0x036F
    481a:	b0 90 70 03 	lds	r11, 0x0370
    481e:	55 e1       	ldi	r21, 0x15	; 21
    4820:	c5 2e       	mov	r12, r21
    4822:	54 e0       	ldi	r21, 0x04	; 4
    4824:	d5 2e       	mov	r13, r21
    4826:	1d 82       	std	Y+5, r1	; 0x05
    4828:	1c 82       	std	Y+4, r1	; 0x04

        if (FIFOData.mlFIFODataConfig[ML_LINEAR_ACCELERATION] & ML_32_BIT)
        {
                for (i = 0; i < 3; i++)
                {
                        if ((FIFOData.mlFIFODataConfig[ML_LINEAR_ACCELERATION] >> i) & 0x0001)
    482a:	48 2e       	mov	r4, r24
    482c:	55 24       	eor	r5, r5
    482e:	c2 01       	movw	r24, r4
    4830:	0c 80       	ldd	r0, Y+4	; 0x04
    4832:	02 c0       	rjmp	.+4      	; 0x4838 <MLProcessFIFOData+0x4d8>
    4834:	95 95       	asr	r25
    4836:	87 95       	ror	r24
    4838:	0a 94       	dec	r0
    483a:	e2 f7       	brpl	.-8      	; 0x4834 <MLProcessFIFOData+0x4d4>
    483c:	80 ff       	sbrs	r24, 0
    483e:	47 c0       	rjmp	.+142    	; 0x48ce <MLProcessFIFOData+0x56e>
                        {
                                FIFOData.mlLinearAccBody[i] = (((long) dmpData[FIFOPtr] << 24) + ((long) dmpData[FIFOPtr + 1] << 16)
    4840:	e7 2d       	mov	r30, r7
    4842:	ff 27       	eor	r31, r31
    4844:	e7 fd       	sbrc	r30, 7
    4846:	f0 95       	com	r31
    4848:	e2 0d       	add	r30, r2
    484a:	f3 1d       	adc	r31, r3
    484c:	23 81       	ldd	r18, Z+3	; 0x03
    484e:	80 81       	ld	r24, Z
    4850:	90 e0       	ldi	r25, 0x00	; 0
    4852:	a0 e0       	ldi	r26, 0x00	; 0
    4854:	b0 e0       	ldi	r27, 0x00	; 0
    4856:	18 2f       	mov	r17, r24
    4858:	00 27       	eor	r16, r16
    485a:	ff 24       	eor	r15, r15
    485c:	ee 24       	eor	r14, r14
    485e:	e2 0e       	add	r14, r18
    4860:	f1 1c       	adc	r15, r1
    4862:	01 1d       	adc	r16, r1
    4864:	11 1d       	adc	r17, r1
    4866:	81 81       	ldd	r24, Z+1	; 0x01
    4868:	90 e0       	ldi	r25, 0x00	; 0
    486a:	a0 e0       	ldi	r26, 0x00	; 0
    486c:	b0 e0       	ldi	r27, 0x00	; 0
    486e:	dc 01       	movw	r26, r24
    4870:	99 27       	eor	r25, r25
    4872:	88 27       	eor	r24, r24
    4874:	e8 0e       	add	r14, r24
    4876:	f9 1e       	adc	r15, r25
    4878:	0a 1f       	adc	r16, r26
    487a:	1b 1f       	adc	r17, r27
    487c:	82 81       	ldd	r24, Z+2	; 0x02
    487e:	90 e0       	ldi	r25, 0x00	; 0
    4880:	a0 e0       	ldi	r26, 0x00	; 0
    4882:	b0 e0       	ldi	r27, 0x00	; 0
    4884:	ba 2f       	mov	r27, r26
    4886:	a9 2f       	mov	r26, r25
    4888:	98 2f       	mov	r25, r24
    488a:	88 27       	eor	r24, r24
    488c:	e8 0e       	add	r14, r24
    488e:	f9 1e       	adc	r15, r25
    4890:	0a 1f       	adc	r16, r26
    4892:	1b 1f       	adc	r17, r27
    4894:	f6 01       	movw	r30, r12
    4896:	e0 82       	st	Z, r14
    4898:	f1 82       	std	Z+1, r15	; 0x01
    489a:	02 83       	std	Z+2, r16	; 0x02
    489c:	13 83       	std	Z+3, r17	; 0x03
                                                + ((long) dmpData[FIFOPtr + 2] << 8) + ((int) dmpData[FIFOPtr + 3]));
                                // 2^29 = 536870912
                                if (mlxData.mlAccelSens != 0)
    489e:	81 14       	cp	r8, r1
    48a0:	91 04       	cpc	r9, r1
    48a2:	a1 04       	cpc	r10, r1
    48a4:	b1 04       	cpc	r11, r1
    48a6:	89 f0       	breq	.+34     	; 0x48ca <MLProcessFIFOData+0x56a>
                                {
                                        FIFOData.mlLinearAccBody[i] /= (536870912L / mlxData.mlAccelSens);
    48a8:	60 e0       	ldi	r22, 0x00	; 0
    48aa:	70 e0       	ldi	r23, 0x00	; 0
    48ac:	80 e0       	ldi	r24, 0x00	; 0
    48ae:	90 e2       	ldi	r25, 0x20	; 32
    48b0:	a5 01       	movw	r20, r10
    48b2:	94 01       	movw	r18, r8
    48b4:	0e 94 c9 38 	call	0x7192	; 0x7192 <__divmodsi4>
    48b8:	c8 01       	movw	r24, r16
    48ba:	b7 01       	movw	r22, r14
    48bc:	0e 94 c9 38 	call	0x7192	; 0x7192 <__divmodsi4>
    48c0:	f6 01       	movw	r30, r12
    48c2:	20 83       	st	Z, r18
    48c4:	31 83       	std	Z+1, r19	; 0x01
    48c6:	42 83       	std	Z+2, r20	; 0x02
    48c8:	53 83       	std	Z+3, r21	; 0x03
                                }
                                FIFOPtr += 4;
    48ca:	f4 e0       	ldi	r31, 0x04	; 4
    48cc:	7f 0e       	add	r7, r31
    48ce:	2c 81       	ldd	r18, Y+4	; 0x04
    48d0:	3d 81       	ldd	r19, Y+5	; 0x05
    48d2:	2f 5f       	subi	r18, 0xFF	; 255
    48d4:	3f 4f       	sbci	r19, 0xFF	; 255
    48d6:	3d 83       	std	Y+5, r19	; 0x05
    48d8:	2c 83       	std	Y+4, r18	; 0x04
    48da:	84 e0       	ldi	r24, 0x04	; 4
    48dc:	90 e0       	ldi	r25, 0x00	; 0
    48de:	c8 0e       	add	r12, r24
    48e0:	d9 1e       	adc	r13, r25
                }
        }

        if (FIFOData.mlFIFODataConfig[ML_LINEAR_ACCELERATION] & ML_32_BIT)
        {
                for (i = 0; i < 3; i++)
    48e2:	23 30       	cpi	r18, 0x03	; 3
    48e4:	31 05       	cpc	r19, r1
    48e6:	09 f0       	breq	.+2      	; 0x48ea <MLProcessFIFOData+0x58a>
    48e8:	a2 cf       	rjmp	.-188    	; 0x482e <MLProcessFIFOData+0x4ce>
    48ea:	5f c0       	rjmp	.+190    	; 0x49aa <MLProcessFIFOData+0x64a>
                                        FIFOData.mlLinearAccBody[i] /= (536870912L / mlxData.mlAccelSens);
                                }
                                FIFOPtr += 4;
                        }
                }
        } else if (FIFOData.mlFIFODataConfig[ML_LINEAR_ACCELERATION] & ML_16_BIT)
    48ec:	48 2e       	mov	r4, r24
    48ee:	55 24       	eor	r5, r5
    48f0:	86 ff       	sbrs	r24, 6
    48f2:	5b c0       	rjmp	.+182    	; 0x49aa <MLProcessFIFOData+0x64a>
                {
                        if ((FIFOData.mlFIFODataConfig[ML_LINEAR_ACCELERATION] >> i) & 0x0001)
                        {
                                FIFOData.mlLinearAccBody[i] = (((long) dmpData[FIFOPtr] << 24) + ((long) dmpData[FIFOPtr + 1] << 16));
                                // 2^29 = 536870912
                                if (mlxData.mlAccelSens != 0)
    48f4:	80 90 6d 03 	lds	r8, 0x036D
    48f8:	90 90 6e 03 	lds	r9, 0x036E
    48fc:	a0 90 6f 03 	lds	r10, 0x036F
    4900:	b0 90 70 03 	lds	r11, 0x0370
    4904:	05 e1       	ldi	r16, 0x15	; 21
    4906:	c0 2e       	mov	r12, r16
    4908:	04 e0       	ldi	r16, 0x04	; 4
    490a:	d0 2e       	mov	r13, r16
    490c:	1d 82       	std	Y+5, r1	; 0x05
    490e:	1c 82       	std	Y+4, r1	; 0x04
                }
        } else if (FIFOData.mlFIFODataConfig[ML_LINEAR_ACCELERATION] & ML_16_BIT)
        {
                for (i = 0; i < 3; i++)
                {
                        if ((FIFOData.mlFIFODataConfig[ML_LINEAR_ACCELERATION] >> i) & 0x0001)
    4910:	c2 01       	movw	r24, r4
    4912:	0c 80       	ldd	r0, Y+4	; 0x04
    4914:	02 c0       	rjmp	.+4      	; 0x491a <MLProcessFIFOData+0x5ba>
    4916:	95 95       	asr	r25
    4918:	87 95       	ror	r24
    491a:	0a 94       	dec	r0
    491c:	e2 f7       	brpl	.-8      	; 0x4916 <MLProcessFIFOData+0x5b6>
    491e:	80 ff       	sbrs	r24, 0
    4920:	36 c0       	rjmp	.+108    	; 0x498e <MLProcessFIFOData+0x62e>
                        {
                                FIFOData.mlLinearAccBody[i] = (((long) dmpData[FIFOPtr] << 24) + ((long) dmpData[FIFOPtr + 1] << 16));
    4922:	e7 2d       	mov	r30, r7
    4924:	ff 27       	eor	r31, r31
    4926:	e7 fd       	sbrc	r30, 7
    4928:	f0 95       	com	r31
    492a:	e2 0d       	add	r30, r2
    492c:	f3 1d       	adc	r31, r3
    492e:	81 81       	ldd	r24, Z+1	; 0x01
    4930:	90 e0       	ldi	r25, 0x00	; 0
    4932:	a0 e0       	ldi	r26, 0x00	; 0
    4934:	b0 e0       	ldi	r27, 0x00	; 0
    4936:	8c 01       	movw	r16, r24
    4938:	ff 24       	eor	r15, r15
    493a:	ee 24       	eor	r14, r14
    493c:	80 81       	ld	r24, Z
    493e:	90 e0       	ldi	r25, 0x00	; 0
    4940:	a0 e0       	ldi	r26, 0x00	; 0
    4942:	b0 e0       	ldi	r27, 0x00	; 0
    4944:	b8 2f       	mov	r27, r24
    4946:	aa 27       	eor	r26, r26
    4948:	99 27       	eor	r25, r25
    494a:	88 27       	eor	r24, r24
    494c:	e8 0e       	add	r14, r24
    494e:	f9 1e       	adc	r15, r25
    4950:	0a 1f       	adc	r16, r26
    4952:	1b 1f       	adc	r17, r27
    4954:	f6 01       	movw	r30, r12
    4956:	e0 82       	st	Z, r14
    4958:	f1 82       	std	Z+1, r15	; 0x01
    495a:	02 83       	std	Z+2, r16	; 0x02
    495c:	13 83       	std	Z+3, r17	; 0x03
                                // 2^29 = 536870912
                                if (mlxData.mlAccelSens != 0)
    495e:	81 14       	cp	r8, r1
    4960:	91 04       	cpc	r9, r1
    4962:	a1 04       	cpc	r10, r1
    4964:	b1 04       	cpc	r11, r1
    4966:	89 f0       	breq	.+34     	; 0x498a <MLProcessFIFOData+0x62a>
                                {
                                        FIFOData.mlLinearAccBody[i] /= (536870912L / mlxData.mlAccelSens);
    4968:	60 e0       	ldi	r22, 0x00	; 0
    496a:	70 e0       	ldi	r23, 0x00	; 0
    496c:	80 e0       	ldi	r24, 0x00	; 0
    496e:	90 e2       	ldi	r25, 0x20	; 32
    4970:	a5 01       	movw	r20, r10
    4972:	94 01       	movw	r18, r8
    4974:	0e 94 c9 38 	call	0x7192	; 0x7192 <__divmodsi4>
    4978:	c8 01       	movw	r24, r16
    497a:	b7 01       	movw	r22, r14
    497c:	0e 94 c9 38 	call	0x7192	; 0x7192 <__divmodsi4>
    4980:	f6 01       	movw	r30, r12
    4982:	20 83       	st	Z, r18
    4984:	31 83       	std	Z+1, r19	; 0x01
    4986:	42 83       	std	Z+2, r20	; 0x02
    4988:	53 83       	std	Z+3, r21	; 0x03
                                }
                                FIFOPtr += 2;
    498a:	f2 e0       	ldi	r31, 0x02	; 2
    498c:	7f 0e       	add	r7, r31
    498e:	2c 81       	ldd	r18, Y+4	; 0x04
    4990:	3d 81       	ldd	r19, Y+5	; 0x05
    4992:	2f 5f       	subi	r18, 0xFF	; 255
    4994:	3f 4f       	sbci	r19, 0xFF	; 255
    4996:	3d 83       	std	Y+5, r19	; 0x05
    4998:	2c 83       	std	Y+4, r18	; 0x04
    499a:	84 e0       	ldi	r24, 0x04	; 4
    499c:	90 e0       	ldi	r25, 0x00	; 0
    499e:	c8 0e       	add	r12, r24
    49a0:	d9 1e       	adc	r13, r25
                                FIFOPtr += 4;
                        }
                }
        } else if (FIFOData.mlFIFODataConfig[ML_LINEAR_ACCELERATION] & ML_16_BIT)
        {
                for (i = 0; i < 3; i++)
    49a2:	23 30       	cpi	r18, 0x03	; 3
    49a4:	31 05       	cpc	r19, r1
    49a6:	09 f0       	breq	.+2      	; 0x49aa <MLProcessFIFOData+0x64a>
    49a8:	b3 cf       	rjmp	.-154    	; 0x4910 <MLProcessFIFOData+0x5b0>
                                }
                                FIFOPtr += 2;
                        }
                }
        }
        if (FIFOData.mlFIFODataConfig[ML_LINEAR_ACCELERATION_WORLD] & ML_32_BIT)
    49aa:	80 91 66 04 	lds	r24, 0x0466
    49ae:	87 ff       	sbrs	r24, 7
    49b0:	84 c0       	rjmp	.+264    	; 0x4aba <MLProcessFIFOData+0x75a>
                {
                        if ((FIFOData.mlFIFODataConfig[ML_LINEAR_ACCELERATION_WORLD] >> i) & 0x0001)
                        {
                                FIFOData.mlLinearAccWorld[i] = (((long) dmpData[FIFOPtr] << 24) + ((long) dmpData[FIFOPtr + 1] << 16)
                                                + ((long) dmpData[FIFOPtr + 2] << 8) + ((int) dmpData[FIFOPtr + 3]));
                                if (mlxData.mlAccelSens != 0)
    49b2:	80 90 6d 03 	lds	r8, 0x036D
    49b6:	90 90 6e 03 	lds	r9, 0x036E
    49ba:	a0 90 6f 03 	lds	r10, 0x036F
    49be:	b0 90 70 03 	lds	r11, 0x0370
    49c2:	e1 e2       	ldi	r30, 0x21	; 33
    49c4:	ce 2e       	mov	r12, r30
    49c6:	e4 e0       	ldi	r30, 0x04	; 4
    49c8:	de 2e       	mov	r13, r30
    49ca:	1d 82       	std	Y+5, r1	; 0x05
    49cc:	1c 82       	std	Y+4, r1	; 0x04
        }
        if (FIFOData.mlFIFODataConfig[ML_LINEAR_ACCELERATION_WORLD] & ML_32_BIT)
        {
                for (i = 0; i < 3; i++)
                {
                        if ((FIFOData.mlFIFODataConfig[ML_LINEAR_ACCELERATION_WORLD] >> i) & 0x0001)
    49ce:	48 2e       	mov	r4, r24
    49d0:	55 24       	eor	r5, r5
    49d2:	c2 01       	movw	r24, r4
    49d4:	0c 80       	ldd	r0, Y+4	; 0x04
    49d6:	02 c0       	rjmp	.+4      	; 0x49dc <MLProcessFIFOData+0x67c>
    49d8:	95 95       	asr	r25
    49da:	87 95       	ror	r24
    49dc:	0a 94       	dec	r0
    49de:	e2 f7       	brpl	.-8      	; 0x49d8 <MLProcessFIFOData+0x678>
    49e0:	80 ff       	sbrs	r24, 0
    49e2:	5e c0       	rjmp	.+188    	; 0x4aa0 <MLProcessFIFOData+0x740>
                        {
                                FIFOData.mlLinearAccWorld[i] = (((long) dmpData[FIFOPtr] << 24) + ((long) dmpData[FIFOPtr + 1] << 16)
    49e4:	e7 2d       	mov	r30, r7
    49e6:	ff 27       	eor	r31, r31
    49e8:	e7 fd       	sbrc	r30, 7
    49ea:	f0 95       	com	r31
    49ec:	e2 0d       	add	r30, r2
    49ee:	f3 1d       	adc	r31, r3
    49f0:	23 81       	ldd	r18, Z+3	; 0x03
    49f2:	80 81       	ld	r24, Z
    49f4:	90 e0       	ldi	r25, 0x00	; 0
    49f6:	a0 e0       	ldi	r26, 0x00	; 0
    49f8:	b0 e0       	ldi	r27, 0x00	; 0
    49fa:	18 2f       	mov	r17, r24
    49fc:	00 27       	eor	r16, r16
    49fe:	ff 24       	eor	r15, r15
    4a00:	ee 24       	eor	r14, r14
    4a02:	e2 0e       	add	r14, r18
    4a04:	f1 1c       	adc	r15, r1
    4a06:	01 1d       	adc	r16, r1
    4a08:	11 1d       	adc	r17, r1
    4a0a:	81 81       	ldd	r24, Z+1	; 0x01
    4a0c:	90 e0       	ldi	r25, 0x00	; 0
    4a0e:	a0 e0       	ldi	r26, 0x00	; 0
    4a10:	b0 e0       	ldi	r27, 0x00	; 0
    4a12:	dc 01       	movw	r26, r24
    4a14:	99 27       	eor	r25, r25
    4a16:	88 27       	eor	r24, r24
    4a18:	e8 0e       	add	r14, r24
    4a1a:	f9 1e       	adc	r15, r25
    4a1c:	0a 1f       	adc	r16, r26
    4a1e:	1b 1f       	adc	r17, r27
    4a20:	82 81       	ldd	r24, Z+2	; 0x02
    4a22:	90 e0       	ldi	r25, 0x00	; 0
    4a24:	a0 e0       	ldi	r26, 0x00	; 0
    4a26:	b0 e0       	ldi	r27, 0x00	; 0
    4a28:	ba 2f       	mov	r27, r26
    4a2a:	a9 2f       	mov	r26, r25
    4a2c:	98 2f       	mov	r25, r24
    4a2e:	88 27       	eor	r24, r24
    4a30:	e8 0e       	add	r14, r24
    4a32:	f9 1e       	adc	r15, r25
    4a34:	0a 1f       	adc	r16, r26
    4a36:	1b 1f       	adc	r17, r27
    4a38:	f6 01       	movw	r30, r12
    4a3a:	e0 82       	st	Z, r14
    4a3c:	f1 82       	std	Z+1, r15	; 0x01
    4a3e:	02 83       	std	Z+2, r16	; 0x02
    4a40:	13 83       	std	Z+3, r17	; 0x03
                                                + ((long) dmpData[FIFOPtr + 2] << 8) + ((int) dmpData[FIFOPtr + 3]));
                                if (mlxData.mlAccelSens != 0)
    4a42:	81 14       	cp	r8, r1
    4a44:	91 04       	cpc	r9, r1
    4a46:	a1 04       	cpc	r10, r1
    4a48:	b1 04       	cpc	r11, r1
    4a4a:	89 f0       	breq	.+34     	; 0x4a6e <MLProcessFIFOData+0x70e>
                                {
                                        FIFOData.mlLinearAccWorld[i] /= (536870912L / mlxData.mlAccelSens);
    4a4c:	60 e0       	ldi	r22, 0x00	; 0
    4a4e:	70 e0       	ldi	r23, 0x00	; 0
    4a50:	80 e0       	ldi	r24, 0x00	; 0
    4a52:	90 e2       	ldi	r25, 0x20	; 32
    4a54:	a5 01       	movw	r20, r10
    4a56:	94 01       	movw	r18, r8
    4a58:	0e 94 c9 38 	call	0x7192	; 0x7192 <__divmodsi4>
    4a5c:	c8 01       	movw	r24, r16
    4a5e:	b7 01       	movw	r22, r14
    4a60:	0e 94 c9 38 	call	0x7192	; 0x7192 <__divmodsi4>
    4a64:	f6 01       	movw	r30, r12
    4a66:	20 83       	st	Z, r18
    4a68:	31 83       	std	Z+1, r19	; 0x01
    4a6a:	42 83       	std	Z+2, r20	; 0x02
    4a6c:	53 83       	std	Z+3, r21	; 0x03
                                }
                                if (i == 2)
    4a6e:	fc 81       	ldd	r31, Y+4	; 0x04
    4a70:	f2 30       	cpi	r31, 0x02	; 2
    4a72:	a1 f4       	brne	.+40     	; 0x4a9c <MLProcessFIFOData+0x73c>
                                        FIFOData.mlLinearAccWorld[2] -= 65536L;
    4a74:	80 91 29 04 	lds	r24, 0x0429
    4a78:	90 91 2a 04 	lds	r25, 0x042A
    4a7c:	a0 91 2b 04 	lds	r26, 0x042B
    4a80:	b0 91 2c 04 	lds	r27, 0x042C
    4a84:	80 50       	subi	r24, 0x00	; 0
    4a86:	90 40       	sbci	r25, 0x00	; 0
    4a88:	a1 40       	sbci	r26, 0x01	; 1
    4a8a:	b0 40       	sbci	r27, 0x00	; 0
    4a8c:	80 93 29 04 	sts	0x0429, r24
    4a90:	90 93 2a 04 	sts	0x042A, r25
    4a94:	a0 93 2b 04 	sts	0x042B, r26
    4a98:	b0 93 2c 04 	sts	0x042C, r27
                                FIFOPtr += 4;
    4a9c:	24 e0       	ldi	r18, 0x04	; 4
    4a9e:	72 0e       	add	r7, r18
    4aa0:	8c 81       	ldd	r24, Y+4	; 0x04
    4aa2:	9d 81       	ldd	r25, Y+5	; 0x05
    4aa4:	01 96       	adiw	r24, 0x01	; 1
    4aa6:	9d 83       	std	Y+5, r25	; 0x05
    4aa8:	8c 83       	std	Y+4, r24	; 0x04
    4aaa:	e4 e0       	ldi	r30, 0x04	; 4
    4aac:	f0 e0       	ldi	r31, 0x00	; 0
    4aae:	ce 0e       	add	r12, r30
    4ab0:	df 1e       	adc	r13, r31
                        }
                }
        }
        if (FIFOData.mlFIFODataConfig[ML_LINEAR_ACCELERATION_WORLD] & ML_32_BIT)
        {
                for (i = 0; i < 3; i++)
    4ab2:	03 97       	sbiw	r24, 0x03	; 3
    4ab4:	09 f0       	breq	.+2      	; 0x4ab8 <MLProcessFIFOData+0x758>
    4ab6:	8d cf       	rjmp	.-230    	; 0x49d2 <MLProcessFIFOData+0x672>
    4ab8:	74 c0       	rjmp	.+232    	; 0x4ba2 <MLProcessFIFOData+0x842>
                                if (i == 2)
                                        FIFOData.mlLinearAccWorld[2] -= 65536L;
                                FIFOPtr += 4;
                        }
                }
        } else if (FIFOData.mlFIFODataConfig[ML_LINEAR_ACCELERATION_WORLD] & ML_16_BIT)
    4aba:	48 2e       	mov	r4, r24
    4abc:	55 24       	eor	r5, r5
    4abe:	86 ff       	sbrs	r24, 6
    4ac0:	70 c0       	rjmp	.+224    	; 0x4ba2 <MLProcessFIFOData+0x842>
                for (i = 0; i < 3; i++)
                {
                        if ((FIFOData.mlFIFODataConfig[ML_LINEAR_ACCELERATION_WORLD] >> i) & 0x0001)
                        {
                                FIFOData.mlLinearAccWorld[i] = (((long) dmpData[FIFOPtr] << 24) + ((long) dmpData[FIFOPtr + 1] << 16));
                                if (mlxData.mlAccelSens != 0)
    4ac2:	80 90 6d 03 	lds	r8, 0x036D
    4ac6:	90 90 6e 03 	lds	r9, 0x036E
    4aca:	a0 90 6f 03 	lds	r10, 0x036F
    4ace:	b0 90 70 03 	lds	r11, 0x0370
    4ad2:	41 e2       	ldi	r20, 0x21	; 33
    4ad4:	c4 2e       	mov	r12, r20
    4ad6:	44 e0       	ldi	r20, 0x04	; 4
    4ad8:	d4 2e       	mov	r13, r20
    4ada:	1d 82       	std	Y+5, r1	; 0x05
    4adc:	1c 82       	std	Y+4, r1	; 0x04
                }
        } else if (FIFOData.mlFIFODataConfig[ML_LINEAR_ACCELERATION_WORLD] & ML_16_BIT)
        {
                for (i = 0; i < 3; i++)
                {
                        if ((FIFOData.mlFIFODataConfig[ML_LINEAR_ACCELERATION_WORLD] >> i) & 0x0001)
    4ade:	c2 01       	movw	r24, r4
    4ae0:	0c 80       	ldd	r0, Y+4	; 0x04
    4ae2:	02 c0       	rjmp	.+4      	; 0x4ae8 <MLProcessFIFOData+0x788>
    4ae4:	95 95       	asr	r25
    4ae6:	87 95       	ror	r24
    4ae8:	0a 94       	dec	r0
    4aea:	e2 f7       	brpl	.-8      	; 0x4ae4 <MLProcessFIFOData+0x784>
    4aec:	80 ff       	sbrs	r24, 0
    4aee:	4d c0       	rjmp	.+154    	; 0x4b8a <MLProcessFIFOData+0x82a>
                        {
                                FIFOData.mlLinearAccWorld[i] = (((long) dmpData[FIFOPtr] << 24) + ((long) dmpData[FIFOPtr + 1] << 16));
    4af0:	e7 2d       	mov	r30, r7
    4af2:	ff 27       	eor	r31, r31
    4af4:	e7 fd       	sbrc	r30, 7
    4af6:	f0 95       	com	r31
    4af8:	e2 0d       	add	r30, r2
    4afa:	f3 1d       	adc	r31, r3
    4afc:	81 81       	ldd	r24, Z+1	; 0x01
    4afe:	90 e0       	ldi	r25, 0x00	; 0
    4b00:	a0 e0       	ldi	r26, 0x00	; 0
    4b02:	b0 e0       	ldi	r27, 0x00	; 0
    4b04:	8c 01       	movw	r16, r24
    4b06:	ff 24       	eor	r15, r15
    4b08:	ee 24       	eor	r14, r14
    4b0a:	80 81       	ld	r24, Z
    4b0c:	90 e0       	ldi	r25, 0x00	; 0
    4b0e:	a0 e0       	ldi	r26, 0x00	; 0
    4b10:	b0 e0       	ldi	r27, 0x00	; 0
    4b12:	b8 2f       	mov	r27, r24
    4b14:	aa 27       	eor	r26, r26
    4b16:	99 27       	eor	r25, r25
    4b18:	88 27       	eor	r24, r24
    4b1a:	e8 0e       	add	r14, r24
    4b1c:	f9 1e       	adc	r15, r25
    4b1e:	0a 1f       	adc	r16, r26
    4b20:	1b 1f       	adc	r17, r27
    4b22:	f6 01       	movw	r30, r12
    4b24:	e0 82       	st	Z, r14
    4b26:	f1 82       	std	Z+1, r15	; 0x01
    4b28:	02 83       	std	Z+2, r16	; 0x02
    4b2a:	13 83       	std	Z+3, r17	; 0x03
                                if (mlxData.mlAccelSens != 0)
    4b2c:	81 14       	cp	r8, r1
    4b2e:	91 04       	cpc	r9, r1
    4b30:	a1 04       	cpc	r10, r1
    4b32:	b1 04       	cpc	r11, r1
    4b34:	89 f0       	breq	.+34     	; 0x4b58 <MLProcessFIFOData+0x7f8>
                                {
                                        FIFOData.mlLinearAccWorld[i] /= (536870912L / mlxData.mlAccelSens);
    4b36:	60 e0       	ldi	r22, 0x00	; 0
    4b38:	70 e0       	ldi	r23, 0x00	; 0
    4b3a:	80 e0       	ldi	r24, 0x00	; 0
    4b3c:	90 e2       	ldi	r25, 0x20	; 32
    4b3e:	a5 01       	movw	r20, r10
    4b40:	94 01       	movw	r18, r8
    4b42:	0e 94 c9 38 	call	0x7192	; 0x7192 <__divmodsi4>
    4b46:	c8 01       	movw	r24, r16
    4b48:	b7 01       	movw	r22, r14
    4b4a:	0e 94 c9 38 	call	0x7192	; 0x7192 <__divmodsi4>
    4b4e:	f6 01       	movw	r30, r12
    4b50:	20 83       	st	Z, r18
    4b52:	31 83       	std	Z+1, r19	; 0x01
    4b54:	42 83       	std	Z+2, r20	; 0x02
    4b56:	53 83       	std	Z+3, r21	; 0x03
                                }
                                if (i == 2)
    4b58:	fc 81       	ldd	r31, Y+4	; 0x04
    4b5a:	f2 30       	cpi	r31, 0x02	; 2
    4b5c:	a1 f4       	brne	.+40     	; 0x4b86 <MLProcessFIFOData+0x826>
                                        FIFOData.mlLinearAccWorld[2] -= 65536L;
    4b5e:	80 91 29 04 	lds	r24, 0x0429
    4b62:	90 91 2a 04 	lds	r25, 0x042A
    4b66:	a0 91 2b 04 	lds	r26, 0x042B
    4b6a:	b0 91 2c 04 	lds	r27, 0x042C
    4b6e:	80 50       	subi	r24, 0x00	; 0
    4b70:	90 40       	sbci	r25, 0x00	; 0
    4b72:	a1 40       	sbci	r26, 0x01	; 1
    4b74:	b0 40       	sbci	r27, 0x00	; 0
    4b76:	80 93 29 04 	sts	0x0429, r24
    4b7a:	90 93 2a 04 	sts	0x042A, r25
    4b7e:	a0 93 2b 04 	sts	0x042B, r26
    4b82:	b0 93 2c 04 	sts	0x042C, r27
                                FIFOPtr += 2;
    4b86:	22 e0       	ldi	r18, 0x02	; 2
    4b88:	72 0e       	add	r7, r18
    4b8a:	8c 81       	ldd	r24, Y+4	; 0x04
    4b8c:	9d 81       	ldd	r25, Y+5	; 0x05
    4b8e:	01 96       	adiw	r24, 0x01	; 1
    4b90:	9d 83       	std	Y+5, r25	; 0x05
    4b92:	8c 83       	std	Y+4, r24	; 0x04
    4b94:	e4 e0       	ldi	r30, 0x04	; 4
    4b96:	f0 e0       	ldi	r31, 0x00	; 0
    4b98:	ce 0e       	add	r12, r30
    4b9a:	df 1e       	adc	r13, r31
                                FIFOPtr += 4;
                        }
                }
        } else if (FIFOData.mlFIFODataConfig[ML_LINEAR_ACCELERATION_WORLD] & ML_16_BIT)
        {
                for (i = 0; i < 3; i++)
    4b9c:	03 97       	sbiw	r24, 0x03	; 3
    4b9e:	09 f0       	breq	.+2      	; 0x4ba2 <MLProcessFIFOData+0x842>
    4ba0:	9e cf       	rjmp	.-196    	; 0x4ade <MLProcessFIFOData+0x77e>
                                FIFOPtr += 2;
                        }
                }
        }

        if (FIFOData.mlFIFODataConfig[ML_CONTROL_DATA] & ML_32_BIT)
    4ba2:	80 91 67 04 	lds	r24, 0x0467
    4ba6:	87 ff       	sbrs	r24, 7
    4ba8:	27 c0       	rjmp	.+78     	; 0x4bf8 <MLProcessFIFOData+0x898>
    4baa:	a9 ee       	ldi	r26, 0xE9	; 233
    4bac:	b3 e0       	ldi	r27, 0x03	; 3
    4bae:	40 e0       	ldi	r20, 0x00	; 0
    4bb0:	50 e0       	ldi	r21, 0x00	; 0
        {
                for (i = 0; i < 4; i++)
                {
                        if ((FIFOData.mlFIFODataConfig[ML_CONTROL_DATA] >> i) & 0x0001)
    4bb2:	68 2f       	mov	r22, r24
    4bb4:	70 e0       	ldi	r23, 0x00	; 0
    4bb6:	cb 01       	movw	r24, r22
    4bb8:	04 2e       	mov	r0, r20
    4bba:	02 c0       	rjmp	.+4      	; 0x4bc0 <MLProcessFIFOData+0x860>
    4bbc:	95 95       	asr	r25
    4bbe:	87 95       	ror	r24
    4bc0:	0a 94       	dec	r0
    4bc2:	e2 f7       	brpl	.-8      	; 0x4bbc <MLProcessFIFOData+0x85c>
    4bc4:	80 ff       	sbrs	r24, 0
    4bc6:	11 c0       	rjmp	.+34     	; 0x4bea <MLProcessFIFOData+0x88a>
                        {
                                mlCtrlxData.mlGridNumDMP[i] = (((long) dmpData[FIFOPtr] << 24) + ((long) dmpData[FIFOPtr + 1] << 16)
    4bc8:	e7 2d       	mov	r30, r7
    4bca:	ff 27       	eor	r31, r31
    4bcc:	e7 fd       	sbrc	r30, 7
    4bce:	f0 95       	com	r31
    4bd0:	e2 0d       	add	r30, r2
    4bd2:	f3 1d       	adc	r31, r3
    4bd4:	32 81       	ldd	r19, Z+2	; 0x02
    4bd6:	20 e0       	ldi	r18, 0x00	; 0
    4bd8:	83 81       	ldd	r24, Z+3	; 0x03
    4bda:	f9 01       	movw	r30, r18
    4bdc:	e8 0f       	add	r30, r24
    4bde:	f1 1d       	adc	r31, r1
    4be0:	11 96       	adiw	r26, 0x01	; 1
    4be2:	fc 93       	st	X, r31
    4be4:	ee 93       	st	-X, r30
                                                + ((long) dmpData[FIFOPtr + 2] << 8) + ((int) dmpData[FIFOPtr + 3]));
                                FIFOPtr += 4;
    4be6:	f4 e0       	ldi	r31, 0x04	; 4
    4be8:	7f 0e       	add	r7, r31
    4bea:	4f 5f       	subi	r20, 0xFF	; 255
    4bec:	5f 4f       	sbci	r21, 0xFF	; 255
    4bee:	12 96       	adiw	r26, 0x02	; 2
                }
        }

        if (FIFOData.mlFIFODataConfig[ML_CONTROL_DATA] & ML_32_BIT)
        {
                for (i = 0; i < 4; i++)
    4bf0:	44 30       	cpi	r20, 0x04	; 4
    4bf2:	51 05       	cpc	r21, r1
    4bf4:	01 f7       	brne	.-64     	; 0x4bb6 <MLProcessFIFOData+0x856>
    4bf6:	1b c0       	rjmp	.+54     	; 0x4c2e <MLProcessFIFOData+0x8ce>
                                mlCtrlxData.mlGridNumDMP[i] = (((long) dmpData[FIFOPtr] << 24) + ((long) dmpData[FIFOPtr + 1] << 16)
                                                + ((long) dmpData[FIFOPtr + 2] << 8) + ((int) dmpData[FIFOPtr + 3]));
                                FIFOPtr += 4;
                        }
                }
        } else if (FIFOData.mlFIFODataConfig[ML_CONTROL_DATA] & ML_16_BIT)
    4bf8:	48 2f       	mov	r20, r24
    4bfa:	50 e0       	ldi	r21, 0x00	; 0
    4bfc:	86 ff       	sbrs	r24, 6
    4bfe:	17 c0       	rjmp	.+46     	; 0x4c2e <MLProcessFIFOData+0x8ce>
    4c00:	e9 ee       	ldi	r30, 0xE9	; 233
    4c02:	f3 e0       	ldi	r31, 0x03	; 3
    4c04:	20 e0       	ldi	r18, 0x00	; 0
    4c06:	30 e0       	ldi	r19, 0x00	; 0
        {
                for (i = 0; i < 4; i++)
                {
                        if ((FIFOData.mlFIFODataConfig[ML_CONTROL_DATA] >> i) & 0x0001)
    4c08:	ca 01       	movw	r24, r20
    4c0a:	02 2e       	mov	r0, r18
    4c0c:	02 c0       	rjmp	.+4      	; 0x4c12 <MLProcessFIFOData+0x8b2>
    4c0e:	95 95       	asr	r25
    4c10:	87 95       	ror	r24
    4c12:	0a 94       	dec	r0
    4c14:	e2 f7       	brpl	.-8      	; 0x4c0e <MLProcessFIFOData+0x8ae>
    4c16:	80 ff       	sbrs	r24, 0
    4c18:	04 c0       	rjmp	.+8      	; 0x4c22 <MLProcessFIFOData+0x8c2>
                        {
                                mlCtrlxData.mlGridNumDMP[i] = (((long) dmpData[FIFOPtr] << 24) + ((long) dmpData[FIFOPtr + 1] << 16));
    4c1a:	11 82       	std	Z+1, r1	; 0x01
    4c1c:	10 82       	st	Z, r1
                                FIFOPtr += 2;
    4c1e:	82 e0       	ldi	r24, 0x02	; 2
    4c20:	78 0e       	add	r7, r24
    4c22:	2f 5f       	subi	r18, 0xFF	; 255
    4c24:	3f 4f       	sbci	r19, 0xFF	; 255
    4c26:	32 96       	adiw	r30, 0x02	; 2
                                FIFOPtr += 4;
                        }
                }
        } else if (FIFOData.mlFIFODataConfig[ML_CONTROL_DATA] & ML_16_BIT)
        {
                for (i = 0; i < 4; i++)
    4c28:	24 30       	cpi	r18, 0x04	; 4
    4c2a:	31 05       	cpc	r19, r1
    4c2c:	69 f7       	brne	.-38     	; 0x4c08 <MLProcessFIFOData+0x8a8>
                                FIFOPtr += 2;
                        }
                }
        }

        if ((FIFOData.mlFIFODataConfig[ML_TEMPERATURE]) & 0x0001)
    4c2e:	80 91 6a 04 	lds	r24, 0x046A
    4c32:	80 ff       	sbrs	r24, 0
    4c34:	23 c0       	rjmp	.+70     	; 0x4c7c <MLProcessFIFOData+0x91c>
        {
                FIFOData.mlTemperature = (((int) dmpData[FIFOPtr] << 8) + ((int) dmpData[FIFOPtr + 1]));
    4c36:	e7 2d       	mov	r30, r7
    4c38:	ff 27       	eor	r31, r31
    4c3a:	e7 fd       	sbrc	r30, 7
    4c3c:	f0 95       	com	r31
    4c3e:	e2 0d       	add	r30, r2
    4c40:	f3 1d       	adc	r31, r3
    4c42:	21 81       	ldd	r18, Z+1	; 0x01
    4c44:	70 81       	ld	r23, Z
    4c46:	60 e0       	ldi	r22, 0x00	; 0
    4c48:	62 0f       	add	r22, r18
    4c4a:	71 1d       	adc	r23, r1
    4c4c:	88 27       	eor	r24, r24
    4c4e:	77 fd       	sbrc	r23, 7
    4c50:	80 95       	com	r24
    4c52:	98 2f       	mov	r25, r24
                if (FIFOData.mlTemperature > 32768L)
                        FIFOData.mlTemperature -= 65536L;
                FIFOData.mlTemperature = (FIFOData.mlTemperature + 8000) * 204;
    4c54:	2c ec       	ldi	r18, 0xCC	; 204
    4c56:	30 e0       	ldi	r19, 0x00	; 0
    4c58:	40 e0       	ldi	r20, 0x00	; 0
    4c5a:	50 e0       	ldi	r21, 0x00	; 0
    4c5c:	0e 94 75 38 	call	0x70ea	; 0x70ea <__mulsi3>
    4c60:	60 50       	subi	r22, 0x00	; 0
    4c62:	79 41       	sbci	r23, 0x19	; 25
    4c64:	87 4e       	sbci	r24, 0xE7	; 231
    4c66:	9f 4f       	sbci	r25, 0xFF	; 255
    4c68:	60 93 45 04 	sts	0x0445, r22
    4c6c:	70 93 46 04 	sts	0x0446, r23
    4c70:	80 93 47 04 	sts	0x0447, r24
    4c74:	90 93 48 04 	sts	0x0448, r25
                FIFOPtr += 2;
    4c78:	92 e0       	ldi	r25, 0x02	; 2
    4c7a:	79 0e       	add	r7, r25
        }
        for (i = 0; i < 6; i++)
        {
                if ((FIFOData.mlFIFODataConfig[ML_RAW_DATA] >> i) & 0x0001)
    4c7c:	80 91 69 04 	lds	r24, 0x0469
    4c80:	68 2f       	mov	r22, r24
    4c82:	70 e0       	ldi	r23, 0x00	; 0
    4c84:	09 e4       	ldi	r16, 0x49	; 73
    4c86:	14 e0       	ldi	r17, 0x04	; 4
    4c88:	40 e0       	ldi	r20, 0x00	; 0
    4c8a:	50 e0       	ldi	r21, 0x00	; 0
    4c8c:	cb 01       	movw	r24, r22
    4c8e:	04 2e       	mov	r0, r20
    4c90:	02 c0       	rjmp	.+4      	; 0x4c96 <MLProcessFIFOData+0x936>
    4c92:	95 95       	asr	r25
    4c94:	87 95       	ror	r24
    4c96:	0a 94       	dec	r0
    4c98:	e2 f7       	brpl	.-8      	; 0x4c92 <MLProcessFIFOData+0x932>
    4c9a:	80 ff       	sbrs	r24, 0
    4c9c:	18 c0       	rjmp	.+48     	; 0x4cce <MLProcessFIFOData+0x96e>
                {
                        // Kionics Accel Data is byte swapped
                        FIFOData.mlSensorData[i] = (((int) dmpData[FIFOPtr + 1] << 8) + ((int) dmpData[FIFOPtr]));
    4c9e:	e7 2d       	mov	r30, r7
    4ca0:	ff 27       	eor	r31, r31
    4ca2:	e7 fd       	sbrc	r30, 7
    4ca4:	f0 95       	com	r31
    4ca6:	e2 0d       	add	r30, r2
    4ca8:	f3 1d       	adc	r31, r3
    4caa:	31 81       	ldd	r19, Z+1	; 0x01
    4cac:	20 e0       	ldi	r18, 0x00	; 0
    4cae:	80 81       	ld	r24, Z
    4cb0:	f9 01       	movw	r30, r18
    4cb2:	e8 0f       	add	r30, r24
    4cb4:	f1 1d       	adc	r31, r1
    4cb6:	cf 01       	movw	r24, r30
    4cb8:	aa 27       	eor	r26, r26
    4cba:	97 fd       	sbrc	r25, 7
    4cbc:	a0 95       	com	r26
    4cbe:	ba 2f       	mov	r27, r26
    4cc0:	f8 01       	movw	r30, r16
    4cc2:	80 83       	st	Z, r24
    4cc4:	91 83       	std	Z+1, r25	; 0x01
    4cc6:	a2 83       	std	Z+2, r26	; 0x02
    4cc8:	b3 83       	std	Z+3, r27	; 0x03
                        if (FIFOData.mlSensorData[i] > 32768L)
                                FIFOData.mlSensorData[i] -= 65536L;
                        FIFOPtr += 2;
    4cca:	f2 e0       	ldi	r31, 0x02	; 2
    4ccc:	7f 0e       	add	r7, r31
    4cce:	4f 5f       	subi	r20, 0xFF	; 255
    4cd0:	5f 4f       	sbci	r21, 0xFF	; 255
    4cd2:	0c 5f       	subi	r16, 0xFC	; 252
    4cd4:	1f 4f       	sbci	r17, 0xFF	; 255
                if (FIFOData.mlTemperature > 32768L)
                        FIFOData.mlTemperature -= 65536L;
                FIFOData.mlTemperature = (FIFOData.mlTemperature + 8000) * 204;
                FIFOPtr += 2;
        }
        for (i = 0; i < 6; i++)
    4cd6:	46 30       	cpi	r20, 0x06	; 6
    4cd8:	51 05       	cpc	r21, r1
    4cda:	c1 f6       	brne	.-80     	; 0x4c8c <MLProcessFIFOData+0x92c>
                                FIFOData.mlSensorData[i] -= 65536L;
                        FIFOPtr += 2;
                }
        }

        if (FIFOData.FIFOProcessCB)
    4cdc:	e0 91 6b 04 	lds	r30, 0x046B
    4ce0:	f0 91 6c 04 	lds	r31, 0x046C
    4ce4:	30 97       	sbiw	r30, 0x00	; 0
    4ce6:	09 f0       	breq	.+2      	; 0x4cea <MLProcessFIFOData+0x98a>
                FIFOData.FIFOProcessCB();
    4ce8:	09 95       	icall

        return ML_SUCCESS;
}
    4cea:	80 e0       	ldi	r24, 0x00	; 0
    4cec:	0f 90       	pop	r0
    4cee:	0f 90       	pop	r0
    4cf0:	0f 90       	pop	r0
    4cf2:	0f 90       	pop	r0
    4cf4:	0f 90       	pop	r0
    4cf6:	cf 91       	pop	r28
    4cf8:	df 91       	pop	r29
    4cfa:	1f 91       	pop	r17
    4cfc:	0f 91       	pop	r16
    4cfe:	ff 90       	pop	r15
    4d00:	ef 90       	pop	r14
    4d02:	df 90       	pop	r13
    4d04:	cf 90       	pop	r12
    4d06:	bf 90       	pop	r11
    4d08:	af 90       	pop	r10
    4d0a:	9f 90       	pop	r9
    4d0c:	8f 90       	pop	r8
    4d0e:	7f 90       	pop	r7
    4d10:	6f 90       	pop	r6
    4d12:	5f 90       	pop	r5
    4d14:	4f 90       	pop	r4
    4d16:	3f 90       	pop	r3
    4d18:	2f 90       	pop	r2
    4d1a:	08 95       	ret

00004d1c <IMUgetTemperature>:
 *  @brief      Returns 1-element vector of temperature
 *  @param[out] data    1-element vector of temperature
 *  @return     0 on success or an error code.
 */
tMLError IMUgetTemperature(long *data)
{
    4d1c:	fc 01       	movw	r30, r24
        if (data == NULL)
    4d1e:	00 97       	sbiw	r24, 0x00	; 0
    4d20:	11 f4       	brne	.+4      	; 0x4d26 <IMUgetTemperature+0xa>
    4d22:	81 e0       	ldi	r24, 0x01	; 1
    4d24:	08 95       	ret
                return ML_ERROR;
        data[0] = FIFOData.mlTemperature;
    4d26:	80 91 45 04 	lds	r24, 0x0445
    4d2a:	90 91 46 04 	lds	r25, 0x0446
    4d2e:	a0 91 47 04 	lds	r26, 0x0447
    4d32:	b0 91 48 04 	lds	r27, 0x0448
    4d36:	80 83       	st	Z, r24
    4d38:	91 83       	std	Z+1, r25	; 0x01
    4d3a:	a2 83       	std	Z+2, r26	; 0x02
    4d3c:	b3 83       	std	Z+3, r27	; 0x03
    4d3e:	80 e0       	ldi	r24, 0x00	; 0
        return ML_SUCCESS;
}
    4d40:	08 95       	ret

00004d42 <IMUgetSensorData>:
 *  @brief      Returns 6-element vector of gyro and accel data
 *  @param[out] data    6-element vector of gyro and accel data
 *  @return     0 on success or an error code.
 */
tMLError IMUgetSensorData(long *data)
{
    4d42:	fc 01       	movw	r30, r24
        if (data == NULL)
    4d44:	00 97       	sbiw	r24, 0x00	; 0
    4d46:	11 f4       	brne	.+4      	; 0x4d4c <IMUgetSensorData+0xa>
    4d48:	81 e0       	ldi	r24, 0x01	; 1
    4d4a:	08 95       	ret
                return ML_ERROR;
        data[0] = FIFOData.mlSensorData[0];
    4d4c:	80 91 49 04 	lds	r24, 0x0449
    4d50:	90 91 4a 04 	lds	r25, 0x044A
    4d54:	a0 91 4b 04 	lds	r26, 0x044B
    4d58:	b0 91 4c 04 	lds	r27, 0x044C
    4d5c:	80 83       	st	Z, r24
    4d5e:	91 83       	std	Z+1, r25	; 0x01
    4d60:	a2 83       	std	Z+2, r26	; 0x02
    4d62:	b3 83       	std	Z+3, r27	; 0x03
        data[1] = FIFOData.mlSensorData[1];
    4d64:	80 91 4d 04 	lds	r24, 0x044D
    4d68:	90 91 4e 04 	lds	r25, 0x044E
    4d6c:	a0 91 4f 04 	lds	r26, 0x044F
    4d70:	b0 91 50 04 	lds	r27, 0x0450
    4d74:	84 83       	std	Z+4, r24	; 0x04
    4d76:	95 83       	std	Z+5, r25	; 0x05
    4d78:	a6 83       	std	Z+6, r26	; 0x06
    4d7a:	b7 83       	std	Z+7, r27	; 0x07
        data[2] = FIFOData.mlSensorData[2];
    4d7c:	80 91 51 04 	lds	r24, 0x0451
    4d80:	90 91 52 04 	lds	r25, 0x0452
    4d84:	a0 91 53 04 	lds	r26, 0x0453
    4d88:	b0 91 54 04 	lds	r27, 0x0454
    4d8c:	80 87       	std	Z+8, r24	; 0x08
    4d8e:	91 87       	std	Z+9, r25	; 0x09
    4d90:	a2 87       	std	Z+10, r26	; 0x0a
    4d92:	b3 87       	std	Z+11, r27	; 0x0b
        data[3] = FIFOData.mlSensorData[3];
    4d94:	80 91 55 04 	lds	r24, 0x0455
    4d98:	90 91 56 04 	lds	r25, 0x0456
    4d9c:	a0 91 57 04 	lds	r26, 0x0457
    4da0:	b0 91 58 04 	lds	r27, 0x0458
    4da4:	84 87       	std	Z+12, r24	; 0x0c
    4da6:	95 87       	std	Z+13, r25	; 0x0d
    4da8:	a6 87       	std	Z+14, r26	; 0x0e
    4daa:	b7 87       	std	Z+15, r27	; 0x0f
        data[4] = FIFOData.mlSensorData[4];
    4dac:	80 91 59 04 	lds	r24, 0x0459
    4db0:	90 91 5a 04 	lds	r25, 0x045A
    4db4:	a0 91 5b 04 	lds	r26, 0x045B
    4db8:	b0 91 5c 04 	lds	r27, 0x045C
    4dbc:	80 8b       	std	Z+16, r24	; 0x10
    4dbe:	91 8b       	std	Z+17, r25	; 0x11
    4dc0:	a2 8b       	std	Z+18, r26	; 0x12
    4dc2:	b3 8b       	std	Z+19, r27	; 0x13
        data[5] = FIFOData.mlSensorData[5];
    4dc4:	80 91 5d 04 	lds	r24, 0x045D
    4dc8:	90 91 5e 04 	lds	r25, 0x045E
    4dcc:	a0 91 5f 04 	lds	r26, 0x045F
    4dd0:	b0 91 60 04 	lds	r27, 0x0460
    4dd4:	84 8b       	std	Z+20, r24	; 0x14
    4dd6:	95 8b       	std	Z+21, r25	; 0x15
    4dd8:	a6 8b       	std	Z+22, r26	; 0x16
    4dda:	b7 8b       	std	Z+23, r27	; 0x17
    4ddc:	80 e0       	ldi	r24, 0x00	; 0
        return ML_SUCCESS;
}
    4dde:	08 95       	ret

00004de0 <IMUgetAngularVelocityWorld>:
        data[0] = (long) (((long long) quat[0] * gyro[0] + (long long) quat[1] * gyro[1] + (long long) quat[2] * gyro[2]) >> 30);
        data[1] = (long) (((long long) quat[3] * gyro[0] + (long long) quat[4] * gyro[1] + (long long) quat[5] * gyro[2]) >> 30);
        data[2] = (long) (((long long) quat[6] * gyro[0] + (long long) quat[7] * gyro[1] + (long long) quat[8] * gyro[2]) >> 30);
        */
        return ML_SUCCESS;
}
    4de0:	80 e0       	ldi	r24, 0x00	; 0
    4de2:	08 95       	ret

00004de4 <IMUgetAccel>:
 * @param[out]  data    3-element vector of acclerometer data in body frame.
 *                      One g = 2^16.
 *  @return     0 on success or an error code.
 */
tMLError IMUgetAccel(long *data)
{
    4de4:	fc 01       	movw	r30, r24
        if (data == NULL)
    4de6:	00 97       	sbiw	r24, 0x00	; 0
    4de8:	11 f4       	brne	.+4      	; 0x4dee <IMUgetAccel+0xa>
    4dea:	81 e0       	ldi	r24, 0x01	; 1
    4dec:	08 95       	ret
                return ML_ERROR;
        data[0] = FIFOData.mlCalibratedData[3];
    4dee:	80 91 39 04 	lds	r24, 0x0439
    4df2:	90 91 3a 04 	lds	r25, 0x043A
    4df6:	a0 91 3b 04 	lds	r26, 0x043B
    4dfa:	b0 91 3c 04 	lds	r27, 0x043C
    4dfe:	80 83       	st	Z, r24
    4e00:	91 83       	std	Z+1, r25	; 0x01
    4e02:	a2 83       	std	Z+2, r26	; 0x02
    4e04:	b3 83       	std	Z+3, r27	; 0x03
        data[1] = FIFOData.mlCalibratedData[4];
    4e06:	80 91 3d 04 	lds	r24, 0x043D
    4e0a:	90 91 3e 04 	lds	r25, 0x043E
    4e0e:	a0 91 3f 04 	lds	r26, 0x043F
    4e12:	b0 91 40 04 	lds	r27, 0x0440
    4e16:	84 83       	std	Z+4, r24	; 0x04
    4e18:	95 83       	std	Z+5, r25	; 0x05
    4e1a:	a6 83       	std	Z+6, r26	; 0x06
    4e1c:	b7 83       	std	Z+7, r27	; 0x07
        data[2] = FIFOData.mlCalibratedData[5];
    4e1e:	80 91 41 04 	lds	r24, 0x0441
    4e22:	90 91 42 04 	lds	r25, 0x0442
    4e26:	a0 91 43 04 	lds	r26, 0x0443
    4e2a:	b0 91 44 04 	lds	r27, 0x0444
    4e2e:	80 87       	std	Z+8, r24	; 0x08
    4e30:	91 87       	std	Z+9, r25	; 0x09
    4e32:	a2 87       	std	Z+10, r26	; 0x0a
    4e34:	b3 87       	std	Z+11, r27	; 0x0b
    4e36:	80 e0       	ldi	r24, 0x00	; 0
        return ML_SUCCESS;
}
    4e38:	08 95       	ret

00004e3a <IMUgetQuaternion>:
 *  @brief      Returns 4-element quaternion vector.
 *  @param[out] data    4-element quaternion vector. One is scaled to 2^30.
 *  @return     0 on success or an error code.
 */
tMLError IMUgetQuaternion(long *data)
{
    4e3a:	fc 01       	movw	r30, r24
        if (data == NULL)
    4e3c:	00 97       	sbiw	r24, 0x00	; 0
    4e3e:	11 f4       	brne	.+4      	; 0x4e44 <IMUgetQuaternion+0xa>
    4e40:	81 e0       	ldi	r24, 0x01	; 1
    4e42:	08 95       	ret
                return ML_ERROR;
        data[0] = FIFOData.mlQuat[0];
    4e44:	80 91 05 04 	lds	r24, 0x0405
    4e48:	90 91 06 04 	lds	r25, 0x0406
    4e4c:	a0 91 07 04 	lds	r26, 0x0407
    4e50:	b0 91 08 04 	lds	r27, 0x0408
    4e54:	80 83       	st	Z, r24
    4e56:	91 83       	std	Z+1, r25	; 0x01
    4e58:	a2 83       	std	Z+2, r26	; 0x02
    4e5a:	b3 83       	std	Z+3, r27	; 0x03
        data[1] = FIFOData.mlQuat[1];
    4e5c:	80 91 09 04 	lds	r24, 0x0409
    4e60:	90 91 0a 04 	lds	r25, 0x040A
    4e64:	a0 91 0b 04 	lds	r26, 0x040B
    4e68:	b0 91 0c 04 	lds	r27, 0x040C
    4e6c:	84 83       	std	Z+4, r24	; 0x04
    4e6e:	95 83       	std	Z+5, r25	; 0x05
    4e70:	a6 83       	std	Z+6, r26	; 0x06
    4e72:	b7 83       	std	Z+7, r27	; 0x07
        data[2] = FIFOData.mlQuat[2];
    4e74:	80 91 0d 04 	lds	r24, 0x040D
    4e78:	90 91 0e 04 	lds	r25, 0x040E
    4e7c:	a0 91 0f 04 	lds	r26, 0x040F
    4e80:	b0 91 10 04 	lds	r27, 0x0410
    4e84:	80 87       	std	Z+8, r24	; 0x08
    4e86:	91 87       	std	Z+9, r25	; 0x09
    4e88:	a2 87       	std	Z+10, r26	; 0x0a
    4e8a:	b3 87       	std	Z+11, r27	; 0x0b
        data[3] = FIFOData.mlQuat[3];
    4e8c:	80 91 11 04 	lds	r24, 0x0411
    4e90:	90 91 12 04 	lds	r25, 0x0412
    4e94:	a0 91 13 04 	lds	r26, 0x0413
    4e98:	b0 91 14 04 	lds	r27, 0x0414
    4e9c:	84 87       	std	Z+12, r24	; 0x0c
    4e9e:	95 87       	std	Z+13, r25	; 0x0d
    4ea0:	a6 87       	std	Z+14, r26	; 0x0e
    4ea2:	b7 87       	std	Z+15, r27	; 0x0f
    4ea4:	80 e0       	ldi	r24, 0x00	; 0
        return ML_SUCCESS;
}
    4ea6:	08 95       	ret

00004ea8 <IMUgetGyro>:
 *  @param[out] data    3-element vector of gyro data in body frame 
 *                      with gravity removed. One degree per second = 2^16.
 *  @return     0 on success or an error code.
 */
tMLError IMUgetGyro(long *data)
{
    4ea8:	fc 01       	movw	r30, r24
        if (data == NULL)
    4eaa:	00 97       	sbiw	r24, 0x00	; 0
    4eac:	11 f4       	brne	.+4      	; 0x4eb2 <IMUgetGyro+0xa>
    4eae:	81 e0       	ldi	r24, 0x01	; 1
    4eb0:	08 95       	ret
                return ML_ERROR;
        data[0] = FIFOData.mlCalibratedData[0];
    4eb2:	80 91 2d 04 	lds	r24, 0x042D
    4eb6:	90 91 2e 04 	lds	r25, 0x042E
    4eba:	a0 91 2f 04 	lds	r26, 0x042F
    4ebe:	b0 91 30 04 	lds	r27, 0x0430
    4ec2:	80 83       	st	Z, r24
    4ec4:	91 83       	std	Z+1, r25	; 0x01
    4ec6:	a2 83       	std	Z+2, r26	; 0x02
    4ec8:	b3 83       	std	Z+3, r27	; 0x03
        data[1] = FIFOData.mlCalibratedData[1];
    4eca:	80 91 31 04 	lds	r24, 0x0431
    4ece:	90 91 32 04 	lds	r25, 0x0432
    4ed2:	a0 91 33 04 	lds	r26, 0x0433
    4ed6:	b0 91 34 04 	lds	r27, 0x0434
    4eda:	84 83       	std	Z+4, r24	; 0x04
    4edc:	95 83       	std	Z+5, r25	; 0x05
    4ede:	a6 83       	std	Z+6, r26	; 0x06
    4ee0:	b7 83       	std	Z+7, r27	; 0x07
        data[2] = FIFOData.mlCalibratedData[2];
    4ee2:	80 91 35 04 	lds	r24, 0x0435
    4ee6:	90 91 36 04 	lds	r25, 0x0436
    4eea:	a0 91 37 04 	lds	r26, 0x0437
    4eee:	b0 91 38 04 	lds	r27, 0x0438
    4ef2:	80 87       	std	Z+8, r24	; 0x08
    4ef4:	91 87       	std	Z+9, r25	; 0x09
    4ef6:	a2 87       	std	Z+10, r26	; 0x0a
    4ef8:	b3 87       	std	Z+11, r27	; 0x0b
    4efa:	80 e0       	ldi	r24, 0x00	; 0
        return ML_SUCCESS;
}
    4efc:	08 95       	ret

00004efe <IMUgetLinearAccel>:
 *  @param[out] data    3-element vector of acclerometer data in body frame
 *                      with gravity removed. One g = 2^16.
 *  @return     0 on success or an error code.
 */
tMLError IMUgetLinearAccel(long *data)
{
    4efe:	fc 01       	movw	r30, r24
        if (data == NULL)
    4f00:	00 97       	sbiw	r24, 0x00	; 0
    4f02:	11 f4       	brne	.+4      	; 0x4f08 <IMUgetLinearAccel+0xa>
    4f04:	81 e0       	ldi	r24, 0x01	; 1
    4f06:	08 95       	ret
                return ML_ERROR;
        data[0] = FIFOData.mlLinearAccBody[0];
    4f08:	80 91 15 04 	lds	r24, 0x0415
    4f0c:	90 91 16 04 	lds	r25, 0x0416
    4f10:	a0 91 17 04 	lds	r26, 0x0417
    4f14:	b0 91 18 04 	lds	r27, 0x0418
    4f18:	80 83       	st	Z, r24
    4f1a:	91 83       	std	Z+1, r25	; 0x01
    4f1c:	a2 83       	std	Z+2, r26	; 0x02
    4f1e:	b3 83       	std	Z+3, r27	; 0x03
        data[1] = FIFOData.mlLinearAccBody[1];
    4f20:	80 91 19 04 	lds	r24, 0x0419
    4f24:	90 91 1a 04 	lds	r25, 0x041A
    4f28:	a0 91 1b 04 	lds	r26, 0x041B
    4f2c:	b0 91 1c 04 	lds	r27, 0x041C
    4f30:	84 83       	std	Z+4, r24	; 0x04
    4f32:	95 83       	std	Z+5, r25	; 0x05
    4f34:	a6 83       	std	Z+6, r26	; 0x06
    4f36:	b7 83       	std	Z+7, r27	; 0x07
        data[2] = FIFOData.mlLinearAccBody[2];
    4f38:	80 91 1d 04 	lds	r24, 0x041D
    4f3c:	90 91 1e 04 	lds	r25, 0x041E
    4f40:	a0 91 1f 04 	lds	r26, 0x041F
    4f44:	b0 91 20 04 	lds	r27, 0x0420
    4f48:	80 87       	std	Z+8, r24	; 0x08
    4f4a:	91 87       	std	Z+9, r25	; 0x09
    4f4c:	a2 87       	std	Z+10, r26	; 0x0a
    4f4e:	b3 87       	std	Z+11, r27	; 0x0b
    4f50:	80 e0       	ldi	r24, 0x00	; 0
        return ML_SUCCESS;
}
    4f52:	08 95       	ret

00004f54 <IMUgetLinearAccelWorld>:
 *  @param[out] data    3-element vector of acclerometer data in world frame
 *                      with gravity removed. One g = 2^16.
 *  @return     0 on success or an error code.
 */
tMLError IMUgetLinearAccelWorld(long *data)
{
    4f54:	fc 01       	movw	r30, r24
        if (data == NULL)
    4f56:	00 97       	sbiw	r24, 0x00	; 0
    4f58:	11 f4       	brne	.+4      	; 0x4f5e <IMUgetLinearAccelWorld+0xa>
    4f5a:	81 e0       	ldi	r24, 0x01	; 1
    4f5c:	08 95       	ret
                return ML_ERROR;
        data[0] = FIFOData.mlLinearAccWorld[0];
    4f5e:	80 91 21 04 	lds	r24, 0x0421
    4f62:	90 91 22 04 	lds	r25, 0x0422
    4f66:	a0 91 23 04 	lds	r26, 0x0423
    4f6a:	b0 91 24 04 	lds	r27, 0x0424
    4f6e:	80 83       	st	Z, r24
    4f70:	91 83       	std	Z+1, r25	; 0x01
    4f72:	a2 83       	std	Z+2, r26	; 0x02
    4f74:	b3 83       	std	Z+3, r27	; 0x03
        data[1] = FIFOData.mlLinearAccWorld[1];
    4f76:	80 91 25 04 	lds	r24, 0x0425
    4f7a:	90 91 26 04 	lds	r25, 0x0426
    4f7e:	a0 91 27 04 	lds	r26, 0x0427
    4f82:	b0 91 28 04 	lds	r27, 0x0428
    4f86:	84 83       	std	Z+4, r24	; 0x04
    4f88:	95 83       	std	Z+5, r25	; 0x05
    4f8a:	a6 83       	std	Z+6, r26	; 0x06
    4f8c:	b7 83       	std	Z+7, r27	; 0x07
        data[2] = FIFOData.mlLinearAccWorld[2];
    4f8e:	80 91 29 04 	lds	r24, 0x0429
    4f92:	90 91 2a 04 	lds	r25, 0x042A
    4f96:	a0 91 2b 04 	lds	r26, 0x042B
    4f9a:	b0 91 2c 04 	lds	r27, 0x042C
    4f9e:	80 87       	std	Z+8, r24	; 0x08
    4fa0:	91 87       	std	Z+9, r25	; 0x09
    4fa2:	a2 87       	std	Z+10, r26	; 0x0a
    4fa4:	b3 87       	std	Z+11, r27	; 0x0b
    4fa6:	80 e0       	ldi	r24, 0x00	; 0
        return ML_SUCCESS;
}
    4fa8:	08 95       	ret

00004faa <IMUgetControlData>:
 *  @brief      Returns 4-element vector of control data.
 *  @param[out] data    4-element vector of control data.
 *  @return     0 for succes or an error code.
 */
tMLError IMUgetControlData(long *data)
{
    4faa:	fc 01       	movw	r30, r24
        if (data == NULL)
    4fac:	00 97       	sbiw	r24, 0x00	; 0
    4fae:	11 f4       	brne	.+4      	; 0x4fb4 <IMUgetControlData+0xa>
    4fb0:	81 e0       	ldi	r24, 0x01	; 1
    4fb2:	08 95       	ret
                return ML_ERROR;
        data[0] = mlCtrlxData.mlGridNumDMP[0];
    4fb4:	80 91 e9 03 	lds	r24, 0x03E9
    4fb8:	90 91 ea 03 	lds	r25, 0x03EA
    4fbc:	aa 27       	eor	r26, r26
    4fbe:	97 fd       	sbrc	r25, 7
    4fc0:	a0 95       	com	r26
    4fc2:	ba 2f       	mov	r27, r26
    4fc4:	80 83       	st	Z, r24
    4fc6:	91 83       	std	Z+1, r25	; 0x01
    4fc8:	a2 83       	std	Z+2, r26	; 0x02
    4fca:	b3 83       	std	Z+3, r27	; 0x03
        data[1] = mlCtrlxData.mlGridNumDMP[1];
    4fcc:	80 91 eb 03 	lds	r24, 0x03EB
    4fd0:	90 91 ec 03 	lds	r25, 0x03EC
    4fd4:	aa 27       	eor	r26, r26
    4fd6:	97 fd       	sbrc	r25, 7
    4fd8:	a0 95       	com	r26
    4fda:	ba 2f       	mov	r27, r26
    4fdc:	84 83       	std	Z+4, r24	; 0x04
    4fde:	95 83       	std	Z+5, r25	; 0x05
    4fe0:	a6 83       	std	Z+6, r26	; 0x06
    4fe2:	b7 83       	std	Z+7, r27	; 0x07
        data[2] = mlCtrlxData.mlGridNumDMP[2];
    4fe4:	80 91 ed 03 	lds	r24, 0x03ED
    4fe8:	90 91 ee 03 	lds	r25, 0x03EE
    4fec:	aa 27       	eor	r26, r26
    4fee:	97 fd       	sbrc	r25, 7
    4ff0:	a0 95       	com	r26
    4ff2:	ba 2f       	mov	r27, r26
    4ff4:	80 87       	std	Z+8, r24	; 0x08
    4ff6:	91 87       	std	Z+9, r25	; 0x09
    4ff8:	a2 87       	std	Z+10, r26	; 0x0a
    4ffa:	b3 87       	std	Z+11, r27	; 0x0b
        data[3] = mlCtrlxData.mlGridNumDMP[3];
    4ffc:	80 91 ef 03 	lds	r24, 0x03EF
    5000:	90 91 f0 03 	lds	r25, 0x03F0
    5004:	aa 27       	eor	r26, r26
    5006:	97 fd       	sbrc	r25, 7
    5008:	a0 95       	com	r26
    500a:	ba 2f       	mov	r27, r26
    500c:	84 87       	std	Z+12, r24	; 0x0c
    500e:	95 87       	std	Z+13, r25	; 0x0d
    5010:	a6 87       	std	Z+14, r26	; 0x0e
    5012:	b7 87       	std	Z+15, r27	; 0x0f
    5014:	80 e0       	ldi	r24, 0x00	; 0
        return ML_SUCCESS;

}
    5016:	08 95       	ret

00005018 <quaternionToRotationMatrix>:
        rot[5] = (long) (((long long) quat[2] * quat[3] - (long long) quat[1] * quat[0]) / 536870912L);
        rot[6] = (long) (((long long) quat[1] * quat[3] - (long long) quat[2] * quat[0]) / 536870912L);
        rot[7] = (long) (((long long) quat[2] * quat[3] + (long long) quat[1] * quat[0]) / 536870912L);
        rot[8] = (long) (((long long) quat[3] * quat[3] + (long long) quat[0] * quat[0]) / 536870912L - 1073741824L);
        */
}
    5018:	08 95       	ret

0000501a <MLSetProcessedFIFOCallback>:
 *  @param[in]  func    A user defined callback function.
 *
 *  @return ML_SUCCESS if successful, or non-zero error code otherwise.
 */
tMLError MLSetProcessedFIFOCallback(void(*func)(void))
{
    501a:	cf 93       	push	r28
    501c:	df 93       	push	r29
    501e:	ec 01       	movw	r28, r24
        if (isCompatible(IMU_C_OPEN | IMU_C_START, IMU_C_OPEN_CALLED) != ML_SUCCESS)
    5020:	83 e0       	ldi	r24, 0x03	; 3
    5022:	61 e0       	ldi	r22, 0x01	; 1
    5024:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <isCompatible>
    5028:	88 23       	and	r24, r24
    502a:	11 f0       	breq	.+4      	; 0x5030 <MLSetProcessedFIFOCallback+0x16>
    502c:	81 e0       	ldi	r24, 0x01	; 1
    502e:	05 c0       	rjmp	.+10     	; 0x503a <MLSetProcessedFIFOCallback+0x20>
                return ML_ERROR;

        FIFOData.FIFOProcessCB = func;
    5030:	d0 93 6c 04 	sts	0x046C, r29
    5034:	c0 93 6b 04 	sts	0x046B, r28
    5038:	80 e0       	ldi	r24, 0x00	; 0

        return ML_SUCCESS;
}
    503a:	df 91       	pop	r29
    503c:	cf 91       	pop	r28
    503e:	08 95       	ret

00005040 <IMUsetFIFORate>:
 *          (DMP Sample Rate) / (fifoRate + 1).
 *
 * @return  ML_SUCCESS if successful, ML error code on any failure.
 */
tMLError IMUsetFIFORate(unsigned short fifoRate)
{
    5040:	0f 93       	push	r16
    5042:	1f 93       	push	r17
    5044:	df 93       	push	r29
    5046:	cf 93       	push	r28
    5048:	00 d0       	rcall	.+0      	; 0x504a <IMUsetFIFORate+0xa>
    504a:	cd b7       	in	r28, 0x3d	; 61
    504c:	de b7       	in	r29, 0x3e	; 62
    504e:	8c 01       	movw	r16, r24

        unsigned char regs[2] = { 0 };
    5050:	1a 82       	std	Y+2, r1	; 0x02
    5052:	19 82       	std	Y+1, r1	; 0x01

        if (isCompatible(IMU_C_OPEN | IMU_C_START, IMU_C_OPEN_CALLED) != ML_SUCCESS)
    5054:	83 e0       	ldi	r24, 0x03	; 3
    5056:	61 e0       	ldi	r22, 0x01	; 1
    5058:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <isCompatible>
    505c:	88 23       	and	r24, r24
    505e:	11 f0       	breq	.+4      	; 0x5064 <IMUsetFIFORate+0x24>
    5060:	81 e0       	ldi	r24, 0x01	; 1
    5062:	0f c0       	rjmp	.+30     	; 0x5082 <IMUsetFIFORate+0x42>
                return ML_ERROR;

        FIFOData.mlFIFORate = fifoRate;
    5064:	00 93 01 04 	sts	0x0401, r16
    5068:	10 93 02 04 	sts	0x0402, r17

        regs[0] = fifoRate / 256;
    506c:	19 83       	std	Y+1, r17	; 0x01
        regs[1] = fifoRate % 256;
    506e:	0a 83       	std	Y+2, r16	; 0x02

        return MLDLSetMemoryMPU(KEY_D_0_22, 2, regs);
    5070:	88 e1       	ldi	r24, 0x18	; 24
    5072:	90 e0       	ldi	r25, 0x00	; 0
    5074:	62 e0       	ldi	r22, 0x02	; 2
    5076:	70 e0       	ldi	r23, 0x00	; 0
    5078:	ae 01       	movw	r20, r28
    507a:	4f 5f       	subi	r20, 0xFF	; 255
    507c:	5f 4f       	sbci	r21, 0xFF	; 255
    507e:	0e 94 be 0a 	call	0x157c	; 0x157c <MLDLSetMemoryMPU>
}
    5082:	0f 90       	pop	r0
    5084:	0f 90       	pop	r0
    5086:	cf 91       	pop	r28
    5088:	df 91       	pop	r29
    508a:	1f 91       	pop	r17
    508c:	0f 91       	pop	r16
    508e:	08 95       	ret

00005090 <IMUsetFIFOFooter>:
/** 
 * @internal
 * Puts footer on FIFO data.
 */
static tMLError IMUsetFIFOFooter()
{
    5090:	df 93       	push	r29
    5092:	cf 93       	push	r28
    5094:	0f 92       	push	r0
    5096:	cd b7       	in	r28, 0x3d	; 61
    5098:	de b7       	in	r29, 0x3e	; 62
        unsigned char regs = DINA30;
    509a:	80 e3       	ldi	r24, 0x30	; 48
    509c:	89 83       	std	Y+1, r24	; 0x01
        uint_fast8_t tmpCount;
        int_fast8_t i, j;

        if (MLDLSetMemoryMPU(KEY_CFG_16, 1, &regs) != ML_SUCCESS)
    509e:	84 e1       	ldi	r24, 0x14	; 20
    50a0:	90 e0       	ldi	r25, 0x00	; 0
    50a2:	61 e0       	ldi	r22, 0x01	; 1
    50a4:	70 e0       	ldi	r23, 0x00	; 0
    50a6:	ae 01       	movw	r20, r28
    50a8:	4f 5f       	subi	r20, 0xFF	; 255
    50aa:	5f 4f       	sbci	r21, 0xFF	; 255
    50ac:	0e 94 be 0a 	call	0x157c	; 0x157c <MLDLSetMemoryMPU>
    50b0:	88 23       	and	r24, r24
    50b2:	11 f0       	breq	.+4      	; 0x50b8 <IMUsetFIFOFooter+0x28>
    50b4:	81 e0       	ldi	r24, 0x01	; 1
    50b6:	30 c0       	rjmp	.+96     	; 0x5118 <IMUsetFIFOFooter+0x88>
                return ML_ERROR;
        FIFOData.mlFIFODataConfig[ML_FOOTER] = 0x0001 | ML_16_BIT;
    50b8:	81 e4       	ldi	r24, 0x41	; 65
    50ba:	80 93 68 04 	sts	0x0468, r24

        FIFOData.mlFIFOPacketSize = 0;
    50be:	10 92 04 04 	sts	0x0404, r1
    50c2:	10 92 03 04 	sts	0x0403, r1
    50c6:	e1 e6       	ldi	r30, 0x61	; 97
    50c8:	f4 e0       	ldi	r31, 0x04	; 4
    50ca:	60 e0       	ldi	r22, 0x00	; 0
    50cc:	70 e0       	ldi	r23, 0x00	; 0
    50ce:	18 c0       	rjmp	.+48     	; 0x5100 <IMUsetFIFOFooter+0x70>
        for (i = 0; i < NUMFIFOELEMENTS; i++)
        {
                tmpCount = 0;
                for (j = 0; j < 6; j++)
                {
                        if ((FIFOData.mlFIFODataConfig[i] >> j) & 0x0001)
    50d0:	cd 01       	movw	r24, r26
    50d2:	02 2e       	mov	r0, r18
    50d4:	02 c0       	rjmp	.+4      	; 0x50da <IMUsetFIFOFooter+0x4a>
    50d6:	95 95       	asr	r25
    50d8:	87 95       	ror	r24
    50da:	0a 94       	dec	r0
    50dc:	e2 f7       	brpl	.-8      	; 0x50d6 <IMUsetFIFOFooter+0x46>
    50de:	80 fd       	sbrc	r24, 0
                        {
                                tmpCount += 2;
    50e0:	4e 5f       	subi	r20, 0xFE	; 254
    50e2:	2f 5f       	subi	r18, 0xFF	; 255
    50e4:	3f 4f       	sbci	r19, 0xFF	; 255

        FIFOData.mlFIFOPacketSize = 0;
        for (i = 0; i < NUMFIFOELEMENTS; i++)
        {
                tmpCount = 0;
                for (j = 0; j < 6; j++)
    50e6:	26 30       	cpi	r18, 0x06	; 6
    50e8:	31 05       	cpc	r19, r1
    50ea:	91 f7       	brne	.-28     	; 0x50d0 <IMUsetFIFOFooter+0x40>
                        if ((FIFOData.mlFIFODataConfig[i] >> j) & 0x0001)
                        {
                                tmpCount += 2;
                        }
                }
                if (FIFOData.mlFIFODataConfig[i] & ML_32_BIT)
    50ec:	80 81       	ld	r24, Z
    50ee:	87 fd       	sbrc	r24, 7
                {
                        tmpCount *= 2;
    50f0:	44 0f       	add	r20, r20
                }
                FIFOData.mlFIFOPacketSize += tmpCount;
    50f2:	64 0f       	add	r22, r20
    50f4:	71 1d       	adc	r23, r1
    50f6:	31 96       	adiw	r30, 0x01	; 1
        if (MLDLSetMemoryMPU(KEY_CFG_16, 1, &regs) != ML_SUCCESS)
                return ML_ERROR;
        FIFOData.mlFIFODataConfig[ML_FOOTER] = 0x0001 | ML_16_BIT;

        FIFOData.mlFIFOPacketSize = 0;
        for (i = 0; i < NUMFIFOELEMENTS; i++)
    50f8:	84 e0       	ldi	r24, 0x04	; 4
    50fa:	eb 36       	cpi	r30, 0x6B	; 107
    50fc:	f8 07       	cpc	r31, r24
    50fe:	39 f0       	breq	.+14     	; 0x510e <IMUsetFIFOFooter+0x7e>
        {
                tmpCount = 0;
                for (j = 0; j < 6; j++)
                {
                        if ((FIFOData.mlFIFODataConfig[i] >> j) & 0x0001)
    5100:	80 81       	ld	r24, Z
    5102:	a8 2f       	mov	r26, r24
    5104:	b0 e0       	ldi	r27, 0x00	; 0
    5106:	40 e0       	ldi	r20, 0x00	; 0
    5108:	20 e0       	ldi	r18, 0x00	; 0
    510a:	30 e0       	ldi	r19, 0x00	; 0
    510c:	e1 cf       	rjmp	.-62     	; 0x50d0 <IMUsetFIFOFooter+0x40>
    510e:	70 93 04 04 	sts	0x0404, r23
    5112:	60 93 03 04 	sts	0x0403, r22
    5116:	80 e0       	ldi	r24, 0x00	; 0
                }
                FIFOData.mlFIFOPacketSize += tmpCount;
        }

        return ML_SUCCESS;
}
    5118:	0f 90       	pop	r0
    511a:	cf 91       	pop	r28
    511c:	df 91       	pop	r29
    511e:	08 95       	ret

00005120 <IMUsendControlDataToFIFO>:
 *            for a subset.
 *  @param[in] accuracy Set to ML_32_BIT for 32-bit data, or ML_16_BIT for 16
 *             bit data.
 */
tMLError IMUsendControlDataToFIFO(uint_fast8_t elements, uint_fast8_t accuracy)
{
    5120:	0f 93       	push	r16
    5122:	1f 93       	push	r17
    5124:	df 93       	push	r29
    5126:	cf 93       	push	r28
    5128:	00 d0       	rcall	.+0      	; 0x512a <IMUsendControlDataToFIFO+0xa>
    512a:	00 d0       	rcall	.+0      	; 0x512c <IMUsendControlDataToFIFO+0xc>
    512c:	0f 92       	push	r0
    512e:	cd b7       	in	r28, 0x3d	; 61
    5130:	de b7       	in	r29, 0x3e	; 62
    5132:	18 2f       	mov	r17, r24
    5134:	06 2f       	mov	r16, r22

        unsigned char regs[5] = { DINAF8 + 1, DINA20, DINA28, DINA30, DINA38 };
    5136:	de 01       	movw	r26, r28
    5138:	11 96       	adiw	r26, 0x01	; 1
    513a:	e7 eb       	ldi	r30, 0xB7	; 183
    513c:	f0 e0       	ldi	r31, 0x00	; 0
    513e:	85 e0       	ldi	r24, 0x05	; 5
    5140:	01 90       	ld	r0, Z+
    5142:	0d 92       	st	X+, r0
    5144:	81 50       	subi	r24, 0x01	; 1
    5146:	e1 f7       	brne	.-8      	; 0x5140 <IMUsendControlDataToFIFO+0x20>

        if (isCompatible(IMU_C_OPEN | IMU_C_START, IMU_C_OPEN_CALLED) != ML_SUCCESS)
    5148:	83 e0       	ldi	r24, 0x03	; 3
    514a:	61 e0       	ldi	r22, 0x01	; 1
    514c:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <isCompatible>
    5150:	88 23       	and	r24, r24
    5152:	39 f5       	brne	.+78     	; 0x51a2 <IMUsendControlDataToFIFO+0x82>
                return ML_ERROR;
        if (accuracy == ML_16_BIT)
    5154:	00 34       	cpi	r16, 0x40	; 64
    5156:	11 f4       	brne	.+4      	; 0x515c <IMUsendControlDataToFIFO+0x3c>
                regs[0] = DINAF8 + 2;
    5158:	8a ef       	ldi	r24, 0xFA	; 250
    515a:	89 83       	std	Y+1, r24	; 0x01
        if ((elements & ML_ELEMENT_1) == 0)
    515c:	91 2f       	mov	r25, r17
    515e:	10 fd       	sbrc	r17, 0
    5160:	02 c0       	rjmp	.+4      	; 0x5166 <IMUsendControlDataToFIFO+0x46>
                regs[1] = DINAA0 + 3;
    5162:	83 ea       	ldi	r24, 0xA3	; 163
    5164:	8a 83       	std	Y+2, r24	; 0x02
        if ((elements & ML_ELEMENT_2) == 0)
    5166:	91 fd       	sbrc	r25, 1
    5168:	02 c0       	rjmp	.+4      	; 0x516e <IMUsendControlDataToFIFO+0x4e>
                regs[2] = DINAA0 + 3;
    516a:	83 ea       	ldi	r24, 0xA3	; 163
    516c:	8b 83       	std	Y+3, r24	; 0x03
        if ((elements & ML_ELEMENT_3) == 0)
    516e:	92 fd       	sbrc	r25, 2
    5170:	02 c0       	rjmp	.+4      	; 0x5176 <IMUsendControlDataToFIFO+0x56>
                regs[3] = DINAA0 + 3;
    5172:	83 ea       	ldi	r24, 0xA3	; 163
    5174:	8c 83       	std	Y+4, r24	; 0x04
        if ((elements & ML_ELEMENT_4) == 0)
    5176:	93 fd       	sbrc	r25, 3
    5178:	02 c0       	rjmp	.+4      	; 0x517e <IMUsendControlDataToFIFO+0x5e>
                regs[3] = DINAA0 + 3;
    517a:	83 ea       	ldi	r24, 0xA3	; 163
    517c:	8c 83       	std	Y+4, r24	; 0x04

        if (MLDLSetMemoryMPU(KEY_CFG_1, 5, regs) != ML_SUCCESS)
    517e:	86 e0       	ldi	r24, 0x06	; 6
    5180:	90 e0       	ldi	r25, 0x00	; 0
    5182:	65 e0       	ldi	r22, 0x05	; 5
    5184:	70 e0       	ldi	r23, 0x00	; 0
    5186:	ae 01       	movw	r20, r28
    5188:	4f 5f       	subi	r20, 0xFF	; 255
    518a:	5f 4f       	sbci	r21, 0xFF	; 255
    518c:	0e 94 be 0a 	call	0x157c	; 0x157c <MLDLSetMemoryMPU>
    5190:	88 23       	and	r24, r24
    5192:	39 f4       	brne	.+14     	; 0x51a2 <IMUsendControlDataToFIFO+0x82>
                return ML_ERROR;
        FIFOData.mlFIFODataConfig[ML_CONTROL_DATA] = (0x000f & elements) | accuracy;
    5194:	1f 70       	andi	r17, 0x0F	; 15
    5196:	01 2b       	or	r16, r17
    5198:	00 93 67 04 	sts	0x0467, r16
        return IMUsetFIFOFooter();
    519c:	0e 94 48 28 	call	0x5090	; 0x5090 <IMUsetFIFOFooter>
    51a0:	01 c0       	rjmp	.+2      	; 0x51a4 <IMUsendControlDataToFIFO+0x84>
    51a2:	81 e0       	ldi	r24, 0x01	; 1
}
    51a4:	0f 90       	pop	r0
    51a6:	0f 90       	pop	r0
    51a8:	0f 90       	pop	r0
    51aa:	0f 90       	pop	r0
    51ac:	0f 90       	pop	r0
    51ae:	cf 91       	pop	r28
    51b0:	df 91       	pop	r29
    51b2:	1f 91       	pop	r17
    51b4:	0f 91       	pop	r16
    51b6:	08 95       	ret

000051b8 <IMUsendLinearAccelWorldToFIFO>:
 *            for a subset.
 *  @param[in] accuracy Set to ML_32_BIT for 32-bit data, or ML_16_BIT for 16
 *             bit data.
 */
tMLError IMUsendLinearAccelWorldToFIFO(uint_fast8_t elements, uint_fast8_t accuracy)
{
    51b8:	0f 93       	push	r16
    51ba:	1f 93       	push	r17
    51bc:	df 93       	push	r29
    51be:	cf 93       	push	r28
    51c0:	00 d0       	rcall	.+0      	; 0x51c2 <IMUsendLinearAccelWorldToFIFO+0xa>
    51c2:	00 d0       	rcall	.+0      	; 0x51c4 <IMUsendLinearAccelWorldToFIFO+0xc>
    51c4:	00 d0       	rcall	.+0      	; 0x51c6 <IMUsendLinearAccelWorldToFIFO+0xe>
    51c6:	cd b7       	in	r28, 0x3d	; 61
    51c8:	de b7       	in	r29, 0x3e	; 62
    51ca:	18 2f       	mov	r17, r24
    51cc:	06 2f       	mov	r16, r22

        unsigned char regs[6] = { DINAF8 + 1, DINA20, DINA90 + 11, DINA20, DINA90 + 8, DINA20 };
    51ce:	de 01       	movw	r26, r28
    51d0:	11 96       	adiw	r26, 0x01	; 1
    51d2:	ec eb       	ldi	r30, 0xBC	; 188
    51d4:	f0 e0       	ldi	r31, 0x00	; 0
    51d6:	86 e0       	ldi	r24, 0x06	; 6
    51d8:	01 90       	ld	r0, Z+
    51da:	0d 92       	st	X+, r0
    51dc:	81 50       	subi	r24, 0x01	; 1
    51de:	e1 f7       	brne	.-8      	; 0x51d8 <IMUsendLinearAccelWorldToFIFO+0x20>

        if (isCompatible(IMU_C_OPEN | IMU_C_START, IMU_C_OPEN_CALLED) != ML_SUCCESS)
    51e0:	83 e0       	ldi	r24, 0x03	; 3
    51e2:	61 e0       	ldi	r22, 0x01	; 1
    51e4:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <isCompatible>
    51e8:	88 23       	and	r24, r24
    51ea:	19 f5       	brne	.+70     	; 0x5232 <IMUsendLinearAccelWorldToFIFO+0x7a>
                return ML_ERROR;
        if (accuracy == ML_16_BIT)
    51ec:	00 34       	cpi	r16, 0x40	; 64
    51ee:	11 f4       	brne	.+4      	; 0x51f4 <IMUsendLinearAccelWorldToFIFO+0x3c>
                regs[0] = DINAF8 + 2;
    51f0:	8a ef       	ldi	r24, 0xFA	; 250
    51f2:	89 83       	std	Y+1, r24	; 0x01
        if ((elements & ML_ELEMENT_1) == 0)
    51f4:	91 2f       	mov	r25, r17
    51f6:	10 fd       	sbrc	r17, 0
    51f8:	02 c0       	rjmp	.+4      	; 0x51fe <IMUsendLinearAccelWorldToFIFO+0x46>
                regs[1] = DINAA0 + 3;
    51fa:	83 ea       	ldi	r24, 0xA3	; 163
    51fc:	8a 83       	std	Y+2, r24	; 0x02
        if ((elements & ML_ELEMENT_2) == 0)
    51fe:	91 fd       	sbrc	r25, 1
    5200:	02 c0       	rjmp	.+4      	; 0x5206 <IMUsendLinearAccelWorldToFIFO+0x4e>
                regs[3] = DINAA0 + 3;
    5202:	83 ea       	ldi	r24, 0xA3	; 163
    5204:	8c 83       	std	Y+4, r24	; 0x04
        if ((elements & ML_ELEMENT_3) == 0)
    5206:	92 fd       	sbrc	r25, 2
    5208:	02 c0       	rjmp	.+4      	; 0x520e <IMUsendLinearAccelWorldToFIFO+0x56>
                regs[3] = DINAA0 + 3;
    520a:	83 ea       	ldi	r24, 0xA3	; 163
    520c:	8c 83       	std	Y+4, r24	; 0x04

        if (MLDLSetMemoryMPU(KEY_CFG_13, 6, regs) != ML_SUCCESS)
    520e:	82 e1       	ldi	r24, 0x12	; 18
    5210:	90 e0       	ldi	r25, 0x00	; 0
    5212:	66 e0       	ldi	r22, 0x06	; 6
    5214:	70 e0       	ldi	r23, 0x00	; 0
    5216:	ae 01       	movw	r20, r28
    5218:	4f 5f       	subi	r20, 0xFF	; 255
    521a:	5f 4f       	sbci	r21, 0xFF	; 255
    521c:	0e 94 be 0a 	call	0x157c	; 0x157c <MLDLSetMemoryMPU>
    5220:	88 23       	and	r24, r24
    5222:	39 f4       	brne	.+14     	; 0x5232 <IMUsendLinearAccelWorldToFIFO+0x7a>
                return ML_ERROR;
        FIFOData.mlFIFODataConfig[ML_LINEAR_ACCELERATION_WORLD] = (0x0007 & elements) | accuracy;
    5224:	17 70       	andi	r17, 0x07	; 7
    5226:	01 2b       	or	r16, r17
    5228:	00 93 66 04 	sts	0x0466, r16
        return IMUsetFIFOFooter();
    522c:	0e 94 48 28 	call	0x5090	; 0x5090 <IMUsetFIFOFooter>
    5230:	01 c0       	rjmp	.+2      	; 0x5234 <IMUsendLinearAccelWorldToFIFO+0x7c>
    5232:	81 e0       	ldi	r24, 0x01	; 1
}
    5234:	26 96       	adiw	r28, 0x06	; 6
    5236:	0f b6       	in	r0, 0x3f	; 63
    5238:	f8 94       	cli
    523a:	de bf       	out	0x3e, r29	; 62
    523c:	0f be       	out	0x3f, r0	; 63
    523e:	cd bf       	out	0x3d, r28	; 61
    5240:	cf 91       	pop	r28
    5242:	df 91       	pop	r29
    5244:	1f 91       	pop	r17
    5246:	0f 91       	pop	r16
    5248:	08 95       	ret

0000524a <IMUsendLinearAccelToFIFO>:
 *            for a subset.
 *  @param[in] accuracy Set to ML_32_BIT for 32-bit data, or ML_16_BIT for 16
 *             bit data.
 */
tMLError IMUsendLinearAccelToFIFO(uint_fast8_t elements, uint_fast8_t accuracy)
{
    524a:	0f 93       	push	r16
    524c:	1f 93       	push	r17
    524e:	df 93       	push	r29
    5250:	cf 93       	push	r28
    5252:	00 d0       	rcall	.+0      	; 0x5254 <IMUsendLinearAccelToFIFO+0xa>
    5254:	00 d0       	rcall	.+0      	; 0x5256 <IMUsendLinearAccelToFIFO+0xc>
    5256:	cd b7       	in	r28, 0x3d	; 61
    5258:	de b7       	in	r29, 0x3e	; 62
    525a:	18 2f       	mov	r17, r24
    525c:	06 2f       	mov	r16, r22

        unsigned char regs[4] = { DINAF8 + 1, DINA28, DINA30, DINA38 };
    525e:	89 ef       	ldi	r24, 0xF9	; 249
    5260:	89 83       	std	Y+1, r24	; 0x01
    5262:	88 e2       	ldi	r24, 0x28	; 40
    5264:	8a 83       	std	Y+2, r24	; 0x02
    5266:	80 e3       	ldi	r24, 0x30	; 48
    5268:	8b 83       	std	Y+3, r24	; 0x03
    526a:	88 e3       	ldi	r24, 0x38	; 56
    526c:	8c 83       	std	Y+4, r24	; 0x04

        if (isCompatible(IMU_C_OPEN | IMU_C_START, IMU_C_OPEN_CALLED) != ML_SUCCESS)
    526e:	83 e0       	ldi	r24, 0x03	; 3
    5270:	61 e0       	ldi	r22, 0x01	; 1
    5272:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <isCompatible>
    5276:	88 23       	and	r24, r24
    5278:	19 f5       	brne	.+70     	; 0x52c0 <IMUsendLinearAccelToFIFO+0x76>
                return ML_ERROR;
        if (accuracy == ML_16_BIT)
    527a:	00 34       	cpi	r16, 0x40	; 64
    527c:	11 f4       	brne	.+4      	; 0x5282 <IMUsendLinearAccelToFIFO+0x38>
                regs[0] = DINAF8 + 2;
    527e:	8a ef       	ldi	r24, 0xFA	; 250
    5280:	89 83       	std	Y+1, r24	; 0x01
        if ((elements & ML_ELEMENT_1) == 0)
    5282:	91 2f       	mov	r25, r17
    5284:	10 fd       	sbrc	r17, 0
    5286:	02 c0       	rjmp	.+4      	; 0x528c <IMUsendLinearAccelToFIFO+0x42>
                regs[1] = DINAA0 + 3;
    5288:	83 ea       	ldi	r24, 0xA3	; 163
    528a:	8a 83       	std	Y+2, r24	; 0x02
        if ((elements & ML_ELEMENT_2) == 0)
    528c:	91 fd       	sbrc	r25, 1
    528e:	02 c0       	rjmp	.+4      	; 0x5294 <IMUsendLinearAccelToFIFO+0x4a>
                regs[2] = DINAA0 + 3;
    5290:	83 ea       	ldi	r24, 0xA3	; 163
    5292:	8b 83       	std	Y+3, r24	; 0x03
        if ((elements & ML_ELEMENT_3) == 0)
    5294:	92 fd       	sbrc	r25, 2
    5296:	02 c0       	rjmp	.+4      	; 0x529c <IMUsendLinearAccelToFIFO+0x52>
                regs[3] = DINAA0 + 3;
    5298:	83 ea       	ldi	r24, 0xA3	; 163
    529a:	8c 83       	std	Y+4, r24	; 0x04

        if (MLDLSetMemoryMPU(KEY_CFG_12, 4, regs) != ML_SUCCESS)
    529c:	81 e1       	ldi	r24, 0x11	; 17
    529e:	90 e0       	ldi	r25, 0x00	; 0
    52a0:	64 e0       	ldi	r22, 0x04	; 4
    52a2:	70 e0       	ldi	r23, 0x00	; 0
    52a4:	ae 01       	movw	r20, r28
    52a6:	4f 5f       	subi	r20, 0xFF	; 255
    52a8:	5f 4f       	sbci	r21, 0xFF	; 255
    52aa:	0e 94 be 0a 	call	0x157c	; 0x157c <MLDLSetMemoryMPU>
    52ae:	88 23       	and	r24, r24
    52b0:	39 f4       	brne	.+14     	; 0x52c0 <IMUsendLinearAccelToFIFO+0x76>
                return ML_ERROR;
        FIFOData.mlFIFODataConfig[ML_LINEAR_ACCELERATION] = (0x0007 & elements) | accuracy;
    52b2:	17 70       	andi	r17, 0x07	; 7
    52b4:	01 2b       	or	r16, r17
    52b6:	00 93 65 04 	sts	0x0465, r16
        return IMUsetFIFOFooter();
    52ba:	0e 94 48 28 	call	0x5090	; 0x5090 <IMUsetFIFOFooter>
    52be:	01 c0       	rjmp	.+2      	; 0x52c2 <IMUsendLinearAccelToFIFO+0x78>
    52c0:	81 e0       	ldi	r24, 0x01	; 1
}
    52c2:	0f 90       	pop	r0
    52c4:	0f 90       	pop	r0
    52c6:	0f 90       	pop	r0
    52c8:	0f 90       	pop	r0
    52ca:	cf 91       	pop	r28
    52cc:	df 91       	pop	r29
    52ce:	1f 91       	pop	r17
    52d0:	0f 91       	pop	r16
    52d2:	08 95       	ret

000052d4 <IMUsendAccelToFIFO>:
 *            for a subset.
 * @param[in] accuracy Set to ML_32_BIT for 32-bit data, or ML_16_BIT for 16
 *            bit data.
 */
tMLError IMUsendAccelToFIFO(uint_fast8_t elements, uint_fast8_t accuracy)
{
    52d4:	0f 93       	push	r16
    52d6:	1f 93       	push	r17
    52d8:	df 93       	push	r29
    52da:	cf 93       	push	r28
    52dc:	00 d0       	rcall	.+0      	; 0x52de <IMUsendAccelToFIFO+0xa>
    52de:	00 d0       	rcall	.+0      	; 0x52e0 <IMUsendAccelToFIFO+0xc>
    52e0:	cd b7       	in	r28, 0x3d	; 61
    52e2:	de b7       	in	r29, 0x3e	; 62
    52e4:	18 2f       	mov	r17, r24
    52e6:	06 2f       	mov	r16, r22

        unsigned char regs[4] = { DINAF8 + 1, DINA28, DINA50, DINA78 };
    52e8:	89 ef       	ldi	r24, 0xF9	; 249
    52ea:	89 83       	std	Y+1, r24	; 0x01
    52ec:	88 e2       	ldi	r24, 0x28	; 40
    52ee:	8a 83       	std	Y+2, r24	; 0x02
    52f0:	80 e5       	ldi	r24, 0x50	; 80
    52f2:	8b 83       	std	Y+3, r24	; 0x03
    52f4:	88 e7       	ldi	r24, 0x78	; 120
    52f6:	8c 83       	std	Y+4, r24	; 0x04

        if (isCompatible(IMU_C_OPEN | IMU_C_START, IMU_C_OPEN_CALLED) != ML_SUCCESS)
    52f8:	83 e0       	ldi	r24, 0x03	; 3
    52fa:	61 e0       	ldi	r22, 0x01	; 1
    52fc:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <isCompatible>
    5300:	88 23       	and	r24, r24
    5302:	19 f5       	brne	.+70     	; 0x534a <IMUsendAccelToFIFO+0x76>
                return ML_ERROR;
        if (accuracy == ML_16_BIT)
    5304:	00 34       	cpi	r16, 0x40	; 64
    5306:	11 f4       	brne	.+4      	; 0x530c <IMUsendAccelToFIFO+0x38>
                regs[0] = DINAF8 + 2;
    5308:	8a ef       	ldi	r24, 0xFA	; 250
    530a:	89 83       	std	Y+1, r24	; 0x01
        if ((elements & ML_ELEMENT_1) == 0)
    530c:	91 2f       	mov	r25, r17
    530e:	10 fd       	sbrc	r17, 0
    5310:	02 c0       	rjmp	.+4      	; 0x5316 <IMUsendAccelToFIFO+0x42>
                regs[1] = DINAA0 + 3;
    5312:	83 ea       	ldi	r24, 0xA3	; 163
    5314:	8a 83       	std	Y+2, r24	; 0x02
        if ((elements & ML_ELEMENT_2) == 0)
    5316:	91 fd       	sbrc	r25, 1
    5318:	02 c0       	rjmp	.+4      	; 0x531e <IMUsendAccelToFIFO+0x4a>
                regs[2] = DINAA0 + 3;
    531a:	83 ea       	ldi	r24, 0xA3	; 163
    531c:	8b 83       	std	Y+3, r24	; 0x03
        if ((elements & ML_ELEMENT_3) == 0)
    531e:	92 fd       	sbrc	r25, 2
    5320:	02 c0       	rjmp	.+4      	; 0x5326 <IMUsendAccelToFIFO+0x52>
                regs[3] = DINAA0 + 3;
    5322:	83 ea       	ldi	r24, 0xA3	; 163
    5324:	8c 83       	std	Y+4, r24	; 0x04

        if (MLDLSetMemoryMPU(KEY_CFG_10, 4, regs) != ML_SUCCESS)
    5326:	80 e1       	ldi	r24, 0x10	; 16
    5328:	90 e0       	ldi	r25, 0x00	; 0
    532a:	64 e0       	ldi	r22, 0x04	; 4
    532c:	70 e0       	ldi	r23, 0x00	; 0
    532e:	ae 01       	movw	r20, r28
    5330:	4f 5f       	subi	r20, 0xFF	; 255
    5332:	5f 4f       	sbci	r21, 0xFF	; 255
    5334:	0e 94 be 0a 	call	0x157c	; 0x157c <MLDLSetMemoryMPU>
    5338:	88 23       	and	r24, r24
    533a:	39 f4       	brne	.+14     	; 0x534a <IMUsendAccelToFIFO+0x76>
                return ML_ERROR;
        FIFOData.mlFIFODataConfig[ML_ACCELS] = (0x0007 & elements) | accuracy;
    533c:	17 70       	andi	r17, 0x07	; 7
    533e:	01 2b       	or	r16, r17
    5340:	00 93 63 04 	sts	0x0463, r16
        return IMUsetFIFOFooter();
    5344:	0e 94 48 28 	call	0x5090	; 0x5090 <IMUsetFIFOFooter>
    5348:	01 c0       	rjmp	.+2      	; 0x534c <IMUsendAccelToFIFO+0x78>
    534a:	81 e0       	ldi	r24, 0x01	; 1
}
    534c:	0f 90       	pop	r0
    534e:	0f 90       	pop	r0
    5350:	0f 90       	pop	r0
    5352:	0f 90       	pop	r0
    5354:	cf 91       	pop	r28
    5356:	df 91       	pop	r29
    5358:	1f 91       	pop	r17
    535a:	0f 91       	pop	r16
    535c:	08 95       	ret

0000535e <IMUsendGyroToFIFO>:
 *            for a subset.
 *  @param[in] accuracy Set to ML_32_BIT for 32-bit data, or ML_16_BIT for 16
 *             bit data.
 */
tMLError IMUsendGyroToFIFO(uint_fast8_t elements, uint_fast8_t accuracy)
{
    535e:	0f 93       	push	r16
    5360:	1f 93       	push	r17
    5362:	df 93       	push	r29
    5364:	cf 93       	push	r28
    5366:	00 d0       	rcall	.+0      	; 0x5368 <IMUsendGyroToFIFO+0xa>
    5368:	00 d0       	rcall	.+0      	; 0x536a <IMUsendGyroToFIFO+0xc>
    536a:	cd b7       	in	r28, 0x3d	; 61
    536c:	de b7       	in	r29, 0x3e	; 62
    536e:	18 2f       	mov	r17, r24
    5370:	06 2f       	mov	r16, r22

        unsigned char regs[4] = { DINAF8 + 1, DINA20, DINA28, DINA30 };
    5372:	89 ef       	ldi	r24, 0xF9	; 249
    5374:	89 83       	std	Y+1, r24	; 0x01
    5376:	80 e2       	ldi	r24, 0x20	; 32
    5378:	8a 83       	std	Y+2, r24	; 0x02
    537a:	88 e2       	ldi	r24, 0x28	; 40
    537c:	8b 83       	std	Y+3, r24	; 0x03
    537e:	80 e3       	ldi	r24, 0x30	; 48
    5380:	8c 83       	std	Y+4, r24	; 0x04

        if (isCompatible(IMU_C_OPEN | IMU_C_START, IMU_C_OPEN_CALLED) != ML_SUCCESS)
    5382:	83 e0       	ldi	r24, 0x03	; 3
    5384:	61 e0       	ldi	r22, 0x01	; 1
    5386:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <isCompatible>
    538a:	88 23       	and	r24, r24
    538c:	19 f5       	brne	.+70     	; 0x53d4 <IMUsendGyroToFIFO+0x76>
                return ML_ERROR;
        if (accuracy == ML_16_BIT)
    538e:	00 34       	cpi	r16, 0x40	; 64
    5390:	11 f4       	brne	.+4      	; 0x5396 <IMUsendGyroToFIFO+0x38>
                regs[0] = DINAF8 + 2;
    5392:	8a ef       	ldi	r24, 0xFA	; 250
    5394:	89 83       	std	Y+1, r24	; 0x01
        if ((elements & ML_ELEMENT_1) == 0)
    5396:	91 2f       	mov	r25, r17
    5398:	10 fd       	sbrc	r17, 0
    539a:	02 c0       	rjmp	.+4      	; 0x53a0 <IMUsendGyroToFIFO+0x42>
                regs[1] = DINAA0 + 3;
    539c:	83 ea       	ldi	r24, 0xA3	; 163
    539e:	8a 83       	std	Y+2, r24	; 0x02
        if ((elements & ML_ELEMENT_2) == 0)
    53a0:	91 fd       	sbrc	r25, 1
    53a2:	02 c0       	rjmp	.+4      	; 0x53a8 <IMUsendGyroToFIFO+0x4a>
                regs[2] = DINAA0 + 3;
    53a4:	83 ea       	ldi	r24, 0xA3	; 163
    53a6:	8b 83       	std	Y+3, r24	; 0x03
        if ((elements & ML_ELEMENT_3) == 0)
    53a8:	92 fd       	sbrc	r25, 2
    53aa:	02 c0       	rjmp	.+4      	; 0x53b0 <IMUsendGyroToFIFO+0x52>
                regs[3] = DINAA0 + 3;
    53ac:	83 ea       	ldi	r24, 0xA3	; 163
    53ae:	8c 83       	std	Y+4, r24	; 0x04

        if (MLDLSetMemoryMPU(KEY_CFG_9, 4, regs) != ML_SUCCESS)
    53b0:	8f e0       	ldi	r24, 0x0F	; 15
    53b2:	90 e0       	ldi	r25, 0x00	; 0
    53b4:	64 e0       	ldi	r22, 0x04	; 4
    53b6:	70 e0       	ldi	r23, 0x00	; 0
    53b8:	ae 01       	movw	r20, r28
    53ba:	4f 5f       	subi	r20, 0xFF	; 255
    53bc:	5f 4f       	sbci	r21, 0xFF	; 255
    53be:	0e 94 be 0a 	call	0x157c	; 0x157c <MLDLSetMemoryMPU>
    53c2:	88 23       	and	r24, r24
    53c4:	39 f4       	brne	.+14     	; 0x53d4 <IMUsendGyroToFIFO+0x76>
                return ML_ERROR;
        FIFOData.mlFIFODataConfig[ML_GYROS] = (0x0007 & elements) | accuracy;
    53c6:	17 70       	andi	r17, 0x07	; 7
    53c8:	01 2b       	or	r16, r17
    53ca:	00 93 62 04 	sts	0x0462, r16
        return IMUsetFIFOFooter();
    53ce:	0e 94 48 28 	call	0x5090	; 0x5090 <IMUsetFIFOFooter>
    53d2:	01 c0       	rjmp	.+2      	; 0x53d6 <IMUsendGyroToFIFO+0x78>
    53d4:	81 e0       	ldi	r24, 0x01	; 1
}
    53d6:	0f 90       	pop	r0
    53d8:	0f 90       	pop	r0
    53da:	0f 90       	pop	r0
    53dc:	0f 90       	pop	r0
    53de:	cf 91       	pop	r28
    53e0:	df 91       	pop	r29
    53e2:	1f 91       	pop	r17
    53e4:	0f 91       	pop	r16
    53e6:	08 95       	ret

000053e8 <IMUsendRawToFIFO>:
 *            or ML_ELEMENT_1, ML_ELEMENT_2, ML_ELEMENT_3 ... ML_ELEMENT_7 or'd together
 *            for a subset. The first element is temperature, the next 3 are gyro data,
 *            and the last 3 accel data.
 */
tMLError IMUsendRawToFIFO(uint_fast8_t elements)
{
    53e8:	cf 92       	push	r12
    53ea:	df 92       	push	r13
    53ec:	ff 92       	push	r15
    53ee:	0f 93       	push	r16
    53f0:	1f 93       	push	r17
    53f2:	df 93       	push	r29
    53f4:	cf 93       	push	r28
    53f6:	cd b7       	in	r28, 0x3d	; 61
    53f8:	de b7       	in	r29, 0x3e	; 62
    53fa:	2d 97       	sbiw	r28, 0x0d	; 13
    53fc:	0f b6       	in	r0, 0x3f	; 63
    53fe:	f8 94       	cli
    5400:	de bf       	out	0x3e, r29	; 62
    5402:	0f be       	out	0x3f, r0	; 63
    5404:	cd bf       	out	0x3d, r28	; 61
    5406:	f8 2e       	mov	r15, r24

        unsigned char regs[13] = { DINAF8 + 3, DINAF8 + 3, DINAA0 + 3, DINAF8 + 2, DINAA0 + 3, DINAF8 + 3, DINAA0 + 3,
                        DINAF8 + 2, DINAA0 + 3, DINAF8 + 3, DINAA0 + 3, DINAF8 + 2, DINAA0 + 3 };
    5408:	de 01       	movw	r26, r28
    540a:	11 96       	adiw	r26, 0x01	; 1
    540c:	e2 ec       	ldi	r30, 0xC2	; 194
    540e:	f0 e0       	ldi	r31, 0x00	; 0
    5410:	8d e0       	ldi	r24, 0x0D	; 13
    5412:	01 90       	ld	r0, Z+
    5414:	0d 92       	st	X+, r0
    5416:	81 50       	subi	r24, 0x01	; 1
    5418:	e1 f7       	brne	.-8      	; 0x5412 <IMUsendRawToFIFO+0x2a>

        if (isCompatible(IMU_C_OPEN | IMU_C_START, IMU_C_OPEN_CALLED) != ML_SUCCESS)
    541a:	83 e0       	ldi	r24, 0x03	; 3
    541c:	61 e0       	ldi	r22, 0x01	; 1
    541e:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <isCompatible>
    5422:	88 23       	and	r24, r24
    5424:	09 f0       	breq	.+2      	; 0x5428 <IMUsendRawToFIFO+0x40>
    5426:	41 c0       	rjmp	.+130    	; 0x54aa <IMUsendRawToFIFO+0xc2>
                return ML_ERROR;

        if (elements & ML_ELEMENT_1)
    5428:	0f 2d       	mov	r16, r15
    542a:	10 e0       	ldi	r17, 0x00	; 0
    542c:	31 e0       	ldi	r19, 0x01	; 1
    542e:	c3 2e       	mov	r12, r19
    5430:	d1 2c       	mov	r13, r1
    5432:	c0 22       	and	r12, r16
    5434:	d1 22       	and	r13, r17
    5436:	f0 fe       	sbrs	r15, 0
    5438:	02 c0       	rjmp	.+4      	; 0x543e <IMUsendRawToFIFO+0x56>
        {
                regs[0] = DINA20;
    543a:	80 e2       	ldi	r24, 0x20	; 32
    543c:	89 83       	std	Y+1, r24	; 0x01
        }
        if (elements & ML_ELEMENT_2)
    543e:	01 ff       	sbrs	r16, 1
    5440:	02 c0       	rjmp	.+4      	; 0x5446 <IMUsendRawToFIFO+0x5e>
        {
                regs[2] = DINA20;
    5442:	80 e2       	ldi	r24, 0x20	; 32
    5444:	8b 83       	std	Y+3, r24	; 0x03
        }
        if (elements & ML_ELEMENT_3)
    5446:	02 ff       	sbrs	r16, 2
    5448:	02 c0       	rjmp	.+4      	; 0x544e <IMUsendRawToFIFO+0x66>
        {
                regs[4] = DINA28;
    544a:	88 e2       	ldi	r24, 0x28	; 40
    544c:	8d 83       	std	Y+5, r24	; 0x05
        }
        if (elements & ML_ELEMENT_4)
    544e:	03 ff       	sbrs	r16, 3
    5450:	02 c0       	rjmp	.+4      	; 0x5456 <IMUsendRawToFIFO+0x6e>
        {
                regs[6] = DINA28;
    5452:	88 e2       	ldi	r24, 0x28	; 40
    5454:	8f 83       	std	Y+7, r24	; 0x07
        }
        if (elements & ML_ELEMENT_5)
    5456:	04 ff       	sbrs	r16, 4
    5458:	02 c0       	rjmp	.+4      	; 0x545e <IMUsendRawToFIFO+0x76>
        {
                regs[8] = DINA30;
    545a:	80 e3       	ldi	r24, 0x30	; 48
    545c:	89 87       	std	Y+9, r24	; 0x09
        }
        if (elements & ML_ELEMENT_6)
    545e:	05 ff       	sbrs	r16, 5
    5460:	02 c0       	rjmp	.+4      	; 0x5466 <IMUsendRawToFIFO+0x7e>
        {
                regs[10] = DINA30;
    5462:	80 e3       	ldi	r24, 0x30	; 48
    5464:	8b 87       	std	Y+11, r24	; 0x0b
        }
        if (elements & ML_ELEMENT_7)
    5466:	06 ff       	sbrs	r16, 6
    5468:	02 c0       	rjmp	.+4      	; 0x546e <IMUsendRawToFIFO+0x86>
        {
                regs[12] = DINA38;
    546a:	88 e3       	ldi	r24, 0x38	; 56
    546c:	8d 87       	std	Y+13, r24	; 0x0d
        }
        if (MLDLSetMemoryMPU(KEY_CFG_15, 13, regs) != ML_SUCCESS)
    546e:	83 e1       	ldi	r24, 0x13	; 19
    5470:	90 e0       	ldi	r25, 0x00	; 0
    5472:	6d e0       	ldi	r22, 0x0D	; 13
    5474:	70 e0       	ldi	r23, 0x00	; 0
    5476:	ae 01       	movw	r20, r28
    5478:	4f 5f       	subi	r20, 0xFF	; 255
    547a:	5f 4f       	sbci	r21, 0xFF	; 255
    547c:	0e 94 be 0a 	call	0x157c	; 0x157c <MLDLSetMemoryMPU>
    5480:	88 23       	and	r24, r24
    5482:	99 f4       	brne	.+38     	; 0x54aa <IMUsendRawToFIFO+0xc2>
                return ML_ERROR;
        if (elements & 0x7e)
    5484:	0e 77       	andi	r16, 0x7E	; 126
    5486:	10 70       	andi	r17, 0x00	; 0
    5488:	01 2b       	or	r16, r17
    548a:	39 f0       	breq	.+14     	; 0x549a <IMUsendRawToFIFO+0xb2>
                FIFOData.mlFIFODataConfig[ML_RAW_DATA] = (0x3f & (elements >> 1)) | ML_16_BIT;
    548c:	f6 94       	lsr	r15
    548e:	8f e3       	ldi	r24, 0x3F	; 63
    5490:	f8 22       	and	r15, r24
    5492:	80 e4       	ldi	r24, 0x40	; 64
    5494:	f8 2a       	or	r15, r24
    5496:	f0 92 69 04 	sts	0x0469, r15
        if (elements & 1)
    549a:	cd 28       	or	r12, r13
    549c:	19 f0       	breq	.+6      	; 0x54a4 <IMUsendRawToFIFO+0xbc>
                FIFOData.mlFIFODataConfig[ML_TEMPERATURE] = 1 | ML_16_BIT;
    549e:	81 e4       	ldi	r24, 0x41	; 65
    54a0:	80 93 6a 04 	sts	0x046A, r24

        return IMUsetFIFOFooter();
    54a4:	0e 94 48 28 	call	0x5090	; 0x5090 <IMUsetFIFOFooter>
    54a8:	01 c0       	rjmp	.+2      	; 0x54ac <IMUsendRawToFIFO+0xc4>
    54aa:	81 e0       	ldi	r24, 0x01	; 1
}
    54ac:	2d 96       	adiw	r28, 0x0d	; 13
    54ae:	0f b6       	in	r0, 0x3f	; 63
    54b0:	f8 94       	cli
    54b2:	de bf       	out	0x3e, r29	; 62
    54b4:	0f be       	out	0x3f, r0	; 63
    54b6:	cd bf       	out	0x3d, r28	; 61
    54b8:	cf 91       	pop	r28
    54ba:	df 91       	pop	r29
    54bc:	1f 91       	pop	r17
    54be:	0f 91       	pop	r16
    54c0:	ff 90       	pop	r15
    54c2:	df 90       	pop	r13
    54c4:	cf 90       	pop	r12
    54c6:	08 95       	ret

000054c8 <IMUsendQuaternionToFIFO>:
 *   of 32-bits. Should be called once after IMUopen() and before IMUstart().
 * @param[in] accuracy Set to ML_32_BIT for 32-bit data, or ML_16_BIT for 16
 *            bit data.
 */
tMLError IMUsendQuaternionToFIFO(uint_fast8_t accuracy)
{
    54c8:	1f 93       	push	r17
    54ca:	df 93       	push	r29
    54cc:	cf 93       	push	r28
    54ce:	00 d0       	rcall	.+0      	; 0x54d0 <IMUsendQuaternionToFIFO+0x8>
    54d0:	00 d0       	rcall	.+0      	; 0x54d2 <IMUsendQuaternionToFIFO+0xa>
    54d2:	0f 92       	push	r0
    54d4:	cd b7       	in	r28, 0x3d	; 61
    54d6:	de b7       	in	r29, 0x3e	; 62
    54d8:	18 2f       	mov	r17, r24

        unsigned char regs[5] = { DINAF8 + 1, DINA20, DINA28, DINA30, DINA38 };
    54da:	de 01       	movw	r26, r28
    54dc:	11 96       	adiw	r26, 0x01	; 1
    54de:	ef ec       	ldi	r30, 0xCF	; 207
    54e0:	f0 e0       	ldi	r31, 0x00	; 0
    54e2:	85 e0       	ldi	r24, 0x05	; 5
    54e4:	01 90       	ld	r0, Z+
    54e6:	0d 92       	st	X+, r0
    54e8:	81 50       	subi	r24, 0x01	; 1
    54ea:	e1 f7       	brne	.-8      	; 0x54e4 <IMUsendQuaternionToFIFO+0x1c>

        if (isCompatible(IMU_C_OPEN | IMU_C_START, IMU_C_OPEN_CALLED) != ML_SUCCESS)
    54ec:	83 e0       	ldi	r24, 0x03	; 3
    54ee:	61 e0       	ldi	r22, 0x01	; 1
    54f0:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <isCompatible>
    54f4:	88 23       	and	r24, r24
    54f6:	a9 f4       	brne	.+42     	; 0x5522 <IMUsendQuaternionToFIFO+0x5a>
                return ML_ERROR;

        if (accuracy == ML_16_BIT)
    54f8:	10 34       	cpi	r17, 0x40	; 64
    54fa:	11 f4       	brne	.+4      	; 0x5500 <IMUsendQuaternionToFIFO+0x38>
                regs[0] = DINAF8 + 2;
    54fc:	8a ef       	ldi	r24, 0xFA	; 250
    54fe:	89 83       	std	Y+1, r24	; 0x01

        if (MLDLSetMemoryMPU(KEY_CFG_8, 5, regs) != ML_SUCCESS)
    5500:	8e e0       	ldi	r24, 0x0E	; 14
    5502:	90 e0       	ldi	r25, 0x00	; 0
    5504:	65 e0       	ldi	r22, 0x05	; 5
    5506:	70 e0       	ldi	r23, 0x00	; 0
    5508:	ae 01       	movw	r20, r28
    550a:	4f 5f       	subi	r20, 0xFF	; 255
    550c:	5f 4f       	sbci	r21, 0xFF	; 255
    550e:	0e 94 be 0a 	call	0x157c	; 0x157c <MLDLSetMemoryMPU>
    5512:	88 23       	and	r24, r24
    5514:	31 f4       	brne	.+12     	; 0x5522 <IMUsendQuaternionToFIFO+0x5a>
                return ML_ERROR;
        FIFOData.mlFIFODataConfig[ML_QUATERNION] = 0x000f | accuracy;
    5516:	1f 60       	ori	r17, 0x0F	; 15
    5518:	10 93 64 04 	sts	0x0464, r17
        return IMUsetFIFOFooter();
    551c:	0e 94 48 28 	call	0x5090	; 0x5090 <IMUsetFIFOFooter>
    5520:	01 c0       	rjmp	.+2      	; 0x5524 <IMUsendQuaternionToFIFO+0x5c>
    5522:	81 e0       	ldi	r24, 0x01	; 1
}
    5524:	0f 90       	pop	r0
    5526:	0f 90       	pop	r0
    5528:	0f 90       	pop	r0
    552a:	0f 90       	pop	r0
    552c:	0f 90       	pop	r0
    552e:	cf 91       	pop	r28
    5530:	df 91       	pop	r29
    5532:	1f 91       	pop	r17
    5534:	08 95       	ret

00005536 <IMUsendAngularVelocityWorldToFIFO>:
 * coordinate system to the FIFO.
 * @param[in] accuracy 16-bit ML_16_BIT or 32-bit ML_32_BIT
 * @return  error code.
 */
tMLError IMUsendAngularVelocityWorldToFIFO(uint_fast8_t accuracy)
{
    5536:	1f 93       	push	r17
    5538:	18 2f       	mov	r17, r24
        tMLError status;

        status = IMUsendQuaternionToFIFO(accuracy);
    553a:	0e 94 64 2a 	call	0x54c8	; 0x54c8 <IMUsendQuaternionToFIFO>
        if (status)
    553e:	88 23       	and	r24, r24
    5540:	21 f4       	brne	.+8      	; 0x554a <IMUsendAngularVelocityWorldToFIFO+0x14>
                return status;
        status = IMUsendGyroToFIFO(ML_ALL, accuracy);
    5542:	8f ef       	ldi	r24, 0xFF	; 255
    5544:	61 2f       	mov	r22, r17
    5546:	0e 94 af 29 	call	0x535e	; 0x535e <IMUsendGyroToFIFO>
        return status;
}
    554a:	1f 91       	pop	r17
    554c:	08 95       	ret

0000554e <readAndProcessFIFO>:
 *        use a large number here, such as 100, if you want to read all
 *        the full packets in the FIFO, which is typical operation.
 * @return Returns number of packets actually read.
 */
int_fast8_t readAndProcessFIFO(int_fast8_t numPackets)
{
    554e:	ef 92       	push	r14
    5550:	ff 92       	push	r15
    5552:	0f 93       	push	r16
    5554:	1f 93       	push	r17
    5556:	df 93       	push	r29
    5558:	cf 93       	push	r28
    555a:	cd b7       	in	r28, 0x3d	; 61
    555c:	de b7       	in	r29, 0x3e	; 62
    555e:	c4 56       	subi	r28, 0x64	; 100
    5560:	d0 40       	sbci	r29, 0x00	; 0
    5562:	0f b6       	in	r0, 0x3f	; 63
    5564:	f8 94       	cli
    5566:	de bf       	out	0x3e, r29	; 62
    5568:	0f be       	out	0x3f, r0	; 63
    556a:	cd bf       	out	0x3d, r28	; 61
    556c:	08 2f       	mov	r16, r24
    556e:	10 e0       	ldi	r17, 0x00	; 0
        unsigned char buf[MAX_FIFO_LENGTH];
        int_fast8_t processed = 0;

        for (processed = 0; processed < numPackets; ++processed)
        {
                if (MLDLGetDMPData(DATASRC_FIFO, buf, (unsigned char) FIFOData.mlFIFOPacketSize) != FIFOData.mlFIFOPacketSize - 2)
    5570:	7e 01       	movw	r14, r28
    5572:	08 94       	sec
    5574:	e1 1c       	adc	r14, r1
    5576:	f1 1c       	adc	r15, r1
    5578:	13 c0       	rjmp	.+38     	; 0x55a0 <readAndProcessFIFO+0x52>
    557a:	82 e0       	ldi	r24, 0x02	; 2
    557c:	b7 01       	movw	r22, r14
    557e:	40 91 03 04 	lds	r20, 0x0403
    5582:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <MLDLGetDMPData>
    5586:	20 91 03 04 	lds	r18, 0x0403
    558a:	30 91 04 04 	lds	r19, 0x0404
    558e:	22 50       	subi	r18, 0x02	; 2
    5590:	30 40       	sbci	r19, 0x00	; 0
    5592:	82 17       	cp	r24, r18
    5594:	93 07       	cpc	r25, r19
    5596:	31 f4       	brne	.+12     	; 0x55a4 <readAndProcessFIFO+0x56>
                        return processed;
                MLProcessFIFOData(buf);
    5598:	c7 01       	movw	r24, r14
    559a:	0e 94 b0 21 	call	0x4360	; 0x4360 <MLProcessFIFOData>
int_fast8_t readAndProcessFIFO(int_fast8_t numPackets)
{
        unsigned char buf[MAX_FIFO_LENGTH];
        int_fast8_t processed = 0;

        for (processed = 0; processed < numPackets; ++processed)
    559e:	1f 5f       	subi	r17, 0xFF	; 255
    55a0:	10 17       	cp	r17, r16
    55a2:	5c f3       	brlt	.-42     	; 0x557a <readAndProcessFIFO+0x2c>
                if (MLDLGetDMPData(DATASRC_FIFO, buf, (unsigned char) FIFOData.mlFIFOPacketSize) != FIFOData.mlFIFOPacketSize - 2)
                        return processed;
                MLProcessFIFOData(buf);
        }
        return processed;
}
    55a4:	81 2f       	mov	r24, r17
    55a6:	cc 59       	subi	r28, 0x9C	; 156
    55a8:	df 4f       	sbci	r29, 0xFF	; 255
    55aa:	0f b6       	in	r0, 0x3f	; 63
    55ac:	f8 94       	cli
    55ae:	de bf       	out	0x3e, r29	; 62
    55b0:	0f be       	out	0x3f, r0	; 63
    55b2:	cd bf       	out	0x3d, r28	; 61
    55b4:	cf 91       	pop	r28
    55b6:	df 91       	pop	r29
    55b8:	1f 91       	pop	r17
    55ba:	0f 91       	pop	r16
    55bc:	ff 90       	pop	r15
    55be:	ef 90       	pop	r14
    55c0:	08 95       	ret

000055c2 <FIFOParamInit>:
 * Initializes all the internal static variables for the FIFO module.
 * Should be called by the initialization routine such as IMUopen()
 */
void FIFOParamInit()
{
        memset(&FIFOData, 0, sizeof(tFIFOData));
    55c2:	8c e6       	ldi	r24, 0x6C	; 108
    55c4:	e1 e0       	ldi	r30, 0x01	; 1
    55c6:	f4 e0       	ldi	r31, 0x04	; 4
    55c8:	df 01       	movw	r26, r30
    55ca:	1d 92       	st	X+, r1
    55cc:	8a 95       	dec	r24
    55ce:	e9 f7       	brne	.-6      	; 0x55ca <FIFOParamInit+0x8>
        FIFOData.mlQuat[0] = 1073741824L; // mlQuat[0]
    55d0:	80 e0       	ldi	r24, 0x00	; 0
    55d2:	90 e0       	ldi	r25, 0x00	; 0
    55d4:	a0 e0       	ldi	r26, 0x00	; 0
    55d6:	b0 e4       	ldi	r27, 0x40	; 64
    55d8:	80 93 05 04 	sts	0x0405, r24
    55dc:	90 93 06 04 	sts	0x0406, r25
    55e0:	a0 93 07 04 	sts	0x0407, r26
    55e4:	b0 93 08 04 	sts	0x0408, r27
        FIFOData.mlFIFORate = 20;
    55e8:	84 e1       	ldi	r24, 0x14	; 20
    55ea:	90 e0       	ldi	r25, 0x00	; 0
    55ec:	90 93 02 04 	sts	0x0402, r25
    55f0:	80 93 01 04 	sts	0x0401, r24
}
    55f4:	08 95       	ret

000055f6 <isCompatible>:
#include "imuCompatibility.h"

uint_fast8_t sStatus = 0;

tMLError isCompatible(uint_fast8_t mask, uint_fast8_t want)
{
    55f6:	20 e0       	ldi	r18, 0x00	; 0
    55f8:	90 91 c6 02 	lds	r25, 0x02C6
    55fc:	98 23       	and	r25, r24
    55fe:	96 13       	cpse	r25, r22
    5600:	21 e0       	ldi	r18, 0x01	; 1
        if ((sStatus & mask) == want)
                return ML_SUCCESS;
        else
                return ML_ERROR;
}
    5602:	82 2f       	mov	r24, r18
    5604:	08 95       	ret

00005606 <clearCompatible>:

void clearCompatible()
{
        sStatus = 0;
    5606:	10 92 c6 02 	sts	0x02C6, r1
}
    560a:	08 95       	ret

0000560c <setCompatible>:

void setCompatible(uint_fast8_t bit)
{
        sStatus |= bit;
    560c:	90 91 c6 02 	lds	r25, 0x02C6
    5610:	98 2b       	or	r25, r24
    5612:	90 93 c6 02 	sts	0x02C6, r25
}
    5616:	08 95       	ret

00005618 <__muldi3>:
    5618:	a0 e3       	ldi	r26, 0x30	; 48
    561a:	b0 e0       	ldi	r27, 0x00	; 0
    561c:	e2 e1       	ldi	r30, 0x12	; 18
    561e:	fb e2       	ldi	r31, 0x2B	; 43
    5620:	0c 94 f8 38 	jmp	0x71f0	; 0x71f0 <__prologue_saves__>
    5624:	a8 e0       	ldi	r26, 0x08	; 8
    5626:	4e 01       	movw	r8, r28
    5628:	08 94       	sec
    562a:	81 1c       	adc	r8, r1
    562c:	91 1c       	adc	r9, r1
    562e:	f4 01       	movw	r30, r8
    5630:	ba 2f       	mov	r27, r26
    5632:	11 92       	st	Z+, r1
    5634:	ba 95       	dec	r27
    5636:	e9 f7       	brne	.-6      	; 0x5632 <__muldi3+0x1a>
    5638:	29 83       	std	Y+1, r18	; 0x01
    563a:	3a 83       	std	Y+2, r19	; 0x02
    563c:	4b 83       	std	Y+3, r20	; 0x03
    563e:	5c 83       	std	Y+4, r21	; 0x04
    5640:	6d 83       	std	Y+5, r22	; 0x05
    5642:	7e 83       	std	Y+6, r23	; 0x06
    5644:	8f 83       	std	Y+7, r24	; 0x07
    5646:	98 87       	std	Y+8, r25	; 0x08
    5648:	ce 01       	movw	r24, r28
    564a:	09 96       	adiw	r24, 0x09	; 9
    564c:	fc 01       	movw	r30, r24
    564e:	11 92       	st	Z+, r1
    5650:	aa 95       	dec	r26
    5652:	e9 f7       	brne	.-6      	; 0x564e <__muldi3+0x36>
    5654:	a9 86       	std	Y+9, r10	; 0x09
    5656:	ba 86       	std	Y+10, r11	; 0x0a
    5658:	cb 86       	std	Y+11, r12	; 0x0b
    565a:	dc 86       	std	Y+12, r13	; 0x0c
    565c:	ed 86       	std	Y+13, r14	; 0x0d
    565e:	fe 86       	std	Y+14, r15	; 0x0e
    5660:	0f 87       	std	Y+15, r16	; 0x0f
    5662:	18 8b       	std	Y+16, r17	; 0x10
    5664:	29 81       	ldd	r18, Y+1	; 0x01
    5666:	3a 81       	ldd	r19, Y+2	; 0x02
    5668:	4b 81       	ldd	r20, Y+3	; 0x03
    566a:	5c 81       	ldd	r21, Y+4	; 0x04
    566c:	2d a7       	std	Y+45, r18	; 0x2d
    566e:	3e a7       	std	Y+46, r19	; 0x2e
    5670:	4f a7       	std	Y+47, r20	; 0x2f
    5672:	58 ab       	std	Y+48, r21	; 0x30
    5674:	79 01       	movw	r14, r18
    5676:	8a 01       	movw	r16, r20
    5678:	8f ef       	ldi	r24, 0xFF	; 255
    567a:	9f ef       	ldi	r25, 0xFF	; 255
    567c:	a0 e0       	ldi	r26, 0x00	; 0
    567e:	b0 e0       	ldi	r27, 0x00	; 0
    5680:	e8 22       	and	r14, r24
    5682:	f9 22       	and	r15, r25
    5684:	0a 23       	and	r16, r26
    5686:	1b 23       	and	r17, r27
    5688:	1a 01       	movw	r2, r20
    568a:	44 24       	eor	r4, r4
    568c:	55 24       	eor	r5, r5
    568e:	29 85       	ldd	r18, Y+9	; 0x09
    5690:	3a 85       	ldd	r19, Y+10	; 0x0a
    5692:	4b 85       	ldd	r20, Y+11	; 0x0b
    5694:	5c 85       	ldd	r21, Y+12	; 0x0c
    5696:	29 a7       	std	Y+41, r18	; 0x29
    5698:	3a a7       	std	Y+42, r19	; 0x2a
    569a:	4b a7       	std	Y+43, r20	; 0x2b
    569c:	5c a7       	std	Y+44, r21	; 0x2c
    569e:	59 01       	movw	r10, r18
    56a0:	6a 01       	movw	r12, r20
    56a2:	a8 22       	and	r10, r24
    56a4:	b9 22       	and	r11, r25
    56a6:	ca 22       	and	r12, r26
    56a8:	db 22       	and	r13, r27
    56aa:	3a 01       	movw	r6, r20
    56ac:	88 24       	eor	r8, r8
    56ae:	99 24       	eor	r9, r9
    56b0:	c6 01       	movw	r24, r12
    56b2:	b5 01       	movw	r22, r10
    56b4:	a8 01       	movw	r20, r16
    56b6:	97 01       	movw	r18, r14
    56b8:	0e 94 75 38 	call	0x70ea	; 0x70ea <__mulsi3>
    56bc:	6d a3       	std	Y+37, r22	; 0x25
    56be:	7e a3       	std	Y+38, r23	; 0x26
    56c0:	8f a3       	std	Y+39, r24	; 0x27
    56c2:	98 a7       	std	Y+40, r25	; 0x28
    56c4:	c4 01       	movw	r24, r8
    56c6:	b3 01       	movw	r22, r6
    56c8:	0e 94 75 38 	call	0x70ea	; 0x70ea <__mulsi3>
    56cc:	69 a3       	std	Y+33, r22	; 0x21
    56ce:	7a a3       	std	Y+34, r23	; 0x22
    56d0:	8b a3       	std	Y+35, r24	; 0x23
    56d2:	9c a3       	std	Y+36, r25	; 0x24
    56d4:	c6 01       	movw	r24, r12
    56d6:	b5 01       	movw	r22, r10
    56d8:	a2 01       	movw	r20, r4
    56da:	91 01       	movw	r18, r2
    56dc:	0e 94 75 38 	call	0x70ea	; 0x70ea <__mulsi3>
    56e0:	7b 01       	movw	r14, r22
    56e2:	8c 01       	movw	r16, r24
    56e4:	c4 01       	movw	r24, r8
    56e6:	b3 01       	movw	r22, r6
    56e8:	0e 94 75 38 	call	0x70ea	; 0x70ea <__mulsi3>
    56ec:	5b 01       	movw	r10, r22
    56ee:	6c 01       	movw	r12, r24
    56f0:	89 a1       	ldd	r24, Y+33	; 0x21
    56f2:	9a a1       	ldd	r25, Y+34	; 0x22
    56f4:	ab a1       	ldd	r26, Y+35	; 0x23
    56f6:	bc a1       	ldd	r27, Y+36	; 0x24
    56f8:	8e 0d       	add	r24, r14
    56fa:	9f 1d       	adc	r25, r15
    56fc:	a0 1f       	adc	r26, r16
    56fe:	b1 1f       	adc	r27, r17
    5700:	89 a3       	std	Y+33, r24	; 0x21
    5702:	9a a3       	std	Y+34, r25	; 0x22
    5704:	ab a3       	std	Y+35, r26	; 0x23
    5706:	bc a3       	std	Y+36, r27	; 0x24
    5708:	2d a1       	ldd	r18, Y+37	; 0x25
    570a:	3e a1       	ldd	r19, Y+38	; 0x26
    570c:	4f a1       	ldd	r20, Y+39	; 0x27
    570e:	58 a5       	ldd	r21, Y+40	; 0x28
    5710:	ca 01       	movw	r24, r20
    5712:	aa 27       	eor	r26, r26
    5714:	bb 27       	eor	r27, r27
    5716:	29 a1       	ldd	r18, Y+33	; 0x21
    5718:	3a a1       	ldd	r19, Y+34	; 0x22
    571a:	4b a1       	ldd	r20, Y+35	; 0x23
    571c:	5c a1       	ldd	r21, Y+36	; 0x24
    571e:	28 0f       	add	r18, r24
    5720:	39 1f       	adc	r19, r25
    5722:	4a 1f       	adc	r20, r26
    5724:	5b 1f       	adc	r21, r27
    5726:	29 a3       	std	Y+33, r18	; 0x21
    5728:	3a a3       	std	Y+34, r19	; 0x22
    572a:	4b a3       	std	Y+35, r20	; 0x23
    572c:	5c a3       	std	Y+36, r21	; 0x24
    572e:	2e 15       	cp	r18, r14
    5730:	3f 05       	cpc	r19, r15
    5732:	40 07       	cpc	r20, r16
    5734:	51 07       	cpc	r21, r17
    5736:	40 f4       	brcc	.+16     	; 0x5748 <__muldi3+0x130>
    5738:	80 e0       	ldi	r24, 0x00	; 0
    573a:	90 e0       	ldi	r25, 0x00	; 0
    573c:	a1 e0       	ldi	r26, 0x01	; 1
    573e:	b0 e0       	ldi	r27, 0x00	; 0
    5740:	a8 0e       	add	r10, r24
    5742:	b9 1e       	adc	r11, r25
    5744:	ca 1e       	adc	r12, r26
    5746:	db 1e       	adc	r13, r27
    5748:	89 a1       	ldd	r24, Y+33	; 0x21
    574a:	9a a1       	ldd	r25, Y+34	; 0x22
    574c:	ab a1       	ldd	r26, Y+35	; 0x23
    574e:	bc a1       	ldd	r27, Y+36	; 0x24
    5750:	9d 01       	movw	r18, r26
    5752:	44 27       	eor	r20, r20
    5754:	55 27       	eor	r21, r21
    5756:	2a 0d       	add	r18, r10
    5758:	3b 1d       	adc	r19, r11
    575a:	4c 1d       	adc	r20, r12
    575c:	5d 1d       	adc	r21, r13
    575e:	2d 8f       	std	Y+29, r18	; 0x1d
    5760:	3e 8f       	std	Y+30, r19	; 0x1e
    5762:	4f 8f       	std	Y+31, r20	; 0x1f
    5764:	58 a3       	std	Y+32, r21	; 0x20
    5766:	6c 01       	movw	r12, r24
    5768:	bb 24       	eor	r11, r11
    576a:	aa 24       	eor	r10, r10
    576c:	8d a1       	ldd	r24, Y+37	; 0x25
    576e:	9e a1       	ldd	r25, Y+38	; 0x26
    5770:	af a1       	ldd	r26, Y+39	; 0x27
    5772:	b8 a5       	ldd	r27, Y+40	; 0x28
    5774:	a0 70       	andi	r26, 0x00	; 0
    5776:	b0 70       	andi	r27, 0x00	; 0
    5778:	a8 0e       	add	r10, r24
    577a:	b9 1e       	adc	r11, r25
    577c:	ca 1e       	adc	r12, r26
    577e:	db 1e       	adc	r13, r27
    5780:	a9 8e       	std	Y+25, r10	; 0x19
    5782:	ba 8e       	std	Y+26, r11	; 0x1a
    5784:	cb 8e       	std	Y+27, r12	; 0x1b
    5786:	dc 8e       	std	Y+28, r13	; 0x1c
    5788:	9a 8c       	ldd	r9, Y+26	; 0x1a
    578a:	8b 8c       	ldd	r8, Y+27	; 0x1b
    578c:	7c 8c       	ldd	r7, Y+28	; 0x1c
    578e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5790:	6f 8d       	ldd	r22, Y+31	; 0x1f
    5792:	78 a1       	ldd	r23, Y+32	; 0x20
    5794:	fe 01       	movw	r30, r28
    5796:	71 96       	adiw	r30, 0x11	; 17
    5798:	88 e0       	ldi	r24, 0x08	; 8
    579a:	df 01       	movw	r26, r30
    579c:	1d 92       	st	X+, r1
    579e:	8a 95       	dec	r24
    57a0:	e9 f7       	brne	.-6      	; 0x579c <__muldi3+0x184>
    57a2:	2d 8b       	std	Y+21, r18	; 0x15
    57a4:	9e 8b       	std	Y+22, r25	; 0x16
    57a6:	6f 8b       	std	Y+23, r22	; 0x17
    57a8:	78 8f       	std	Y+24, r23	; 0x18
    57aa:	2d 85       	ldd	r18, Y+13	; 0x0d
    57ac:	3e 85       	ldd	r19, Y+14	; 0x0e
    57ae:	4f 85       	ldd	r20, Y+15	; 0x0f
    57b0:	58 89       	ldd	r21, Y+16	; 0x10
    57b2:	6d a5       	ldd	r22, Y+45	; 0x2d
    57b4:	7e a5       	ldd	r23, Y+46	; 0x2e
    57b6:	8f a5       	ldd	r24, Y+47	; 0x2f
    57b8:	98 a9       	ldd	r25, Y+48	; 0x30
    57ba:	0e 94 75 38 	call	0x70ea	; 0x70ea <__mulsi3>
    57be:	7b 01       	movw	r14, r22
    57c0:	8c 01       	movw	r16, r24
    57c2:	2d 81       	ldd	r18, Y+5	; 0x05
    57c4:	3e 81       	ldd	r19, Y+6	; 0x06
    57c6:	4f 81       	ldd	r20, Y+7	; 0x07
    57c8:	58 85       	ldd	r21, Y+8	; 0x08
    57ca:	69 a5       	ldd	r22, Y+41	; 0x29
    57cc:	7a a5       	ldd	r23, Y+42	; 0x2a
    57ce:	8b a5       	ldd	r24, Y+43	; 0x2b
    57d0:	9c a5       	ldd	r25, Y+44	; 0x2c
    57d2:	0e 94 75 38 	call	0x70ea	; 0x70ea <__mulsi3>
    57d6:	e6 0e       	add	r14, r22
    57d8:	f7 1e       	adc	r15, r23
    57da:	08 1f       	adc	r16, r24
    57dc:	19 1f       	adc	r17, r25
    57de:	6d 89       	ldd	r22, Y+21	; 0x15
    57e0:	7e 89       	ldd	r23, Y+22	; 0x16
    57e2:	8f 89       	ldd	r24, Y+23	; 0x17
    57e4:	98 8d       	ldd	r25, Y+24	; 0x18
    57e6:	6e 0d       	add	r22, r14
    57e8:	7f 1d       	adc	r23, r15
    57ea:	80 1f       	adc	r24, r16
    57ec:	91 1f       	adc	r25, r17
    57ee:	6d 8b       	std	Y+21, r22	; 0x15
    57f0:	7e 8b       	std	Y+22, r23	; 0x16
    57f2:	8f 8b       	std	Y+23, r24	; 0x17
    57f4:	98 8f       	std	Y+24, r25	; 0x18
    57f6:	ee 89       	ldd	r30, Y+22	; 0x16
    57f8:	2a 2d       	mov	r18, r10
    57fa:	39 2d       	mov	r19, r9
    57fc:	48 2d       	mov	r20, r8
    57fe:	57 2d       	mov	r21, r7
    5800:	7e 2f       	mov	r23, r30
    5802:	8f 89       	ldd	r24, Y+23	; 0x17
    5804:	98 8d       	ldd	r25, Y+24	; 0x18
    5806:	e0 96       	adiw	r28, 0x30	; 48
    5808:	e2 e1       	ldi	r30, 0x12	; 18
    580a:	0c 94 14 39 	jmp	0x7228	; 0x7228 <__epilogue_restores__>

0000580e <__ashldi3>:
    580e:	ef 92       	push	r14
    5810:	ff 92       	push	r15
    5812:	0f 93       	push	r16
    5814:	df 93       	push	r29
    5816:	cf 93       	push	r28
    5818:	cd b7       	in	r28, 0x3d	; 61
    581a:	de b7       	in	r29, 0x3e	; 62
    581c:	60 97       	sbiw	r28, 0x10	; 16
    581e:	0f b6       	in	r0, 0x3f	; 63
    5820:	f8 94       	cli
    5822:	de bf       	out	0x3e, r29	; 62
    5824:	0f be       	out	0x3f, r0	; 63
    5826:	cd bf       	out	0x3d, r28	; 61
    5828:	a8 2f       	mov	r26, r24
    582a:	00 23       	and	r16, r16
    582c:	09 f4       	brne	.+2      	; 0x5830 <__ashldi3+0x22>
    582e:	61 c0       	rjmp	.+194    	; 0x58f2 <__ashldi3+0xe4>
    5830:	7e 01       	movw	r14, r28
    5832:	08 94       	sec
    5834:	e1 1c       	adc	r14, r1
    5836:	f1 1c       	adc	r15, r1
    5838:	88 e0       	ldi	r24, 0x08	; 8
    583a:	f7 01       	movw	r30, r14
    583c:	11 92       	st	Z+, r1
    583e:	8a 95       	dec	r24
    5840:	e9 f7       	brne	.-6      	; 0x583c <__ashldi3+0x2e>
    5842:	29 83       	std	Y+1, r18	; 0x01
    5844:	3a 83       	std	Y+2, r19	; 0x02
    5846:	4b 83       	std	Y+3, r20	; 0x03
    5848:	5c 83       	std	Y+4, r21	; 0x04
    584a:	6d 83       	std	Y+5, r22	; 0x05
    584c:	7e 83       	std	Y+6, r23	; 0x06
    584e:	af 83       	std	Y+7, r26	; 0x07
    5850:	98 87       	std	Y+8, r25	; 0x08
    5852:	80 e2       	ldi	r24, 0x20	; 32
    5854:	80 1b       	sub	r24, r16
    5856:	e8 2f       	mov	r30, r24
    5858:	ff 27       	eor	r31, r31
    585a:	e7 fd       	sbrc	r30, 7
    585c:	f0 95       	com	r31
    585e:	49 81       	ldd	r20, Y+1	; 0x01
    5860:	5a 81       	ldd	r21, Y+2	; 0x02
    5862:	6b 81       	ldd	r22, Y+3	; 0x03
    5864:	7c 81       	ldd	r23, Y+4	; 0x04
    5866:	18 16       	cp	r1, r24
    5868:	84 f0       	brlt	.+32     	; 0x588a <__ashldi3+0x7c>
    586a:	19 86       	std	Y+9, r1	; 0x09
    586c:	1a 86       	std	Y+10, r1	; 0x0a
    586e:	1b 86       	std	Y+11, r1	; 0x0b
    5870:	1c 86       	std	Y+12, r1	; 0x0c
    5872:	88 27       	eor	r24, r24
    5874:	99 27       	eor	r25, r25
    5876:	8e 1b       	sub	r24, r30
    5878:	9f 0b       	sbc	r25, r31
    587a:	04 c0       	rjmp	.+8      	; 0x5884 <__ashldi3+0x76>
    587c:	44 0f       	add	r20, r20
    587e:	55 1f       	adc	r21, r21
    5880:	66 1f       	adc	r22, r22
    5882:	77 1f       	adc	r23, r23
    5884:	8a 95       	dec	r24
    5886:	d2 f7       	brpl	.-12     	; 0x587c <__ashldi3+0x6e>
    5888:	28 c0       	rjmp	.+80     	; 0x58da <__ashldi3+0xcc>
    588a:	20 2f       	mov	r18, r16
    588c:	33 27       	eor	r19, r19
    588e:	27 fd       	sbrc	r18, 7
    5890:	30 95       	com	r19
    5892:	db 01       	movw	r26, r22
    5894:	ca 01       	movw	r24, r20
    5896:	02 2e       	mov	r0, r18
    5898:	04 c0       	rjmp	.+8      	; 0x58a2 <__ashldi3+0x94>
    589a:	88 0f       	add	r24, r24
    589c:	99 1f       	adc	r25, r25
    589e:	aa 1f       	adc	r26, r26
    58a0:	bb 1f       	adc	r27, r27
    58a2:	0a 94       	dec	r0
    58a4:	d2 f7       	brpl	.-12     	; 0x589a <__ashldi3+0x8c>
    58a6:	89 87       	std	Y+9, r24	; 0x09
    58a8:	9a 87       	std	Y+10, r25	; 0x0a
    58aa:	ab 87       	std	Y+11, r26	; 0x0b
    58ac:	bc 87       	std	Y+12, r27	; 0x0c
    58ae:	04 c0       	rjmp	.+8      	; 0x58b8 <__ashldi3+0xaa>
    58b0:	76 95       	lsr	r23
    58b2:	67 95       	ror	r22
    58b4:	57 95       	ror	r21
    58b6:	47 95       	ror	r20
    58b8:	ea 95       	dec	r30
    58ba:	d2 f7       	brpl	.-12     	; 0x58b0 <__ashldi3+0xa2>
    58bc:	8d 81       	ldd	r24, Y+5	; 0x05
    58be:	9e 81       	ldd	r25, Y+6	; 0x06
    58c0:	af 81       	ldd	r26, Y+7	; 0x07
    58c2:	b8 85       	ldd	r27, Y+8	; 0x08
    58c4:	04 c0       	rjmp	.+8      	; 0x58ce <__ashldi3+0xc0>
    58c6:	88 0f       	add	r24, r24
    58c8:	99 1f       	adc	r25, r25
    58ca:	aa 1f       	adc	r26, r26
    58cc:	bb 1f       	adc	r27, r27
    58ce:	2a 95       	dec	r18
    58d0:	d2 f7       	brpl	.-12     	; 0x58c6 <__ashldi3+0xb8>
    58d2:	48 2b       	or	r20, r24
    58d4:	59 2b       	or	r21, r25
    58d6:	6a 2b       	or	r22, r26
    58d8:	7b 2b       	or	r23, r27
    58da:	4d 87       	std	Y+13, r20	; 0x0d
    58dc:	5e 87       	std	Y+14, r21	; 0x0e
    58de:	6f 87       	std	Y+15, r22	; 0x0f
    58e0:	78 8b       	std	Y+16, r23	; 0x10
    58e2:	29 85       	ldd	r18, Y+9	; 0x09
    58e4:	3a 85       	ldd	r19, Y+10	; 0x0a
    58e6:	4b 85       	ldd	r20, Y+11	; 0x0b
    58e8:	5c 85       	ldd	r21, Y+12	; 0x0c
    58ea:	6d 85       	ldd	r22, Y+13	; 0x0d
    58ec:	7e 85       	ldd	r23, Y+14	; 0x0e
    58ee:	af 85       	ldd	r26, Y+15	; 0x0f
    58f0:	98 89       	ldd	r25, Y+16	; 0x10
    58f2:	8a 2f       	mov	r24, r26
    58f4:	60 96       	adiw	r28, 0x10	; 16
    58f6:	0f b6       	in	r0, 0x3f	; 63
    58f8:	f8 94       	cli
    58fa:	de bf       	out	0x3e, r29	; 62
    58fc:	0f be       	out	0x3f, r0	; 63
    58fe:	cd bf       	out	0x3d, r28	; 61
    5900:	cf 91       	pop	r28
    5902:	df 91       	pop	r29
    5904:	0f 91       	pop	r16
    5906:	ff 90       	pop	r15
    5908:	ef 90       	pop	r14
    590a:	08 95       	ret

0000590c <__ashrdi3>:
    590c:	ef 92       	push	r14
    590e:	ff 92       	push	r15
    5910:	0f 93       	push	r16
    5912:	df 93       	push	r29
    5914:	cf 93       	push	r28
    5916:	cd b7       	in	r28, 0x3d	; 61
    5918:	de b7       	in	r29, 0x3e	; 62
    591a:	60 97       	sbiw	r28, 0x10	; 16
    591c:	0f b6       	in	r0, 0x3f	; 63
    591e:	f8 94       	cli
    5920:	de bf       	out	0x3e, r29	; 62
    5922:	0f be       	out	0x3f, r0	; 63
    5924:	cd bf       	out	0x3d, r28	; 61
    5926:	a8 2f       	mov	r26, r24
    5928:	00 23       	and	r16, r16
    592a:	09 f4       	brne	.+2      	; 0x592e <__ashrdi3+0x22>
    592c:	67 c0       	rjmp	.+206    	; 0x59fc <__ashrdi3+0xf0>
    592e:	7e 01       	movw	r14, r28
    5930:	08 94       	sec
    5932:	e1 1c       	adc	r14, r1
    5934:	f1 1c       	adc	r15, r1
    5936:	88 e0       	ldi	r24, 0x08	; 8
    5938:	f7 01       	movw	r30, r14
    593a:	11 92       	st	Z+, r1
    593c:	8a 95       	dec	r24
    593e:	e9 f7       	brne	.-6      	; 0x593a <__ashrdi3+0x2e>
    5940:	29 83       	std	Y+1, r18	; 0x01
    5942:	3a 83       	std	Y+2, r19	; 0x02
    5944:	4b 83       	std	Y+3, r20	; 0x03
    5946:	5c 83       	std	Y+4, r21	; 0x04
    5948:	6d 83       	std	Y+5, r22	; 0x05
    594a:	7e 83       	std	Y+6, r23	; 0x06
    594c:	af 83       	std	Y+7, r26	; 0x07
    594e:	98 87       	std	Y+8, r25	; 0x08
    5950:	80 e2       	ldi	r24, 0x20	; 32
    5952:	80 1b       	sub	r24, r16
    5954:	4d 81       	ldd	r20, Y+5	; 0x05
    5956:	5e 81       	ldd	r21, Y+6	; 0x06
    5958:	6f 81       	ldd	r22, Y+7	; 0x07
    595a:	78 85       	ldd	r23, Y+8	; 0x08
    595c:	e8 2f       	mov	r30, r24
    595e:	ff 27       	eor	r31, r31
    5960:	e7 fd       	sbrc	r30, 7
    5962:	f0 95       	com	r31
    5964:	18 16       	cp	r1, r24
    5966:	b4 f0       	brlt	.+44     	; 0x5994 <__ashrdi3+0x88>
    5968:	db 01       	movw	r26, r22
    596a:	ca 01       	movw	r24, r20
    596c:	bb 0f       	add	r27, r27
    596e:	88 0b       	sbc	r24, r24
    5970:	98 2f       	mov	r25, r24
    5972:	dc 01       	movw	r26, r24
    5974:	8d 87       	std	Y+13, r24	; 0x0d
    5976:	9e 87       	std	Y+14, r25	; 0x0e
    5978:	af 87       	std	Y+15, r26	; 0x0f
    597a:	b8 8b       	std	Y+16, r27	; 0x10
    597c:	88 27       	eor	r24, r24
    597e:	99 27       	eor	r25, r25
    5980:	8e 1b       	sub	r24, r30
    5982:	9f 0b       	sbc	r25, r31
    5984:	04 c0       	rjmp	.+8      	; 0x598e <__ashrdi3+0x82>
    5986:	75 95       	asr	r23
    5988:	67 95       	ror	r22
    598a:	57 95       	ror	r21
    598c:	47 95       	ror	r20
    598e:	8a 95       	dec	r24
    5990:	d2 f7       	brpl	.-12     	; 0x5986 <__ashrdi3+0x7a>
    5992:	28 c0       	rjmp	.+80     	; 0x59e4 <__ashrdi3+0xd8>
    5994:	20 2f       	mov	r18, r16
    5996:	33 27       	eor	r19, r19
    5998:	27 fd       	sbrc	r18, 7
    599a:	30 95       	com	r19
    599c:	db 01       	movw	r26, r22
    599e:	ca 01       	movw	r24, r20
    59a0:	02 2e       	mov	r0, r18
    59a2:	04 c0       	rjmp	.+8      	; 0x59ac <__ashrdi3+0xa0>
    59a4:	b5 95       	asr	r27
    59a6:	a7 95       	ror	r26
    59a8:	97 95       	ror	r25
    59aa:	87 95       	ror	r24
    59ac:	0a 94       	dec	r0
    59ae:	d2 f7       	brpl	.-12     	; 0x59a4 <__ashrdi3+0x98>
    59b0:	8d 87       	std	Y+13, r24	; 0x0d
    59b2:	9e 87       	std	Y+14, r25	; 0x0e
    59b4:	af 87       	std	Y+15, r26	; 0x0f
    59b6:	b8 8b       	std	Y+16, r27	; 0x10
    59b8:	04 c0       	rjmp	.+8      	; 0x59c2 <__ashrdi3+0xb6>
    59ba:	44 0f       	add	r20, r20
    59bc:	55 1f       	adc	r21, r21
    59be:	66 1f       	adc	r22, r22
    59c0:	77 1f       	adc	r23, r23
    59c2:	ea 95       	dec	r30
    59c4:	d2 f7       	brpl	.-12     	; 0x59ba <__ashrdi3+0xae>
    59c6:	89 81       	ldd	r24, Y+1	; 0x01
    59c8:	9a 81       	ldd	r25, Y+2	; 0x02
    59ca:	ab 81       	ldd	r26, Y+3	; 0x03
    59cc:	bc 81       	ldd	r27, Y+4	; 0x04
    59ce:	04 c0       	rjmp	.+8      	; 0x59d8 <__ashrdi3+0xcc>
    59d0:	b6 95       	lsr	r27
    59d2:	a7 95       	ror	r26
    59d4:	97 95       	ror	r25
    59d6:	87 95       	ror	r24
    59d8:	2a 95       	dec	r18
    59da:	d2 f7       	brpl	.-12     	; 0x59d0 <__ashrdi3+0xc4>
    59dc:	48 2b       	or	r20, r24
    59de:	59 2b       	or	r21, r25
    59e0:	6a 2b       	or	r22, r26
    59e2:	7b 2b       	or	r23, r27
    59e4:	49 87       	std	Y+9, r20	; 0x09
    59e6:	5a 87       	std	Y+10, r21	; 0x0a
    59e8:	6b 87       	std	Y+11, r22	; 0x0b
    59ea:	7c 87       	std	Y+12, r23	; 0x0c
    59ec:	29 85       	ldd	r18, Y+9	; 0x09
    59ee:	3a 85       	ldd	r19, Y+10	; 0x0a
    59f0:	4b 85       	ldd	r20, Y+11	; 0x0b
    59f2:	5c 85       	ldd	r21, Y+12	; 0x0c
    59f4:	6d 85       	ldd	r22, Y+13	; 0x0d
    59f6:	7e 85       	ldd	r23, Y+14	; 0x0e
    59f8:	af 85       	ldd	r26, Y+15	; 0x0f
    59fa:	98 89       	ldd	r25, Y+16	; 0x10
    59fc:	8a 2f       	mov	r24, r26
    59fe:	60 96       	adiw	r28, 0x10	; 16
    5a00:	0f b6       	in	r0, 0x3f	; 63
    5a02:	f8 94       	cli
    5a04:	de bf       	out	0x3e, r29	; 62
    5a06:	0f be       	out	0x3f, r0	; 63
    5a08:	cd bf       	out	0x3d, r28	; 61
    5a0a:	cf 91       	pop	r28
    5a0c:	df 91       	pop	r29
    5a0e:	0f 91       	pop	r16
    5a10:	ff 90       	pop	r15
    5a12:	ef 90       	pop	r14
    5a14:	08 95       	ret

00005a16 <__divdi3>:
    5a16:	a2 e7       	ldi	r26, 0x72	; 114
    5a18:	b0 e0       	ldi	r27, 0x00	; 0
    5a1a:	e1 e1       	ldi	r30, 0x11	; 17
    5a1c:	fd e2       	ldi	r31, 0x2D	; 45
    5a1e:	0c 94 f8 38 	jmp	0x71f0	; 0x71f0 <__prologue_saves__>
    5a22:	98 2e       	mov	r9, r24
    5a24:	89 2e       	mov	r8, r25
    5a26:	71 2e       	mov	r7, r17
    5a28:	88 e0       	ldi	r24, 0x08	; 8
    5a2a:	fe 01       	movw	r30, r28
    5a2c:	31 96       	adiw	r30, 0x01	; 1
    5a2e:	df 01       	movw	r26, r30
    5a30:	68 2e       	mov	r6, r24
    5a32:	1d 92       	st	X+, r1
    5a34:	6a 94       	dec	r6
    5a36:	e9 f7       	brne	.-6      	; 0x5a32 <__divdi3+0x1c>
    5a38:	29 83       	std	Y+1, r18	; 0x01
    5a3a:	3a 83       	std	Y+2, r19	; 0x02
    5a3c:	4b 83       	std	Y+3, r20	; 0x03
    5a3e:	5c 83       	std	Y+4, r21	; 0x04
    5a40:	6d 83       	std	Y+5, r22	; 0x05
    5a42:	7e 83       	std	Y+6, r23	; 0x06
    5a44:	9f 82       	std	Y+7, r9	; 0x07
    5a46:	98 87       	std	Y+8, r25	; 0x08
    5a48:	fe 01       	movw	r30, r28
    5a4a:	39 96       	adiw	r30, 0x09	; 9
    5a4c:	df 01       	movw	r26, r30
    5a4e:	1d 92       	st	X+, r1
    5a50:	8a 95       	dec	r24
    5a52:	e9 f7       	brne	.-6      	; 0x5a4e <__divdi3+0x38>
    5a54:	a9 86       	std	Y+9, r10	; 0x09
    5a56:	ba 86       	std	Y+10, r11	; 0x0a
    5a58:	cb 86       	std	Y+11, r12	; 0x0b
    5a5a:	dc 86       	std	Y+12, r13	; 0x0c
    5a5c:	ed 86       	std	Y+13, r14	; 0x0d
    5a5e:	fe 86       	std	Y+14, r15	; 0x0e
    5a60:	0f 87       	std	Y+15, r16	; 0x0f
    5a62:	18 8b       	std	Y+16, r17	; 0x10
    5a64:	8d 81       	ldd	r24, Y+5	; 0x05
    5a66:	9e 81       	ldd	r25, Y+6	; 0x06
    5a68:	af 81       	ldd	r26, Y+7	; 0x07
    5a6a:	b8 85       	ldd	r27, Y+8	; 0x08
    5a6c:	b7 fd       	sbrc	r27, 7
    5a6e:	07 c0       	rjmp	.+14     	; 0x5a7e <__divdi3+0x68>
    5a70:	e1 96       	adiw	r28, 0x31	; 49
    5a72:	1c ae       	std	Y+60, r1	; 0x3c
    5a74:	1d ae       	std	Y+61, r1	; 0x3d
    5a76:	1e ae       	std	Y+62, r1	; 0x3e
    5a78:	1f ae       	std	Y+63, r1	; 0x3f
    5a7a:	e1 97       	sbiw	r28, 0x31	; 49
    5a7c:	64 c0       	rjmp	.+200    	; 0x5b46 <__divdi3+0x130>
    5a7e:	21 95       	neg	r18
    5a80:	81 e0       	ldi	r24, 0x01	; 1
    5a82:	12 16       	cp	r1, r18
    5a84:	08 f0       	brcs	.+2      	; 0x5a88 <__divdi3+0x72>
    5a86:	80 e0       	ldi	r24, 0x00	; 0
    5a88:	31 95       	neg	r19
    5a8a:	91 e0       	ldi	r25, 0x01	; 1
    5a8c:	13 16       	cp	r1, r19
    5a8e:	08 f0       	brcs	.+2      	; 0x5a92 <__divdi3+0x7c>
    5a90:	90 e0       	ldi	r25, 0x00	; 0
    5a92:	b3 2f       	mov	r27, r19
    5a94:	b8 1b       	sub	r27, r24
    5a96:	81 e0       	ldi	r24, 0x01	; 1
    5a98:	3b 17       	cp	r19, r27
    5a9a:	08 f0       	brcs	.+2      	; 0x5a9e <__divdi3+0x88>
    5a9c:	80 e0       	ldi	r24, 0x00	; 0
    5a9e:	98 2b       	or	r25, r24
    5aa0:	41 95       	neg	r20
    5aa2:	31 e0       	ldi	r19, 0x01	; 1
    5aa4:	14 16       	cp	r1, r20
    5aa6:	08 f0       	brcs	.+2      	; 0x5aaa <__divdi3+0x94>
    5aa8:	30 e0       	ldi	r19, 0x00	; 0
    5aaa:	a4 2f       	mov	r26, r20
    5aac:	a9 1b       	sub	r26, r25
    5aae:	81 e0       	ldi	r24, 0x01	; 1
    5ab0:	4a 17       	cp	r20, r26
    5ab2:	08 f0       	brcs	.+2      	; 0x5ab6 <__divdi3+0xa0>
    5ab4:	80 e0       	ldi	r24, 0x00	; 0
    5ab6:	38 2b       	or	r19, r24
    5ab8:	51 95       	neg	r21
    5aba:	91 e0       	ldi	r25, 0x01	; 1
    5abc:	15 16       	cp	r1, r21
    5abe:	08 f0       	brcs	.+2      	; 0x5ac2 <__divdi3+0xac>
    5ac0:	90 e0       	ldi	r25, 0x00	; 0
    5ac2:	f5 2f       	mov	r31, r21
    5ac4:	f3 1b       	sub	r31, r19
    5ac6:	81 e0       	ldi	r24, 0x01	; 1
    5ac8:	5f 17       	cp	r21, r31
    5aca:	08 f0       	brcs	.+2      	; 0x5ace <__divdi3+0xb8>
    5acc:	80 e0       	ldi	r24, 0x00	; 0
    5ace:	98 2b       	or	r25, r24
    5ad0:	61 95       	neg	r22
    5ad2:	31 e0       	ldi	r19, 0x01	; 1
    5ad4:	16 16       	cp	r1, r22
    5ad6:	08 f0       	brcs	.+2      	; 0x5ada <__divdi3+0xc4>
    5ad8:	30 e0       	ldi	r19, 0x00	; 0
    5ada:	e6 2f       	mov	r30, r22
    5adc:	e9 1b       	sub	r30, r25
    5ade:	81 e0       	ldi	r24, 0x01	; 1
    5ae0:	6e 17       	cp	r22, r30
    5ae2:	08 f0       	brcs	.+2      	; 0x5ae6 <__divdi3+0xd0>
    5ae4:	80 e0       	ldi	r24, 0x00	; 0
    5ae6:	38 2b       	or	r19, r24
    5ae8:	71 95       	neg	r23
    5aea:	41 e0       	ldi	r20, 0x01	; 1
    5aec:	17 16       	cp	r1, r23
    5aee:	08 f0       	brcs	.+2      	; 0x5af2 <__divdi3+0xdc>
    5af0:	40 e0       	ldi	r20, 0x00	; 0
    5af2:	57 2f       	mov	r21, r23
    5af4:	53 1b       	sub	r21, r19
    5af6:	81 e0       	ldi	r24, 0x01	; 1
    5af8:	75 17       	cp	r23, r21
    5afa:	08 f0       	brcs	.+2      	; 0x5afe <__divdi3+0xe8>
    5afc:	80 e0       	ldi	r24, 0x00	; 0
    5afe:	48 2b       	or	r20, r24
    5b00:	89 2d       	mov	r24, r9
    5b02:	81 95       	neg	r24
    5b04:	91 e0       	ldi	r25, 0x01	; 1
    5b06:	18 16       	cp	r1, r24
    5b08:	08 f0       	brcs	.+2      	; 0x5b0c <__divdi3+0xf6>
    5b0a:	90 e0       	ldi	r25, 0x00	; 0
    5b0c:	68 2e       	mov	r6, r24
    5b0e:	64 1a       	sub	r6, r20
    5b10:	46 2d       	mov	r20, r6
    5b12:	31 e0       	ldi	r19, 0x01	; 1
    5b14:	86 15       	cp	r24, r6
    5b16:	08 f0       	brcs	.+2      	; 0x5b1a <__divdi3+0x104>
    5b18:	30 e0       	ldi	r19, 0x00	; 0
    5b1a:	93 2b       	or	r25, r19
    5b1c:	88 2d       	mov	r24, r8
    5b1e:	81 95       	neg	r24
    5b20:	89 1b       	sub	r24, r25
    5b22:	29 83       	std	Y+1, r18	; 0x01
    5b24:	ba 83       	std	Y+2, r27	; 0x02
    5b26:	ab 83       	std	Y+3, r26	; 0x03
    5b28:	fc 83       	std	Y+4, r31	; 0x04
    5b2a:	ed 83       	std	Y+5, r30	; 0x05
    5b2c:	5e 83       	std	Y+6, r21	; 0x06
    5b2e:	4f 83       	std	Y+7, r20	; 0x07
    5b30:	88 87       	std	Y+8, r24	; 0x08
    5b32:	2f ef       	ldi	r18, 0xFF	; 255
    5b34:	3f ef       	ldi	r19, 0xFF	; 255
    5b36:	4f ef       	ldi	r20, 0xFF	; 255
    5b38:	5f ef       	ldi	r21, 0xFF	; 255
    5b3a:	e1 96       	adiw	r28, 0x31	; 49
    5b3c:	2c af       	std	Y+60, r18	; 0x3c
    5b3e:	3d af       	std	Y+61, r19	; 0x3d
    5b40:	4e af       	std	Y+62, r20	; 0x3e
    5b42:	5f af       	std	Y+63, r21	; 0x3f
    5b44:	e1 97       	sbiw	r28, 0x31	; 49
    5b46:	8d 85       	ldd	r24, Y+13	; 0x0d
    5b48:	9e 85       	ldd	r25, Y+14	; 0x0e
    5b4a:	af 85       	ldd	r26, Y+15	; 0x0f
    5b4c:	b8 89       	ldd	r27, Y+16	; 0x10
    5b4e:	b7 ff       	sbrs	r27, 7
    5b50:	6a c0       	rjmp	.+212    	; 0x5c26 <__divdi3+0x210>
    5b52:	e1 96       	adiw	r28, 0x31	; 49
    5b54:	4c ad       	ldd	r20, Y+60	; 0x3c
    5b56:	5d ad       	ldd	r21, Y+61	; 0x3d
    5b58:	6e ad       	ldd	r22, Y+62	; 0x3e
    5b5a:	7f ad       	ldd	r23, Y+63	; 0x3f
    5b5c:	e1 97       	sbiw	r28, 0x31	; 49
    5b5e:	40 95       	com	r20
    5b60:	50 95       	com	r21
    5b62:	60 95       	com	r22
    5b64:	70 95       	com	r23
    5b66:	e1 96       	adiw	r28, 0x31	; 49
    5b68:	4c af       	std	Y+60, r20	; 0x3c
    5b6a:	5d af       	std	Y+61, r21	; 0x3d
    5b6c:	6e af       	std	Y+62, r22	; 0x3e
    5b6e:	7f af       	std	Y+63, r23	; 0x3f
    5b70:	e1 97       	sbiw	r28, 0x31	; 49
    5b72:	a1 94       	neg	r10
    5b74:	81 e0       	ldi	r24, 0x01	; 1
    5b76:	1a 14       	cp	r1, r10
    5b78:	08 f0       	brcs	.+2      	; 0x5b7c <__divdi3+0x166>
    5b7a:	80 e0       	ldi	r24, 0x00	; 0
    5b7c:	b1 94       	neg	r11
    5b7e:	91 e0       	ldi	r25, 0x01	; 1
    5b80:	1b 14       	cp	r1, r11
    5b82:	08 f0       	brcs	.+2      	; 0x5b86 <__divdi3+0x170>
    5b84:	90 e0       	ldi	r25, 0x00	; 0
    5b86:	6b 2d       	mov	r22, r11
    5b88:	68 1b       	sub	r22, r24
    5b8a:	81 e0       	ldi	r24, 0x01	; 1
    5b8c:	b6 16       	cp	r11, r22
    5b8e:	08 f0       	brcs	.+2      	; 0x5b92 <__divdi3+0x17c>
    5b90:	80 e0       	ldi	r24, 0x00	; 0
    5b92:	98 2b       	or	r25, r24
    5b94:	c1 94       	neg	r12
    5b96:	21 e0       	ldi	r18, 0x01	; 1
    5b98:	1c 14       	cp	r1, r12
    5b9a:	08 f0       	brcs	.+2      	; 0x5b9e <__divdi3+0x188>
    5b9c:	20 e0       	ldi	r18, 0x00	; 0
    5b9e:	5c 2d       	mov	r21, r12
    5ba0:	59 1b       	sub	r21, r25
    5ba2:	81 e0       	ldi	r24, 0x01	; 1
    5ba4:	c5 16       	cp	r12, r21
    5ba6:	08 f0       	brcs	.+2      	; 0x5baa <__divdi3+0x194>
    5ba8:	80 e0       	ldi	r24, 0x00	; 0
    5baa:	28 2b       	or	r18, r24
    5bac:	d1 94       	neg	r13
    5bae:	91 e0       	ldi	r25, 0x01	; 1
    5bb0:	1d 14       	cp	r1, r13
    5bb2:	08 f0       	brcs	.+2      	; 0x5bb6 <__divdi3+0x1a0>
    5bb4:	90 e0       	ldi	r25, 0x00	; 0
    5bb6:	4d 2d       	mov	r20, r13
    5bb8:	42 1b       	sub	r20, r18
    5bba:	81 e0       	ldi	r24, 0x01	; 1
    5bbc:	d4 16       	cp	r13, r20
    5bbe:	08 f0       	brcs	.+2      	; 0x5bc2 <__divdi3+0x1ac>
    5bc0:	80 e0       	ldi	r24, 0x00	; 0
    5bc2:	98 2b       	or	r25, r24
    5bc4:	e1 94       	neg	r14
    5bc6:	21 e0       	ldi	r18, 0x01	; 1
    5bc8:	1e 14       	cp	r1, r14
    5bca:	08 f0       	brcs	.+2      	; 0x5bce <__divdi3+0x1b8>
    5bcc:	20 e0       	ldi	r18, 0x00	; 0
    5bce:	3e 2d       	mov	r19, r14
    5bd0:	39 1b       	sub	r19, r25
    5bd2:	81 e0       	ldi	r24, 0x01	; 1
    5bd4:	e3 16       	cp	r14, r19
    5bd6:	08 f0       	brcs	.+2      	; 0x5bda <__divdi3+0x1c4>
    5bd8:	80 e0       	ldi	r24, 0x00	; 0
    5bda:	28 2b       	or	r18, r24
    5bdc:	f1 94       	neg	r15
    5bde:	91 e0       	ldi	r25, 0x01	; 1
    5be0:	1f 14       	cp	r1, r15
    5be2:	08 f0       	brcs	.+2      	; 0x5be6 <__divdi3+0x1d0>
    5be4:	90 e0       	ldi	r25, 0x00	; 0
    5be6:	7f 2d       	mov	r23, r15
    5be8:	72 1b       	sub	r23, r18
    5bea:	27 2f       	mov	r18, r23
    5bec:	81 e0       	ldi	r24, 0x01	; 1
    5bee:	f7 16       	cp	r15, r23
    5bf0:	08 f0       	brcs	.+2      	; 0x5bf4 <__divdi3+0x1de>
    5bf2:	80 e0       	ldi	r24, 0x00	; 0
    5bf4:	98 2b       	or	r25, r24
    5bf6:	01 95       	neg	r16
    5bf8:	11 e0       	ldi	r17, 0x01	; 1
    5bfa:	10 16       	cp	r1, r16
    5bfc:	08 f0       	brcs	.+2      	; 0x5c00 <__divdi3+0x1ea>
    5bfe:	10 e0       	ldi	r17, 0x00	; 0
    5c00:	80 2f       	mov	r24, r16
    5c02:	89 1b       	sub	r24, r25
    5c04:	98 2f       	mov	r25, r24
    5c06:	81 e0       	ldi	r24, 0x01	; 1
    5c08:	09 17       	cp	r16, r25
    5c0a:	08 f0       	brcs	.+2      	; 0x5c0e <__divdi3+0x1f8>
    5c0c:	80 e0       	ldi	r24, 0x00	; 0
    5c0e:	18 2b       	or	r17, r24
    5c10:	87 2d       	mov	r24, r7
    5c12:	81 95       	neg	r24
    5c14:	81 1b       	sub	r24, r17
    5c16:	a9 86       	std	Y+9, r10	; 0x09
    5c18:	6a 87       	std	Y+10, r22	; 0x0a
    5c1a:	5b 87       	std	Y+11, r21	; 0x0b
    5c1c:	4c 87       	std	Y+12, r20	; 0x0c
    5c1e:	3d 87       	std	Y+13, r19	; 0x0d
    5c20:	2e 87       	std	Y+14, r18	; 0x0e
    5c22:	9f 87       	std	Y+15, r25	; 0x0f
    5c24:	88 8b       	std	Y+16, r24	; 0x10
    5c26:	99 81       	ldd	r25, Y+1	; 0x01
    5c28:	2a 81       	ldd	r18, Y+2	; 0x02
    5c2a:	3b 81       	ldd	r19, Y+3	; 0x03
    5c2c:	4c 81       	ldd	r20, Y+4	; 0x04
    5c2e:	5d 81       	ldd	r21, Y+5	; 0x05
    5c30:	6e 81       	ldd	r22, Y+6	; 0x06
    5c32:	7f 81       	ldd	r23, Y+7	; 0x07
    5c34:	a8 85       	ldd	r26, Y+8	; 0x08
    5c36:	b9 85       	ldd	r27, Y+9	; 0x09
    5c38:	1a 85       	ldd	r17, Y+10	; 0x0a
    5c3a:	0b 85       	ldd	r16, Y+11	; 0x0b
    5c3c:	fc 84       	ldd	r15, Y+12	; 0x0c
    5c3e:	ed 84       	ldd	r14, Y+13	; 0x0d
    5c40:	de 84       	ldd	r13, Y+14	; 0x0e
    5c42:	cf 84       	ldd	r12, Y+15	; 0x0f
    5c44:	b8 88       	ldd	r11, Y+16	; 0x10
    5c46:	88 e0       	ldi	r24, 0x08	; 8
    5c48:	e1 e1       	ldi	r30, 0x11	; 17
    5c4a:	8e 2e       	mov	r8, r30
    5c4c:	91 2c       	mov	r9, r1
    5c4e:	8c 0e       	add	r8, r28
    5c50:	9d 1e       	adc	r9, r29
    5c52:	f4 01       	movw	r30, r8
    5c54:	68 2e       	mov	r6, r24
    5c56:	11 92       	st	Z+, r1
    5c58:	6a 94       	dec	r6
    5c5a:	e9 f7       	brne	.-6      	; 0x5c56 <__divdi3+0x240>
    5c5c:	99 8b       	std	Y+17, r25	; 0x11
    5c5e:	2a 8b       	std	Y+18, r18	; 0x12
    5c60:	3b 8b       	std	Y+19, r19	; 0x13
    5c62:	4c 8b       	std	Y+20, r20	; 0x14
    5c64:	5d 8b       	std	Y+21, r21	; 0x15
    5c66:	6e 8b       	std	Y+22, r22	; 0x16
    5c68:	7f 8b       	std	Y+23, r23	; 0x17
    5c6a:	a8 8f       	std	Y+24, r26	; 0x18
    5c6c:	9e 01       	movw	r18, r28
    5c6e:	27 5e       	subi	r18, 0xE7	; 231
    5c70:	3f 4f       	sbci	r19, 0xFF	; 255
    5c72:	f9 01       	movw	r30, r18
    5c74:	11 92       	st	Z+, r1
    5c76:	8a 95       	dec	r24
    5c78:	e9 f7       	brne	.-6      	; 0x5c74 <__divdi3+0x25e>
    5c7a:	b9 8f       	std	Y+25, r27	; 0x19
    5c7c:	1a 8f       	std	Y+26, r17	; 0x1a
    5c7e:	0b 8f       	std	Y+27, r16	; 0x1b
    5c80:	fc 8e       	std	Y+28, r15	; 0x1c
    5c82:	ed 8e       	std	Y+29, r14	; 0x1d
    5c84:	de 8e       	std	Y+30, r13	; 0x1e
    5c86:	cf 8e       	std	Y+31, r12	; 0x1f
    5c88:	b8 a2       	std	Y+32, r11	; 0x20
    5c8a:	29 8c       	ldd	r2, Y+25	; 0x19
    5c8c:	3a 8c       	ldd	r3, Y+26	; 0x1a
    5c8e:	4b 8c       	ldd	r4, Y+27	; 0x1b
    5c90:	5c 8c       	ldd	r5, Y+28	; 0x1c
    5c92:	ed 8c       	ldd	r14, Y+29	; 0x1d
    5c94:	fe 8c       	ldd	r15, Y+30	; 0x1e
    5c96:	0f 8d       	ldd	r16, Y+31	; 0x1f
    5c98:	18 a1       	ldd	r17, Y+32	; 0x20
    5c9a:	69 88       	ldd	r6, Y+17	; 0x11
    5c9c:	7a 88       	ldd	r7, Y+18	; 0x12
    5c9e:	8b 88       	ldd	r8, Y+19	; 0x13
    5ca0:	9c 88       	ldd	r9, Y+20	; 0x14
    5ca2:	21 96       	adiw	r28, 0x01	; 1
    5ca4:	6c ae       	std	Y+60, r6	; 0x3c
    5ca6:	7d ae       	std	Y+61, r7	; 0x3d
    5ca8:	8e ae       	std	Y+62, r8	; 0x3e
    5caa:	9f ae       	std	Y+63, r9	; 0x3f
    5cac:	21 97       	sbiw	r28, 0x01	; 1
    5cae:	6d 88       	ldd	r6, Y+21	; 0x15
    5cb0:	7e 88       	ldd	r7, Y+22	; 0x16
    5cb2:	8f 88       	ldd	r8, Y+23	; 0x17
    5cb4:	98 8c       	ldd	r9, Y+24	; 0x18
    5cb6:	e1 14       	cp	r14, r1
    5cb8:	f1 04       	cpc	r15, r1
    5cba:	01 05       	cpc	r16, r1
    5cbc:	11 05       	cpc	r17, r1
    5cbe:	09 f0       	breq	.+2      	; 0x5cc2 <__divdi3+0x2ac>
    5cc0:	d9 c3       	rjmp	.+1970   	; 0x6474 <__divdi3+0xa5e>
    5cc2:	62 14       	cp	r6, r2
    5cc4:	73 04       	cpc	r7, r3
    5cc6:	84 04       	cpc	r8, r4
    5cc8:	95 04       	cpc	r9, r5
    5cca:	08 f0       	brcs	.+2      	; 0x5cce <__divdi3+0x2b8>
    5ccc:	57 c1       	rjmp	.+686    	; 0x5f7c <__divdi3+0x566>
    5cce:	00 e0       	ldi	r16, 0x00	; 0
    5cd0:	20 16       	cp	r2, r16
    5cd2:	00 e0       	ldi	r16, 0x00	; 0
    5cd4:	30 06       	cpc	r3, r16
    5cd6:	01 e0       	ldi	r16, 0x01	; 1
    5cd8:	40 06       	cpc	r4, r16
    5cda:	00 e0       	ldi	r16, 0x00	; 0
    5cdc:	50 06       	cpc	r5, r16
    5cde:	88 f4       	brcc	.+34     	; 0x5d02 <__divdi3+0x2ec>
    5ce0:	1f ef       	ldi	r17, 0xFF	; 255
    5ce2:	21 16       	cp	r2, r17
    5ce4:	31 04       	cpc	r3, r1
    5ce6:	41 04       	cpc	r4, r1
    5ce8:	51 04       	cpc	r5, r1
    5cea:	39 f0       	breq	.+14     	; 0x5cfa <__divdi3+0x2e4>
    5cec:	30 f0       	brcs	.+12     	; 0x5cfa <__divdi3+0x2e4>
    5cee:	48 e0       	ldi	r20, 0x08	; 8
    5cf0:	e4 2e       	mov	r14, r20
    5cf2:	f1 2c       	mov	r15, r1
    5cf4:	01 2d       	mov	r16, r1
    5cf6:	11 2d       	mov	r17, r1
    5cf8:	18 c0       	rjmp	.+48     	; 0x5d2a <__divdi3+0x314>
    5cfa:	ee 24       	eor	r14, r14
    5cfc:	ff 24       	eor	r15, r15
    5cfe:	87 01       	movw	r16, r14
    5d00:	14 c0       	rjmp	.+40     	; 0x5d2a <__divdi3+0x314>
    5d02:	20 e0       	ldi	r18, 0x00	; 0
    5d04:	22 16       	cp	r2, r18
    5d06:	20 e0       	ldi	r18, 0x00	; 0
    5d08:	32 06       	cpc	r3, r18
    5d0a:	20 e0       	ldi	r18, 0x00	; 0
    5d0c:	42 06       	cpc	r4, r18
    5d0e:	21 e0       	ldi	r18, 0x01	; 1
    5d10:	52 06       	cpc	r5, r18
    5d12:	30 f0       	brcs	.+12     	; 0x5d20 <__divdi3+0x30a>
    5d14:	38 e1       	ldi	r19, 0x18	; 24
    5d16:	e3 2e       	mov	r14, r19
    5d18:	f1 2c       	mov	r15, r1
    5d1a:	01 2d       	mov	r16, r1
    5d1c:	11 2d       	mov	r17, r1
    5d1e:	05 c0       	rjmp	.+10     	; 0x5d2a <__divdi3+0x314>
    5d20:	20 e1       	ldi	r18, 0x10	; 16
    5d22:	e2 2e       	mov	r14, r18
    5d24:	f1 2c       	mov	r15, r1
    5d26:	01 2d       	mov	r16, r1
    5d28:	11 2d       	mov	r17, r1
    5d2a:	d2 01       	movw	r26, r4
    5d2c:	c1 01       	movw	r24, r2
    5d2e:	0e 2c       	mov	r0, r14
    5d30:	04 c0       	rjmp	.+8      	; 0x5d3a <__divdi3+0x324>
    5d32:	b6 95       	lsr	r27
    5d34:	a7 95       	ror	r26
    5d36:	97 95       	ror	r25
    5d38:	87 95       	ror	r24
    5d3a:	0a 94       	dec	r0
    5d3c:	d2 f7       	brpl	.-12     	; 0x5d32 <__divdi3+0x31c>
    5d3e:	8c 52       	subi	r24, 0x2C	; 44
    5d40:	9f 4f       	sbci	r25, 0xFF	; 255
    5d42:	dc 01       	movw	r26, r24
    5d44:	2c 91       	ld	r18, X
    5d46:	80 e2       	ldi	r24, 0x20	; 32
    5d48:	90 e0       	ldi	r25, 0x00	; 0
    5d4a:	a0 e0       	ldi	r26, 0x00	; 0
    5d4c:	b0 e0       	ldi	r27, 0x00	; 0
    5d4e:	8e 19       	sub	r24, r14
    5d50:	9f 09       	sbc	r25, r15
    5d52:	a0 0b       	sbc	r26, r16
    5d54:	b1 0b       	sbc	r27, r17
    5d56:	7c 01       	movw	r14, r24
    5d58:	8d 01       	movw	r16, r26
    5d5a:	e2 1a       	sub	r14, r18
    5d5c:	f1 08       	sbc	r15, r1
    5d5e:	01 09       	sbc	r16, r1
    5d60:	11 09       	sbc	r17, r1
    5d62:	e1 14       	cp	r14, r1
    5d64:	f1 04       	cpc	r15, r1
    5d66:	01 05       	cpc	r16, r1
    5d68:	11 05       	cpc	r17, r1
    5d6a:	d1 f1       	breq	.+116    	; 0x5de0 <__divdi3+0x3ca>
    5d6c:	0e 2c       	mov	r0, r14
    5d6e:	04 c0       	rjmp	.+8      	; 0x5d78 <__divdi3+0x362>
    5d70:	22 0c       	add	r2, r2
    5d72:	33 1c       	adc	r3, r3
    5d74:	44 1c       	adc	r4, r4
    5d76:	55 1c       	adc	r5, r5
    5d78:	0a 94       	dec	r0
    5d7a:	d2 f7       	brpl	.-12     	; 0x5d70 <__divdi3+0x35a>
    5d7c:	a4 01       	movw	r20, r8
    5d7e:	93 01       	movw	r18, r6
    5d80:	0e 2c       	mov	r0, r14
    5d82:	04 c0       	rjmp	.+8      	; 0x5d8c <__divdi3+0x376>
    5d84:	22 0f       	add	r18, r18
    5d86:	33 1f       	adc	r19, r19
    5d88:	44 1f       	adc	r20, r20
    5d8a:	55 1f       	adc	r21, r21
    5d8c:	0a 94       	dec	r0
    5d8e:	d2 f7       	brpl	.-12     	; 0x5d84 <__divdi3+0x36e>
    5d90:	80 e2       	ldi	r24, 0x20	; 32
    5d92:	90 e0       	ldi	r25, 0x00	; 0
    5d94:	8e 19       	sub	r24, r14
    5d96:	9f 09       	sbc	r25, r15
    5d98:	21 96       	adiw	r28, 0x01	; 1
    5d9a:	6c ac       	ldd	r6, Y+60	; 0x3c
    5d9c:	7d ac       	ldd	r7, Y+61	; 0x3d
    5d9e:	8e ac       	ldd	r8, Y+62	; 0x3e
    5da0:	9f ac       	ldd	r9, Y+63	; 0x3f
    5da2:	21 97       	sbiw	r28, 0x01	; 1
    5da4:	04 c0       	rjmp	.+8      	; 0x5dae <__divdi3+0x398>
    5da6:	96 94       	lsr	r9
    5da8:	87 94       	ror	r8
    5daa:	77 94       	ror	r7
    5dac:	67 94       	ror	r6
    5dae:	8a 95       	dec	r24
    5db0:	d2 f7       	brpl	.-12     	; 0x5da6 <__divdi3+0x390>
    5db2:	62 2a       	or	r6, r18
    5db4:	73 2a       	or	r7, r19
    5db6:	84 2a       	or	r8, r20
    5db8:	95 2a       	or	r9, r21
    5dba:	21 96       	adiw	r28, 0x01	; 1
    5dbc:	ac ac       	ldd	r10, Y+60	; 0x3c
    5dbe:	bd ac       	ldd	r11, Y+61	; 0x3d
    5dc0:	ce ac       	ldd	r12, Y+62	; 0x3e
    5dc2:	df ac       	ldd	r13, Y+63	; 0x3f
    5dc4:	21 97       	sbiw	r28, 0x01	; 1
    5dc6:	04 c0       	rjmp	.+8      	; 0x5dd0 <__divdi3+0x3ba>
    5dc8:	aa 0c       	add	r10, r10
    5dca:	bb 1c       	adc	r11, r11
    5dcc:	cc 1c       	adc	r12, r12
    5dce:	dd 1c       	adc	r13, r13
    5dd0:	ea 94       	dec	r14
    5dd2:	d2 f7       	brpl	.-12     	; 0x5dc8 <__divdi3+0x3b2>
    5dd4:	21 96       	adiw	r28, 0x01	; 1
    5dd6:	ac ae       	std	Y+60, r10	; 0x3c
    5dd8:	bd ae       	std	Y+61, r11	; 0x3d
    5dda:	ce ae       	std	Y+62, r12	; 0x3e
    5ddc:	df ae       	std	Y+63, r13	; 0x3f
    5dde:	21 97       	sbiw	r28, 0x01	; 1
    5de0:	62 01       	movw	r12, r4
    5de2:	ee 24       	eor	r14, r14
    5de4:	ff 24       	eor	r15, r15
    5de6:	29 96       	adiw	r28, 0x09	; 9
    5de8:	cc ae       	std	Y+60, r12	; 0x3c
    5dea:	dd ae       	std	Y+61, r13	; 0x3d
    5dec:	ee ae       	std	Y+62, r14	; 0x3e
    5dee:	ff ae       	std	Y+63, r15	; 0x3f
    5df0:	29 97       	sbiw	r28, 0x09	; 9
    5df2:	92 01       	movw	r18, r4
    5df4:	81 01       	movw	r16, r2
    5df6:	20 70       	andi	r18, 0x00	; 0
    5df8:	30 70       	andi	r19, 0x00	; 0
    5dfa:	2d 96       	adiw	r28, 0x0d	; 13
    5dfc:	0c af       	std	Y+60, r16	; 0x3c
    5dfe:	1d af       	std	Y+61, r17	; 0x3d
    5e00:	2e af       	std	Y+62, r18	; 0x3e
    5e02:	3f af       	std	Y+63, r19	; 0x3f
    5e04:	2d 97       	sbiw	r28, 0x0d	; 13
    5e06:	c4 01       	movw	r24, r8
    5e08:	b3 01       	movw	r22, r6
    5e0a:	a7 01       	movw	r20, r14
    5e0c:	96 01       	movw	r18, r12
    5e0e:	0e 94 a7 38 	call	0x714e	; 0x714e <__udivmodsi4>
    5e12:	7b 01       	movw	r14, r22
    5e14:	8c 01       	movw	r16, r24
    5e16:	c4 01       	movw	r24, r8
    5e18:	b3 01       	movw	r22, r6
    5e1a:	29 96       	adiw	r28, 0x09	; 9
    5e1c:	2c ad       	ldd	r18, Y+60	; 0x3c
    5e1e:	3d ad       	ldd	r19, Y+61	; 0x3d
    5e20:	4e ad       	ldd	r20, Y+62	; 0x3e
    5e22:	5f ad       	ldd	r21, Y+63	; 0x3f
    5e24:	29 97       	sbiw	r28, 0x09	; 9
    5e26:	0e 94 a7 38 	call	0x714e	; 0x714e <__udivmodsi4>
    5e2a:	c9 01       	movw	r24, r18
    5e2c:	da 01       	movw	r26, r20
    5e2e:	3c 01       	movw	r6, r24
    5e30:	4d 01       	movw	r8, r26
    5e32:	c4 01       	movw	r24, r8
    5e34:	b3 01       	movw	r22, r6
    5e36:	2d 96       	adiw	r28, 0x0d	; 13
    5e38:	2c ad       	ldd	r18, Y+60	; 0x3c
    5e3a:	3d ad       	ldd	r19, Y+61	; 0x3d
    5e3c:	4e ad       	ldd	r20, Y+62	; 0x3e
    5e3e:	5f ad       	ldd	r21, Y+63	; 0x3f
    5e40:	2d 97       	sbiw	r28, 0x0d	; 13
    5e42:	0e 94 75 38 	call	0x70ea	; 0x70ea <__mulsi3>
    5e46:	9b 01       	movw	r18, r22
    5e48:	ac 01       	movw	r20, r24
    5e4a:	87 01       	movw	r16, r14
    5e4c:	ff 24       	eor	r15, r15
    5e4e:	ee 24       	eor	r14, r14
    5e50:	21 96       	adiw	r28, 0x01	; 1
    5e52:	ac ac       	ldd	r10, Y+60	; 0x3c
    5e54:	bd ac       	ldd	r11, Y+61	; 0x3d
    5e56:	ce ac       	ldd	r12, Y+62	; 0x3e
    5e58:	df ac       	ldd	r13, Y+63	; 0x3f
    5e5a:	21 97       	sbiw	r28, 0x01	; 1
    5e5c:	c6 01       	movw	r24, r12
    5e5e:	aa 27       	eor	r26, r26
    5e60:	bb 27       	eor	r27, r27
    5e62:	57 01       	movw	r10, r14
    5e64:	68 01       	movw	r12, r16
    5e66:	a8 2a       	or	r10, r24
    5e68:	b9 2a       	or	r11, r25
    5e6a:	ca 2a       	or	r12, r26
    5e6c:	db 2a       	or	r13, r27
    5e6e:	a2 16       	cp	r10, r18
    5e70:	b3 06       	cpc	r11, r19
    5e72:	c4 06       	cpc	r12, r20
    5e74:	d5 06       	cpc	r13, r21
    5e76:	e0 f4       	brcc	.+56     	; 0x5eb0 <__divdi3+0x49a>
    5e78:	08 94       	sec
    5e7a:	61 08       	sbc	r6, r1
    5e7c:	71 08       	sbc	r7, r1
    5e7e:	81 08       	sbc	r8, r1
    5e80:	91 08       	sbc	r9, r1
    5e82:	a2 0c       	add	r10, r2
    5e84:	b3 1c       	adc	r11, r3
    5e86:	c4 1c       	adc	r12, r4
    5e88:	d5 1c       	adc	r13, r5
    5e8a:	a2 14       	cp	r10, r2
    5e8c:	b3 04       	cpc	r11, r3
    5e8e:	c4 04       	cpc	r12, r4
    5e90:	d5 04       	cpc	r13, r5
    5e92:	70 f0       	brcs	.+28     	; 0x5eb0 <__divdi3+0x49a>
    5e94:	a2 16       	cp	r10, r18
    5e96:	b3 06       	cpc	r11, r19
    5e98:	c4 06       	cpc	r12, r20
    5e9a:	d5 06       	cpc	r13, r21
    5e9c:	48 f4       	brcc	.+18     	; 0x5eb0 <__divdi3+0x49a>
    5e9e:	08 94       	sec
    5ea0:	61 08       	sbc	r6, r1
    5ea2:	71 08       	sbc	r7, r1
    5ea4:	81 08       	sbc	r8, r1
    5ea6:	91 08       	sbc	r9, r1
    5ea8:	a2 0c       	add	r10, r2
    5eaa:	b3 1c       	adc	r11, r3
    5eac:	c4 1c       	adc	r12, r4
    5eae:	d5 1c       	adc	r13, r5
    5eb0:	a2 1a       	sub	r10, r18
    5eb2:	b3 0a       	sbc	r11, r19
    5eb4:	c4 0a       	sbc	r12, r20
    5eb6:	d5 0a       	sbc	r13, r21
    5eb8:	c6 01       	movw	r24, r12
    5eba:	b5 01       	movw	r22, r10
    5ebc:	29 96       	adiw	r28, 0x09	; 9
    5ebe:	2c ad       	ldd	r18, Y+60	; 0x3c
    5ec0:	3d ad       	ldd	r19, Y+61	; 0x3d
    5ec2:	4e ad       	ldd	r20, Y+62	; 0x3e
    5ec4:	5f ad       	ldd	r21, Y+63	; 0x3f
    5ec6:	29 97       	sbiw	r28, 0x09	; 9
    5ec8:	0e 94 a7 38 	call	0x714e	; 0x714e <__udivmodsi4>
    5ecc:	7b 01       	movw	r14, r22
    5ece:	8c 01       	movw	r16, r24
    5ed0:	c6 01       	movw	r24, r12
    5ed2:	b5 01       	movw	r22, r10
    5ed4:	29 96       	adiw	r28, 0x09	; 9
    5ed6:	2c ad       	ldd	r18, Y+60	; 0x3c
    5ed8:	3d ad       	ldd	r19, Y+61	; 0x3d
    5eda:	4e ad       	ldd	r20, Y+62	; 0x3e
    5edc:	5f ad       	ldd	r21, Y+63	; 0x3f
    5ede:	29 97       	sbiw	r28, 0x09	; 9
    5ee0:	0e 94 a7 38 	call	0x714e	; 0x714e <__udivmodsi4>
    5ee4:	c9 01       	movw	r24, r18
    5ee6:	da 01       	movw	r26, r20
    5ee8:	5c 01       	movw	r10, r24
    5eea:	6d 01       	movw	r12, r26
    5eec:	c6 01       	movw	r24, r12
    5eee:	b5 01       	movw	r22, r10
    5ef0:	2d 96       	adiw	r28, 0x0d	; 13
    5ef2:	2c ad       	ldd	r18, Y+60	; 0x3c
    5ef4:	3d ad       	ldd	r19, Y+61	; 0x3d
    5ef6:	4e ad       	ldd	r20, Y+62	; 0x3e
    5ef8:	5f ad       	ldd	r21, Y+63	; 0x3f
    5efa:	2d 97       	sbiw	r28, 0x0d	; 13
    5efc:	0e 94 75 38 	call	0x70ea	; 0x70ea <__mulsi3>
    5f00:	9b 01       	movw	r18, r22
    5f02:	ac 01       	movw	r20, r24
    5f04:	87 01       	movw	r16, r14
    5f06:	ff 24       	eor	r15, r15
    5f08:	ee 24       	eor	r14, r14
    5f0a:	21 96       	adiw	r28, 0x01	; 1
    5f0c:	8c ad       	ldd	r24, Y+60	; 0x3c
    5f0e:	9d ad       	ldd	r25, Y+61	; 0x3d
    5f10:	ae ad       	ldd	r26, Y+62	; 0x3e
    5f12:	bf ad       	ldd	r27, Y+63	; 0x3f
    5f14:	21 97       	sbiw	r28, 0x01	; 1
    5f16:	a0 70       	andi	r26, 0x00	; 0
    5f18:	b0 70       	andi	r27, 0x00	; 0
    5f1a:	e8 2a       	or	r14, r24
    5f1c:	f9 2a       	or	r15, r25
    5f1e:	0a 2b       	or	r16, r26
    5f20:	1b 2b       	or	r17, r27
    5f22:	e2 16       	cp	r14, r18
    5f24:	f3 06       	cpc	r15, r19
    5f26:	04 07       	cpc	r16, r20
    5f28:	15 07       	cpc	r17, r21
    5f2a:	c0 f4       	brcc	.+48     	; 0x5f5c <__divdi3+0x546>
    5f2c:	08 94       	sec
    5f2e:	a1 08       	sbc	r10, r1
    5f30:	b1 08       	sbc	r11, r1
    5f32:	c1 08       	sbc	r12, r1
    5f34:	d1 08       	sbc	r13, r1
    5f36:	e2 0c       	add	r14, r2
    5f38:	f3 1c       	adc	r15, r3
    5f3a:	04 1d       	adc	r16, r4
    5f3c:	15 1d       	adc	r17, r5
    5f3e:	e2 14       	cp	r14, r2
    5f40:	f3 04       	cpc	r15, r3
    5f42:	04 05       	cpc	r16, r4
    5f44:	15 05       	cpc	r17, r5
    5f46:	50 f0       	brcs	.+20     	; 0x5f5c <__divdi3+0x546>
    5f48:	e2 16       	cp	r14, r18
    5f4a:	f3 06       	cpc	r15, r19
    5f4c:	04 07       	cpc	r16, r20
    5f4e:	15 07       	cpc	r17, r21
    5f50:	28 f4       	brcc	.+10     	; 0x5f5c <__divdi3+0x546>
    5f52:	08 94       	sec
    5f54:	a1 08       	sbc	r10, r1
    5f56:	b1 08       	sbc	r11, r1
    5f58:	c1 08       	sbc	r12, r1
    5f5a:	d1 08       	sbc	r13, r1
    5f5c:	d3 01       	movw	r26, r6
    5f5e:	99 27       	eor	r25, r25
    5f60:	88 27       	eor	r24, r24
    5f62:	86 01       	movw	r16, r12
    5f64:	75 01       	movw	r14, r10
    5f66:	e8 2a       	or	r14, r24
    5f68:	f9 2a       	or	r15, r25
    5f6a:	0a 2b       	or	r16, r26
    5f6c:	1b 2b       	or	r17, r27
    5f6e:	25 96       	adiw	r28, 0x05	; 5
    5f70:	ec ae       	std	Y+60, r14	; 0x3c
    5f72:	fd ae       	std	Y+61, r15	; 0x3d
    5f74:	0e af       	std	Y+62, r16	; 0x3e
    5f76:	1f af       	std	Y+63, r17	; 0x3f
    5f78:	25 97       	sbiw	r28, 0x05	; 5
    5f7a:	eb c4       	rjmp	.+2518   	; 0x6952 <__divdi3+0xf3c>
    5f7c:	21 14       	cp	r2, r1
    5f7e:	31 04       	cpc	r3, r1
    5f80:	41 04       	cpc	r4, r1
    5f82:	51 04       	cpc	r5, r1
    5f84:	71 f4       	brne	.+28     	; 0x5fa2 <__divdi3+0x58c>
    5f86:	61 e0       	ldi	r22, 0x01	; 1
    5f88:	70 e0       	ldi	r23, 0x00	; 0
    5f8a:	80 e0       	ldi	r24, 0x00	; 0
    5f8c:	90 e0       	ldi	r25, 0x00	; 0
    5f8e:	20 e0       	ldi	r18, 0x00	; 0
    5f90:	30 e0       	ldi	r19, 0x00	; 0
    5f92:	40 e0       	ldi	r20, 0x00	; 0
    5f94:	50 e0       	ldi	r21, 0x00	; 0
    5f96:	0e 94 a7 38 	call	0x714e	; 0x714e <__udivmodsi4>
    5f9a:	c9 01       	movw	r24, r18
    5f9c:	da 01       	movw	r26, r20
    5f9e:	1c 01       	movw	r2, r24
    5fa0:	2d 01       	movw	r4, r26
    5fa2:	00 e0       	ldi	r16, 0x00	; 0
    5fa4:	20 16       	cp	r2, r16
    5fa6:	00 e0       	ldi	r16, 0x00	; 0
    5fa8:	30 06       	cpc	r3, r16
    5faa:	01 e0       	ldi	r16, 0x01	; 1
    5fac:	40 06       	cpc	r4, r16
    5fae:	00 e0       	ldi	r16, 0x00	; 0
    5fb0:	50 06       	cpc	r5, r16
    5fb2:	88 f4       	brcc	.+34     	; 0x5fd6 <__divdi3+0x5c0>
    5fb4:	1f ef       	ldi	r17, 0xFF	; 255
    5fb6:	21 16       	cp	r2, r17
    5fb8:	31 04       	cpc	r3, r1
    5fba:	41 04       	cpc	r4, r1
    5fbc:	51 04       	cpc	r5, r1
    5fbe:	31 f0       	breq	.+12     	; 0x5fcc <__divdi3+0x5b6>
    5fc0:	28 f0       	brcs	.+10     	; 0x5fcc <__divdi3+0x5b6>
    5fc2:	48 e0       	ldi	r20, 0x08	; 8
    5fc4:	50 e0       	ldi	r21, 0x00	; 0
    5fc6:	60 e0       	ldi	r22, 0x00	; 0
    5fc8:	70 e0       	ldi	r23, 0x00	; 0
    5fca:	17 c0       	rjmp	.+46     	; 0x5ffa <__divdi3+0x5e4>
    5fcc:	40 e0       	ldi	r20, 0x00	; 0
    5fce:	50 e0       	ldi	r21, 0x00	; 0
    5fd0:	60 e0       	ldi	r22, 0x00	; 0
    5fd2:	70 e0       	ldi	r23, 0x00	; 0
    5fd4:	12 c0       	rjmp	.+36     	; 0x5ffa <__divdi3+0x5e4>
    5fd6:	20 e0       	ldi	r18, 0x00	; 0
    5fd8:	22 16       	cp	r2, r18
    5fda:	20 e0       	ldi	r18, 0x00	; 0
    5fdc:	32 06       	cpc	r3, r18
    5fde:	20 e0       	ldi	r18, 0x00	; 0
    5fe0:	42 06       	cpc	r4, r18
    5fe2:	21 e0       	ldi	r18, 0x01	; 1
    5fe4:	52 06       	cpc	r5, r18
    5fe6:	28 f0       	brcs	.+10     	; 0x5ff2 <__divdi3+0x5dc>
    5fe8:	48 e1       	ldi	r20, 0x18	; 24
    5fea:	50 e0       	ldi	r21, 0x00	; 0
    5fec:	60 e0       	ldi	r22, 0x00	; 0
    5fee:	70 e0       	ldi	r23, 0x00	; 0
    5ff0:	04 c0       	rjmp	.+8      	; 0x5ffa <__divdi3+0x5e4>
    5ff2:	40 e1       	ldi	r20, 0x10	; 16
    5ff4:	50 e0       	ldi	r21, 0x00	; 0
    5ff6:	60 e0       	ldi	r22, 0x00	; 0
    5ff8:	70 e0       	ldi	r23, 0x00	; 0
    5ffa:	d2 01       	movw	r26, r4
    5ffc:	c1 01       	movw	r24, r2
    5ffe:	04 2e       	mov	r0, r20
    6000:	04 c0       	rjmp	.+8      	; 0x600a <__divdi3+0x5f4>
    6002:	b6 95       	lsr	r27
    6004:	a7 95       	ror	r26
    6006:	97 95       	ror	r25
    6008:	87 95       	ror	r24
    600a:	0a 94       	dec	r0
    600c:	d2 f7       	brpl	.-12     	; 0x6002 <__divdi3+0x5ec>
    600e:	8c 52       	subi	r24, 0x2C	; 44
    6010:	9f 4f       	sbci	r25, 0xFF	; 255
    6012:	dc 01       	movw	r26, r24
    6014:	2c 91       	ld	r18, X
    6016:	e0 e2       	ldi	r30, 0x20	; 32
    6018:	ee 2e       	mov	r14, r30
    601a:	f1 2c       	mov	r15, r1
    601c:	01 2d       	mov	r16, r1
    601e:	11 2d       	mov	r17, r1
    6020:	d8 01       	movw	r26, r16
    6022:	c7 01       	movw	r24, r14
    6024:	84 1b       	sub	r24, r20
    6026:	95 0b       	sbc	r25, r21
    6028:	a6 0b       	sbc	r26, r22
    602a:	b7 0b       	sbc	r27, r23
    602c:	82 1b       	sub	r24, r18
    602e:	91 09       	sbc	r25, r1
    6030:	a1 09       	sbc	r26, r1
    6032:	b1 09       	sbc	r27, r1
    6034:	00 97       	sbiw	r24, 0x00	; 0
    6036:	a1 05       	cpc	r26, r1
    6038:	b1 05       	cpc	r27, r1
    603a:	61 f4       	brne	.+24     	; 0x6054 <__divdi3+0x63e>
    603c:	64 01       	movw	r12, r8
    603e:	53 01       	movw	r10, r6
    6040:	a2 18       	sub	r10, r2
    6042:	b3 08       	sbc	r11, r3
    6044:	c4 08       	sbc	r12, r4
    6046:	d5 08       	sbc	r13, r5
    6048:	31 e0       	ldi	r19, 0x01	; 1
    604a:	63 2e       	mov	r6, r19
    604c:	71 2c       	mov	r7, r1
    604e:	81 2c       	mov	r8, r1
    6050:	91 2c       	mov	r9, r1
    6052:	24 c1       	rjmp	.+584    	; 0x629c <__divdi3+0x886>
    6054:	e3 96       	adiw	r28, 0x33	; 51
    6056:	8f af       	std	Y+63, r24	; 0x3f
    6058:	e3 97       	sbiw	r28, 0x33	; 51
    605a:	08 2e       	mov	r0, r24
    605c:	04 c0       	rjmp	.+8      	; 0x6066 <__divdi3+0x650>
    605e:	22 0c       	add	r2, r2
    6060:	33 1c       	adc	r3, r3
    6062:	44 1c       	adc	r4, r4
    6064:	55 1c       	adc	r5, r5
    6066:	0a 94       	dec	r0
    6068:	d2 f7       	brpl	.-12     	; 0x605e <__divdi3+0x648>
    606a:	ee 2d       	mov	r30, r14
    606c:	e8 1b       	sub	r30, r24
    606e:	64 01       	movw	r12, r8
    6070:	53 01       	movw	r10, r6
    6072:	0e 2e       	mov	r0, r30
    6074:	04 c0       	rjmp	.+8      	; 0x607e <__divdi3+0x668>
    6076:	d6 94       	lsr	r13
    6078:	c7 94       	ror	r12
    607a:	b7 94       	ror	r11
    607c:	a7 94       	ror	r10
    607e:	0a 94       	dec	r0
    6080:	d2 f7       	brpl	.-12     	; 0x6076 <__divdi3+0x660>
    6082:	a4 01       	movw	r20, r8
    6084:	93 01       	movw	r18, r6
    6086:	e3 96       	adiw	r28, 0x33	; 51
    6088:	0f ac       	ldd	r0, Y+63	; 0x3f
    608a:	e3 97       	sbiw	r28, 0x33	; 51
    608c:	04 c0       	rjmp	.+8      	; 0x6096 <__divdi3+0x680>
    608e:	22 0f       	add	r18, r18
    6090:	33 1f       	adc	r19, r19
    6092:	44 1f       	adc	r20, r20
    6094:	55 1f       	adc	r21, r21
    6096:	0a 94       	dec	r0
    6098:	d2 f7       	brpl	.-12     	; 0x608e <__divdi3+0x678>
    609a:	21 96       	adiw	r28, 0x01	; 1
    609c:	6c ac       	ldd	r6, Y+60	; 0x3c
    609e:	7d ac       	ldd	r7, Y+61	; 0x3d
    60a0:	8e ac       	ldd	r8, Y+62	; 0x3e
    60a2:	9f ac       	ldd	r9, Y+63	; 0x3f
    60a4:	21 97       	sbiw	r28, 0x01	; 1
    60a6:	0e 2e       	mov	r0, r30
    60a8:	04 c0       	rjmp	.+8      	; 0x60b2 <__divdi3+0x69c>
    60aa:	96 94       	lsr	r9
    60ac:	87 94       	ror	r8
    60ae:	77 94       	ror	r7
    60b0:	67 94       	ror	r6
    60b2:	0a 94       	dec	r0
    60b4:	d2 f7       	brpl	.-12     	; 0x60aa <__divdi3+0x694>
    60b6:	84 01       	movw	r16, r8
    60b8:	73 01       	movw	r14, r6
    60ba:	e2 2a       	or	r14, r18
    60bc:	f3 2a       	or	r15, r19
    60be:	04 2b       	or	r16, r20
    60c0:	15 2b       	or	r17, r21
    60c2:	e9 ae       	std	Y+57, r14	; 0x39
    60c4:	fa ae       	std	Y+58, r15	; 0x3a
    60c6:	0b af       	std	Y+59, r16	; 0x3b
    60c8:	1c af       	std	Y+60, r17	; 0x3c
    60ca:	32 01       	movw	r6, r4
    60cc:	88 24       	eor	r8, r8
    60ce:	99 24       	eor	r9, r9
    60d0:	92 01       	movw	r18, r4
    60d2:	81 01       	movw	r16, r2
    60d4:	20 70       	andi	r18, 0x00	; 0
    60d6:	30 70       	andi	r19, 0x00	; 0
    60d8:	61 96       	adiw	r28, 0x11	; 17
    60da:	0c af       	std	Y+60, r16	; 0x3c
    60dc:	1d af       	std	Y+61, r17	; 0x3d
    60de:	2e af       	std	Y+62, r18	; 0x3e
    60e0:	3f af       	std	Y+63, r19	; 0x3f
    60e2:	61 97       	sbiw	r28, 0x11	; 17
    60e4:	c6 01       	movw	r24, r12
    60e6:	b5 01       	movw	r22, r10
    60e8:	a4 01       	movw	r20, r8
    60ea:	93 01       	movw	r18, r6
    60ec:	0e 94 a7 38 	call	0x714e	; 0x714e <__udivmodsi4>
    60f0:	7b 01       	movw	r14, r22
    60f2:	8c 01       	movw	r16, r24
    60f4:	c6 01       	movw	r24, r12
    60f6:	b5 01       	movw	r22, r10
    60f8:	a4 01       	movw	r20, r8
    60fa:	93 01       	movw	r18, r6
    60fc:	0e 94 a7 38 	call	0x714e	; 0x714e <__udivmodsi4>
    6100:	c9 01       	movw	r24, r18
    6102:	da 01       	movw	r26, r20
    6104:	65 96       	adiw	r28, 0x15	; 21
    6106:	8c af       	std	Y+60, r24	; 0x3c
    6108:	9d af       	std	Y+61, r25	; 0x3d
    610a:	ae af       	std	Y+62, r26	; 0x3e
    610c:	bf af       	std	Y+63, r27	; 0x3f
    610e:	65 97       	sbiw	r28, 0x15	; 21
    6110:	bc 01       	movw	r22, r24
    6112:	cd 01       	movw	r24, r26
    6114:	61 96       	adiw	r28, 0x11	; 17
    6116:	2c ad       	ldd	r18, Y+60	; 0x3c
    6118:	3d ad       	ldd	r19, Y+61	; 0x3d
    611a:	4e ad       	ldd	r20, Y+62	; 0x3e
    611c:	5f ad       	ldd	r21, Y+63	; 0x3f
    611e:	61 97       	sbiw	r28, 0x11	; 17
    6120:	0e 94 75 38 	call	0x70ea	; 0x70ea <__mulsi3>
    6124:	9b 01       	movw	r18, r22
    6126:	ac 01       	movw	r20, r24
    6128:	87 01       	movw	r16, r14
    612a:	ff 24       	eor	r15, r15
    612c:	ee 24       	eor	r14, r14
    612e:	a9 ac       	ldd	r10, Y+57	; 0x39
    6130:	ba ac       	ldd	r11, Y+58	; 0x3a
    6132:	cb ac       	ldd	r12, Y+59	; 0x3b
    6134:	dc ac       	ldd	r13, Y+60	; 0x3c
    6136:	c6 01       	movw	r24, r12
    6138:	aa 27       	eor	r26, r26
    613a:	bb 27       	eor	r27, r27
    613c:	5c 01       	movw	r10, r24
    613e:	6d 01       	movw	r12, r26
    6140:	ae 28       	or	r10, r14
    6142:	bf 28       	or	r11, r15
    6144:	c0 2a       	or	r12, r16
    6146:	d1 2a       	or	r13, r17
    6148:	a2 16       	cp	r10, r18
    614a:	b3 06       	cpc	r11, r19
    614c:	c4 06       	cpc	r12, r20
    614e:	d5 06       	cpc	r13, r21
    6150:	60 f5       	brcc	.+88     	; 0x61aa <__divdi3+0x794>
    6152:	65 96       	adiw	r28, 0x15	; 21
    6154:	6c ad       	ldd	r22, Y+60	; 0x3c
    6156:	7d ad       	ldd	r23, Y+61	; 0x3d
    6158:	8e ad       	ldd	r24, Y+62	; 0x3e
    615a:	9f ad       	ldd	r25, Y+63	; 0x3f
    615c:	65 97       	sbiw	r28, 0x15	; 21
    615e:	61 50       	subi	r22, 0x01	; 1
    6160:	70 40       	sbci	r23, 0x00	; 0
    6162:	80 40       	sbci	r24, 0x00	; 0
    6164:	90 40       	sbci	r25, 0x00	; 0
    6166:	65 96       	adiw	r28, 0x15	; 21
    6168:	6c af       	std	Y+60, r22	; 0x3c
    616a:	7d af       	std	Y+61, r23	; 0x3d
    616c:	8e af       	std	Y+62, r24	; 0x3e
    616e:	9f af       	std	Y+63, r25	; 0x3f
    6170:	65 97       	sbiw	r28, 0x15	; 21
    6172:	a2 0c       	add	r10, r2
    6174:	b3 1c       	adc	r11, r3
    6176:	c4 1c       	adc	r12, r4
    6178:	d5 1c       	adc	r13, r5
    617a:	a2 14       	cp	r10, r2
    617c:	b3 04       	cpc	r11, r3
    617e:	c4 04       	cpc	r12, r4
    6180:	d5 04       	cpc	r13, r5
    6182:	98 f0       	brcs	.+38     	; 0x61aa <__divdi3+0x794>
    6184:	a2 16       	cp	r10, r18
    6186:	b3 06       	cpc	r11, r19
    6188:	c4 06       	cpc	r12, r20
    618a:	d5 06       	cpc	r13, r21
    618c:	70 f4       	brcc	.+28     	; 0x61aa <__divdi3+0x794>
    618e:	61 50       	subi	r22, 0x01	; 1
    6190:	70 40       	sbci	r23, 0x00	; 0
    6192:	80 40       	sbci	r24, 0x00	; 0
    6194:	90 40       	sbci	r25, 0x00	; 0
    6196:	65 96       	adiw	r28, 0x15	; 21
    6198:	6c af       	std	Y+60, r22	; 0x3c
    619a:	7d af       	std	Y+61, r23	; 0x3d
    619c:	8e af       	std	Y+62, r24	; 0x3e
    619e:	9f af       	std	Y+63, r25	; 0x3f
    61a0:	65 97       	sbiw	r28, 0x15	; 21
    61a2:	a2 0c       	add	r10, r2
    61a4:	b3 1c       	adc	r11, r3
    61a6:	c4 1c       	adc	r12, r4
    61a8:	d5 1c       	adc	r13, r5
    61aa:	a2 1a       	sub	r10, r18
    61ac:	b3 0a       	sbc	r11, r19
    61ae:	c4 0a       	sbc	r12, r20
    61b0:	d5 0a       	sbc	r13, r21
    61b2:	c6 01       	movw	r24, r12
    61b4:	b5 01       	movw	r22, r10
    61b6:	a4 01       	movw	r20, r8
    61b8:	93 01       	movw	r18, r6
    61ba:	0e 94 a7 38 	call	0x714e	; 0x714e <__udivmodsi4>
    61be:	7b 01       	movw	r14, r22
    61c0:	8c 01       	movw	r16, r24
    61c2:	c6 01       	movw	r24, r12
    61c4:	b5 01       	movw	r22, r10
    61c6:	a4 01       	movw	r20, r8
    61c8:	93 01       	movw	r18, r6
    61ca:	0e 94 a7 38 	call	0x714e	; 0x714e <__udivmodsi4>
    61ce:	c9 01       	movw	r24, r18
    61d0:	da 01       	movw	r26, r20
    61d2:	3c 01       	movw	r6, r24
    61d4:	4d 01       	movw	r8, r26
    61d6:	c4 01       	movw	r24, r8
    61d8:	b3 01       	movw	r22, r6
    61da:	61 96       	adiw	r28, 0x11	; 17
    61dc:	2c ad       	ldd	r18, Y+60	; 0x3c
    61de:	3d ad       	ldd	r19, Y+61	; 0x3d
    61e0:	4e ad       	ldd	r20, Y+62	; 0x3e
    61e2:	5f ad       	ldd	r21, Y+63	; 0x3f
    61e4:	61 97       	sbiw	r28, 0x11	; 17
    61e6:	0e 94 75 38 	call	0x70ea	; 0x70ea <__mulsi3>
    61ea:	9b 01       	movw	r18, r22
    61ec:	ac 01       	movw	r20, r24
    61ee:	87 01       	movw	r16, r14
    61f0:	ff 24       	eor	r15, r15
    61f2:	ee 24       	eor	r14, r14
    61f4:	89 ad       	ldd	r24, Y+57	; 0x39
    61f6:	9a ad       	ldd	r25, Y+58	; 0x3a
    61f8:	ab ad       	ldd	r26, Y+59	; 0x3b
    61fa:	bc ad       	ldd	r27, Y+60	; 0x3c
    61fc:	a0 70       	andi	r26, 0x00	; 0
    61fe:	b0 70       	andi	r27, 0x00	; 0
    6200:	57 01       	movw	r10, r14
    6202:	68 01       	movw	r12, r16
    6204:	a8 2a       	or	r10, r24
    6206:	b9 2a       	or	r11, r25
    6208:	ca 2a       	or	r12, r26
    620a:	db 2a       	or	r13, r27
    620c:	a2 16       	cp	r10, r18
    620e:	b3 06       	cpc	r11, r19
    6210:	c4 06       	cpc	r12, r20
    6212:	d5 06       	cpc	r13, r21
    6214:	e0 f4       	brcc	.+56     	; 0x624e <__divdi3+0x838>
    6216:	08 94       	sec
    6218:	61 08       	sbc	r6, r1
    621a:	71 08       	sbc	r7, r1
    621c:	81 08       	sbc	r8, r1
    621e:	91 08       	sbc	r9, r1
    6220:	a2 0c       	add	r10, r2
    6222:	b3 1c       	adc	r11, r3
    6224:	c4 1c       	adc	r12, r4
    6226:	d5 1c       	adc	r13, r5
    6228:	a2 14       	cp	r10, r2
    622a:	b3 04       	cpc	r11, r3
    622c:	c4 04       	cpc	r12, r4
    622e:	d5 04       	cpc	r13, r5
    6230:	70 f0       	brcs	.+28     	; 0x624e <__divdi3+0x838>
    6232:	a2 16       	cp	r10, r18
    6234:	b3 06       	cpc	r11, r19
    6236:	c4 06       	cpc	r12, r20
    6238:	d5 06       	cpc	r13, r21
    623a:	48 f4       	brcc	.+18     	; 0x624e <__divdi3+0x838>
    623c:	08 94       	sec
    623e:	61 08       	sbc	r6, r1
    6240:	71 08       	sbc	r7, r1
    6242:	81 08       	sbc	r8, r1
    6244:	91 08       	sbc	r9, r1
    6246:	a2 0c       	add	r10, r2
    6248:	b3 1c       	adc	r11, r3
    624a:	c4 1c       	adc	r12, r4
    624c:	d5 1c       	adc	r13, r5
    624e:	21 96       	adiw	r28, 0x01	; 1
    6250:	8c ad       	ldd	r24, Y+60	; 0x3c
    6252:	9d ad       	ldd	r25, Y+61	; 0x3d
    6254:	ae ad       	ldd	r26, Y+62	; 0x3e
    6256:	bf ad       	ldd	r27, Y+63	; 0x3f
    6258:	21 97       	sbiw	r28, 0x01	; 1
    625a:	e3 96       	adiw	r28, 0x33	; 51
    625c:	0f ac       	ldd	r0, Y+63	; 0x3f
    625e:	e3 97       	sbiw	r28, 0x33	; 51
    6260:	04 c0       	rjmp	.+8      	; 0x626a <__divdi3+0x854>
    6262:	88 0f       	add	r24, r24
    6264:	99 1f       	adc	r25, r25
    6266:	aa 1f       	adc	r26, r26
    6268:	bb 1f       	adc	r27, r27
    626a:	0a 94       	dec	r0
    626c:	d2 f7       	brpl	.-12     	; 0x6262 <__divdi3+0x84c>
    626e:	21 96       	adiw	r28, 0x01	; 1
    6270:	8c af       	std	Y+60, r24	; 0x3c
    6272:	9d af       	std	Y+61, r25	; 0x3d
    6274:	ae af       	std	Y+62, r26	; 0x3e
    6276:	bf af       	std	Y+63, r27	; 0x3f
    6278:	21 97       	sbiw	r28, 0x01	; 1
    627a:	a2 1a       	sub	r10, r18
    627c:	b3 0a       	sbc	r11, r19
    627e:	c4 0a       	sbc	r12, r20
    6280:	d5 0a       	sbc	r13, r21
    6282:	65 96       	adiw	r28, 0x15	; 21
    6284:	ec ac       	ldd	r14, Y+60	; 0x3c
    6286:	fd ac       	ldd	r15, Y+61	; 0x3d
    6288:	0e ad       	ldd	r16, Y+62	; 0x3e
    628a:	1f ad       	ldd	r17, Y+63	; 0x3f
    628c:	65 97       	sbiw	r28, 0x15	; 21
    628e:	d7 01       	movw	r26, r14
    6290:	99 27       	eor	r25, r25
    6292:	88 27       	eor	r24, r24
    6294:	68 2a       	or	r6, r24
    6296:	79 2a       	or	r7, r25
    6298:	8a 2a       	or	r8, r26
    629a:	9b 2a       	or	r9, r27
    629c:	82 01       	movw	r16, r4
    629e:	22 27       	eor	r18, r18
    62a0:	33 27       	eor	r19, r19
    62a2:	69 96       	adiw	r28, 0x19	; 25
    62a4:	0c af       	std	Y+60, r16	; 0x3c
    62a6:	1d af       	std	Y+61, r17	; 0x3d
    62a8:	2e af       	std	Y+62, r18	; 0x3e
    62aa:	3f af       	std	Y+63, r19	; 0x3f
    62ac:	69 97       	sbiw	r28, 0x19	; 25
    62ae:	a2 01       	movw	r20, r4
    62b0:	91 01       	movw	r18, r2
    62b2:	40 70       	andi	r20, 0x00	; 0
    62b4:	50 70       	andi	r21, 0x00	; 0
    62b6:	6d 96       	adiw	r28, 0x1d	; 29
    62b8:	2c af       	std	Y+60, r18	; 0x3c
    62ba:	3d af       	std	Y+61, r19	; 0x3d
    62bc:	4e af       	std	Y+62, r20	; 0x3e
    62be:	5f af       	std	Y+63, r21	; 0x3f
    62c0:	6d 97       	sbiw	r28, 0x1d	; 29
    62c2:	c6 01       	movw	r24, r12
    62c4:	b5 01       	movw	r22, r10
    62c6:	69 96       	adiw	r28, 0x19	; 25
    62c8:	2c ad       	ldd	r18, Y+60	; 0x3c
    62ca:	3d ad       	ldd	r19, Y+61	; 0x3d
    62cc:	4e ad       	ldd	r20, Y+62	; 0x3e
    62ce:	5f ad       	ldd	r21, Y+63	; 0x3f
    62d0:	69 97       	sbiw	r28, 0x19	; 25
    62d2:	0e 94 a7 38 	call	0x714e	; 0x714e <__udivmodsi4>
    62d6:	7b 01       	movw	r14, r22
    62d8:	8c 01       	movw	r16, r24
    62da:	c6 01       	movw	r24, r12
    62dc:	b5 01       	movw	r22, r10
    62de:	69 96       	adiw	r28, 0x19	; 25
    62e0:	2c ad       	ldd	r18, Y+60	; 0x3c
    62e2:	3d ad       	ldd	r19, Y+61	; 0x3d
    62e4:	4e ad       	ldd	r20, Y+62	; 0x3e
    62e6:	5f ad       	ldd	r21, Y+63	; 0x3f
    62e8:	69 97       	sbiw	r28, 0x19	; 25
    62ea:	0e 94 a7 38 	call	0x714e	; 0x714e <__udivmodsi4>
    62ee:	c9 01       	movw	r24, r18
    62f0:	da 01       	movw	r26, r20
    62f2:	a1 96       	adiw	r28, 0x21	; 33
    62f4:	8c af       	std	Y+60, r24	; 0x3c
    62f6:	9d af       	std	Y+61, r25	; 0x3d
    62f8:	ae af       	std	Y+62, r26	; 0x3e
    62fa:	bf af       	std	Y+63, r27	; 0x3f
    62fc:	a1 97       	sbiw	r28, 0x21	; 33
    62fe:	bc 01       	movw	r22, r24
    6300:	cd 01       	movw	r24, r26
    6302:	6d 96       	adiw	r28, 0x1d	; 29
    6304:	2c ad       	ldd	r18, Y+60	; 0x3c
    6306:	3d ad       	ldd	r19, Y+61	; 0x3d
    6308:	4e ad       	ldd	r20, Y+62	; 0x3e
    630a:	5f ad       	ldd	r21, Y+63	; 0x3f
    630c:	6d 97       	sbiw	r28, 0x1d	; 29
    630e:	0e 94 75 38 	call	0x70ea	; 0x70ea <__mulsi3>
    6312:	9b 01       	movw	r18, r22
    6314:	ac 01       	movw	r20, r24
    6316:	87 01       	movw	r16, r14
    6318:	ff 24       	eor	r15, r15
    631a:	ee 24       	eor	r14, r14
    631c:	21 96       	adiw	r28, 0x01	; 1
    631e:	ac ac       	ldd	r10, Y+60	; 0x3c
    6320:	bd ac       	ldd	r11, Y+61	; 0x3d
    6322:	ce ac       	ldd	r12, Y+62	; 0x3e
    6324:	df ac       	ldd	r13, Y+63	; 0x3f
    6326:	21 97       	sbiw	r28, 0x01	; 1
    6328:	c6 01       	movw	r24, r12
    632a:	aa 27       	eor	r26, r26
    632c:	bb 27       	eor	r27, r27
    632e:	57 01       	movw	r10, r14
    6330:	68 01       	movw	r12, r16
    6332:	a8 2a       	or	r10, r24
    6334:	b9 2a       	or	r11, r25
    6336:	ca 2a       	or	r12, r26
    6338:	db 2a       	or	r13, r27
    633a:	a2 16       	cp	r10, r18
    633c:	b3 06       	cpc	r11, r19
    633e:	c4 06       	cpc	r12, r20
    6340:	d5 06       	cpc	r13, r21
    6342:	60 f5       	brcc	.+88     	; 0x639c <__divdi3+0x986>
    6344:	a1 96       	adiw	r28, 0x21	; 33
    6346:	6c ad       	ldd	r22, Y+60	; 0x3c
    6348:	7d ad       	ldd	r23, Y+61	; 0x3d
    634a:	8e ad       	ldd	r24, Y+62	; 0x3e
    634c:	9f ad       	ldd	r25, Y+63	; 0x3f
    634e:	a1 97       	sbiw	r28, 0x21	; 33
    6350:	61 50       	subi	r22, 0x01	; 1
    6352:	70 40       	sbci	r23, 0x00	; 0
    6354:	80 40       	sbci	r24, 0x00	; 0
    6356:	90 40       	sbci	r25, 0x00	; 0
    6358:	a1 96       	adiw	r28, 0x21	; 33
    635a:	6c af       	std	Y+60, r22	; 0x3c
    635c:	7d af       	std	Y+61, r23	; 0x3d
    635e:	8e af       	std	Y+62, r24	; 0x3e
    6360:	9f af       	std	Y+63, r25	; 0x3f
    6362:	a1 97       	sbiw	r28, 0x21	; 33
    6364:	a2 0c       	add	r10, r2
    6366:	b3 1c       	adc	r11, r3
    6368:	c4 1c       	adc	r12, r4
    636a:	d5 1c       	adc	r13, r5
    636c:	a2 14       	cp	r10, r2
    636e:	b3 04       	cpc	r11, r3
    6370:	c4 04       	cpc	r12, r4
    6372:	d5 04       	cpc	r13, r5
    6374:	98 f0       	brcs	.+38     	; 0x639c <__divdi3+0x986>
    6376:	a2 16       	cp	r10, r18
    6378:	b3 06       	cpc	r11, r19
    637a:	c4 06       	cpc	r12, r20
    637c:	d5 06       	cpc	r13, r21
    637e:	70 f4       	brcc	.+28     	; 0x639c <__divdi3+0x986>
    6380:	61 50       	subi	r22, 0x01	; 1
    6382:	70 40       	sbci	r23, 0x00	; 0
    6384:	80 40       	sbci	r24, 0x00	; 0
    6386:	90 40       	sbci	r25, 0x00	; 0
    6388:	a1 96       	adiw	r28, 0x21	; 33
    638a:	6c af       	std	Y+60, r22	; 0x3c
    638c:	7d af       	std	Y+61, r23	; 0x3d
    638e:	8e af       	std	Y+62, r24	; 0x3e
    6390:	9f af       	std	Y+63, r25	; 0x3f
    6392:	a1 97       	sbiw	r28, 0x21	; 33
    6394:	a2 0c       	add	r10, r2
    6396:	b3 1c       	adc	r11, r3
    6398:	c4 1c       	adc	r12, r4
    639a:	d5 1c       	adc	r13, r5
    639c:	a2 1a       	sub	r10, r18
    639e:	b3 0a       	sbc	r11, r19
    63a0:	c4 0a       	sbc	r12, r20
    63a2:	d5 0a       	sbc	r13, r21
    63a4:	c6 01       	movw	r24, r12
    63a6:	b5 01       	movw	r22, r10
    63a8:	69 96       	adiw	r28, 0x19	; 25
    63aa:	2c ad       	ldd	r18, Y+60	; 0x3c
    63ac:	3d ad       	ldd	r19, Y+61	; 0x3d
    63ae:	4e ad       	ldd	r20, Y+62	; 0x3e
    63b0:	5f ad       	ldd	r21, Y+63	; 0x3f
    63b2:	69 97       	sbiw	r28, 0x19	; 25
    63b4:	0e 94 a7 38 	call	0x714e	; 0x714e <__udivmodsi4>
    63b8:	7b 01       	movw	r14, r22
    63ba:	8c 01       	movw	r16, r24
    63bc:	c6 01       	movw	r24, r12
    63be:	b5 01       	movw	r22, r10
    63c0:	69 96       	adiw	r28, 0x19	; 25
    63c2:	2c ad       	ldd	r18, Y+60	; 0x3c
    63c4:	3d ad       	ldd	r19, Y+61	; 0x3d
    63c6:	4e ad       	ldd	r20, Y+62	; 0x3e
    63c8:	5f ad       	ldd	r21, Y+63	; 0x3f
    63ca:	69 97       	sbiw	r28, 0x19	; 25
    63cc:	0e 94 a7 38 	call	0x714e	; 0x714e <__udivmodsi4>
    63d0:	c9 01       	movw	r24, r18
    63d2:	da 01       	movw	r26, r20
    63d4:	5c 01       	movw	r10, r24
    63d6:	6d 01       	movw	r12, r26
    63d8:	c6 01       	movw	r24, r12
    63da:	b5 01       	movw	r22, r10
    63dc:	6d 96       	adiw	r28, 0x1d	; 29
    63de:	2c ad       	ldd	r18, Y+60	; 0x3c
    63e0:	3d ad       	ldd	r19, Y+61	; 0x3d
    63e2:	4e ad       	ldd	r20, Y+62	; 0x3e
    63e4:	5f ad       	ldd	r21, Y+63	; 0x3f
    63e6:	6d 97       	sbiw	r28, 0x1d	; 29
    63e8:	0e 94 75 38 	call	0x70ea	; 0x70ea <__mulsi3>
    63ec:	9b 01       	movw	r18, r22
    63ee:	ac 01       	movw	r20, r24
    63f0:	87 01       	movw	r16, r14
    63f2:	ff 24       	eor	r15, r15
    63f4:	ee 24       	eor	r14, r14
    63f6:	21 96       	adiw	r28, 0x01	; 1
    63f8:	8c ad       	ldd	r24, Y+60	; 0x3c
    63fa:	9d ad       	ldd	r25, Y+61	; 0x3d
    63fc:	ae ad       	ldd	r26, Y+62	; 0x3e
    63fe:	bf ad       	ldd	r27, Y+63	; 0x3f
    6400:	21 97       	sbiw	r28, 0x01	; 1
    6402:	a0 70       	andi	r26, 0x00	; 0
    6404:	b0 70       	andi	r27, 0x00	; 0
    6406:	e8 2a       	or	r14, r24
    6408:	f9 2a       	or	r15, r25
    640a:	0a 2b       	or	r16, r26
    640c:	1b 2b       	or	r17, r27
    640e:	e2 16       	cp	r14, r18
    6410:	f3 06       	cpc	r15, r19
    6412:	04 07       	cpc	r16, r20
    6414:	15 07       	cpc	r17, r21
    6416:	c0 f4       	brcc	.+48     	; 0x6448 <__divdi3+0xa32>
    6418:	08 94       	sec
    641a:	a1 08       	sbc	r10, r1
    641c:	b1 08       	sbc	r11, r1
    641e:	c1 08       	sbc	r12, r1
    6420:	d1 08       	sbc	r13, r1
    6422:	e2 0c       	add	r14, r2
    6424:	f3 1c       	adc	r15, r3
    6426:	04 1d       	adc	r16, r4
    6428:	15 1d       	adc	r17, r5
    642a:	e2 14       	cp	r14, r2
    642c:	f3 04       	cpc	r15, r3
    642e:	04 05       	cpc	r16, r4
    6430:	15 05       	cpc	r17, r5
    6432:	50 f0       	brcs	.+20     	; 0x6448 <__divdi3+0xa32>
    6434:	e2 16       	cp	r14, r18
    6436:	f3 06       	cpc	r15, r19
    6438:	04 07       	cpc	r16, r20
    643a:	15 07       	cpc	r17, r21
    643c:	28 f4       	brcc	.+10     	; 0x6448 <__divdi3+0xa32>
    643e:	08 94       	sec
    6440:	a1 08       	sbc	r10, r1
    6442:	b1 08       	sbc	r11, r1
    6444:	c1 08       	sbc	r12, r1
    6446:	d1 08       	sbc	r13, r1
    6448:	a1 96       	adiw	r28, 0x21	; 33
    644a:	ec ac       	ldd	r14, Y+60	; 0x3c
    644c:	fd ac       	ldd	r15, Y+61	; 0x3d
    644e:	0e ad       	ldd	r16, Y+62	; 0x3e
    6450:	1f ad       	ldd	r17, Y+63	; 0x3f
    6452:	a1 97       	sbiw	r28, 0x21	; 33
    6454:	d7 01       	movw	r26, r14
    6456:	99 27       	eor	r25, r25
    6458:	88 27       	eor	r24, r24
    645a:	96 01       	movw	r18, r12
    645c:	85 01       	movw	r16, r10
    645e:	08 2b       	or	r16, r24
    6460:	19 2b       	or	r17, r25
    6462:	2a 2b       	or	r18, r26
    6464:	3b 2b       	or	r19, r27
    6466:	25 96       	adiw	r28, 0x05	; 5
    6468:	0c af       	std	Y+60, r16	; 0x3c
    646a:	1d af       	std	Y+61, r17	; 0x3d
    646c:	2e af       	std	Y+62, r18	; 0x3e
    646e:	3f af       	std	Y+63, r19	; 0x3f
    6470:	25 97       	sbiw	r28, 0x05	; 5
    6472:	72 c2       	rjmp	.+1252   	; 0x6958 <__divdi3+0xf42>
    6474:	6e 14       	cp	r6, r14
    6476:	7f 04       	cpc	r7, r15
    6478:	80 06       	cpc	r8, r16
    647a:	91 06       	cpc	r9, r17
    647c:	08 f4       	brcc	.+2      	; 0x6480 <__divdi3+0xa6a>
    647e:	5f c2       	rjmp	.+1214   	; 0x693e <__divdi3+0xf28>
    6480:	20 e0       	ldi	r18, 0x00	; 0
    6482:	e2 16       	cp	r14, r18
    6484:	20 e0       	ldi	r18, 0x00	; 0
    6486:	f2 06       	cpc	r15, r18
    6488:	21 e0       	ldi	r18, 0x01	; 1
    648a:	02 07       	cpc	r16, r18
    648c:	20 e0       	ldi	r18, 0x00	; 0
    648e:	12 07       	cpc	r17, r18
    6490:	88 f4       	brcc	.+34     	; 0x64b4 <__divdi3+0xa9e>
    6492:	3f ef       	ldi	r19, 0xFF	; 255
    6494:	e3 16       	cp	r14, r19
    6496:	f1 04       	cpc	r15, r1
    6498:	01 05       	cpc	r16, r1
    649a:	11 05       	cpc	r17, r1
    649c:	31 f0       	breq	.+12     	; 0x64aa <__divdi3+0xa94>
    649e:	28 f0       	brcs	.+10     	; 0x64aa <__divdi3+0xa94>
    64a0:	48 e0       	ldi	r20, 0x08	; 8
    64a2:	50 e0       	ldi	r21, 0x00	; 0
    64a4:	60 e0       	ldi	r22, 0x00	; 0
    64a6:	70 e0       	ldi	r23, 0x00	; 0
    64a8:	17 c0       	rjmp	.+46     	; 0x64d8 <__divdi3+0xac2>
    64aa:	40 e0       	ldi	r20, 0x00	; 0
    64ac:	50 e0       	ldi	r21, 0x00	; 0
    64ae:	60 e0       	ldi	r22, 0x00	; 0
    64b0:	70 e0       	ldi	r23, 0x00	; 0
    64b2:	12 c0       	rjmp	.+36     	; 0x64d8 <__divdi3+0xac2>
    64b4:	40 e0       	ldi	r20, 0x00	; 0
    64b6:	e4 16       	cp	r14, r20
    64b8:	40 e0       	ldi	r20, 0x00	; 0
    64ba:	f4 06       	cpc	r15, r20
    64bc:	40 e0       	ldi	r20, 0x00	; 0
    64be:	04 07       	cpc	r16, r20
    64c0:	41 e0       	ldi	r20, 0x01	; 1
    64c2:	14 07       	cpc	r17, r20
    64c4:	28 f0       	brcs	.+10     	; 0x64d0 <__divdi3+0xaba>
    64c6:	48 e1       	ldi	r20, 0x18	; 24
    64c8:	50 e0       	ldi	r21, 0x00	; 0
    64ca:	60 e0       	ldi	r22, 0x00	; 0
    64cc:	70 e0       	ldi	r23, 0x00	; 0
    64ce:	04 c0       	rjmp	.+8      	; 0x64d8 <__divdi3+0xac2>
    64d0:	40 e1       	ldi	r20, 0x10	; 16
    64d2:	50 e0       	ldi	r21, 0x00	; 0
    64d4:	60 e0       	ldi	r22, 0x00	; 0
    64d6:	70 e0       	ldi	r23, 0x00	; 0
    64d8:	d8 01       	movw	r26, r16
    64da:	c7 01       	movw	r24, r14
    64dc:	04 2e       	mov	r0, r20
    64de:	04 c0       	rjmp	.+8      	; 0x64e8 <__divdi3+0xad2>
    64e0:	b6 95       	lsr	r27
    64e2:	a7 95       	ror	r26
    64e4:	97 95       	ror	r25
    64e6:	87 95       	ror	r24
    64e8:	0a 94       	dec	r0
    64ea:	d2 f7       	brpl	.-12     	; 0x64e0 <__divdi3+0xaca>
    64ec:	8c 52       	subi	r24, 0x2C	; 44
    64ee:	9f 4f       	sbci	r25, 0xFF	; 255
    64f0:	dc 01       	movw	r26, r24
    64f2:	2c 91       	ld	r18, X
    64f4:	30 e2       	ldi	r19, 0x20	; 32
    64f6:	a3 2e       	mov	r10, r19
    64f8:	b1 2c       	mov	r11, r1
    64fa:	c1 2c       	mov	r12, r1
    64fc:	d1 2c       	mov	r13, r1
    64fe:	d6 01       	movw	r26, r12
    6500:	c5 01       	movw	r24, r10
    6502:	84 1b       	sub	r24, r20
    6504:	95 0b       	sbc	r25, r21
    6506:	a6 0b       	sbc	r26, r22
    6508:	b7 0b       	sbc	r27, r23
    650a:	82 1b       	sub	r24, r18
    650c:	91 09       	sbc	r25, r1
    650e:	a1 09       	sbc	r26, r1
    6510:	b1 09       	sbc	r27, r1
    6512:	00 97       	sbiw	r24, 0x00	; 0
    6514:	a1 05       	cpc	r26, r1
    6516:	b1 05       	cpc	r27, r1
    6518:	99 f4       	brne	.+38     	; 0x6540 <__divdi3+0xb2a>
    651a:	e6 14       	cp	r14, r6
    651c:	f7 04       	cpc	r15, r7
    651e:	08 05       	cpc	r16, r8
    6520:	19 05       	cpc	r17, r9
    6522:	08 f4       	brcc	.+2      	; 0x6526 <__divdi3+0xb10>
    6524:	fe c1       	rjmp	.+1020   	; 0x6922 <__divdi3+0xf0c>
    6526:	21 96       	adiw	r28, 0x01	; 1
    6528:	6c ac       	ldd	r6, Y+60	; 0x3c
    652a:	7d ac       	ldd	r7, Y+61	; 0x3d
    652c:	8e ac       	ldd	r8, Y+62	; 0x3e
    652e:	9f ac       	ldd	r9, Y+63	; 0x3f
    6530:	21 97       	sbiw	r28, 0x01	; 1
    6532:	62 14       	cp	r6, r2
    6534:	73 04       	cpc	r7, r3
    6536:	84 04       	cpc	r8, r4
    6538:	95 04       	cpc	r9, r5
    653a:	08 f0       	brcs	.+2      	; 0x653e <__divdi3+0xb28>
    653c:	f2 c1       	rjmp	.+996    	; 0x6922 <__divdi3+0xf0c>
    653e:	ff c1       	rjmp	.+1022   	; 0x693e <__divdi3+0xf28>
    6540:	e2 96       	adiw	r28, 0x32	; 50
    6542:	8f af       	std	Y+63, r24	; 0x3f
    6544:	e2 97       	sbiw	r28, 0x32	; 50
    6546:	08 2e       	mov	r0, r24
    6548:	04 c0       	rjmp	.+8      	; 0x6552 <__divdi3+0xb3c>
    654a:	ee 0c       	add	r14, r14
    654c:	ff 1c       	adc	r15, r15
    654e:	00 1f       	adc	r16, r16
    6550:	11 1f       	adc	r17, r17
    6552:	0a 94       	dec	r0
    6554:	d2 f7       	brpl	.-12     	; 0x654a <__divdi3+0xb34>
    6556:	6a 2d       	mov	r22, r10
    6558:	68 1b       	sub	r22, r24
    655a:	d2 01       	movw	r26, r4
    655c:	c1 01       	movw	r24, r2
    655e:	06 2e       	mov	r0, r22
    6560:	04 c0       	rjmp	.+8      	; 0x656a <__divdi3+0xb54>
    6562:	b6 95       	lsr	r27
    6564:	a7 95       	ror	r26
    6566:	97 95       	ror	r25
    6568:	87 95       	ror	r24
    656a:	0a 94       	dec	r0
    656c:	d2 f7       	brpl	.-12     	; 0x6562 <__divdi3+0xb4c>
    656e:	5c 01       	movw	r10, r24
    6570:	6d 01       	movw	r12, r26
    6572:	ae 28       	or	r10, r14
    6574:	bf 28       	or	r11, r15
    6576:	c0 2a       	or	r12, r16
    6578:	d1 2a       	or	r13, r17
    657a:	ad aa       	std	Y+53, r10	; 0x35
    657c:	be aa       	std	Y+54, r11	; 0x36
    657e:	cf aa       	std	Y+55, r12	; 0x37
    6580:	d8 ae       	std	Y+56, r13	; 0x38
    6582:	72 01       	movw	r14, r4
    6584:	61 01       	movw	r12, r2
    6586:	e2 96       	adiw	r28, 0x32	; 50
    6588:	0f ac       	ldd	r0, Y+63	; 0x3f
    658a:	e2 97       	sbiw	r28, 0x32	; 50
    658c:	04 c0       	rjmp	.+8      	; 0x6596 <__divdi3+0xb80>
    658e:	cc 0c       	add	r12, r12
    6590:	dd 1c       	adc	r13, r13
    6592:	ee 1c       	adc	r14, r14
    6594:	ff 1c       	adc	r15, r15
    6596:	0a 94       	dec	r0
    6598:	d2 f7       	brpl	.-12     	; 0x658e <__divdi3+0xb78>
    659a:	c9 aa       	std	Y+49, r12	; 0x31
    659c:	da aa       	std	Y+50, r13	; 0x32
    659e:	eb aa       	std	Y+51, r14	; 0x33
    65a0:	fc aa       	std	Y+52, r15	; 0x34
    65a2:	64 01       	movw	r12, r8
    65a4:	53 01       	movw	r10, r6
    65a6:	06 2e       	mov	r0, r22
    65a8:	04 c0       	rjmp	.+8      	; 0x65b2 <__divdi3+0xb9c>
    65aa:	d6 94       	lsr	r13
    65ac:	c7 94       	ror	r12
    65ae:	b7 94       	ror	r11
    65b0:	a7 94       	ror	r10
    65b2:	0a 94       	dec	r0
    65b4:	d2 f7       	brpl	.-12     	; 0x65aa <__divdi3+0xb94>
    65b6:	d4 01       	movw	r26, r8
    65b8:	c3 01       	movw	r24, r6
    65ba:	e2 96       	adiw	r28, 0x32	; 50
    65bc:	0f ac       	ldd	r0, Y+63	; 0x3f
    65be:	e2 97       	sbiw	r28, 0x32	; 50
    65c0:	04 c0       	rjmp	.+8      	; 0x65ca <__divdi3+0xbb4>
    65c2:	88 0f       	add	r24, r24
    65c4:	99 1f       	adc	r25, r25
    65c6:	aa 1f       	adc	r26, r26
    65c8:	bb 1f       	adc	r27, r27
    65ca:	0a 94       	dec	r0
    65cc:	d2 f7       	brpl	.-12     	; 0x65c2 <__divdi3+0xbac>
    65ce:	21 96       	adiw	r28, 0x01	; 1
    65d0:	ec ac       	ldd	r14, Y+60	; 0x3c
    65d2:	fd ac       	ldd	r15, Y+61	; 0x3d
    65d4:	0e ad       	ldd	r16, Y+62	; 0x3e
    65d6:	1f ad       	ldd	r17, Y+63	; 0x3f
    65d8:	21 97       	sbiw	r28, 0x01	; 1
    65da:	04 c0       	rjmp	.+8      	; 0x65e4 <__divdi3+0xbce>
    65dc:	16 95       	lsr	r17
    65de:	07 95       	ror	r16
    65e0:	f7 94       	ror	r15
    65e2:	e7 94       	ror	r14
    65e4:	6a 95       	dec	r22
    65e6:	d2 f7       	brpl	.-12     	; 0x65dc <__divdi3+0xbc6>
    65e8:	37 01       	movw	r6, r14
    65ea:	48 01       	movw	r8, r16
    65ec:	68 2a       	or	r6, r24
    65ee:	79 2a       	or	r7, r25
    65f0:	8a 2a       	or	r8, r26
    65f2:	9b 2a       	or	r9, r27
    65f4:	6d a6       	std	Y+45, r6	; 0x2d
    65f6:	7e a6       	std	Y+46, r7	; 0x2e
    65f8:	8f a6       	std	Y+47, r8	; 0x2f
    65fa:	98 aa       	std	Y+48, r9	; 0x30
    65fc:	ed a8       	ldd	r14, Y+53	; 0x35
    65fe:	fe a8       	ldd	r15, Y+54	; 0x36
    6600:	0f a9       	ldd	r16, Y+55	; 0x37
    6602:	18 ad       	ldd	r17, Y+56	; 0x38
    6604:	38 01       	movw	r6, r16
    6606:	88 24       	eor	r8, r8
    6608:	99 24       	eor	r9, r9
    660a:	98 01       	movw	r18, r16
    660c:	87 01       	movw	r16, r14
    660e:	20 70       	andi	r18, 0x00	; 0
    6610:	30 70       	andi	r19, 0x00	; 0
    6612:	a5 96       	adiw	r28, 0x25	; 37
    6614:	0c af       	std	Y+60, r16	; 0x3c
    6616:	1d af       	std	Y+61, r17	; 0x3d
    6618:	2e af       	std	Y+62, r18	; 0x3e
    661a:	3f af       	std	Y+63, r19	; 0x3f
    661c:	a5 97       	sbiw	r28, 0x25	; 37
    661e:	c6 01       	movw	r24, r12
    6620:	b5 01       	movw	r22, r10
    6622:	a4 01       	movw	r20, r8
    6624:	93 01       	movw	r18, r6
    6626:	0e 94 a7 38 	call	0x714e	; 0x714e <__udivmodsi4>
    662a:	7b 01       	movw	r14, r22
    662c:	8c 01       	movw	r16, r24
    662e:	c6 01       	movw	r24, r12
    6630:	b5 01       	movw	r22, r10
    6632:	a4 01       	movw	r20, r8
    6634:	93 01       	movw	r18, r6
    6636:	0e 94 a7 38 	call	0x714e	; 0x714e <__udivmodsi4>
    663a:	c9 01       	movw	r24, r18
    663c:	da 01       	movw	r26, r20
    663e:	1c 01       	movw	r2, r24
    6640:	2d 01       	movw	r4, r26
    6642:	c2 01       	movw	r24, r4
    6644:	b1 01       	movw	r22, r2
    6646:	a5 96       	adiw	r28, 0x25	; 37
    6648:	2c ad       	ldd	r18, Y+60	; 0x3c
    664a:	3d ad       	ldd	r19, Y+61	; 0x3d
    664c:	4e ad       	ldd	r20, Y+62	; 0x3e
    664e:	5f ad       	ldd	r21, Y+63	; 0x3f
    6650:	a5 97       	sbiw	r28, 0x25	; 37
    6652:	0e 94 75 38 	call	0x70ea	; 0x70ea <__mulsi3>
    6656:	9b 01       	movw	r18, r22
    6658:	ac 01       	movw	r20, r24
    665a:	87 01       	movw	r16, r14
    665c:	ff 24       	eor	r15, r15
    665e:	ee 24       	eor	r14, r14
    6660:	ad a4       	ldd	r10, Y+45	; 0x2d
    6662:	be a4       	ldd	r11, Y+46	; 0x2e
    6664:	cf a4       	ldd	r12, Y+47	; 0x2f
    6666:	d8 a8       	ldd	r13, Y+48	; 0x30
    6668:	c6 01       	movw	r24, r12
    666a:	aa 27       	eor	r26, r26
    666c:	bb 27       	eor	r27, r27
    666e:	57 01       	movw	r10, r14
    6670:	68 01       	movw	r12, r16
    6672:	a8 2a       	or	r10, r24
    6674:	b9 2a       	or	r11, r25
    6676:	ca 2a       	or	r12, r26
    6678:	db 2a       	or	r13, r27
    667a:	a2 16       	cp	r10, r18
    667c:	b3 06       	cpc	r11, r19
    667e:	c4 06       	cpc	r12, r20
    6680:	d5 06       	cpc	r13, r21
    6682:	00 f5       	brcc	.+64     	; 0x66c4 <__divdi3+0xcae>
    6684:	08 94       	sec
    6686:	21 08       	sbc	r2, r1
    6688:	31 08       	sbc	r3, r1
    668a:	41 08       	sbc	r4, r1
    668c:	51 08       	sbc	r5, r1
    668e:	ed a8       	ldd	r14, Y+53	; 0x35
    6690:	fe a8       	ldd	r15, Y+54	; 0x36
    6692:	0f a9       	ldd	r16, Y+55	; 0x37
    6694:	18 ad       	ldd	r17, Y+56	; 0x38
    6696:	ae 0c       	add	r10, r14
    6698:	bf 1c       	adc	r11, r15
    669a:	c0 1e       	adc	r12, r16
    669c:	d1 1e       	adc	r13, r17
    669e:	ae 14       	cp	r10, r14
    66a0:	bf 04       	cpc	r11, r15
    66a2:	c0 06       	cpc	r12, r16
    66a4:	d1 06       	cpc	r13, r17
    66a6:	70 f0       	brcs	.+28     	; 0x66c4 <__divdi3+0xcae>
    66a8:	a2 16       	cp	r10, r18
    66aa:	b3 06       	cpc	r11, r19
    66ac:	c4 06       	cpc	r12, r20
    66ae:	d5 06       	cpc	r13, r21
    66b0:	48 f4       	brcc	.+18     	; 0x66c4 <__divdi3+0xcae>
    66b2:	08 94       	sec
    66b4:	21 08       	sbc	r2, r1
    66b6:	31 08       	sbc	r3, r1
    66b8:	41 08       	sbc	r4, r1
    66ba:	51 08       	sbc	r5, r1
    66bc:	ae 0c       	add	r10, r14
    66be:	bf 1c       	adc	r11, r15
    66c0:	c0 1e       	adc	r12, r16
    66c2:	d1 1e       	adc	r13, r17
    66c4:	a2 1a       	sub	r10, r18
    66c6:	b3 0a       	sbc	r11, r19
    66c8:	c4 0a       	sbc	r12, r20
    66ca:	d5 0a       	sbc	r13, r21
    66cc:	c6 01       	movw	r24, r12
    66ce:	b5 01       	movw	r22, r10
    66d0:	a4 01       	movw	r20, r8
    66d2:	93 01       	movw	r18, r6
    66d4:	0e 94 a7 38 	call	0x714e	; 0x714e <__udivmodsi4>
    66d8:	7b 01       	movw	r14, r22
    66da:	8c 01       	movw	r16, r24
    66dc:	c6 01       	movw	r24, r12
    66de:	b5 01       	movw	r22, r10
    66e0:	a4 01       	movw	r20, r8
    66e2:	93 01       	movw	r18, r6
    66e4:	0e 94 a7 38 	call	0x714e	; 0x714e <__udivmodsi4>
    66e8:	c9 01       	movw	r24, r18
    66ea:	da 01       	movw	r26, r20
    66ec:	3c 01       	movw	r6, r24
    66ee:	4d 01       	movw	r8, r26
    66f0:	c4 01       	movw	r24, r8
    66f2:	b3 01       	movw	r22, r6
    66f4:	a5 96       	adiw	r28, 0x25	; 37
    66f6:	2c ad       	ldd	r18, Y+60	; 0x3c
    66f8:	3d ad       	ldd	r19, Y+61	; 0x3d
    66fa:	4e ad       	ldd	r20, Y+62	; 0x3e
    66fc:	5f ad       	ldd	r21, Y+63	; 0x3f
    66fe:	a5 97       	sbiw	r28, 0x25	; 37
    6700:	0e 94 75 38 	call	0x70ea	; 0x70ea <__mulsi3>
    6704:	9b 01       	movw	r18, r22
    6706:	ac 01       	movw	r20, r24
    6708:	87 01       	movw	r16, r14
    670a:	ff 24       	eor	r15, r15
    670c:	ee 24       	eor	r14, r14
    670e:	8d a5       	ldd	r24, Y+45	; 0x2d
    6710:	9e a5       	ldd	r25, Y+46	; 0x2e
    6712:	af a5       	ldd	r26, Y+47	; 0x2f
    6714:	b8 a9       	ldd	r27, Y+48	; 0x30
    6716:	a0 70       	andi	r26, 0x00	; 0
    6718:	b0 70       	andi	r27, 0x00	; 0
    671a:	57 01       	movw	r10, r14
    671c:	68 01       	movw	r12, r16
    671e:	a8 2a       	or	r10, r24
    6720:	b9 2a       	or	r11, r25
    6722:	ca 2a       	or	r12, r26
    6724:	db 2a       	or	r13, r27
    6726:	a2 16       	cp	r10, r18
    6728:	b3 06       	cpc	r11, r19
    672a:	c4 06       	cpc	r12, r20
    672c:	d5 06       	cpc	r13, r21
    672e:	00 f5       	brcc	.+64     	; 0x6770 <__divdi3+0xd5a>
    6730:	08 94       	sec
    6732:	61 08       	sbc	r6, r1
    6734:	71 08       	sbc	r7, r1
    6736:	81 08       	sbc	r8, r1
    6738:	91 08       	sbc	r9, r1
    673a:	6d a9       	ldd	r22, Y+53	; 0x35
    673c:	7e a9       	ldd	r23, Y+54	; 0x36
    673e:	8f a9       	ldd	r24, Y+55	; 0x37
    6740:	98 ad       	ldd	r25, Y+56	; 0x38
    6742:	a6 0e       	add	r10, r22
    6744:	b7 1e       	adc	r11, r23
    6746:	c8 1e       	adc	r12, r24
    6748:	d9 1e       	adc	r13, r25
    674a:	a6 16       	cp	r10, r22
    674c:	b7 06       	cpc	r11, r23
    674e:	c8 06       	cpc	r12, r24
    6750:	d9 06       	cpc	r13, r25
    6752:	70 f0       	brcs	.+28     	; 0x6770 <__divdi3+0xd5a>
    6754:	a2 16       	cp	r10, r18
    6756:	b3 06       	cpc	r11, r19
    6758:	c4 06       	cpc	r12, r20
    675a:	d5 06       	cpc	r13, r21
    675c:	48 f4       	brcc	.+18     	; 0x6770 <__divdi3+0xd5a>
    675e:	08 94       	sec
    6760:	61 08       	sbc	r6, r1
    6762:	71 08       	sbc	r7, r1
    6764:	81 08       	sbc	r8, r1
    6766:	91 08       	sbc	r9, r1
    6768:	a6 0e       	add	r10, r22
    676a:	b7 1e       	adc	r11, r23
    676c:	c8 1e       	adc	r12, r24
    676e:	d9 1e       	adc	r13, r25
    6770:	d6 01       	movw	r26, r12
    6772:	c5 01       	movw	r24, r10
    6774:	82 1b       	sub	r24, r18
    6776:	93 0b       	sbc	r25, r19
    6778:	a4 0b       	sbc	r26, r20
    677a:	b5 0b       	sbc	r27, r21
    677c:	89 a7       	std	Y+41, r24	; 0x29
    677e:	9a a7       	std	Y+42, r25	; 0x2a
    6780:	ab a7       	std	Y+43, r26	; 0x2b
    6782:	bc a7       	std	Y+44, r27	; 0x2c
    6784:	d1 01       	movw	r26, r2
    6786:	99 27       	eor	r25, r25
    6788:	88 27       	eor	r24, r24
    678a:	64 01       	movw	r12, r8
    678c:	53 01       	movw	r10, r6
    678e:	a8 2a       	or	r10, r24
    6790:	b9 2a       	or	r11, r25
    6792:	ca 2a       	or	r12, r26
    6794:	db 2a       	or	r13, r27
    6796:	25 96       	adiw	r28, 0x05	; 5
    6798:	ac ae       	std	Y+60, r10	; 0x3c
    679a:	bd ae       	std	Y+61, r11	; 0x3d
    679c:	ce ae       	std	Y+62, r12	; 0x3e
    679e:	df ae       	std	Y+63, r13	; 0x3f
    67a0:	25 97       	sbiw	r28, 0x05	; 5
    67a2:	86 01       	movw	r16, r12
    67a4:	75 01       	movw	r14, r10
    67a6:	2f ef       	ldi	r18, 0xFF	; 255
    67a8:	3f ef       	ldi	r19, 0xFF	; 255
    67aa:	40 e0       	ldi	r20, 0x00	; 0
    67ac:	50 e0       	ldi	r21, 0x00	; 0
    67ae:	e2 22       	and	r14, r18
    67b0:	f3 22       	and	r15, r19
    67b2:	04 23       	and	r16, r20
    67b4:	15 23       	and	r17, r21
    67b6:	a6 01       	movw	r20, r12
    67b8:	66 27       	eor	r22, r22
    67ba:	77 27       	eor	r23, r23
    67bc:	ad 96       	adiw	r28, 0x2d	; 45
    67be:	4c af       	std	Y+60, r20	; 0x3c
    67c0:	5d af       	std	Y+61, r21	; 0x3d
    67c2:	6e af       	std	Y+62, r22	; 0x3e
    67c4:	7f af       	std	Y+63, r23	; 0x3f
    67c6:	ad 97       	sbiw	r28, 0x2d	; 45
    67c8:	a9 a8       	ldd	r10, Y+49	; 0x31
    67ca:	ba a8       	ldd	r11, Y+50	; 0x32
    67cc:	cb a8       	ldd	r12, Y+51	; 0x33
    67ce:	dc a8       	ldd	r13, Y+52	; 0x34
    67d0:	6f ef       	ldi	r22, 0xFF	; 255
    67d2:	7f ef       	ldi	r23, 0xFF	; 255
    67d4:	80 e0       	ldi	r24, 0x00	; 0
    67d6:	90 e0       	ldi	r25, 0x00	; 0
    67d8:	a6 22       	and	r10, r22
    67da:	b7 22       	and	r11, r23
    67dc:	c8 22       	and	r12, r24
    67de:	d9 22       	and	r13, r25
    67e0:	89 a9       	ldd	r24, Y+49	; 0x31
    67e2:	9a a9       	ldd	r25, Y+50	; 0x32
    67e4:	ab a9       	ldd	r26, Y+51	; 0x33
    67e6:	bc a9       	ldd	r27, Y+52	; 0x34
    67e8:	1d 01       	movw	r2, r26
    67ea:	44 24       	eor	r4, r4
    67ec:	55 24       	eor	r5, r5
    67ee:	c8 01       	movw	r24, r16
    67f0:	b7 01       	movw	r22, r14
    67f2:	a6 01       	movw	r20, r12
    67f4:	95 01       	movw	r18, r10
    67f6:	0e 94 75 38 	call	0x70ea	; 0x70ea <__mulsi3>
    67fa:	a9 96       	adiw	r28, 0x29	; 41
    67fc:	6c af       	std	Y+60, r22	; 0x3c
    67fe:	7d af       	std	Y+61, r23	; 0x3d
    6800:	8e af       	std	Y+62, r24	; 0x3e
    6802:	9f af       	std	Y+63, r25	; 0x3f
    6804:	a9 97       	sbiw	r28, 0x29	; 41
    6806:	c8 01       	movw	r24, r16
    6808:	b7 01       	movw	r22, r14
    680a:	a2 01       	movw	r20, r4
    680c:	91 01       	movw	r18, r2
    680e:	0e 94 75 38 	call	0x70ea	; 0x70ea <__mulsi3>
    6812:	3b 01       	movw	r6, r22
    6814:	4c 01       	movw	r8, r24
    6816:	ad 96       	adiw	r28, 0x2d	; 45
    6818:	6c ad       	ldd	r22, Y+60	; 0x3c
    681a:	7d ad       	ldd	r23, Y+61	; 0x3d
    681c:	8e ad       	ldd	r24, Y+62	; 0x3e
    681e:	9f ad       	ldd	r25, Y+63	; 0x3f
    6820:	ad 97       	sbiw	r28, 0x2d	; 45
    6822:	a6 01       	movw	r20, r12
    6824:	95 01       	movw	r18, r10
    6826:	0e 94 75 38 	call	0x70ea	; 0x70ea <__mulsi3>
    682a:	7b 01       	movw	r14, r22
    682c:	8c 01       	movw	r16, r24
    682e:	ad 96       	adiw	r28, 0x2d	; 45
    6830:	6c ad       	ldd	r22, Y+60	; 0x3c
    6832:	7d ad       	ldd	r23, Y+61	; 0x3d
    6834:	8e ad       	ldd	r24, Y+62	; 0x3e
    6836:	9f ad       	ldd	r25, Y+63	; 0x3f
    6838:	ad 97       	sbiw	r28, 0x2d	; 45
    683a:	a2 01       	movw	r20, r4
    683c:	91 01       	movw	r18, r2
    683e:	0e 94 75 38 	call	0x70ea	; 0x70ea <__mulsi3>
    6842:	5b 01       	movw	r10, r22
    6844:	6c 01       	movw	r12, r24
    6846:	a8 01       	movw	r20, r16
    6848:	97 01       	movw	r18, r14
    684a:	26 0d       	add	r18, r6
    684c:	37 1d       	adc	r19, r7
    684e:	48 1d       	adc	r20, r8
    6850:	59 1d       	adc	r21, r9
    6852:	a9 96       	adiw	r28, 0x29	; 41
    6854:	6c ac       	ldd	r6, Y+60	; 0x3c
    6856:	7d ac       	ldd	r7, Y+61	; 0x3d
    6858:	8e ac       	ldd	r8, Y+62	; 0x3e
    685a:	9f ac       	ldd	r9, Y+63	; 0x3f
    685c:	a9 97       	sbiw	r28, 0x29	; 41
    685e:	c4 01       	movw	r24, r8
    6860:	aa 27       	eor	r26, r26
    6862:	bb 27       	eor	r27, r27
    6864:	28 0f       	add	r18, r24
    6866:	39 1f       	adc	r19, r25
    6868:	4a 1f       	adc	r20, r26
    686a:	5b 1f       	adc	r21, r27
    686c:	2e 15       	cp	r18, r14
    686e:	3f 05       	cpc	r19, r15
    6870:	40 07       	cpc	r20, r16
    6872:	51 07       	cpc	r21, r17
    6874:	48 f4       	brcc	.+18     	; 0x6888 <__divdi3+0xe72>
    6876:	e1 2c       	mov	r14, r1
    6878:	f1 2c       	mov	r15, r1
    687a:	61 e0       	ldi	r22, 0x01	; 1
    687c:	06 2f       	mov	r16, r22
    687e:	11 2d       	mov	r17, r1
    6880:	ae 0c       	add	r10, r14
    6882:	bf 1c       	adc	r11, r15
    6884:	c0 1e       	adc	r12, r16
    6886:	d1 1e       	adc	r13, r17
    6888:	ca 01       	movw	r24, r20
    688a:	aa 27       	eor	r26, r26
    688c:	bb 27       	eor	r27, r27
    688e:	bc 01       	movw	r22, r24
    6890:	cd 01       	movw	r24, r26
    6892:	6a 0d       	add	r22, r10
    6894:	7b 1d       	adc	r23, r11
    6896:	8c 1d       	adc	r24, r12
    6898:	9d 1d       	adc	r25, r13
    689a:	69 a4       	ldd	r6, Y+41	; 0x29
    689c:	7a a4       	ldd	r7, Y+42	; 0x2a
    689e:	8b a4       	ldd	r8, Y+43	; 0x2b
    68a0:	9c a4       	ldd	r9, Y+44	; 0x2c
    68a2:	66 16       	cp	r6, r22
    68a4:	77 06       	cpc	r7, r23
    68a6:	88 06       	cpc	r8, r24
    68a8:	99 06       	cpc	r9, r25
    68aa:	50 f1       	brcs	.+84     	; 0x6900 <__divdi3+0xeea>
    68ac:	66 15       	cp	r22, r6
    68ae:	77 05       	cpc	r23, r7
    68b0:	88 05       	cpc	r24, r8
    68b2:	99 05       	cpc	r25, r9
    68b4:	09 f0       	breq	.+2      	; 0x68b8 <__divdi3+0xea2>
    68b6:	4d c0       	rjmp	.+154    	; 0x6952 <__divdi3+0xf3c>
    68b8:	d9 01       	movw	r26, r18
    68ba:	99 27       	eor	r25, r25
    68bc:	88 27       	eor	r24, r24
    68be:	a9 96       	adiw	r28, 0x29	; 41
    68c0:	2c ad       	ldd	r18, Y+60	; 0x3c
    68c2:	3d ad       	ldd	r19, Y+61	; 0x3d
    68c4:	4e ad       	ldd	r20, Y+62	; 0x3e
    68c6:	5f ad       	ldd	r21, Y+63	; 0x3f
    68c8:	a9 97       	sbiw	r28, 0x29	; 41
    68ca:	40 70       	andi	r20, 0x00	; 0
    68cc:	50 70       	andi	r21, 0x00	; 0
    68ce:	82 0f       	add	r24, r18
    68d0:	93 1f       	adc	r25, r19
    68d2:	a4 1f       	adc	r26, r20
    68d4:	b5 1f       	adc	r27, r21
    68d6:	21 96       	adiw	r28, 0x01	; 1
    68d8:	2c ad       	ldd	r18, Y+60	; 0x3c
    68da:	3d ad       	ldd	r19, Y+61	; 0x3d
    68dc:	4e ad       	ldd	r20, Y+62	; 0x3e
    68de:	5f ad       	ldd	r21, Y+63	; 0x3f
    68e0:	21 97       	sbiw	r28, 0x01	; 1
    68e2:	e2 96       	adiw	r28, 0x32	; 50
    68e4:	0f ac       	ldd	r0, Y+63	; 0x3f
    68e6:	e2 97       	sbiw	r28, 0x32	; 50
    68e8:	04 c0       	rjmp	.+8      	; 0x68f2 <__divdi3+0xedc>
    68ea:	22 0f       	add	r18, r18
    68ec:	33 1f       	adc	r19, r19
    68ee:	44 1f       	adc	r20, r20
    68f0:	55 1f       	adc	r21, r21
    68f2:	0a 94       	dec	r0
    68f4:	d2 f7       	brpl	.-12     	; 0x68ea <__divdi3+0xed4>
    68f6:	28 17       	cp	r18, r24
    68f8:	39 07       	cpc	r19, r25
    68fa:	4a 07       	cpc	r20, r26
    68fc:	5b 07       	cpc	r21, r27
    68fe:	48 f5       	brcc	.+82     	; 0x6952 <__divdi3+0xf3c>
    6900:	25 96       	adiw	r28, 0x05	; 5
    6902:	0c ad       	ldd	r16, Y+60	; 0x3c
    6904:	1d ad       	ldd	r17, Y+61	; 0x3d
    6906:	2e ad       	ldd	r18, Y+62	; 0x3e
    6908:	3f ad       	ldd	r19, Y+63	; 0x3f
    690a:	25 97       	sbiw	r28, 0x05	; 5
    690c:	01 50       	subi	r16, 0x01	; 1
    690e:	10 40       	sbci	r17, 0x00	; 0
    6910:	20 40       	sbci	r18, 0x00	; 0
    6912:	30 40       	sbci	r19, 0x00	; 0
    6914:	25 96       	adiw	r28, 0x05	; 5
    6916:	0c af       	std	Y+60, r16	; 0x3c
    6918:	1d af       	std	Y+61, r17	; 0x3d
    691a:	2e af       	std	Y+62, r18	; 0x3e
    691c:	3f af       	std	Y+63, r19	; 0x3f
    691e:	25 97       	sbiw	r28, 0x05	; 5
    6920:	18 c0       	rjmp	.+48     	; 0x6952 <__divdi3+0xf3c>
    6922:	66 24       	eor	r6, r6
    6924:	77 24       	eor	r7, r7
    6926:	43 01       	movw	r8, r6
    6928:	21 e0       	ldi	r18, 0x01	; 1
    692a:	30 e0       	ldi	r19, 0x00	; 0
    692c:	40 e0       	ldi	r20, 0x00	; 0
    692e:	50 e0       	ldi	r21, 0x00	; 0
    6930:	25 96       	adiw	r28, 0x05	; 5
    6932:	2c af       	std	Y+60, r18	; 0x3c
    6934:	3d af       	std	Y+61, r19	; 0x3d
    6936:	4e af       	std	Y+62, r20	; 0x3e
    6938:	5f af       	std	Y+63, r21	; 0x3f
    693a:	25 97       	sbiw	r28, 0x05	; 5
    693c:	0d c0       	rjmp	.+26     	; 0x6958 <__divdi3+0xf42>
    693e:	66 24       	eor	r6, r6
    6940:	77 24       	eor	r7, r7
    6942:	43 01       	movw	r8, r6
    6944:	25 96       	adiw	r28, 0x05	; 5
    6946:	1c ae       	std	Y+60, r1	; 0x3c
    6948:	1d ae       	std	Y+61, r1	; 0x3d
    694a:	1e ae       	std	Y+62, r1	; 0x3e
    694c:	1f ae       	std	Y+63, r1	; 0x3f
    694e:	25 97       	sbiw	r28, 0x05	; 5
    6950:	03 c0       	rjmp	.+6      	; 0x6958 <__divdi3+0xf42>
    6952:	66 24       	eor	r6, r6
    6954:	77 24       	eor	r7, r7
    6956:	43 01       	movw	r8, r6
    6958:	fe 01       	movw	r30, r28
    695a:	b1 96       	adiw	r30, 0x21	; 33
    695c:	88 e0       	ldi	r24, 0x08	; 8
    695e:	df 01       	movw	r26, r30
    6960:	1d 92       	st	X+, r1
    6962:	8a 95       	dec	r24
    6964:	e9 f7       	brne	.-6      	; 0x6960 <__divdi3+0xf4a>
    6966:	25 96       	adiw	r28, 0x05	; 5
    6968:	ac ac       	ldd	r10, Y+60	; 0x3c
    696a:	bd ac       	ldd	r11, Y+61	; 0x3d
    696c:	ce ac       	ldd	r12, Y+62	; 0x3e
    696e:	df ac       	ldd	r13, Y+63	; 0x3f
    6970:	25 97       	sbiw	r28, 0x05	; 5
    6972:	a9 a2       	std	Y+33, r10	; 0x21
    6974:	ba a2       	std	Y+34, r11	; 0x22
    6976:	cb a2       	std	Y+35, r12	; 0x23
    6978:	dc a2       	std	Y+36, r13	; 0x24
    697a:	6d a2       	std	Y+37, r6	; 0x25
    697c:	7e a2       	std	Y+38, r7	; 0x26
    697e:	8f a2       	std	Y+39, r8	; 0x27
    6980:	98 a6       	std	Y+40, r9	; 0x28
    6982:	22 96       	adiw	r28, 0x02	; 2
    6984:	2f ad       	ldd	r18, Y+63	; 0x3f
    6986:	22 97       	sbiw	r28, 0x02	; 2
    6988:	3a a1       	ldd	r19, Y+34	; 0x22
    698a:	4b a1       	ldd	r20, Y+35	; 0x23
    698c:	5c a1       	ldd	r21, Y+36	; 0x24
    698e:	66 2d       	mov	r22, r6
    6990:	7e a1       	ldd	r23, Y+38	; 0x26
    6992:	df a0       	ldd	r13, Y+39	; 0x27
    6994:	98 a5       	ldd	r25, Y+40	; 0x28
    6996:	e1 96       	adiw	r28, 0x31	; 49
    6998:	ec ac       	ldd	r14, Y+60	; 0x3c
    699a:	fd ac       	ldd	r15, Y+61	; 0x3d
    699c:	0e ad       	ldd	r16, Y+62	; 0x3e
    699e:	1f ad       	ldd	r17, Y+63	; 0x3f
    69a0:	e1 97       	sbiw	r28, 0x31	; 49
    69a2:	e1 14       	cp	r14, r1
    69a4:	f1 04       	cpc	r15, r1
    69a6:	01 05       	cpc	r16, r1
    69a8:	11 05       	cpc	r17, r1
    69aa:	09 f4       	brne	.+2      	; 0x69ae <__divdi3+0xf98>
    69ac:	56 c0       	rjmp	.+172    	; 0x6a5a <__divdi3+0x1044>
    69ae:	21 95       	neg	r18
    69b0:	81 e0       	ldi	r24, 0x01	; 1
    69b2:	12 16       	cp	r1, r18
    69b4:	08 f0       	brcs	.+2      	; 0x69b8 <__divdi3+0xfa2>
    69b6:	80 e0       	ldi	r24, 0x00	; 0
    69b8:	31 95       	neg	r19
    69ba:	e1 e0       	ldi	r30, 0x01	; 1
    69bc:	13 16       	cp	r1, r19
    69be:	08 f0       	brcs	.+2      	; 0x69c2 <__divdi3+0xfac>
    69c0:	e0 e0       	ldi	r30, 0x00	; 0
    69c2:	93 2e       	mov	r9, r19
    69c4:	98 1a       	sub	r9, r24
    69c6:	81 e0       	ldi	r24, 0x01	; 1
    69c8:	39 15       	cp	r19, r9
    69ca:	08 f0       	brcs	.+2      	; 0x69ce <__divdi3+0xfb8>
    69cc:	80 e0       	ldi	r24, 0x00	; 0
    69ce:	e8 2b       	or	r30, r24
    69d0:	41 95       	neg	r20
    69d2:	f1 e0       	ldi	r31, 0x01	; 1
    69d4:	14 16       	cp	r1, r20
    69d6:	08 f0       	brcs	.+2      	; 0x69da <__divdi3+0xfc4>
    69d8:	f0 e0       	ldi	r31, 0x00	; 0
    69da:	a4 2e       	mov	r10, r20
    69dc:	ae 1a       	sub	r10, r30
    69de:	81 e0       	ldi	r24, 0x01	; 1
    69e0:	4a 15       	cp	r20, r10
    69e2:	08 f0       	brcs	.+2      	; 0x69e6 <__divdi3+0xfd0>
    69e4:	80 e0       	ldi	r24, 0x00	; 0
    69e6:	f8 2b       	or	r31, r24
    69e8:	51 95       	neg	r21
    69ea:	e1 e0       	ldi	r30, 0x01	; 1
    69ec:	15 16       	cp	r1, r21
    69ee:	08 f0       	brcs	.+2      	; 0x69f2 <__divdi3+0xfdc>
    69f0:	e0 e0       	ldi	r30, 0x00	; 0
    69f2:	b5 2e       	mov	r11, r21
    69f4:	bf 1a       	sub	r11, r31
    69f6:	81 e0       	ldi	r24, 0x01	; 1
    69f8:	5b 15       	cp	r21, r11
    69fa:	08 f0       	brcs	.+2      	; 0x69fe <__divdi3+0xfe8>
    69fc:	80 e0       	ldi	r24, 0x00	; 0
    69fe:	e8 2b       	or	r30, r24
    6a00:	61 95       	neg	r22
    6a02:	f1 e0       	ldi	r31, 0x01	; 1
    6a04:	16 16       	cp	r1, r22
    6a06:	08 f0       	brcs	.+2      	; 0x6a0a <__divdi3+0xff4>
    6a08:	f0 e0       	ldi	r31, 0x00	; 0
    6a0a:	a6 2f       	mov	r26, r22
    6a0c:	ae 1b       	sub	r26, r30
    6a0e:	81 e0       	ldi	r24, 0x01	; 1
    6a10:	6a 17       	cp	r22, r26
    6a12:	08 f0       	brcs	.+2      	; 0x6a16 <__divdi3+0x1000>
    6a14:	80 e0       	ldi	r24, 0x00	; 0
    6a16:	f8 2b       	or	r31, r24
    6a18:	71 95       	neg	r23
    6a1a:	e1 e0       	ldi	r30, 0x01	; 1
    6a1c:	17 16       	cp	r1, r23
    6a1e:	08 f0       	brcs	.+2      	; 0x6a22 <__divdi3+0x100c>
    6a20:	e0 e0       	ldi	r30, 0x00	; 0
    6a22:	c7 2e       	mov	r12, r23
    6a24:	cf 1a       	sub	r12, r31
    6a26:	81 e0       	ldi	r24, 0x01	; 1
    6a28:	7c 15       	cp	r23, r12
    6a2a:	08 f0       	brcs	.+2      	; 0x6a2e <__divdi3+0x1018>
    6a2c:	80 e0       	ldi	r24, 0x00	; 0
    6a2e:	e8 2b       	or	r30, r24
    6a30:	8d 2d       	mov	r24, r13
    6a32:	81 95       	neg	r24
    6a34:	f1 e0       	ldi	r31, 0x01	; 1
    6a36:	18 16       	cp	r1, r24
    6a38:	08 f0       	brcs	.+2      	; 0x6a3c <__divdi3+0x1026>
    6a3a:	f0 e0       	ldi	r31, 0x00	; 0
    6a3c:	d8 2e       	mov	r13, r24
    6a3e:	de 1a       	sub	r13, r30
    6a40:	e1 e0       	ldi	r30, 0x01	; 1
    6a42:	8d 15       	cp	r24, r13
    6a44:	08 f0       	brcs	.+2      	; 0x6a48 <__divdi3+0x1032>
    6a46:	e0 e0       	ldi	r30, 0x00	; 0
    6a48:	fe 2b       	or	r31, r30
    6a4a:	89 2f       	mov	r24, r25
    6a4c:	81 95       	neg	r24
    6a4e:	39 2d       	mov	r19, r9
    6a50:	a5 01       	movw	r20, r10
    6a52:	6a 2f       	mov	r22, r26
    6a54:	7c 2d       	mov	r23, r12
    6a56:	98 2f       	mov	r25, r24
    6a58:	9f 1b       	sub	r25, r31
    6a5a:	8d 2d       	mov	r24, r13
    6a5c:	ce 58       	subi	r28, 0x8E	; 142
    6a5e:	df 4f       	sbci	r29, 0xFF	; 255
    6a60:	e2 e1       	ldi	r30, 0x12	; 18
    6a62:	0c 94 14 39 	jmp	0x7228	; 0x7228 <__epilogue_restores__>

00006a66 <__subsf3>:
    6a66:	50 58       	subi	r21, 0x80	; 128

00006a68 <__addsf3>:
    6a68:	bb 27       	eor	r27, r27
    6a6a:	aa 27       	eor	r26, r26
    6a6c:	0e d0       	rcall	.+28     	; 0x6a8a <__addsf3x>
    6a6e:	3f c2       	rjmp	.+1150   	; 0x6eee <__fp_round>
    6a70:	30 d2       	rcall	.+1120   	; 0x6ed2 <__fp_pscA>
    6a72:	30 f0       	brcs	.+12     	; 0x6a80 <__addsf3+0x18>
    6a74:	35 d2       	rcall	.+1130   	; 0x6ee0 <__fp_pscB>
    6a76:	20 f0       	brcs	.+8      	; 0x6a80 <__addsf3+0x18>
    6a78:	31 f4       	brne	.+12     	; 0x6a86 <__addsf3+0x1e>
    6a7a:	9f 3f       	cpi	r25, 0xFF	; 255
    6a7c:	11 f4       	brne	.+4      	; 0x6a82 <__addsf3+0x1a>
    6a7e:	1e f4       	brtc	.+6      	; 0x6a86 <__addsf3+0x1e>
    6a80:	ef c1       	rjmp	.+990    	; 0x6e60 <__fp_nan>
    6a82:	0e f4       	brtc	.+2      	; 0x6a86 <__addsf3+0x1e>
    6a84:	e0 95       	com	r30
    6a86:	e7 fb       	bst	r30, 7
    6a88:	e5 c1       	rjmp	.+970    	; 0x6e54 <__fp_inf>

00006a8a <__addsf3x>:
    6a8a:	e9 2f       	mov	r30, r25
    6a8c:	41 d2       	rcall	.+1154   	; 0x6f10 <__fp_split3>
    6a8e:	80 f3       	brcs	.-32     	; 0x6a70 <__addsf3+0x8>
    6a90:	ba 17       	cp	r27, r26
    6a92:	62 07       	cpc	r22, r18
    6a94:	73 07       	cpc	r23, r19
    6a96:	84 07       	cpc	r24, r20
    6a98:	95 07       	cpc	r25, r21
    6a9a:	18 f0       	brcs	.+6      	; 0x6aa2 <__addsf3x+0x18>
    6a9c:	71 f4       	brne	.+28     	; 0x6aba <__addsf3x+0x30>
    6a9e:	9e f5       	brtc	.+102    	; 0x6b06 <__addsf3x+0x7c>
    6aa0:	59 c2       	rjmp	.+1202   	; 0x6f54 <__fp_zero>
    6aa2:	0e f4       	brtc	.+2      	; 0x6aa6 <__addsf3x+0x1c>
    6aa4:	e0 95       	com	r30
    6aa6:	0b 2e       	mov	r0, r27
    6aa8:	ba 2f       	mov	r27, r26
    6aaa:	a0 2d       	mov	r26, r0
    6aac:	0b 01       	movw	r0, r22
    6aae:	b9 01       	movw	r22, r18
    6ab0:	90 01       	movw	r18, r0
    6ab2:	0c 01       	movw	r0, r24
    6ab4:	ca 01       	movw	r24, r20
    6ab6:	a0 01       	movw	r20, r0
    6ab8:	11 24       	eor	r1, r1
    6aba:	ff 27       	eor	r31, r31
    6abc:	59 1b       	sub	r21, r25
    6abe:	99 f0       	breq	.+38     	; 0x6ae6 <__addsf3x+0x5c>
    6ac0:	59 3f       	cpi	r21, 0xF9	; 249
    6ac2:	50 f4       	brcc	.+20     	; 0x6ad8 <__addsf3x+0x4e>
    6ac4:	50 3e       	cpi	r21, 0xE0	; 224
    6ac6:	68 f1       	brcs	.+90     	; 0x6b22 <__addsf3x+0x98>
    6ac8:	1a 16       	cp	r1, r26
    6aca:	f0 40       	sbci	r31, 0x00	; 0
    6acc:	a2 2f       	mov	r26, r18
    6ace:	23 2f       	mov	r18, r19
    6ad0:	34 2f       	mov	r19, r20
    6ad2:	44 27       	eor	r20, r20
    6ad4:	58 5f       	subi	r21, 0xF8	; 248
    6ad6:	f3 cf       	rjmp	.-26     	; 0x6abe <__addsf3x+0x34>
    6ad8:	46 95       	lsr	r20
    6ada:	37 95       	ror	r19
    6adc:	27 95       	ror	r18
    6ade:	a7 95       	ror	r26
    6ae0:	f0 40       	sbci	r31, 0x00	; 0
    6ae2:	53 95       	inc	r21
    6ae4:	c9 f7       	brne	.-14     	; 0x6ad8 <__addsf3x+0x4e>
    6ae6:	7e f4       	brtc	.+30     	; 0x6b06 <__addsf3x+0x7c>
    6ae8:	1f 16       	cp	r1, r31
    6aea:	ba 0b       	sbc	r27, r26
    6aec:	62 0b       	sbc	r22, r18
    6aee:	73 0b       	sbc	r23, r19
    6af0:	84 0b       	sbc	r24, r20
    6af2:	ba f0       	brmi	.+46     	; 0x6b22 <__addsf3x+0x98>
    6af4:	91 50       	subi	r25, 0x01	; 1
    6af6:	a1 f0       	breq	.+40     	; 0x6b20 <__addsf3x+0x96>
    6af8:	ff 0f       	add	r31, r31
    6afa:	bb 1f       	adc	r27, r27
    6afc:	66 1f       	adc	r22, r22
    6afe:	77 1f       	adc	r23, r23
    6b00:	88 1f       	adc	r24, r24
    6b02:	c2 f7       	brpl	.-16     	; 0x6af4 <__addsf3x+0x6a>
    6b04:	0e c0       	rjmp	.+28     	; 0x6b22 <__addsf3x+0x98>
    6b06:	ba 0f       	add	r27, r26
    6b08:	62 1f       	adc	r22, r18
    6b0a:	73 1f       	adc	r23, r19
    6b0c:	84 1f       	adc	r24, r20
    6b0e:	48 f4       	brcc	.+18     	; 0x6b22 <__addsf3x+0x98>
    6b10:	87 95       	ror	r24
    6b12:	77 95       	ror	r23
    6b14:	67 95       	ror	r22
    6b16:	b7 95       	ror	r27
    6b18:	f7 95       	ror	r31
    6b1a:	9e 3f       	cpi	r25, 0xFE	; 254
    6b1c:	08 f0       	brcs	.+2      	; 0x6b20 <__addsf3x+0x96>
    6b1e:	b3 cf       	rjmp	.-154    	; 0x6a86 <__addsf3+0x1e>
    6b20:	93 95       	inc	r25
    6b22:	88 0f       	add	r24, r24
    6b24:	08 f0       	brcs	.+2      	; 0x6b28 <__addsf3x+0x9e>
    6b26:	99 27       	eor	r25, r25
    6b28:	ee 0f       	add	r30, r30
    6b2a:	97 95       	ror	r25
    6b2c:	87 95       	ror	r24
    6b2e:	08 95       	ret

00006b30 <asin>:
    6b30:	9f 93       	push	r25
    6b32:	9f 77       	andi	r25, 0x7F	; 127
    6b34:	ee e3       	ldi	r30, 0x3E	; 62
    6b36:	89 37       	cpi	r24, 0x79	; 121
    6b38:	9e 07       	cpc	r25, r30
    6b3a:	20 f4       	brcc	.+8      	; 0x6b44 <asin+0x14>
    6b3c:	e4 e5       	ldi	r30, 0x54	; 84
    6b3e:	f0 e0       	ldi	r31, 0x00	; 0
    6b40:	b7 d1       	rcall	.+878    	; 0x6eb0 <__fp_powsodd>
    6b42:	09 c0       	rjmp	.+18     	; 0x6b56 <asin+0x26>
    6b44:	48 d1       	rcall	.+656    	; 0x6dd6 <__fp_arccos>
    6b46:	90 58       	subi	r25, 0x80	; 128
    6b48:	a2 ea       	ldi	r26, 0xA2	; 162
    6b4a:	2a ed       	ldi	r18, 0xDA	; 218
    6b4c:	3f e0       	ldi	r19, 0x0F	; 15
    6b4e:	49 ec       	ldi	r20, 0xC9	; 201
    6b50:	5f e3       	ldi	r21, 0x3F	; 63
    6b52:	9b df       	rcall	.-202    	; 0x6a8a <__addsf3x>
    6b54:	cc d1       	rcall	.+920    	; 0x6eee <__fp_round>
    6b56:	0f 90       	pop	r0
    6b58:	07 fc       	sbrc	r0, 7
    6b5a:	90 58       	subi	r25, 0x80	; 128
    6b5c:	08 95       	ret
    6b5e:	b9 d1       	rcall	.+882    	; 0x6ed2 <__fp_pscA>
    6b60:	58 f0       	brcs	.+22     	; 0x6b78 <asin+0x48>
    6b62:	80 e8       	ldi	r24, 0x80	; 128
    6b64:	91 e0       	ldi	r25, 0x01	; 1
    6b66:	09 f4       	brne	.+2      	; 0x6b6a <asin+0x3a>
    6b68:	9e ef       	ldi	r25, 0xFE	; 254
    6b6a:	ba d1       	rcall	.+884    	; 0x6ee0 <__fp_pscB>
    6b6c:	28 f0       	brcs	.+10     	; 0x6b78 <asin+0x48>
    6b6e:	40 e8       	ldi	r20, 0x80	; 128
    6b70:	51 e0       	ldi	r21, 0x01	; 1
    6b72:	59 f4       	brne	.+22     	; 0x6b8a <atan2+0xe>
    6b74:	5e ef       	ldi	r21, 0xFE	; 254
    6b76:	09 c0       	rjmp	.+18     	; 0x6b8a <atan2+0xe>
    6b78:	73 c1       	rjmp	.+742    	; 0x6e60 <__fp_nan>
    6b7a:	ec c1       	rjmp	.+984    	; 0x6f54 <__fp_zero>

00006b7c <atan2>:
    6b7c:	e9 2f       	mov	r30, r25
    6b7e:	e0 78       	andi	r30, 0x80	; 128
    6b80:	c7 d1       	rcall	.+910    	; 0x6f10 <__fp_split3>
    6b82:	68 f3       	brcs	.-38     	; 0x6b5e <asin+0x2e>
    6b84:	09 2e       	mov	r0, r25
    6b86:	05 2a       	or	r0, r21
    6b88:	c1 f3       	breq	.-16     	; 0x6b7a <asin+0x4a>
    6b8a:	26 17       	cp	r18, r22
    6b8c:	37 07       	cpc	r19, r23
    6b8e:	48 07       	cpc	r20, r24
    6b90:	59 07       	cpc	r21, r25
    6b92:	38 f0       	brcs	.+14     	; 0x6ba2 <atan2+0x26>
    6b94:	0e 2e       	mov	r0, r30
    6b96:	07 f8       	bld	r0, 7
    6b98:	e0 25       	eor	r30, r0
    6b9a:	69 f0       	breq	.+26     	; 0x6bb6 <atan2+0x3a>
    6b9c:	e0 25       	eor	r30, r0
    6b9e:	e0 64       	ori	r30, 0x40	; 64
    6ba0:	0a c0       	rjmp	.+20     	; 0x6bb6 <atan2+0x3a>
    6ba2:	ef 63       	ori	r30, 0x3F	; 63
    6ba4:	07 f8       	bld	r0, 7
    6ba6:	00 94       	com	r0
    6ba8:	07 fa       	bst	r0, 7
    6baa:	db 01       	movw	r26, r22
    6bac:	b9 01       	movw	r22, r18
    6bae:	9d 01       	movw	r18, r26
    6bb0:	dc 01       	movw	r26, r24
    6bb2:	ca 01       	movw	r24, r20
    6bb4:	ad 01       	movw	r20, r26
    6bb6:	ef 93       	push	r30
    6bb8:	47 d0       	rcall	.+142    	; 0x6c48 <__divsf3_pse>
    6bba:	99 d1       	rcall	.+818    	; 0x6eee <__fp_round>
    6bbc:	0a d0       	rcall	.+20     	; 0x6bd2 <atan>
    6bbe:	5f 91       	pop	r21
    6bc0:	55 23       	and	r21, r21
    6bc2:	31 f0       	breq	.+12     	; 0x6bd0 <atan2+0x54>
    6bc4:	2b ed       	ldi	r18, 0xDB	; 219
    6bc6:	3f e0       	ldi	r19, 0x0F	; 15
    6bc8:	49 e4       	ldi	r20, 0x49	; 73
    6bca:	50 fd       	sbrc	r21, 0
    6bcc:	49 ec       	ldi	r20, 0xC9	; 201
    6bce:	4c cf       	rjmp	.-360    	; 0x6a68 <__addsf3>
    6bd0:	08 95       	ret

00006bd2 <atan>:
    6bd2:	df 93       	push	r29
    6bd4:	dd 27       	eor	r29, r29
    6bd6:	b9 2f       	mov	r27, r25
    6bd8:	bf 77       	andi	r27, 0x7F	; 127
    6bda:	40 e8       	ldi	r20, 0x80	; 128
    6bdc:	5f e3       	ldi	r21, 0x3F	; 63
    6bde:	16 16       	cp	r1, r22
    6be0:	17 06       	cpc	r1, r23
    6be2:	48 07       	cpc	r20, r24
    6be4:	5b 07       	cpc	r21, r27
    6be6:	10 f4       	brcc	.+4      	; 0x6bec <atan+0x1a>
    6be8:	d9 2f       	mov	r29, r25
    6bea:	bb d1       	rcall	.+886    	; 0x6f62 <inverse>
    6bec:	9f 93       	push	r25
    6bee:	8f 93       	push	r24
    6bf0:	7f 93       	push	r23
    6bf2:	6f 93       	push	r22
    6bf4:	62 d2       	rcall	.+1220   	; 0x70ba <square>
    6bf6:	e8 e6       	ldi	r30, 0x68	; 104
    6bf8:	f0 e0       	ldi	r31, 0x00	; 0
    6bfa:	35 d1       	rcall	.+618    	; 0x6e66 <__fp_powser>
    6bfc:	78 d1       	rcall	.+752    	; 0x6eee <__fp_round>
    6bfe:	2f 91       	pop	r18
    6c00:	3f 91       	pop	r19
    6c02:	4f 91       	pop	r20
    6c04:	5f 91       	pop	r21
    6c06:	c0 d1       	rcall	.+896    	; 0x6f88 <__mulsf3x>
    6c08:	dd 23       	and	r29, r29
    6c0a:	49 f0       	breq	.+18     	; 0x6c1e <atan+0x4c>
    6c0c:	90 58       	subi	r25, 0x80	; 128
    6c0e:	a2 ea       	ldi	r26, 0xA2	; 162
    6c10:	2a ed       	ldi	r18, 0xDA	; 218
    6c12:	3f e0       	ldi	r19, 0x0F	; 15
    6c14:	49 ec       	ldi	r20, 0xC9	; 201
    6c16:	5f e3       	ldi	r21, 0x3F	; 63
    6c18:	d0 78       	andi	r29, 0x80	; 128
    6c1a:	5d 27       	eor	r21, r29
    6c1c:	36 df       	rcall	.-404    	; 0x6a8a <__addsf3x>
    6c1e:	df 91       	pop	r29
    6c20:	66 c1       	rjmp	.+716    	; 0x6eee <__fp_round>

00006c22 <__cmpsf2>:
    6c22:	f4 d0       	rcall	.+488    	; 0x6e0c <__fp_cmp>
    6c24:	08 f4       	brcc	.+2      	; 0x6c28 <__cmpsf2+0x6>
    6c26:	81 e0       	ldi	r24, 0x01	; 1
    6c28:	08 95       	ret

00006c2a <__divsf3>:
    6c2a:	0c d0       	rcall	.+24     	; 0x6c44 <__divsf3x>
    6c2c:	60 c1       	rjmp	.+704    	; 0x6eee <__fp_round>
    6c2e:	58 d1       	rcall	.+688    	; 0x6ee0 <__fp_pscB>
    6c30:	40 f0       	brcs	.+16     	; 0x6c42 <__divsf3+0x18>
    6c32:	4f d1       	rcall	.+670    	; 0x6ed2 <__fp_pscA>
    6c34:	30 f0       	brcs	.+12     	; 0x6c42 <__divsf3+0x18>
    6c36:	21 f4       	brne	.+8      	; 0x6c40 <__divsf3+0x16>
    6c38:	5f 3f       	cpi	r21, 0xFF	; 255
    6c3a:	19 f0       	breq	.+6      	; 0x6c42 <__divsf3+0x18>
    6c3c:	0b c1       	rjmp	.+534    	; 0x6e54 <__fp_inf>
    6c3e:	51 11       	cpse	r21, r1
    6c40:	8a c1       	rjmp	.+788    	; 0x6f56 <__fp_szero>
    6c42:	0e c1       	rjmp	.+540    	; 0x6e60 <__fp_nan>

00006c44 <__divsf3x>:
    6c44:	65 d1       	rcall	.+714    	; 0x6f10 <__fp_split3>
    6c46:	98 f3       	brcs	.-26     	; 0x6c2e <__divsf3+0x4>

00006c48 <__divsf3_pse>:
    6c48:	99 23       	and	r25, r25
    6c4a:	c9 f3       	breq	.-14     	; 0x6c3e <__divsf3+0x14>
    6c4c:	55 23       	and	r21, r21
    6c4e:	b1 f3       	breq	.-20     	; 0x6c3c <__divsf3+0x12>
    6c50:	95 1b       	sub	r25, r21
    6c52:	55 0b       	sbc	r21, r21
    6c54:	bb 27       	eor	r27, r27
    6c56:	aa 27       	eor	r26, r26
    6c58:	62 17       	cp	r22, r18
    6c5a:	73 07       	cpc	r23, r19
    6c5c:	84 07       	cpc	r24, r20
    6c5e:	38 f0       	brcs	.+14     	; 0x6c6e <__divsf3_pse+0x26>
    6c60:	9f 5f       	subi	r25, 0xFF	; 255
    6c62:	5f 4f       	sbci	r21, 0xFF	; 255
    6c64:	22 0f       	add	r18, r18
    6c66:	33 1f       	adc	r19, r19
    6c68:	44 1f       	adc	r20, r20
    6c6a:	aa 1f       	adc	r26, r26
    6c6c:	a9 f3       	breq	.-22     	; 0x6c58 <__divsf3_pse+0x10>
    6c6e:	33 d0       	rcall	.+102    	; 0x6cd6 <__divsf3_pse+0x8e>
    6c70:	0e 2e       	mov	r0, r30
    6c72:	3a f0       	brmi	.+14     	; 0x6c82 <__divsf3_pse+0x3a>
    6c74:	e0 e8       	ldi	r30, 0x80	; 128
    6c76:	30 d0       	rcall	.+96     	; 0x6cd8 <__divsf3_pse+0x90>
    6c78:	91 50       	subi	r25, 0x01	; 1
    6c7a:	50 40       	sbci	r21, 0x00	; 0
    6c7c:	e6 95       	lsr	r30
    6c7e:	00 1c       	adc	r0, r0
    6c80:	ca f7       	brpl	.-14     	; 0x6c74 <__divsf3_pse+0x2c>
    6c82:	29 d0       	rcall	.+82     	; 0x6cd6 <__divsf3_pse+0x8e>
    6c84:	fe 2f       	mov	r31, r30
    6c86:	27 d0       	rcall	.+78     	; 0x6cd6 <__divsf3_pse+0x8e>
    6c88:	66 0f       	add	r22, r22
    6c8a:	77 1f       	adc	r23, r23
    6c8c:	88 1f       	adc	r24, r24
    6c8e:	bb 1f       	adc	r27, r27
    6c90:	26 17       	cp	r18, r22
    6c92:	37 07       	cpc	r19, r23
    6c94:	48 07       	cpc	r20, r24
    6c96:	ab 07       	cpc	r26, r27
    6c98:	b0 e8       	ldi	r27, 0x80	; 128
    6c9a:	09 f0       	breq	.+2      	; 0x6c9e <__divsf3_pse+0x56>
    6c9c:	bb 0b       	sbc	r27, r27
    6c9e:	80 2d       	mov	r24, r0
    6ca0:	bf 01       	movw	r22, r30
    6ca2:	ff 27       	eor	r31, r31
    6ca4:	93 58       	subi	r25, 0x83	; 131
    6ca6:	5f 4f       	sbci	r21, 0xFF	; 255
    6ca8:	2a f0       	brmi	.+10     	; 0x6cb4 <__divsf3_pse+0x6c>
    6caa:	9e 3f       	cpi	r25, 0xFE	; 254
    6cac:	51 05       	cpc	r21, r1
    6cae:	68 f0       	brcs	.+26     	; 0x6cca <__divsf3_pse+0x82>
    6cb0:	d1 c0       	rjmp	.+418    	; 0x6e54 <__fp_inf>
    6cb2:	51 c1       	rjmp	.+674    	; 0x6f56 <__fp_szero>
    6cb4:	5f 3f       	cpi	r21, 0xFF	; 255
    6cb6:	ec f3       	brlt	.-6      	; 0x6cb2 <__divsf3_pse+0x6a>
    6cb8:	98 3e       	cpi	r25, 0xE8	; 232
    6cba:	dc f3       	brlt	.-10     	; 0x6cb2 <__divsf3_pse+0x6a>
    6cbc:	86 95       	lsr	r24
    6cbe:	77 95       	ror	r23
    6cc0:	67 95       	ror	r22
    6cc2:	b7 95       	ror	r27
    6cc4:	f7 95       	ror	r31
    6cc6:	9f 5f       	subi	r25, 0xFF	; 255
    6cc8:	c9 f7       	brne	.-14     	; 0x6cbc <__divsf3_pse+0x74>
    6cca:	88 0f       	add	r24, r24
    6ccc:	91 1d       	adc	r25, r1
    6cce:	96 95       	lsr	r25
    6cd0:	87 95       	ror	r24
    6cd2:	97 f9       	bld	r25, 7
    6cd4:	08 95       	ret
    6cd6:	e1 e0       	ldi	r30, 0x01	; 1
    6cd8:	66 0f       	add	r22, r22
    6cda:	77 1f       	adc	r23, r23
    6cdc:	88 1f       	adc	r24, r24
    6cde:	bb 1f       	adc	r27, r27
    6ce0:	62 17       	cp	r22, r18
    6ce2:	73 07       	cpc	r23, r19
    6ce4:	84 07       	cpc	r24, r20
    6ce6:	ba 07       	cpc	r27, r26
    6ce8:	20 f0       	brcs	.+8      	; 0x6cf2 <__divsf3_pse+0xaa>
    6cea:	62 1b       	sub	r22, r18
    6cec:	73 0b       	sbc	r23, r19
    6cee:	84 0b       	sbc	r24, r20
    6cf0:	ba 0b       	sbc	r27, r26
    6cf2:	ee 1f       	adc	r30, r30
    6cf4:	88 f7       	brcc	.-30     	; 0x6cd8 <__divsf3_pse+0x90>
    6cf6:	e0 95       	com	r30
    6cf8:	08 95       	ret

00006cfa <__fixsfsi>:
    6cfa:	04 d0       	rcall	.+8      	; 0x6d04 <__fixunssfsi>
    6cfc:	68 94       	set
    6cfe:	b1 11       	cpse	r27, r1
    6d00:	2a c1       	rjmp	.+596    	; 0x6f56 <__fp_szero>
    6d02:	08 95       	ret

00006d04 <__fixunssfsi>:
    6d04:	0d d1       	rcall	.+538    	; 0x6f20 <__fp_splitA>
    6d06:	88 f0       	brcs	.+34     	; 0x6d2a <__fixunssfsi+0x26>
    6d08:	9f 57       	subi	r25, 0x7F	; 127
    6d0a:	90 f0       	brcs	.+36     	; 0x6d30 <__fixunssfsi+0x2c>
    6d0c:	b9 2f       	mov	r27, r25
    6d0e:	99 27       	eor	r25, r25
    6d10:	b7 51       	subi	r27, 0x17	; 23
    6d12:	a0 f0       	brcs	.+40     	; 0x6d3c <__fixunssfsi+0x38>
    6d14:	d1 f0       	breq	.+52     	; 0x6d4a <__fixunssfsi+0x46>
    6d16:	66 0f       	add	r22, r22
    6d18:	77 1f       	adc	r23, r23
    6d1a:	88 1f       	adc	r24, r24
    6d1c:	99 1f       	adc	r25, r25
    6d1e:	1a f0       	brmi	.+6      	; 0x6d26 <__fixunssfsi+0x22>
    6d20:	ba 95       	dec	r27
    6d22:	c9 f7       	brne	.-14     	; 0x6d16 <__fixunssfsi+0x12>
    6d24:	12 c0       	rjmp	.+36     	; 0x6d4a <__fixunssfsi+0x46>
    6d26:	b1 30       	cpi	r27, 0x01	; 1
    6d28:	81 f0       	breq	.+32     	; 0x6d4a <__fixunssfsi+0x46>
    6d2a:	14 d1       	rcall	.+552    	; 0x6f54 <__fp_zero>
    6d2c:	b1 e0       	ldi	r27, 0x01	; 1
    6d2e:	08 95       	ret
    6d30:	11 c1       	rjmp	.+546    	; 0x6f54 <__fp_zero>
    6d32:	67 2f       	mov	r22, r23
    6d34:	78 2f       	mov	r23, r24
    6d36:	88 27       	eor	r24, r24
    6d38:	b8 5f       	subi	r27, 0xF8	; 248
    6d3a:	39 f0       	breq	.+14     	; 0x6d4a <__fixunssfsi+0x46>
    6d3c:	b9 3f       	cpi	r27, 0xF9	; 249
    6d3e:	cc f3       	brlt	.-14     	; 0x6d32 <__fixunssfsi+0x2e>
    6d40:	86 95       	lsr	r24
    6d42:	77 95       	ror	r23
    6d44:	67 95       	ror	r22
    6d46:	b3 95       	inc	r27
    6d48:	d9 f7       	brne	.-10     	; 0x6d40 <__fixunssfsi+0x3c>
    6d4a:	3e f4       	brtc	.+14     	; 0x6d5a <__fixunssfsi+0x56>
    6d4c:	90 95       	com	r25
    6d4e:	80 95       	com	r24
    6d50:	70 95       	com	r23
    6d52:	61 95       	neg	r22
    6d54:	7f 4f       	sbci	r23, 0xFF	; 255
    6d56:	8f 4f       	sbci	r24, 0xFF	; 255
    6d58:	9f 4f       	sbci	r25, 0xFF	; 255
    6d5a:	08 95       	ret

00006d5c <__floatunsisf>:
    6d5c:	e8 94       	clt
    6d5e:	09 c0       	rjmp	.+18     	; 0x6d72 <__floatsisf+0x12>

00006d60 <__floatsisf>:
    6d60:	97 fb       	bst	r25, 7
    6d62:	3e f4       	brtc	.+14     	; 0x6d72 <__floatsisf+0x12>
    6d64:	90 95       	com	r25
    6d66:	80 95       	com	r24
    6d68:	70 95       	com	r23
    6d6a:	61 95       	neg	r22
    6d6c:	7f 4f       	sbci	r23, 0xFF	; 255
    6d6e:	8f 4f       	sbci	r24, 0xFF	; 255
    6d70:	9f 4f       	sbci	r25, 0xFF	; 255
    6d72:	99 23       	and	r25, r25
    6d74:	a9 f0       	breq	.+42     	; 0x6da0 <__floatsisf+0x40>
    6d76:	f9 2f       	mov	r31, r25
    6d78:	96 e9       	ldi	r25, 0x96	; 150
    6d7a:	bb 27       	eor	r27, r27
    6d7c:	93 95       	inc	r25
    6d7e:	f6 95       	lsr	r31
    6d80:	87 95       	ror	r24
    6d82:	77 95       	ror	r23
    6d84:	67 95       	ror	r22
    6d86:	b7 95       	ror	r27
    6d88:	f1 11       	cpse	r31, r1
    6d8a:	f8 cf       	rjmp	.-16     	; 0x6d7c <__floatsisf+0x1c>
    6d8c:	fa f4       	brpl	.+62     	; 0x6dcc <__floatsisf+0x6c>
    6d8e:	bb 0f       	add	r27, r27
    6d90:	11 f4       	brne	.+4      	; 0x6d96 <__floatsisf+0x36>
    6d92:	60 ff       	sbrs	r22, 0
    6d94:	1b c0       	rjmp	.+54     	; 0x6dcc <__floatsisf+0x6c>
    6d96:	6f 5f       	subi	r22, 0xFF	; 255
    6d98:	7f 4f       	sbci	r23, 0xFF	; 255
    6d9a:	8f 4f       	sbci	r24, 0xFF	; 255
    6d9c:	9f 4f       	sbci	r25, 0xFF	; 255
    6d9e:	16 c0       	rjmp	.+44     	; 0x6dcc <__floatsisf+0x6c>
    6da0:	88 23       	and	r24, r24
    6da2:	11 f0       	breq	.+4      	; 0x6da8 <__floatsisf+0x48>
    6da4:	96 e9       	ldi	r25, 0x96	; 150
    6da6:	11 c0       	rjmp	.+34     	; 0x6dca <__floatsisf+0x6a>
    6da8:	77 23       	and	r23, r23
    6daa:	21 f0       	breq	.+8      	; 0x6db4 <__floatsisf+0x54>
    6dac:	9e e8       	ldi	r25, 0x8E	; 142
    6dae:	87 2f       	mov	r24, r23
    6db0:	76 2f       	mov	r23, r22
    6db2:	05 c0       	rjmp	.+10     	; 0x6dbe <__floatsisf+0x5e>
    6db4:	66 23       	and	r22, r22
    6db6:	71 f0       	breq	.+28     	; 0x6dd4 <__floatsisf+0x74>
    6db8:	96 e8       	ldi	r25, 0x86	; 134
    6dba:	86 2f       	mov	r24, r22
    6dbc:	70 e0       	ldi	r23, 0x00	; 0
    6dbe:	60 e0       	ldi	r22, 0x00	; 0
    6dc0:	2a f0       	brmi	.+10     	; 0x6dcc <__floatsisf+0x6c>
    6dc2:	9a 95       	dec	r25
    6dc4:	66 0f       	add	r22, r22
    6dc6:	77 1f       	adc	r23, r23
    6dc8:	88 1f       	adc	r24, r24
    6dca:	da f7       	brpl	.-10     	; 0x6dc2 <__floatsisf+0x62>
    6dcc:	88 0f       	add	r24, r24
    6dce:	96 95       	lsr	r25
    6dd0:	87 95       	ror	r24
    6dd2:	97 f9       	bld	r25, 7
    6dd4:	08 95       	ret

00006dd6 <__fp_arccos>:
    6dd6:	df 93       	push	r29
    6dd8:	cf 93       	push	r28
    6dda:	1f 93       	push	r17
    6ddc:	0f 93       	push	r16
    6dde:	8b 01       	movw	r16, r22
    6de0:	ec 01       	movw	r28, r24
    6de2:	e5 e9       	ldi	r30, 0x95	; 149
    6de4:	f0 e0       	ldi	r31, 0x00	; 0
    6de6:	3f d0       	rcall	.+126    	; 0x6e66 <__fp_powser>
    6de8:	82 d0       	rcall	.+260    	; 0x6eee <__fp_round>
    6dea:	98 01       	movw	r18, r16
    6dec:	ae 01       	movw	r20, r28
    6dee:	8b 01       	movw	r16, r22
    6df0:	ec 01       	movw	r28, r24
    6df2:	60 e0       	ldi	r22, 0x00	; 0
    6df4:	70 e0       	ldi	r23, 0x00	; 0
    6df6:	80 e8       	ldi	r24, 0x80	; 128
    6df8:	9f e3       	ldi	r25, 0x3F	; 63
    6dfa:	35 de       	rcall	.-918    	; 0x6a66 <__subsf3>
    6dfc:	20 d1       	rcall	.+576    	; 0x703e <sqrt>
    6dfe:	98 01       	movw	r18, r16
    6e00:	ae 01       	movw	r20, r28
    6e02:	0f 91       	pop	r16
    6e04:	1f 91       	pop	r17
    6e06:	cf 91       	pop	r28
    6e08:	df 91       	pop	r29
    6e0a:	be c0       	rjmp	.+380    	; 0x6f88 <__mulsf3x>

00006e0c <__fp_cmp>:
    6e0c:	99 0f       	add	r25, r25
    6e0e:	00 08       	sbc	r0, r0
    6e10:	55 0f       	add	r21, r21
    6e12:	aa 0b       	sbc	r26, r26
    6e14:	e0 e8       	ldi	r30, 0x80	; 128
    6e16:	fe ef       	ldi	r31, 0xFE	; 254
    6e18:	16 16       	cp	r1, r22
    6e1a:	17 06       	cpc	r1, r23
    6e1c:	e8 07       	cpc	r30, r24
    6e1e:	f9 07       	cpc	r31, r25
    6e20:	c0 f0       	brcs	.+48     	; 0x6e52 <__fp_cmp+0x46>
    6e22:	12 16       	cp	r1, r18
    6e24:	13 06       	cpc	r1, r19
    6e26:	e4 07       	cpc	r30, r20
    6e28:	f5 07       	cpc	r31, r21
    6e2a:	98 f0       	brcs	.+38     	; 0x6e52 <__fp_cmp+0x46>
    6e2c:	62 1b       	sub	r22, r18
    6e2e:	73 0b       	sbc	r23, r19
    6e30:	84 0b       	sbc	r24, r20
    6e32:	95 0b       	sbc	r25, r21
    6e34:	39 f4       	brne	.+14     	; 0x6e44 <__fp_cmp+0x38>
    6e36:	0a 26       	eor	r0, r26
    6e38:	61 f0       	breq	.+24     	; 0x6e52 <__fp_cmp+0x46>
    6e3a:	23 2b       	or	r18, r19
    6e3c:	24 2b       	or	r18, r20
    6e3e:	25 2b       	or	r18, r21
    6e40:	21 f4       	brne	.+8      	; 0x6e4a <__fp_cmp+0x3e>
    6e42:	08 95       	ret
    6e44:	0a 26       	eor	r0, r26
    6e46:	09 f4       	brne	.+2      	; 0x6e4a <__fp_cmp+0x3e>
    6e48:	a1 40       	sbci	r26, 0x01	; 1
    6e4a:	a6 95       	lsr	r26
    6e4c:	8f ef       	ldi	r24, 0xFF	; 255
    6e4e:	81 1d       	adc	r24, r1
    6e50:	81 1d       	adc	r24, r1
    6e52:	08 95       	ret

00006e54 <__fp_inf>:
    6e54:	97 f9       	bld	r25, 7
    6e56:	9f 67       	ori	r25, 0x7F	; 127
    6e58:	80 e8       	ldi	r24, 0x80	; 128
    6e5a:	70 e0       	ldi	r23, 0x00	; 0
    6e5c:	60 e0       	ldi	r22, 0x00	; 0
    6e5e:	08 95       	ret

00006e60 <__fp_nan>:
    6e60:	9f ef       	ldi	r25, 0xFF	; 255
    6e62:	80 ec       	ldi	r24, 0xC0	; 192
    6e64:	08 95       	ret

00006e66 <__fp_powser>:
    6e66:	df 93       	push	r29
    6e68:	cf 93       	push	r28
    6e6a:	1f 93       	push	r17
    6e6c:	0f 93       	push	r16
    6e6e:	ff 92       	push	r15
    6e70:	ef 92       	push	r14
    6e72:	df 92       	push	r13
    6e74:	7b 01       	movw	r14, r22
    6e76:	8c 01       	movw	r16, r24
    6e78:	68 94       	set
    6e7a:	05 c0       	rjmp	.+10     	; 0x6e86 <__fp_powser+0x20>
    6e7c:	da 2e       	mov	r13, r26
    6e7e:	ef 01       	movw	r28, r30
    6e80:	83 d0       	rcall	.+262    	; 0x6f88 <__mulsf3x>
    6e82:	fe 01       	movw	r30, r28
    6e84:	e8 94       	clt
    6e86:	a5 91       	lpm	r26, Z+
    6e88:	25 91       	lpm	r18, Z+
    6e8a:	35 91       	lpm	r19, Z+
    6e8c:	45 91       	lpm	r20, Z+
    6e8e:	55 91       	lpm	r21, Z+
    6e90:	ae f3       	brts	.-22     	; 0x6e7c <__fp_powser+0x16>
    6e92:	ef 01       	movw	r28, r30
    6e94:	fa dd       	rcall	.-1036   	; 0x6a8a <__addsf3x>
    6e96:	fe 01       	movw	r30, r28
    6e98:	97 01       	movw	r18, r14
    6e9a:	a8 01       	movw	r20, r16
    6e9c:	da 94       	dec	r13
    6e9e:	79 f7       	brne	.-34     	; 0x6e7e <__fp_powser+0x18>
    6ea0:	df 90       	pop	r13
    6ea2:	ef 90       	pop	r14
    6ea4:	ff 90       	pop	r15
    6ea6:	0f 91       	pop	r16
    6ea8:	1f 91       	pop	r17
    6eaa:	cf 91       	pop	r28
    6eac:	df 91       	pop	r29
    6eae:	08 95       	ret

00006eb0 <__fp_powsodd>:
    6eb0:	9f 93       	push	r25
    6eb2:	8f 93       	push	r24
    6eb4:	7f 93       	push	r23
    6eb6:	6f 93       	push	r22
    6eb8:	ff 93       	push	r31
    6eba:	ef 93       	push	r30
    6ebc:	9b 01       	movw	r18, r22
    6ebe:	ac 01       	movw	r20, r24
    6ec0:	57 d0       	rcall	.+174    	; 0x6f70 <__mulsf3>
    6ec2:	ef 91       	pop	r30
    6ec4:	ff 91       	pop	r31
    6ec6:	cf df       	rcall	.-98     	; 0x6e66 <__fp_powser>
    6ec8:	2f 91       	pop	r18
    6eca:	3f 91       	pop	r19
    6ecc:	4f 91       	pop	r20
    6ece:	5f 91       	pop	r21
    6ed0:	4f c0       	rjmp	.+158    	; 0x6f70 <__mulsf3>

00006ed2 <__fp_pscA>:
    6ed2:	00 24       	eor	r0, r0
    6ed4:	0a 94       	dec	r0
    6ed6:	16 16       	cp	r1, r22
    6ed8:	17 06       	cpc	r1, r23
    6eda:	18 06       	cpc	r1, r24
    6edc:	09 06       	cpc	r0, r25
    6ede:	08 95       	ret

00006ee0 <__fp_pscB>:
    6ee0:	00 24       	eor	r0, r0
    6ee2:	0a 94       	dec	r0
    6ee4:	12 16       	cp	r1, r18
    6ee6:	13 06       	cpc	r1, r19
    6ee8:	14 06       	cpc	r1, r20
    6eea:	05 06       	cpc	r0, r21
    6eec:	08 95       	ret

00006eee <__fp_round>:
    6eee:	09 2e       	mov	r0, r25
    6ef0:	03 94       	inc	r0
    6ef2:	00 0c       	add	r0, r0
    6ef4:	11 f4       	brne	.+4      	; 0x6efa <__fp_round+0xc>
    6ef6:	88 23       	and	r24, r24
    6ef8:	52 f0       	brmi	.+20     	; 0x6f0e <__fp_round+0x20>
    6efa:	bb 0f       	add	r27, r27
    6efc:	40 f4       	brcc	.+16     	; 0x6f0e <__fp_round+0x20>
    6efe:	bf 2b       	or	r27, r31
    6f00:	11 f4       	brne	.+4      	; 0x6f06 <__fp_round+0x18>
    6f02:	60 ff       	sbrs	r22, 0
    6f04:	04 c0       	rjmp	.+8      	; 0x6f0e <__fp_round+0x20>
    6f06:	6f 5f       	subi	r22, 0xFF	; 255
    6f08:	7f 4f       	sbci	r23, 0xFF	; 255
    6f0a:	8f 4f       	sbci	r24, 0xFF	; 255
    6f0c:	9f 4f       	sbci	r25, 0xFF	; 255
    6f0e:	08 95       	ret

00006f10 <__fp_split3>:
    6f10:	57 fd       	sbrc	r21, 7
    6f12:	90 58       	subi	r25, 0x80	; 128
    6f14:	44 0f       	add	r20, r20
    6f16:	55 1f       	adc	r21, r21
    6f18:	59 f0       	breq	.+22     	; 0x6f30 <__fp_splitA+0x10>
    6f1a:	5f 3f       	cpi	r21, 0xFF	; 255
    6f1c:	71 f0       	breq	.+28     	; 0x6f3a <__fp_splitA+0x1a>
    6f1e:	47 95       	ror	r20

00006f20 <__fp_splitA>:
    6f20:	88 0f       	add	r24, r24
    6f22:	97 fb       	bst	r25, 7
    6f24:	99 1f       	adc	r25, r25
    6f26:	61 f0       	breq	.+24     	; 0x6f40 <__fp_splitA+0x20>
    6f28:	9f 3f       	cpi	r25, 0xFF	; 255
    6f2a:	79 f0       	breq	.+30     	; 0x6f4a <__fp_splitA+0x2a>
    6f2c:	87 95       	ror	r24
    6f2e:	08 95       	ret
    6f30:	12 16       	cp	r1, r18
    6f32:	13 06       	cpc	r1, r19
    6f34:	14 06       	cpc	r1, r20
    6f36:	55 1f       	adc	r21, r21
    6f38:	f2 cf       	rjmp	.-28     	; 0x6f1e <__fp_split3+0xe>
    6f3a:	46 95       	lsr	r20
    6f3c:	f1 df       	rcall	.-30     	; 0x6f20 <__fp_splitA>
    6f3e:	08 c0       	rjmp	.+16     	; 0x6f50 <__fp_splitA+0x30>
    6f40:	16 16       	cp	r1, r22
    6f42:	17 06       	cpc	r1, r23
    6f44:	18 06       	cpc	r1, r24
    6f46:	99 1f       	adc	r25, r25
    6f48:	f1 cf       	rjmp	.-30     	; 0x6f2c <__fp_splitA+0xc>
    6f4a:	86 95       	lsr	r24
    6f4c:	71 05       	cpc	r23, r1
    6f4e:	61 05       	cpc	r22, r1
    6f50:	08 94       	sec
    6f52:	08 95       	ret

00006f54 <__fp_zero>:
    6f54:	e8 94       	clt

00006f56 <__fp_szero>:
    6f56:	bb 27       	eor	r27, r27
    6f58:	66 27       	eor	r22, r22
    6f5a:	77 27       	eor	r23, r23
    6f5c:	cb 01       	movw	r24, r22
    6f5e:	97 f9       	bld	r25, 7
    6f60:	08 95       	ret

00006f62 <inverse>:
    6f62:	9b 01       	movw	r18, r22
    6f64:	ac 01       	movw	r20, r24
    6f66:	60 e0       	ldi	r22, 0x00	; 0
    6f68:	70 e0       	ldi	r23, 0x00	; 0
    6f6a:	80 e8       	ldi	r24, 0x80	; 128
    6f6c:	9f e3       	ldi	r25, 0x3F	; 63
    6f6e:	5d ce       	rjmp	.-838    	; 0x6c2a <__divsf3>

00006f70 <__mulsf3>:
    6f70:	0b d0       	rcall	.+22     	; 0x6f88 <__mulsf3x>
    6f72:	bd cf       	rjmp	.-134    	; 0x6eee <__fp_round>
    6f74:	ae df       	rcall	.-164    	; 0x6ed2 <__fp_pscA>
    6f76:	28 f0       	brcs	.+10     	; 0x6f82 <__mulsf3+0x12>
    6f78:	b3 df       	rcall	.-154    	; 0x6ee0 <__fp_pscB>
    6f7a:	18 f0       	brcs	.+6      	; 0x6f82 <__mulsf3+0x12>
    6f7c:	95 23       	and	r25, r21
    6f7e:	09 f0       	breq	.+2      	; 0x6f82 <__mulsf3+0x12>
    6f80:	69 cf       	rjmp	.-302    	; 0x6e54 <__fp_inf>
    6f82:	6e cf       	rjmp	.-292    	; 0x6e60 <__fp_nan>
    6f84:	11 24       	eor	r1, r1
    6f86:	e7 cf       	rjmp	.-50     	; 0x6f56 <__fp_szero>

00006f88 <__mulsf3x>:
    6f88:	c3 df       	rcall	.-122    	; 0x6f10 <__fp_split3>
    6f8a:	a0 f3       	brcs	.-24     	; 0x6f74 <__mulsf3+0x4>

00006f8c <__mulsf3_pse>:
    6f8c:	95 9f       	mul	r25, r21
    6f8e:	d1 f3       	breq	.-12     	; 0x6f84 <__mulsf3+0x14>
    6f90:	95 0f       	add	r25, r21
    6f92:	50 e0       	ldi	r21, 0x00	; 0
    6f94:	55 1f       	adc	r21, r21
    6f96:	62 9f       	mul	r22, r18
    6f98:	f0 01       	movw	r30, r0
    6f9a:	72 9f       	mul	r23, r18
    6f9c:	bb 27       	eor	r27, r27
    6f9e:	f0 0d       	add	r31, r0
    6fa0:	b1 1d       	adc	r27, r1
    6fa2:	63 9f       	mul	r22, r19
    6fa4:	aa 27       	eor	r26, r26
    6fa6:	f0 0d       	add	r31, r0
    6fa8:	b1 1d       	adc	r27, r1
    6faa:	aa 1f       	adc	r26, r26
    6fac:	64 9f       	mul	r22, r20
    6fae:	66 27       	eor	r22, r22
    6fb0:	b0 0d       	add	r27, r0
    6fb2:	a1 1d       	adc	r26, r1
    6fb4:	66 1f       	adc	r22, r22
    6fb6:	82 9f       	mul	r24, r18
    6fb8:	22 27       	eor	r18, r18
    6fba:	b0 0d       	add	r27, r0
    6fbc:	a1 1d       	adc	r26, r1
    6fbe:	62 1f       	adc	r22, r18
    6fc0:	73 9f       	mul	r23, r19
    6fc2:	b0 0d       	add	r27, r0
    6fc4:	a1 1d       	adc	r26, r1
    6fc6:	62 1f       	adc	r22, r18
    6fc8:	83 9f       	mul	r24, r19
    6fca:	a0 0d       	add	r26, r0
    6fcc:	61 1d       	adc	r22, r1
    6fce:	22 1f       	adc	r18, r18
    6fd0:	74 9f       	mul	r23, r20
    6fd2:	33 27       	eor	r19, r19
    6fd4:	a0 0d       	add	r26, r0
    6fd6:	61 1d       	adc	r22, r1
    6fd8:	23 1f       	adc	r18, r19
    6fda:	84 9f       	mul	r24, r20
    6fdc:	60 0d       	add	r22, r0
    6fde:	21 1d       	adc	r18, r1
    6fe0:	82 2f       	mov	r24, r18
    6fe2:	76 2f       	mov	r23, r22
    6fe4:	6a 2f       	mov	r22, r26
    6fe6:	11 24       	eor	r1, r1
    6fe8:	9f 57       	subi	r25, 0x7F	; 127
    6fea:	50 40       	sbci	r21, 0x00	; 0
    6fec:	8a f0       	brmi	.+34     	; 0x7010 <__mulsf3_pse+0x84>
    6fee:	e1 f0       	breq	.+56     	; 0x7028 <__mulsf3_pse+0x9c>
    6ff0:	88 23       	and	r24, r24
    6ff2:	4a f0       	brmi	.+18     	; 0x7006 <__mulsf3_pse+0x7a>
    6ff4:	ee 0f       	add	r30, r30
    6ff6:	ff 1f       	adc	r31, r31
    6ff8:	bb 1f       	adc	r27, r27
    6ffa:	66 1f       	adc	r22, r22
    6ffc:	77 1f       	adc	r23, r23
    6ffe:	88 1f       	adc	r24, r24
    7000:	91 50       	subi	r25, 0x01	; 1
    7002:	50 40       	sbci	r21, 0x00	; 0
    7004:	a9 f7       	brne	.-22     	; 0x6ff0 <__mulsf3_pse+0x64>
    7006:	9e 3f       	cpi	r25, 0xFE	; 254
    7008:	51 05       	cpc	r21, r1
    700a:	70 f0       	brcs	.+28     	; 0x7028 <__mulsf3_pse+0x9c>
    700c:	23 cf       	rjmp	.-442    	; 0x6e54 <__fp_inf>
    700e:	a3 cf       	rjmp	.-186    	; 0x6f56 <__fp_szero>
    7010:	5f 3f       	cpi	r21, 0xFF	; 255
    7012:	ec f3       	brlt	.-6      	; 0x700e <__mulsf3_pse+0x82>
    7014:	98 3e       	cpi	r25, 0xE8	; 232
    7016:	dc f3       	brlt	.-10     	; 0x700e <__mulsf3_pse+0x82>
    7018:	86 95       	lsr	r24
    701a:	77 95       	ror	r23
    701c:	67 95       	ror	r22
    701e:	b7 95       	ror	r27
    7020:	f7 95       	ror	r31
    7022:	e7 95       	ror	r30
    7024:	9f 5f       	subi	r25, 0xFF	; 255
    7026:	c1 f7       	brne	.-16     	; 0x7018 <__mulsf3_pse+0x8c>
    7028:	fe 2b       	or	r31, r30
    702a:	88 0f       	add	r24, r24
    702c:	91 1d       	adc	r25, r1
    702e:	96 95       	lsr	r25
    7030:	87 95       	ror	r24
    7032:	97 f9       	bld	r25, 7
    7034:	08 95       	ret
    7036:	11 f4       	brne	.+4      	; 0x703c <__mulsf3_pse+0xb0>
    7038:	0e f4       	brtc	.+2      	; 0x703c <__mulsf3_pse+0xb0>
    703a:	12 cf       	rjmp	.-476    	; 0x6e60 <__fp_nan>
    703c:	41 c0       	rjmp	.+130    	; 0x70c0 <__fp_mpack>

0000703e <sqrt>:
    703e:	70 df       	rcall	.-288    	; 0x6f20 <__fp_splitA>
    7040:	d0 f3       	brcs	.-12     	; 0x7036 <__mulsf3_pse+0xaa>
    7042:	99 23       	and	r25, r25
    7044:	d9 f3       	breq	.-10     	; 0x703c <__mulsf3_pse+0xb0>
    7046:	ce f3       	brts	.-14     	; 0x703a <__mulsf3_pse+0xae>
    7048:	9f 57       	subi	r25, 0x7F	; 127
    704a:	55 0b       	sbc	r21, r21
    704c:	87 ff       	sbrs	r24, 7
    704e:	46 d0       	rcall	.+140    	; 0x70dc <__fp_norm2>
    7050:	00 24       	eor	r0, r0
    7052:	a0 e6       	ldi	r26, 0x60	; 96
    7054:	40 ea       	ldi	r20, 0xA0	; 160
    7056:	90 01       	movw	r18, r0
    7058:	80 58       	subi	r24, 0x80	; 128
    705a:	56 95       	lsr	r21
    705c:	97 95       	ror	r25
    705e:	28 f4       	brcc	.+10     	; 0x706a <sqrt+0x2c>
    7060:	80 5c       	subi	r24, 0xC0	; 192
    7062:	66 0f       	add	r22, r22
    7064:	77 1f       	adc	r23, r23
    7066:	88 1f       	adc	r24, r24
    7068:	20 f0       	brcs	.+8      	; 0x7072 <sqrt+0x34>
    706a:	26 17       	cp	r18, r22
    706c:	37 07       	cpc	r19, r23
    706e:	48 07       	cpc	r20, r24
    7070:	30 f4       	brcc	.+12     	; 0x707e <sqrt+0x40>
    7072:	62 1b       	sub	r22, r18
    7074:	73 0b       	sbc	r23, r19
    7076:	84 0b       	sbc	r24, r20
    7078:	20 29       	or	r18, r0
    707a:	31 29       	or	r19, r1
    707c:	4a 2b       	or	r20, r26
    707e:	a6 95       	lsr	r26
    7080:	17 94       	ror	r1
    7082:	07 94       	ror	r0
    7084:	20 25       	eor	r18, r0
    7086:	31 25       	eor	r19, r1
    7088:	4a 27       	eor	r20, r26
    708a:	58 f7       	brcc	.-42     	; 0x7062 <sqrt+0x24>
    708c:	66 0f       	add	r22, r22
    708e:	77 1f       	adc	r23, r23
    7090:	88 1f       	adc	r24, r24
    7092:	20 f0       	brcs	.+8      	; 0x709c <sqrt+0x5e>
    7094:	26 17       	cp	r18, r22
    7096:	37 07       	cpc	r19, r23
    7098:	48 07       	cpc	r20, r24
    709a:	30 f4       	brcc	.+12     	; 0x70a8 <sqrt+0x6a>
    709c:	62 0b       	sbc	r22, r18
    709e:	73 0b       	sbc	r23, r19
    70a0:	84 0b       	sbc	r24, r20
    70a2:	20 0d       	add	r18, r0
    70a4:	31 1d       	adc	r19, r1
    70a6:	41 1d       	adc	r20, r1
    70a8:	a0 95       	com	r26
    70aa:	81 f7       	brne	.-32     	; 0x708c <sqrt+0x4e>
    70ac:	b9 01       	movw	r22, r18
    70ae:	84 2f       	mov	r24, r20
    70b0:	91 58       	subi	r25, 0x81	; 129
    70b2:	88 0f       	add	r24, r24
    70b4:	96 95       	lsr	r25
    70b6:	87 95       	ror	r24
    70b8:	08 95       	ret

000070ba <square>:
    70ba:	9b 01       	movw	r18, r22
    70bc:	ac 01       	movw	r20, r24
    70be:	58 cf       	rjmp	.-336    	; 0x6f70 <__mulsf3>

000070c0 <__fp_mpack>:
    70c0:	9f 3f       	cpi	r25, 0xFF	; 255
    70c2:	31 f0       	breq	.+12     	; 0x70d0 <__fp_mpack_finite+0xc>

000070c4 <__fp_mpack_finite>:
    70c4:	91 50       	subi	r25, 0x01	; 1
    70c6:	20 f4       	brcc	.+8      	; 0x70d0 <__fp_mpack_finite+0xc>
    70c8:	87 95       	ror	r24
    70ca:	77 95       	ror	r23
    70cc:	67 95       	ror	r22
    70ce:	b7 95       	ror	r27
    70d0:	88 0f       	add	r24, r24
    70d2:	91 1d       	adc	r25, r1
    70d4:	96 95       	lsr	r25
    70d6:	87 95       	ror	r24
    70d8:	97 f9       	bld	r25, 7
    70da:	08 95       	ret

000070dc <__fp_norm2>:
    70dc:	91 50       	subi	r25, 0x01	; 1
    70de:	50 40       	sbci	r21, 0x00	; 0
    70e0:	66 0f       	add	r22, r22
    70e2:	77 1f       	adc	r23, r23
    70e4:	88 1f       	adc	r24, r24
    70e6:	d2 f7       	brpl	.-12     	; 0x70dc <__fp_norm2>
    70e8:	08 95       	ret

000070ea <__mulsi3>:
    70ea:	62 9f       	mul	r22, r18
    70ec:	d0 01       	movw	r26, r0
    70ee:	73 9f       	mul	r23, r19
    70f0:	f0 01       	movw	r30, r0
    70f2:	82 9f       	mul	r24, r18
    70f4:	e0 0d       	add	r30, r0
    70f6:	f1 1d       	adc	r31, r1
    70f8:	64 9f       	mul	r22, r20
    70fa:	e0 0d       	add	r30, r0
    70fc:	f1 1d       	adc	r31, r1
    70fe:	92 9f       	mul	r25, r18
    7100:	f0 0d       	add	r31, r0
    7102:	83 9f       	mul	r24, r19
    7104:	f0 0d       	add	r31, r0
    7106:	74 9f       	mul	r23, r20
    7108:	f0 0d       	add	r31, r0
    710a:	65 9f       	mul	r22, r21
    710c:	f0 0d       	add	r31, r0
    710e:	99 27       	eor	r25, r25
    7110:	72 9f       	mul	r23, r18
    7112:	b0 0d       	add	r27, r0
    7114:	e1 1d       	adc	r30, r1
    7116:	f9 1f       	adc	r31, r25
    7118:	63 9f       	mul	r22, r19
    711a:	b0 0d       	add	r27, r0
    711c:	e1 1d       	adc	r30, r1
    711e:	f9 1f       	adc	r31, r25
    7120:	bd 01       	movw	r22, r26
    7122:	cf 01       	movw	r24, r30
    7124:	11 24       	eor	r1, r1
    7126:	08 95       	ret

00007128 <__divmodhi4>:
    7128:	97 fb       	bst	r25, 7
    712a:	09 2e       	mov	r0, r25
    712c:	07 26       	eor	r0, r23
    712e:	0a d0       	rcall	.+20     	; 0x7144 <__divmodhi4_neg1>
    7130:	77 fd       	sbrc	r23, 7
    7132:	04 d0       	rcall	.+8      	; 0x713c <__divmodhi4_neg2>
    7134:	49 d0       	rcall	.+146    	; 0x71c8 <__udivmodhi4>
    7136:	06 d0       	rcall	.+12     	; 0x7144 <__divmodhi4_neg1>
    7138:	00 20       	and	r0, r0
    713a:	1a f4       	brpl	.+6      	; 0x7142 <__divmodhi4_exit>

0000713c <__divmodhi4_neg2>:
    713c:	70 95       	com	r23
    713e:	61 95       	neg	r22
    7140:	7f 4f       	sbci	r23, 0xFF	; 255

00007142 <__divmodhi4_exit>:
    7142:	08 95       	ret

00007144 <__divmodhi4_neg1>:
    7144:	f6 f7       	brtc	.-4      	; 0x7142 <__divmodhi4_exit>
    7146:	90 95       	com	r25
    7148:	81 95       	neg	r24
    714a:	9f 4f       	sbci	r25, 0xFF	; 255
    714c:	08 95       	ret

0000714e <__udivmodsi4>:
    714e:	a1 e2       	ldi	r26, 0x21	; 33
    7150:	1a 2e       	mov	r1, r26
    7152:	aa 1b       	sub	r26, r26
    7154:	bb 1b       	sub	r27, r27
    7156:	fd 01       	movw	r30, r26
    7158:	0d c0       	rjmp	.+26     	; 0x7174 <__udivmodsi4_ep>

0000715a <__udivmodsi4_loop>:
    715a:	aa 1f       	adc	r26, r26
    715c:	bb 1f       	adc	r27, r27
    715e:	ee 1f       	adc	r30, r30
    7160:	ff 1f       	adc	r31, r31
    7162:	a2 17       	cp	r26, r18
    7164:	b3 07       	cpc	r27, r19
    7166:	e4 07       	cpc	r30, r20
    7168:	f5 07       	cpc	r31, r21
    716a:	20 f0       	brcs	.+8      	; 0x7174 <__udivmodsi4_ep>
    716c:	a2 1b       	sub	r26, r18
    716e:	b3 0b       	sbc	r27, r19
    7170:	e4 0b       	sbc	r30, r20
    7172:	f5 0b       	sbc	r31, r21

00007174 <__udivmodsi4_ep>:
    7174:	66 1f       	adc	r22, r22
    7176:	77 1f       	adc	r23, r23
    7178:	88 1f       	adc	r24, r24
    717a:	99 1f       	adc	r25, r25
    717c:	1a 94       	dec	r1
    717e:	69 f7       	brne	.-38     	; 0x715a <__udivmodsi4_loop>
    7180:	60 95       	com	r22
    7182:	70 95       	com	r23
    7184:	80 95       	com	r24
    7186:	90 95       	com	r25
    7188:	9b 01       	movw	r18, r22
    718a:	ac 01       	movw	r20, r24
    718c:	bd 01       	movw	r22, r26
    718e:	cf 01       	movw	r24, r30
    7190:	08 95       	ret

00007192 <__divmodsi4>:
    7192:	97 fb       	bst	r25, 7
    7194:	09 2e       	mov	r0, r25
    7196:	05 26       	eor	r0, r21
    7198:	0e d0       	rcall	.+28     	; 0x71b6 <__divmodsi4_neg1>
    719a:	57 fd       	sbrc	r21, 7
    719c:	04 d0       	rcall	.+8      	; 0x71a6 <__divmodsi4_neg2>
    719e:	d7 df       	rcall	.-82     	; 0x714e <__udivmodsi4>
    71a0:	0a d0       	rcall	.+20     	; 0x71b6 <__divmodsi4_neg1>
    71a2:	00 1c       	adc	r0, r0
    71a4:	38 f4       	brcc	.+14     	; 0x71b4 <__divmodsi4_exit>

000071a6 <__divmodsi4_neg2>:
    71a6:	50 95       	com	r21
    71a8:	40 95       	com	r20
    71aa:	30 95       	com	r19
    71ac:	21 95       	neg	r18
    71ae:	3f 4f       	sbci	r19, 0xFF	; 255
    71b0:	4f 4f       	sbci	r20, 0xFF	; 255
    71b2:	5f 4f       	sbci	r21, 0xFF	; 255

000071b4 <__divmodsi4_exit>:
    71b4:	08 95       	ret

000071b6 <__divmodsi4_neg1>:
    71b6:	f6 f7       	brtc	.-4      	; 0x71b4 <__divmodsi4_exit>
    71b8:	90 95       	com	r25
    71ba:	80 95       	com	r24
    71bc:	70 95       	com	r23
    71be:	61 95       	neg	r22
    71c0:	7f 4f       	sbci	r23, 0xFF	; 255
    71c2:	8f 4f       	sbci	r24, 0xFF	; 255
    71c4:	9f 4f       	sbci	r25, 0xFF	; 255
    71c6:	08 95       	ret

000071c8 <__udivmodhi4>:
    71c8:	aa 1b       	sub	r26, r26
    71ca:	bb 1b       	sub	r27, r27
    71cc:	51 e1       	ldi	r21, 0x11	; 17
    71ce:	07 c0       	rjmp	.+14     	; 0x71de <__udivmodhi4_ep>

000071d0 <__udivmodhi4_loop>:
    71d0:	aa 1f       	adc	r26, r26
    71d2:	bb 1f       	adc	r27, r27
    71d4:	a6 17       	cp	r26, r22
    71d6:	b7 07       	cpc	r27, r23
    71d8:	10 f0       	brcs	.+4      	; 0x71de <__udivmodhi4_ep>
    71da:	a6 1b       	sub	r26, r22
    71dc:	b7 0b       	sbc	r27, r23

000071de <__udivmodhi4_ep>:
    71de:	88 1f       	adc	r24, r24
    71e0:	99 1f       	adc	r25, r25
    71e2:	5a 95       	dec	r21
    71e4:	a9 f7       	brne	.-22     	; 0x71d0 <__udivmodhi4_loop>
    71e6:	80 95       	com	r24
    71e8:	90 95       	com	r25
    71ea:	bc 01       	movw	r22, r24
    71ec:	cd 01       	movw	r24, r26
    71ee:	08 95       	ret

000071f0 <__prologue_saves__>:
    71f0:	2f 92       	push	r2
    71f2:	3f 92       	push	r3
    71f4:	4f 92       	push	r4
    71f6:	5f 92       	push	r5
    71f8:	6f 92       	push	r6
    71fa:	7f 92       	push	r7
    71fc:	8f 92       	push	r8
    71fe:	9f 92       	push	r9
    7200:	af 92       	push	r10
    7202:	bf 92       	push	r11
    7204:	cf 92       	push	r12
    7206:	df 92       	push	r13
    7208:	ef 92       	push	r14
    720a:	ff 92       	push	r15
    720c:	0f 93       	push	r16
    720e:	1f 93       	push	r17
    7210:	cf 93       	push	r28
    7212:	df 93       	push	r29
    7214:	cd b7       	in	r28, 0x3d	; 61
    7216:	de b7       	in	r29, 0x3e	; 62
    7218:	ca 1b       	sub	r28, r26
    721a:	db 0b       	sbc	r29, r27
    721c:	0f b6       	in	r0, 0x3f	; 63
    721e:	f8 94       	cli
    7220:	de bf       	out	0x3e, r29	; 62
    7222:	0f be       	out	0x3f, r0	; 63
    7224:	cd bf       	out	0x3d, r28	; 61
    7226:	09 94       	ijmp

00007228 <__epilogue_restores__>:
    7228:	2a 88       	ldd	r2, Y+18	; 0x12
    722a:	39 88       	ldd	r3, Y+17	; 0x11
    722c:	48 88       	ldd	r4, Y+16	; 0x10
    722e:	5f 84       	ldd	r5, Y+15	; 0x0f
    7230:	6e 84       	ldd	r6, Y+14	; 0x0e
    7232:	7d 84       	ldd	r7, Y+13	; 0x0d
    7234:	8c 84       	ldd	r8, Y+12	; 0x0c
    7236:	9b 84       	ldd	r9, Y+11	; 0x0b
    7238:	aa 84       	ldd	r10, Y+10	; 0x0a
    723a:	b9 84       	ldd	r11, Y+9	; 0x09
    723c:	c8 84       	ldd	r12, Y+8	; 0x08
    723e:	df 80       	ldd	r13, Y+7	; 0x07
    7240:	ee 80       	ldd	r14, Y+6	; 0x06
    7242:	fd 80       	ldd	r15, Y+5	; 0x05
    7244:	0c 81       	ldd	r16, Y+4	; 0x04
    7246:	1b 81       	ldd	r17, Y+3	; 0x03
    7248:	aa 81       	ldd	r26, Y+2	; 0x02
    724a:	b9 81       	ldd	r27, Y+1	; 0x01
    724c:	ce 0f       	add	r28, r30
    724e:	d1 1d       	adc	r29, r1
    7250:	0f b6       	in	r0, 0x3f	; 63
    7252:	f8 94       	cli
    7254:	de bf       	out	0x3e, r29	; 62
    7256:	0f be       	out	0x3f, r0	; 63
    7258:	cd bf       	out	0x3d, r28	; 61
    725a:	ed 01       	movw	r28, r26
    725c:	08 95       	ret

0000725e <calloc>:
    725e:	0f 93       	push	r16
    7260:	1f 93       	push	r17
    7262:	cf 93       	push	r28
    7264:	df 93       	push	r29
    7266:	68 9f       	mul	r22, r24
    7268:	80 01       	movw	r16, r0
    726a:	69 9f       	mul	r22, r25
    726c:	10 0d       	add	r17, r0
    726e:	78 9f       	mul	r23, r24
    7270:	10 0d       	add	r17, r0
    7272:	11 24       	eor	r1, r1
    7274:	c8 01       	movw	r24, r16
    7276:	0e 94 4b 39 	call	0x7296	; 0x7296 <malloc>
    727a:	ec 01       	movw	r28, r24
    727c:	00 97       	sbiw	r24, 0x00	; 0
    727e:	29 f0       	breq	.+10     	; 0x728a <calloc+0x2c>
    7280:	60 e0       	ldi	r22, 0x00	; 0
    7282:	70 e0       	ldi	r23, 0x00	; 0
    7284:	a8 01       	movw	r20, r16
    7286:	0e 94 59 3a 	call	0x74b2	; 0x74b2 <memset>
    728a:	ce 01       	movw	r24, r28
    728c:	df 91       	pop	r29
    728e:	cf 91       	pop	r28
    7290:	1f 91       	pop	r17
    7292:	0f 91       	pop	r16
    7294:	08 95       	ret

00007296 <malloc>:
    7296:	cf 93       	push	r28
    7298:	df 93       	push	r29
    729a:	bc 01       	movw	r22, r24
    729c:	82 30       	cpi	r24, 0x02	; 2
    729e:	91 05       	cpc	r25, r1
    72a0:	10 f4       	brcc	.+4      	; 0x72a6 <malloc+0x10>
    72a2:	62 e0       	ldi	r22, 0x02	; 2
    72a4:	70 e0       	ldi	r23, 0x00	; 0
    72a6:	a0 91 6f 04 	lds	r26, 0x046F
    72aa:	b0 91 70 04 	lds	r27, 0x0470
    72ae:	ed 01       	movw	r28, r26
    72b0:	e0 e0       	ldi	r30, 0x00	; 0
    72b2:	f0 e0       	ldi	r31, 0x00	; 0
    72b4:	40 e0       	ldi	r20, 0x00	; 0
    72b6:	50 e0       	ldi	r21, 0x00	; 0
    72b8:	21 c0       	rjmp	.+66     	; 0x72fc <malloc+0x66>
    72ba:	88 81       	ld	r24, Y
    72bc:	99 81       	ldd	r25, Y+1	; 0x01
    72be:	86 17       	cp	r24, r22
    72c0:	97 07       	cpc	r25, r23
    72c2:	69 f4       	brne	.+26     	; 0x72de <malloc+0x48>
    72c4:	8a 81       	ldd	r24, Y+2	; 0x02
    72c6:	9b 81       	ldd	r25, Y+3	; 0x03
    72c8:	30 97       	sbiw	r30, 0x00	; 0
    72ca:	19 f0       	breq	.+6      	; 0x72d2 <malloc+0x3c>
    72cc:	93 83       	std	Z+3, r25	; 0x03
    72ce:	82 83       	std	Z+2, r24	; 0x02
    72d0:	04 c0       	rjmp	.+8      	; 0x72da <malloc+0x44>
    72d2:	90 93 70 04 	sts	0x0470, r25
    72d6:	80 93 6f 04 	sts	0x046F, r24
    72da:	fe 01       	movw	r30, r28
    72dc:	34 c0       	rjmp	.+104    	; 0x7346 <malloc+0xb0>
    72de:	68 17       	cp	r22, r24
    72e0:	79 07       	cpc	r23, r25
    72e2:	38 f4       	brcc	.+14     	; 0x72f2 <malloc+0x5c>
    72e4:	41 15       	cp	r20, r1
    72e6:	51 05       	cpc	r21, r1
    72e8:	19 f0       	breq	.+6      	; 0x72f0 <malloc+0x5a>
    72ea:	84 17       	cp	r24, r20
    72ec:	95 07       	cpc	r25, r21
    72ee:	08 f4       	brcc	.+2      	; 0x72f2 <malloc+0x5c>
    72f0:	ac 01       	movw	r20, r24
    72f2:	fe 01       	movw	r30, r28
    72f4:	8a 81       	ldd	r24, Y+2	; 0x02
    72f6:	9b 81       	ldd	r25, Y+3	; 0x03
    72f8:	9c 01       	movw	r18, r24
    72fa:	e9 01       	movw	r28, r18
    72fc:	20 97       	sbiw	r28, 0x00	; 0
    72fe:	e9 f6       	brne	.-70     	; 0x72ba <malloc+0x24>
    7300:	41 15       	cp	r20, r1
    7302:	51 05       	cpc	r21, r1
    7304:	a9 f1       	breq	.+106    	; 0x7370 <malloc+0xda>
    7306:	ca 01       	movw	r24, r20
    7308:	86 1b       	sub	r24, r22
    730a:	97 0b       	sbc	r25, r23
    730c:	04 97       	sbiw	r24, 0x04	; 4
    730e:	08 f4       	brcc	.+2      	; 0x7312 <malloc+0x7c>
    7310:	ba 01       	movw	r22, r20
    7312:	e0 e0       	ldi	r30, 0x00	; 0
    7314:	f0 e0       	ldi	r31, 0x00	; 0
    7316:	2a c0       	rjmp	.+84     	; 0x736c <malloc+0xd6>
    7318:	8d 91       	ld	r24, X+
    731a:	9c 91       	ld	r25, X
    731c:	11 97       	sbiw	r26, 0x01	; 1
    731e:	84 17       	cp	r24, r20
    7320:	95 07       	cpc	r25, r21
    7322:	f9 f4       	brne	.+62     	; 0x7362 <malloc+0xcc>
    7324:	64 17       	cp	r22, r20
    7326:	75 07       	cpc	r23, r21
    7328:	81 f4       	brne	.+32     	; 0x734a <malloc+0xb4>
    732a:	12 96       	adiw	r26, 0x02	; 2
    732c:	8d 91       	ld	r24, X+
    732e:	9c 91       	ld	r25, X
    7330:	13 97       	sbiw	r26, 0x03	; 3
    7332:	30 97       	sbiw	r30, 0x00	; 0
    7334:	19 f0       	breq	.+6      	; 0x733c <malloc+0xa6>
    7336:	93 83       	std	Z+3, r25	; 0x03
    7338:	82 83       	std	Z+2, r24	; 0x02
    733a:	04 c0       	rjmp	.+8      	; 0x7344 <malloc+0xae>
    733c:	90 93 70 04 	sts	0x0470, r25
    7340:	80 93 6f 04 	sts	0x046F, r24
    7344:	fd 01       	movw	r30, r26
    7346:	32 96       	adiw	r30, 0x02	; 2
    7348:	4f c0       	rjmp	.+158    	; 0x73e8 <malloc+0x152>
    734a:	ca 01       	movw	r24, r20
    734c:	86 1b       	sub	r24, r22
    734e:	97 0b       	sbc	r25, r23
    7350:	fd 01       	movw	r30, r26
    7352:	e8 0f       	add	r30, r24
    7354:	f9 1f       	adc	r31, r25
    7356:	61 93       	st	Z+, r22
    7358:	71 93       	st	Z+, r23
    735a:	02 97       	sbiw	r24, 0x02	; 2
    735c:	8d 93       	st	X+, r24
    735e:	9c 93       	st	X, r25
    7360:	43 c0       	rjmp	.+134    	; 0x73e8 <malloc+0x152>
    7362:	fd 01       	movw	r30, r26
    7364:	82 81       	ldd	r24, Z+2	; 0x02
    7366:	93 81       	ldd	r25, Z+3	; 0x03
    7368:	9c 01       	movw	r18, r24
    736a:	d9 01       	movw	r26, r18
    736c:	10 97       	sbiw	r26, 0x00	; 0
    736e:	a1 f6       	brne	.-88     	; 0x7318 <malloc+0x82>
    7370:	80 91 6d 04 	lds	r24, 0x046D
    7374:	90 91 6e 04 	lds	r25, 0x046E
    7378:	89 2b       	or	r24, r25
    737a:	41 f4       	brne	.+16     	; 0x738c <malloc+0xf6>
    737c:	80 91 d6 01 	lds	r24, 0x01D6
    7380:	90 91 d7 01 	lds	r25, 0x01D7
    7384:	90 93 6e 04 	sts	0x046E, r25
    7388:	80 93 6d 04 	sts	0x046D, r24
    738c:	40 91 d8 01 	lds	r20, 0x01D8
    7390:	50 91 d9 01 	lds	r21, 0x01D9
    7394:	41 15       	cp	r20, r1
    7396:	51 05       	cpc	r21, r1
    7398:	41 f4       	brne	.+16     	; 0x73aa <malloc+0x114>
    739a:	4d b7       	in	r20, 0x3d	; 61
    739c:	5e b7       	in	r21, 0x3e	; 62
    739e:	80 91 d4 01 	lds	r24, 0x01D4
    73a2:	90 91 d5 01 	lds	r25, 0x01D5
    73a6:	48 1b       	sub	r20, r24
    73a8:	59 0b       	sbc	r21, r25
    73aa:	20 91 6d 04 	lds	r18, 0x046D
    73ae:	30 91 6e 04 	lds	r19, 0x046E
    73b2:	24 17       	cp	r18, r20
    73b4:	35 07       	cpc	r19, r21
    73b6:	b0 f4       	brcc	.+44     	; 0x73e4 <malloc+0x14e>
    73b8:	ca 01       	movw	r24, r20
    73ba:	82 1b       	sub	r24, r18
    73bc:	93 0b       	sbc	r25, r19
    73be:	86 17       	cp	r24, r22
    73c0:	97 07       	cpc	r25, r23
    73c2:	80 f0       	brcs	.+32     	; 0x73e4 <malloc+0x14e>
    73c4:	ab 01       	movw	r20, r22
    73c6:	4e 5f       	subi	r20, 0xFE	; 254
    73c8:	5f 4f       	sbci	r21, 0xFF	; 255
    73ca:	84 17       	cp	r24, r20
    73cc:	95 07       	cpc	r25, r21
    73ce:	50 f0       	brcs	.+20     	; 0x73e4 <malloc+0x14e>
    73d0:	42 0f       	add	r20, r18
    73d2:	53 1f       	adc	r21, r19
    73d4:	50 93 6e 04 	sts	0x046E, r21
    73d8:	40 93 6d 04 	sts	0x046D, r20
    73dc:	f9 01       	movw	r30, r18
    73de:	61 93       	st	Z+, r22
    73e0:	71 93       	st	Z+, r23
    73e2:	02 c0       	rjmp	.+4      	; 0x73e8 <malloc+0x152>
    73e4:	e0 e0       	ldi	r30, 0x00	; 0
    73e6:	f0 e0       	ldi	r31, 0x00	; 0
    73e8:	cf 01       	movw	r24, r30
    73ea:	df 91       	pop	r29
    73ec:	cf 91       	pop	r28
    73ee:	08 95       	ret

000073f0 <free>:
    73f0:	cf 93       	push	r28
    73f2:	df 93       	push	r29
    73f4:	00 97       	sbiw	r24, 0x00	; 0
    73f6:	09 f4       	brne	.+2      	; 0x73fa <free+0xa>
    73f8:	50 c0       	rjmp	.+160    	; 0x749a <free+0xaa>
    73fa:	ec 01       	movw	r28, r24
    73fc:	22 97       	sbiw	r28, 0x02	; 2
    73fe:	1b 82       	std	Y+3, r1	; 0x03
    7400:	1a 82       	std	Y+2, r1	; 0x02
    7402:	a0 91 6f 04 	lds	r26, 0x046F
    7406:	b0 91 70 04 	lds	r27, 0x0470
    740a:	10 97       	sbiw	r26, 0x00	; 0
    740c:	09 f1       	breq	.+66     	; 0x7450 <free+0x60>
    740e:	40 e0       	ldi	r20, 0x00	; 0
    7410:	50 e0       	ldi	r21, 0x00	; 0
    7412:	ac 17       	cp	r26, r28
    7414:	bd 07       	cpc	r27, r29
    7416:	08 f1       	brcs	.+66     	; 0x745a <free+0x6a>
    7418:	bb 83       	std	Y+3, r27	; 0x03
    741a:	aa 83       	std	Y+2, r26	; 0x02
    741c:	fe 01       	movw	r30, r28
    741e:	21 91       	ld	r18, Z+
    7420:	31 91       	ld	r19, Z+
    7422:	e2 0f       	add	r30, r18
    7424:	f3 1f       	adc	r31, r19
    7426:	ae 17       	cp	r26, r30
    7428:	bf 07       	cpc	r27, r31
    742a:	79 f4       	brne	.+30     	; 0x744a <free+0x5a>
    742c:	8d 91       	ld	r24, X+
    742e:	9c 91       	ld	r25, X
    7430:	11 97       	sbiw	r26, 0x01	; 1
    7432:	28 0f       	add	r18, r24
    7434:	39 1f       	adc	r19, r25
    7436:	2e 5f       	subi	r18, 0xFE	; 254
    7438:	3f 4f       	sbci	r19, 0xFF	; 255
    743a:	39 83       	std	Y+1, r19	; 0x01
    743c:	28 83       	st	Y, r18
    743e:	12 96       	adiw	r26, 0x02	; 2
    7440:	8d 91       	ld	r24, X+
    7442:	9c 91       	ld	r25, X
    7444:	13 97       	sbiw	r26, 0x03	; 3
    7446:	9b 83       	std	Y+3, r25	; 0x03
    7448:	8a 83       	std	Y+2, r24	; 0x02
    744a:	41 15       	cp	r20, r1
    744c:	51 05       	cpc	r21, r1
    744e:	71 f4       	brne	.+28     	; 0x746c <free+0x7c>
    7450:	d0 93 70 04 	sts	0x0470, r29
    7454:	c0 93 6f 04 	sts	0x046F, r28
    7458:	20 c0       	rjmp	.+64     	; 0x749a <free+0xaa>
    745a:	12 96       	adiw	r26, 0x02	; 2
    745c:	8d 91       	ld	r24, X+
    745e:	9c 91       	ld	r25, X
    7460:	13 97       	sbiw	r26, 0x03	; 3
    7462:	ad 01       	movw	r20, r26
    7464:	00 97       	sbiw	r24, 0x00	; 0
    7466:	11 f0       	breq	.+4      	; 0x746c <free+0x7c>
    7468:	dc 01       	movw	r26, r24
    746a:	d3 cf       	rjmp	.-90     	; 0x7412 <free+0x22>
    746c:	fa 01       	movw	r30, r20
    746e:	d3 83       	std	Z+3, r29	; 0x03
    7470:	c2 83       	std	Z+2, r28	; 0x02
    7472:	21 91       	ld	r18, Z+
    7474:	31 91       	ld	r19, Z+
    7476:	e2 0f       	add	r30, r18
    7478:	f3 1f       	adc	r31, r19
    747a:	ce 17       	cp	r28, r30
    747c:	df 07       	cpc	r29, r31
    747e:	69 f4       	brne	.+26     	; 0x749a <free+0xaa>
    7480:	88 81       	ld	r24, Y
    7482:	99 81       	ldd	r25, Y+1	; 0x01
    7484:	28 0f       	add	r18, r24
    7486:	39 1f       	adc	r19, r25
    7488:	2e 5f       	subi	r18, 0xFE	; 254
    748a:	3f 4f       	sbci	r19, 0xFF	; 255
    748c:	fa 01       	movw	r30, r20
    748e:	31 83       	std	Z+1, r19	; 0x01
    7490:	20 83       	st	Z, r18
    7492:	8a 81       	ldd	r24, Y+2	; 0x02
    7494:	9b 81       	ldd	r25, Y+3	; 0x03
    7496:	93 83       	std	Z+3, r25	; 0x03
    7498:	82 83       	std	Z+2, r24	; 0x02
    749a:	df 91       	pop	r29
    749c:	cf 91       	pop	r28
    749e:	08 95       	ret

000074a0 <memcpy>:
    74a0:	fb 01       	movw	r30, r22
    74a2:	dc 01       	movw	r26, r24
    74a4:	02 c0       	rjmp	.+4      	; 0x74aa <memcpy+0xa>
    74a6:	01 90       	ld	r0, Z+
    74a8:	0d 92       	st	X+, r0
    74aa:	41 50       	subi	r20, 0x01	; 1
    74ac:	50 40       	sbci	r21, 0x00	; 0
    74ae:	d8 f7       	brcc	.-10     	; 0x74a6 <memcpy+0x6>
    74b0:	08 95       	ret

000074b2 <memset>:
    74b2:	dc 01       	movw	r26, r24
    74b4:	01 c0       	rjmp	.+2      	; 0x74b8 <memset+0x6>
    74b6:	6d 93       	st	X+, r22
    74b8:	41 50       	subi	r20, 0x01	; 1
    74ba:	50 40       	sbci	r21, 0x00	; 0
    74bc:	e0 f7       	brcc	.-8      	; 0x74b6 <memset+0x4>
    74be:	08 95       	ret

000074c0 <_exit>:
    74c0:	f8 94       	cli

000074c2 <__stop_program>:
    74c2:	ff cf       	rjmp	.-2      	; 0x74c2 <__stop_program>
