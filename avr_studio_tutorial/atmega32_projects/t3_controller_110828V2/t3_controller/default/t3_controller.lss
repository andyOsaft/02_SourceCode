
t3_controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008be  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000f4  00800060  000008be  00000932  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000120  00000000  00000000  00000a26  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000002d8  00000000  00000000  00000b46  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000010fc  00000000  00000000  00000e1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000005e2  00000000  00000000  00001f1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000f8c  00000000  00000000  000024fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000002a0  00000000  00000000  00003488  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000004ec  00000000  00000000  00003728  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000414  00000000  00000000  00003c14  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 b0 00 	jmp	0x160	; 0x160 <__vector_1>
   8:	0c 94 ba 00 	jmp	0x174	; 0x174 <__vector_2>
   c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__vector_3>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee eb       	ldi	r30, 0xBE	; 190
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a4 35       	cpi	r26, 0x54	; 84
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 5d 04 	jmp	0x8ba	; 0x8ba <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
// die Zeile
// int a;
// und das definiert die Variable a
#define EXTERN

int main (void) {            
  82:	ff cf       	rjmp	.-2      	; 0x82 <main>

00000084 <adcInit>:
{
  
  uint16_t result;
 									
								
  ADMUX &= ~((1<<REFS1) | (1<<REFS0)); // externe Referenzspannung nutzen (typischerweise Vcc-Pegel)
  84:	87 b1       	in	r24, 0x07	; 7
  86:	8f 73       	andi	r24, 0x3F	; 63
  88:	87 b9       	out	0x07, r24	; 7


  ADCSRA |= ((1<<ADEN) | (1<<ADPS2) | (1<<ADPS1));    	// ADC Prescaler wählen. BIT0 bis BII 2 in ADCSRA
  8a:	86 b1       	in	r24, 0x06	; 6
  8c:	86 68       	ori	r24, 0x86	; 134
  8e:	86 b9       	out	0x06, r24	; 6
                               					    // UND ADC aktivieren



  //Erste conversion anstoßen, danach läuft der ADC im free run mode
  ADCSRA |= (1<<ADSC);	
  90:	36 9a       	sbi	0x06, 6	; 6
  

  //Auf Abschluss der Konvertierung warten
  while (ADCSRA & (1<<ADSC) ) {}
  92:	36 99       	sbic	0x06, 6	; 6
  94:	fe cf       	rjmp	.-4      	; 0x92 <adcInit+0xe>
  	
  //ADCSRA |= (1<<ADIE);		// ADC - > Interrupt Enable		
  
  /* ADCW muss einmal gelesen werden, sonst wird Ergebnis der nächsten
     Wandlung nicht übernommen. */
  result = ADCW;		 
  96:	84 b1       	in	r24, 0x04	; 4
  98:	95 b1       	in	r25, 0x05	; 5
   
}
  9a:	08 95       	ret

0000009c <adcRead15>:
 15V	   1023						     1023


**************************************************************************************************************/
uint16_t adcRead15(uint8_t channel)
{
  9c:	98 2f       	mov	r25, r24
	uint16_t result=0;
	
	// 	Kanal waehlen(durch Parameterübergabe)	
	//  Kanäle 4 bis 7 sind verfügbar
	if ((channel >= 4) && (channel <=7))
  9e:	84 50       	subi	r24, 0x04	; 4
  a0:	84 30       	cpi	r24, 0x04	; 4
  a2:	08 f4       	brcc	.+2      	; 0xa6 <adcRead15+0xa>
 		ADMUX = channel;                  // 	Kanal waehlen(durch Parameterübergabe)
  a4:	97 b9       	out	0x07, r25	; 7

	//Erste conversion anstoßen, danach läuft der ADC im free run mode
  	ADCSRA |= (1<<ADSC);	
  a6:	36 9a       	sbi	0x06, 6	; 6
  

  	//Auf Abschluss der Konvertierung warten
	while (ADCSRA & (1<<ADSC) ) {}
  a8:	36 99       	sbic	0x06, 6	; 6
  aa:	fe cf       	rjmp	.-4      	; 0xa8 <adcRead15+0xc>
	
	//result in bit value
	result = ADCW;
  ac:	24 b1       	in	r18, 0x04	; 4
  ae:	35 b1       	in	r19, 0x05	; 5
	//convert result into voltage value
	//korrektes runden mit +(divisor>>1)
	//ohne die 16bit casts würde das zwischenergebnis auf die bitwertigkeit des
	//niedrigsten teil des terms reduziert (hier 8 bit von 100 oder 15)
	result = ((result * (uint16_t)15 * (int16_t)100)+(1023>>1)) / (uint16_t)1023;
  b0:	8c ed       	ldi	r24, 0xDC	; 220
  b2:	95 e0       	ldi	r25, 0x05	; 5
  b4:	ac 01       	movw	r20, r24
  b6:	24 9f       	mul	r18, r20
  b8:	c0 01       	movw	r24, r0
  ba:	25 9f       	mul	r18, r21
  bc:	90 0d       	add	r25, r0
  be:	34 9f       	mul	r19, r20
  c0:	90 0d       	add	r25, r0
  c2:	11 24       	eor	r1, r1
  c4:	81 50       	subi	r24, 0x01	; 1
  c6:	9e 4f       	sbci	r25, 0xFE	; 254
  c8:	6f ef       	ldi	r22, 0xFF	; 255
  ca:	73 e0       	ldi	r23, 0x03	; 3
  cc:	0e 94 23 04 	call	0x846	; 0x846 <__udivmodhi4>
  d0:	cb 01       	movw	r24, r22

	return result;
}
  d2:	08 95       	ret

000000d4 <adcRead5>:
/**************************************************************************************
Die  gleich Funktion noch einmal mit 5V als Bezugs-Spannung
**************************************************************************************/
uint16_t adcRead5(uint8_t channel)
{
  d4:	98 2f       	mov	r25, r24
	uint16_t result=0;
	
	// 	Kanal waehlen(durch Parameterübergabe)	
	//  Kanäle 4 bis 7 sind verfügbar
	if ((channel >= 4) && (channel <=7))
  d6:	84 50       	subi	r24, 0x04	; 4
  d8:	84 30       	cpi	r24, 0x04	; 4
  da:	08 f4       	brcc	.+2      	; 0xde <adcRead5+0xa>
 		ADMUX = channel;                  // 	Kanal waehlen(durch Parameterübergabe)
  dc:	97 b9       	out	0x07, r25	; 7

	//Erste conversion anstoßen, danach läuft der ADC im free run mode
  	ADCSRA |= (1<<ADSC);	
  de:	36 9a       	sbi	0x06, 6	; 6
  

  	//Auf Abschluss der Konvertierung warten
	while (ADCSRA & (1<<ADSC) ) {}
  e0:	36 99       	sbic	0x06, 6	; 6
  e2:	fe cf       	rjmp	.-4      	; 0xe0 <adcRead5+0xc>
	
	//result in bit value
	result = ADCW;
  e4:	24 b1       	in	r18, 0x04	; 4
  e6:	35 b1       	in	r19, 0x05	; 5
	//convert result into voltage value
	//korrektes runden mit +(divisor>>1)
	//ohne die 16bit casts würde das zwischenergebnis auf die bitwertigkeit des
	//niedrigsten teil des terms reduziert (hier 8 bit von 100 oder 15)
	result = ((result * (uint16_t)5 * (uint16_t)100) + (1023>>1)) / (uint16_t)1023;
  e8:	84 ef       	ldi	r24, 0xF4	; 244
  ea:	91 e0       	ldi	r25, 0x01	; 1
  ec:	ac 01       	movw	r20, r24
  ee:	24 9f       	mul	r18, r20
  f0:	c0 01       	movw	r24, r0
  f2:	25 9f       	mul	r18, r21
  f4:	90 0d       	add	r25, r0
  f6:	34 9f       	mul	r19, r20
  f8:	90 0d       	add	r25, r0
  fa:	11 24       	eor	r1, r1
  fc:	81 50       	subi	r24, 0x01	; 1
  fe:	9e 4f       	sbci	r25, 0xFE	; 254
 100:	6f ef       	ldi	r22, 0xFF	; 255
 102:	73 e0       	ldi	r23, 0x03	; 3
 104:	0e 94 23 04 	call	0x846	; 0x846 <__udivmodhi4>
 108:	cb 01       	movw	r24, r22

	return result;

}
 10a:	08 95       	ret

0000010c <updateHeatController>:
						   abtasten	  umrechnen            Sensor-Formel							

******************************************************************************************************/

void updateHeatController(uint8_t targetTemp)
{
 10c:	1f 93       	push	r17
 10e:	18 2f       	mov	r17, r24
	uint16_t voltInside;
	uint16_t tempInside;

	//Lese Sensor-Spannung (Ergebnis is Volt*100)
	voltInside = adcRead5(6);
 110:	86 e0       	ldi	r24, 0x06	; 6
 112:	0e 94 6a 00 	call	0xd4	; 0xd4 <adcRead5>
	//Wandle Ergebnis in Temperatur-Wert um.
	tempInside = (voltInside*(uint16_t)145)-14377;
	
	//Int Division mit korrekter Rundung
	tempInside = (tempInside+(uint16_t)(100>>1))/(uint16_t)100;
 116:	21 e9       	ldi	r18, 0x91	; 145
 118:	30 e0       	ldi	r19, 0x00	; 0
 11a:	ac 01       	movw	r20, r24
 11c:	42 9f       	mul	r20, r18
 11e:	c0 01       	movw	r24, r0
 120:	43 9f       	mul	r20, r19
 122:	90 0d       	add	r25, r0
 124:	52 9f       	mul	r21, r18
 126:	90 0d       	add	r25, r0
 128:	11 24       	eor	r1, r1
 12a:	87 5f       	subi	r24, 0xF7	; 247
 12c:	97 43       	sbci	r25, 0x37	; 55
 12e:	64 e6       	ldi	r22, 0x64	; 100
 130:	70 e0       	ldi	r23, 0x00	; 0
 132:	0e 94 23 04 	call	0x846	; 0x846 <__udivmodhi4>
	
	//Control-Funktion
	//Muss geheizt werden?
	if ((targetTemp-1)<tempInside)
 136:	41 2f       	mov	r20, r17
 138:	50 e0       	ldi	r21, 0x00	; 0
 13a:	ca 01       	movw	r24, r20
 13c:	01 97       	sbiw	r24, 0x01	; 1
 13e:	86 17       	cp	r24, r22
 140:	97 07       	cpc	r25, r23
 142:	18 f4       	brcc	.+6      	; 0x14a <updateHeatController+0x3e>
		//pwmUpdate(63);
		pwmUpdate(93);
 144:	8d e5       	ldi	r24, 0x5D	; 93
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	07 c0       	rjmp	.+14     	; 0x158 <updateHeatController+0x4c>
	//Muss gekühlt werden?
	else if ((targetTemp+1)>tempInside)
 14a:	4f 5f       	subi	r20, 0xFF	; 255
 14c:	5f 4f       	sbci	r21, 0xFF	; 255
 14e:	64 17       	cp	r22, r20
 150:	75 07       	cpc	r23, r21
 152:	20 f4       	brcc	.+8      	; 0x15c <updateHeatController+0x50>
		//pwmUpdate(31);
		pwmUpdate(61);
 154:	8d e3       	ldi	r24, 0x3D	; 61
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	0e 94 17 04 	call	0x82e	; 0x82e <pwmUpdate>
}
 15c:	1f 91       	pop	r17
 15e:	08 95       	ret

00000160 <__vector_1>:



//bei Button "warm" (button ganz rechts), läuft durch wenn fallende Flanke auf INT0 (PD.2)
ISR(INT0_vect) 
{
 160:	1f 92       	push	r1
 162:	0f 92       	push	r0
 164:	0f b6       	in	r0, 0x3f	; 63
 166:	0f 92       	push	r0
 168:	11 24       	eor	r1, r1
//	buttonRechts=0;	
}
 16a:	0f 90       	pop	r0
 16c:	0f be       	out	0x3f, r0	; 63
 16e:	0f 90       	pop	r0
 170:	1f 90       	pop	r1
 172:	18 95       	reti

00000174 <__vector_2>:

//----------------------------------------------------------------------------------------------

//bei Button "kalt" (button in der Mitte), läuft durch wenn fallende Flanke auf INT1 (PD.3)
ISR(INT1_vect) 
{
 174:	1f 92       	push	r1
 176:	0f 92       	push	r0
 178:	0f b6       	in	r0, 0x3f	; 63
 17a:	0f 92       	push	r0
 17c:	11 24       	eor	r1, r1
//	buttonMitte=0;	
}
 17e:	0f 90       	pop	r0
 180:	0f be       	out	0x3f, r0	; 63
 182:	0f 90       	pop	r0
 184:	1f 90       	pop	r1
 186:	18 95       	reti

00000188 <__vector_3>:

//----------------------------------------------------------------------------------------------

//ISR läuft durch, wenn fallende Flanke auf INT2 (PB.2)
ISR(INT2_vect)
{	
 188:	1f 92       	push	r1
 18a:	0f 92       	push	r0
 18c:	0f b6       	in	r0, 0x3f	; 63
 18e:	0f 92       	push	r0
 190:	11 24       	eor	r1, r1
 192:	8f 93       	push	r24

	

	//Display wieder anschalten.
	PORTC |= (1<<BIT0);
 194:	a8 9a       	sbi	0x15, 0	; 21
	PORTC &= ~(1<<BIT1);
 196:	a9 98       	cbi	0x15, 1	; 21

	sleep_disable();	
 198:	85 b7       	in	r24, 0x35	; 53
 19a:	8f 77       	andi	r24, 0x7F	; 127
 19c:	85 bf       	out	0x35, r24	; 53
	
	//Variable setzen um zu das Aufwachen aus sleepmode zu signalisieren
//	wakeUp=1;
}
 19e:	8f 91       	pop	r24
 1a0:	0f 90       	pop	r0
 1a2:	0f be       	out	0x3f, r0	; 63
 1a4:	0f 90       	pop	r0
 1a6:	1f 90       	pop	r1
 1a8:	18 95       	reti

000001aa <lcd_data>:
 
void lcd_data(unsigned char temp1)
{
   unsigned char temp2 = temp1;
 
   LCD_PORT |= (1<<LCD_RS);        	// RS auf 1 setzen
 1aa:	aa 9a       	sbi	0x15, 2	; 21
 
   //High Teil des Zeichens ausgeben 			
   temp1 = temp1 & 0xF0;			//das low nibble von temp1 auf null setzen; 
   LCD_PORT &= 0x0F;				//das high nibble in PORTD wird auf null gesetzt				
 1ac:	95 b3       	in	r25, 0x15	; 21
 1ae:	9f 70       	andi	r25, 0x0F	; 15
 1b0:	95 bb       	out	0x15, r25	; 21
   LCD_PORT |= temp1;               //das high nibble von temp1 wird PORTD zugewiesen
 1b2:	25 b3       	in	r18, 0x15	; 21
 1b4:	98 2f       	mov	r25, r24
 1b6:	90 7f       	andi	r25, 0xF0	; 240
 1b8:	92 2b       	or	r25, r18
 1ba:	95 bb       	out	0x15, r25	; 21
// erzeugt den Enable-Puls
void lcd_enable(void)
{
   // Bei Problemen ggf. Pause gemäß Datenblatt des LCD Controllers einfügen
   // http://www.mikrocontroller.net/topic/81974#685882
   LCD_PORT |= (1<<LCD_EN);			// enable setzen
 1bc:	ab 9a       	sbi	0x15, 3	; 21
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 1be:	21 e0       	ldi	r18, 0x01	; 1
 1c0:	92 2f       	mov	r25, r18
 1c2:	9a 95       	dec	r25
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <lcd_data+0x18>
    _delay_us(1);                   // kurze Pause
   
   
   // Bei Problemen ggf. Pause gemäß Datenblatt des LCD Controllers verlängern
   // http://www.mikrocontroller.net/topic/80900
   LCD_PORT &= ~(1<<LCD_EN);		//enabel zurücksetzen
 1c6:	ab 98       	cbi	0x15, 3	; 21
   lcd_enable();					//E wird kurz gesetzt und dann wieder zurückgesetzt
   
   //Low Teil des Zeichens ausgeben
   temp2 = temp2 << 4;				//das low nibble von temp2 wird auf das high nibble verschoben	
   temp2 = temp2 & 0xF0;			//das alte low nibble von temp2 wird zu 0 gesetzt
   LCD_PORT &= 0x0F;				//das high nibble in PORTD wird auf null gesetzt
 1c8:	95 b3       	in	r25, 0x15	; 21
 1ca:	9f 70       	andi	r25, 0x0F	; 15
 1cc:	95 bb       	out	0x15, r25	; 21
   LCD_PORT |= temp2;               //das high nibble von temp2 wird PORTD zugewiesen
 1ce:	95 b3       	in	r25, 0x15	; 21
 1d0:	82 95       	swap	r24
 1d2:	80 7f       	andi	r24, 0xF0	; 240
 1d4:	98 2b       	or	r25, r24
 1d6:	95 bb       	out	0x15, r25	; 21
// erzeugt den Enable-Puls
void lcd_enable(void)
{
   // Bei Problemen ggf. Pause gemäß Datenblatt des LCD Controllers einfügen
   // http://www.mikrocontroller.net/topic/81974#685882
   LCD_PORT |= (1<<LCD_EN);			// enable setzen
 1d8:	ab 9a       	sbi	0x15, 3	; 21
 1da:	2a 95       	dec	r18
 1dc:	f1 f7       	brne	.-4      	; 0x1da <lcd_data+0x30>
    _delay_us(1);                   // kurze Pause
   
   
   // Bei Problemen ggf. Pause gemäß Datenblatt des LCD Controllers verlängern
   // http://www.mikrocontroller.net/topic/80900
   LCD_PORT &= ~(1<<LCD_EN);		//enabel zurücksetzen
 1de:	ab 98       	cbi	0x15, 3	; 21
 1e0:	88 e3       	ldi	r24, 0x38	; 56
 1e2:	8a 95       	dec	r24
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <lcd_data+0x38>
   LCD_PORT &= 0x0F;				//das high nibble in PORTD wird auf null gesetzt
   LCD_PORT |= temp2;               //das high nibble von temp2 wird PORTD zugewiesen
   lcd_enable();					//E wird kurz gesetzt und dann wieder zurückgesetzt
   
   _delay_us(42);
}
 1e6:	08 95       	ret

000001e8 <lcd_command>:
 
void lcd_command(unsigned char temp1)
{
   unsigned char temp2 = temp1;
 
   LCD_PORT &= ~(1<<LCD_RS);        // RS auf 0 setzen
 1e8:	aa 98       	cbi	0x15, 2	; 21
 
   temp1 = temp1 & 0xF0;            // maskieren
   LCD_PORT &= 0x0F;
 1ea:	95 b3       	in	r25, 0x15	; 21
 1ec:	9f 70       	andi	r25, 0x0F	; 15
 1ee:	95 bb       	out	0x15, r25	; 21
   LCD_PORT |= temp1;               // setzen
 1f0:	25 b3       	in	r18, 0x15	; 21
 1f2:	98 2f       	mov	r25, r24
 1f4:	90 7f       	andi	r25, 0xF0	; 240
 1f6:	92 2b       	or	r25, r18
 1f8:	95 bb       	out	0x15, r25	; 21
// erzeugt den Enable-Puls
void lcd_enable(void)
{
   // Bei Problemen ggf. Pause gemäß Datenblatt des LCD Controllers einfügen
   // http://www.mikrocontroller.net/topic/81974#685882
   LCD_PORT |= (1<<LCD_EN);			// enable setzen
 1fa:	ab 9a       	sbi	0x15, 3	; 21
 1fc:	21 e0       	ldi	r18, 0x01	; 1
 1fe:	92 2f       	mov	r25, r18
 200:	9a 95       	dec	r25
 202:	f1 f7       	brne	.-4      	; 0x200 <lcd_command+0x18>
    _delay_us(1);                   // kurze Pause
   
   
   // Bei Problemen ggf. Pause gemäß Datenblatt des LCD Controllers verlängern
   // http://www.mikrocontroller.net/topic/80900
   LCD_PORT &= ~(1<<LCD_EN);		//enabel zurücksetzen
 204:	ab 98       	cbi	0x15, 3	; 21
   LCD_PORT |= temp1;               // setzen
   lcd_enable();
 
   temp2 = temp2 << 4;				// unteres Nibble holen
   temp2 = temp2 & 0xF0;            // unteres Nibble maskieren
   LCD_PORT &= 0x0F;
 206:	95 b3       	in	r25, 0x15	; 21
 208:	9f 70       	andi	r25, 0x0F	; 15
 20a:	95 bb       	out	0x15, r25	; 21
   LCD_PORT |= temp2;               // setzen
 20c:	95 b3       	in	r25, 0x15	; 21
 20e:	82 95       	swap	r24
 210:	80 7f       	andi	r24, 0xF0	; 240
 212:	98 2b       	or	r25, r24
 214:	95 bb       	out	0x15, r25	; 21
// erzeugt den Enable-Puls
void lcd_enable(void)
{
   // Bei Problemen ggf. Pause gemäß Datenblatt des LCD Controllers einfügen
   // http://www.mikrocontroller.net/topic/81974#685882
   LCD_PORT |= (1<<LCD_EN);			// enable setzen
 216:	ab 9a       	sbi	0x15, 3	; 21
 218:	2a 95       	dec	r18
 21a:	f1 f7       	brne	.-4      	; 0x218 <lcd_command+0x30>
    _delay_us(1);                   // kurze Pause
   
   
   // Bei Problemen ggf. Pause gemäß Datenblatt des LCD Controllers verlängern
   // http://www.mikrocontroller.net/topic/80900
   LCD_PORT &= ~(1<<LCD_EN);		//enabel zurücksetzen
 21c:	ab 98       	cbi	0x15, 3	; 21
 21e:	88 e3       	ldi	r24, 0x38	; 56
 220:	8a 95       	dec	r24
 222:	f1 f7       	brne	.-4      	; 0x220 <lcd_command+0x38>
   LCD_PORT &= 0x0F;
   LCD_PORT |= temp2;               // setzen
   lcd_enable();
   
   _delay_us(42);
}
 224:	08 95       	ret

00000226 <lcd_enable>:
// erzeugt den Enable-Puls
void lcd_enable(void)
{
   // Bei Problemen ggf. Pause gemäß Datenblatt des LCD Controllers einfügen
   // http://www.mikrocontroller.net/topic/81974#685882
   LCD_PORT |= (1<<LCD_EN);			// enable setzen
 226:	ab 9a       	sbi	0x15, 3	; 21
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	8a 95       	dec	r24
 22c:	f1 f7       	brne	.-4      	; 0x22a <lcd_enable+0x4>
    _delay_us(1);                   // kurze Pause
   
   
   // Bei Problemen ggf. Pause gemäß Datenblatt des LCD Controllers verlängern
   // http://www.mikrocontroller.net/topic/80900
   LCD_PORT &= ~(1<<LCD_EN);		//enabel zurücksetzen
 22e:	ab 98       	cbi	0x15, 3	; 21
}
 230:	08 95       	ret

00000232 <lcd_clear>:
 
// Sendet den Befehl zur Löschung des Displays
 
void lcd_clear(void)
{
   lcd_command(CLEAR_DISPLAY);
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <lcd_command>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 238:	88 e8       	ldi	r24, 0x88	; 136
 23a:	93 e1       	ldi	r25, 0x13	; 19
 23c:	01 97       	sbiw	r24, 0x01	; 1
 23e:	f1 f7       	brne	.-4      	; 0x23c <lcd_clear+0xa>
   _delay_ms(5);
}
 240:	08 95       	ret

00000242 <lcd_init>:
// Initialisierung: 
// Muss ganz am Anfang des Programms aufgerufen werden.
 
void lcd_init(void)
{
   LCD_DDR = LCD_DDR | 0xF0 | (1<<LCD_RS) | (1<<LCD_EN);   // Ports auf Ausgang schalten
 242:	84 b3       	in	r24, 0x14	; 20
 244:	8c 6f       	ori	r24, 0xFC	; 252
 246:	84 bb       	out	0x14, r24	; 20
 248:	80 e3       	ldi	r24, 0x30	; 48
 24a:	95 e7       	ldi	r25, 0x75	; 117
 24c:	01 97       	sbiw	r24, 0x01	; 1
 24e:	f1 f7       	brne	.-4      	; 0x24c <lcd_init+0xa>

   // muss 3mal hintereinander gesendet werden zur Initialisierung
 
   _delay_ms(30);

   LCD_PORT &= 0x0F;			  //Oberes Nibble auf 0 setzen
 250:	85 b3       	in	r24, 0x15	; 21
 252:	8f 70       	andi	r24, 0x0F	; 15
 254:	85 bb       	out	0x15, r24	; 21
   LCD_PORT |= 0x30;			  //DB7=0  DB6=0  DB5=1  DB4=1	            
 256:	85 b3       	in	r24, 0x15	; 21
 258:	80 63       	ori	r24, 0x30	; 48
 25a:	85 bb       	out	0x15, r24	; 21
   LCD_PORT &= ~(1<<LCD_RS);      // RS auf 0
 25c:	aa 98       	cbi	0x15, 2	; 21
// erzeugt den Enable-Puls
void lcd_enable(void)
{
   // Bei Problemen ggf. Pause gemäß Datenblatt des LCD Controllers einfügen
   // http://www.mikrocontroller.net/topic/81974#685882
   LCD_PORT |= (1<<LCD_EN);			// enable setzen
 25e:	ab 9a       	sbi	0x15, 3	; 21
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 260:	91 e0       	ldi	r25, 0x01	; 1
 262:	89 2f       	mov	r24, r25
 264:	8a 95       	dec	r24
 266:	f1 f7       	brne	.-4      	; 0x264 <lcd_init+0x22>
    _delay_us(1);                   // kurze Pause
   
   
   // Bei Problemen ggf. Pause gemäß Datenblatt des LCD Controllers verlängern
   // http://www.mikrocontroller.net/topic/80900
   LCD_PORT &= ~(1<<LCD_EN);		//enabel zurücksetzen
 268:	ab 98       	cbi	0x15, 3	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 26a:	e8 e8       	ldi	r30, 0x88	; 136
 26c:	f3 e1       	ldi	r31, 0x13	; 19
 26e:	31 97       	sbiw	r30, 0x01	; 1
 270:	f1 f7       	brne	.-4      	; 0x26e <lcd_init+0x2c>
// erzeugt den Enable-Puls
void lcd_enable(void)
{
   // Bei Problemen ggf. Pause gemäß Datenblatt des LCD Controllers einfügen
   // http://www.mikrocontroller.net/topic/81974#685882
   LCD_PORT |= (1<<LCD_EN);			// enable setzen
 272:	ab 9a       	sbi	0x15, 3	; 21
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 274:	89 2f       	mov	r24, r25
 276:	8a 95       	dec	r24
 278:	f1 f7       	brne	.-4      	; 0x276 <lcd_init+0x34>
    _delay_us(1);                   // kurze Pause
   
   
   // Bei Problemen ggf. Pause gemäß Datenblatt des LCD Controllers verlängern
   // http://www.mikrocontroller.net/topic/80900
   LCD_PORT &= ~(1<<LCD_EN);		//enabel zurücksetzen
 27a:	ab 98       	cbi	0x15, 3	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 27c:	28 ee       	ldi	r18, 0xE8	; 232
 27e:	33 e0       	ldi	r19, 0x03	; 3
 280:	f9 01       	movw	r30, r18
 282:	31 97       	sbiw	r30, 0x01	; 1
 284:	f1 f7       	brne	.-4      	; 0x282 <lcd_init+0x40>
// erzeugt den Enable-Puls
void lcd_enable(void)
{
   // Bei Problemen ggf. Pause gemäß Datenblatt des LCD Controllers einfügen
   // http://www.mikrocontroller.net/topic/81974#685882
   LCD_PORT |= (1<<LCD_EN);			// enable setzen
 286:	ab 9a       	sbi	0x15, 3	; 21
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 288:	89 2f       	mov	r24, r25
 28a:	8a 95       	dec	r24
 28c:	f1 f7       	brne	.-4      	; 0x28a <lcd_init+0x48>
    _delay_us(1);                   // kurze Pause
   
   
   // Bei Problemen ggf. Pause gemäß Datenblatt des LCD Controllers verlängern
   // http://www.mikrocontroller.net/topic/80900
   LCD_PORT &= ~(1<<LCD_EN);		//enabel zurücksetzen
 28e:	ab 98       	cbi	0x15, 3	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 290:	f9 01       	movw	r30, r18
 292:	31 97       	sbiw	r30, 0x01	; 1
 294:	f1 f7       	brne	.-4      	; 0x292 <lcd_init+0x50>
   lcd_enable();				  //3.Senden

   _delay_ms(1);
 
   // 4 Bit Modus aktivieren 
   LCD_PORT &= 0x0F;
 296:	85 b3       	in	r24, 0x15	; 21
 298:	8f 70       	andi	r24, 0x0F	; 15
 29a:	85 bb       	out	0x15, r24	; 21
   LCD_PORT |= 0x20;
 29c:	ad 9a       	sbi	0x15, 5	; 21
// erzeugt den Enable-Puls
void lcd_enable(void)
{
   // Bei Problemen ggf. Pause gemäß Datenblatt des LCD Controllers einfügen
   // http://www.mikrocontroller.net/topic/81974#685882
   LCD_PORT |= (1<<LCD_EN);			// enable setzen
 29e:	ab 9a       	sbi	0x15, 3	; 21
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 2a0:	9a 95       	dec	r25
 2a2:	f1 f7       	brne	.-4      	; 0x2a0 <lcd_init+0x5e>
    _delay_us(1);                   // kurze Pause
   
   
   // Bei Problemen ggf. Pause gemäß Datenblatt des LCD Controllers verlängern
   // http://www.mikrocontroller.net/topic/80900
   LCD_PORT &= ~(1<<LCD_EN);		//enabel zurücksetzen
 2a4:	ab 98       	cbi	0x15, 3	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 2a6:	c9 01       	movw	r24, r18
 2a8:	01 97       	sbiw	r24, 0x01	; 1
 2aa:	f1 f7       	brne	.-4      	; 0x2a8 <lcd_init+0x66>
   LCD_PORT |= 0x20;
   lcd_enable();
   _delay_ms(1);
 
   // 4Bit / 2 Zeilen / 5x7
   lcd_command(0x28);
 2ac:	88 e2       	ldi	r24, 0x28	; 40
 2ae:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <lcd_command>
    
   // Display ein / Cursor aus / kein Blinken
   lcd_command(0x0C); 
 2b2:	8c e0       	ldi	r24, 0x0C	; 12
 2b4:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <lcd_command>
 
   // inkrement / kein Scrollen
   lcd_command(0x06);
 2b8:	86 e0       	ldi	r24, 0x06	; 6
 2ba:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <lcd_command>
 
   lcd_clear();
 2be:	0e 94 19 01 	call	0x232	; 0x232 <lcd_clear>
}
 2c2:	08 95       	ret

000002c4 <lcd_home>:
 
// Sendet den Befehl: Cursor Home
 
void lcd_home(void)
{
   lcd_command(CURSOR_HOME);
 2c4:	82 e0       	ldi	r24, 0x02	; 2
 2c6:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <lcd_command>
 2ca:	88 e8       	ldi	r24, 0x88	; 136
 2cc:	93 e1       	ldi	r25, 0x13	; 19
 2ce:	01 97       	sbiw	r24, 0x01	; 1
 2d0:	f1 f7       	brne	.-4      	; 0x2ce <lcd_home+0xa>
   _delay_ms(5);
}
 2d2:	08 95       	ret

000002d4 <set_cursor>:
 
void set_cursor(uint8_t x, uint8_t y)
{
  uint8_t tmp;
 
  switch (y) {
 2d4:	62 30       	cpi	r22, 0x02	; 2
 2d6:	61 f0       	breq	.+24     	; 0x2f0 <set_cursor+0x1c>
 2d8:	63 30       	cpi	r22, 0x03	; 3
 2da:	18 f4       	brcc	.+6      	; 0x2e2 <set_cursor+0xe>
 2dc:	61 30       	cpi	r22, 0x01	; 1
 2de:	79 f4       	brne	.+30     	; 0x2fe <set_cursor+0x2a>
 2e0:	05 c0       	rjmp	.+10     	; 0x2ec <set_cursor+0x18>
 2e2:	63 30       	cpi	r22, 0x03	; 3
 2e4:	39 f0       	breq	.+14     	; 0x2f4 <set_cursor+0x20>
 2e6:	64 30       	cpi	r22, 0x04	; 4
 2e8:	51 f4       	brne	.+20     	; 0x2fe <set_cursor+0x2a>
 2ea:	06 c0       	rjmp	.+12     	; 0x2f8 <set_cursor+0x24>
    case 1: tmp=0x80+0x00+x; break;    // 1. Zeile
 2ec:	80 58       	subi	r24, 0x80	; 128
 2ee:	05 c0       	rjmp	.+10     	; 0x2fa <set_cursor+0x26>
    case 2: tmp=0x80+0x40+x; break;    // 2. Zeile
 2f0:	80 54       	subi	r24, 0x40	; 64
 2f2:	03 c0       	rjmp	.+6      	; 0x2fa <set_cursor+0x26>
    case 3: tmp=0x80+0x10+x; break;    // 3. Zeile
 2f4:	80 57       	subi	r24, 0x70	; 112
 2f6:	01 c0       	rjmp	.+2      	; 0x2fa <set_cursor+0x26>
    case 4: tmp=0x80+0x50+x; break;    // 4. Zeile
 2f8:	80 53       	subi	r24, 0x30	; 48
    default: return;                   // für den Fall einer falschen Zeile
  }
  lcd_command(tmp);
 2fa:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <lcd_command>
 2fe:	08 95       	ret

00000300 <lcd_string>:
}
 
// Schreibt einen String auf das LCD
 
void lcd_string(char *data)
{
 300:	cf 93       	push	r28
 302:	df 93       	push	r29
 304:	ec 01       	movw	r28, r24
 306:	03 c0       	rjmp	.+6      	; 0x30e <lcd_string+0xe>
    while(*data) {
        lcd_data(*data);
 308:	0e 94 d5 00 	call	0x1aa	; 0x1aa <lcd_data>
        data++;
 30c:	21 96       	adiw	r28, 0x01	; 1
 
// Schreibt einen String auf das LCD
 
void lcd_string(char *data)
{
    while(*data) {
 30e:	88 81       	ld	r24, Y
 310:	88 23       	and	r24, r24
 312:	d1 f7       	brne	.-12     	; 0x308 <lcd_string+0x8>
        lcd_data(*data);
        data++;
    }
}
 314:	df 91       	pop	r29
 316:	cf 91       	pop	r28
 318:	08 95       	ret

0000031a <screenTempInfo>:
-> Ergebnis der Multiplikation passt noch in 16 bit register.


--------------------------------------------------------------------------------*/
void screenTempInfo(uint16_t voltInside, uint16_t voltMotor)
{
 31a:	ef 92       	push	r14
 31c:	ff 92       	push	r15
 31e:	0f 93       	push	r16
 320:	1f 93       	push	r17
 322:	df 93       	push	r29
 324:	cf 93       	push	r28
 326:	00 d0       	rcall	.+0      	; 0x328 <screenTempInfo+0xe>
 328:	00 d0       	rcall	.+0      	; 0x32a <screenTempInfo+0x10>
 32a:	cd b7       	in	r28, 0x3d	; 61
 32c:	de b7       	in	r29, 0x3e	; 62

	//lcd_clear();
	//utoa(voltageBuffer, buffer,10);
	//lcd_string(buffer);

	tempInside = (voltInside*(uint16_t)145)-14377;
 32e:	21 e9       	ldi	r18, 0x91	; 145
 330:	30 e0       	ldi	r19, 0x00	; 0
 332:	82 9f       	mul	r24, r18
 334:	80 01       	movw	r16, r0
 336:	83 9f       	mul	r24, r19
 338:	10 0d       	add	r17, r0
 33a:	92 9f       	mul	r25, r18
 33c:	10 0d       	add	r17, r0
 33e:	11 24       	eor	r1, r1
 340:	09 52       	subi	r16, 0x29	; 41
 342:	18 43       	sbci	r17, 0x38	; 56
	tempMotor = (voltMotor*(uint16_t)145)-14377;
	

	lcd_clear();
 344:	0e 94 19 01 	call	0x232	; 0x232 <lcd_clear>
	
	//Daten vom Temperatur-Sensor im Innenraum
    lcd_string("T inside: ");
 348:	80 e6       	ldi	r24, 0x60	; 96
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	0e 94 80 01 	call	0x300	; 0x300 <lcd_string>
	//Vorkomma-Stelle ausgeben
	voltageBuffer = (tempInside+(uint16_t)(100>>1))/(uint16_t)100;	
	utoa(voltageBuffer, buffer, 10);
 350:	c8 01       	movw	r24, r16
 352:	c2 96       	adiw	r24, 0x32	; 50
 354:	64 e6       	ldi	r22, 0x64	; 100
 356:	70 e0       	ldi	r23, 0x00	; 0
 358:	0e 94 23 04 	call	0x846	; 0x846 <__udivmodhi4>
 35c:	cb 01       	movw	r24, r22
 35e:	7e 01       	movw	r14, r28
 360:	08 94       	sec
 362:	e1 1c       	adc	r14, r1
 364:	f1 1c       	adc	r15, r1
 366:	b7 01       	movw	r22, r14
 368:	4a e0       	ldi	r20, 0x0A	; 10
 36a:	50 e0       	ldi	r21, 0x00	; 0
 36c:	0e 94 37 04 	call	0x86e	; 0x86e <utoa>
	lcd_string(buffer);
 370:	c7 01       	movw	r24, r14
 372:	0e 94 80 01 	call	0x300	; 0x300 <lcd_string>
	lcd_string(",");
 376:	8b e6       	ldi	r24, 0x6B	; 107
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	0e 94 80 01 	call	0x300	; 0x300 <lcd_string>
	//Nachkomma-Stelle ausgeben
	voltageBuffer = tempInside%(uint16_t)100;
	//Nur eine Nachkommastelle berücksichtigen
	voltageBuffer = (voltageBuffer+(uint16_t)(100>>1))/(uint16_t)10;
 37e:	c8 01       	movw	r24, r16
 380:	64 e6       	ldi	r22, 0x64	; 100
 382:	70 e0       	ldi	r23, 0x00	; 0
 384:	0e 94 23 04 	call	0x846	; 0x846 <__udivmodhi4>
	utoa(voltageBuffer, buffer, 10);
 388:	c2 96       	adiw	r24, 0x32	; 50
 38a:	6a e0       	ldi	r22, 0x0A	; 10
 38c:	70 e0       	ldi	r23, 0x00	; 0
 38e:	0e 94 23 04 	call	0x846	; 0x846 <__udivmodhi4>
 392:	cb 01       	movw	r24, r22
 394:	b7 01       	movw	r22, r14
 396:	4a e0       	ldi	r20, 0x0A	; 10
 398:	50 e0       	ldi	r21, 0x00	; 0
 39a:	0e 94 37 04 	call	0x86e	; 0x86e <utoa>
	lcd_string(buffer);
 39e:	c7 01       	movw	r24, r14
 3a0:	0e 94 80 01 	call	0x300	; 0x300 <lcd_string>
	lcd_string(" C");
 3a4:	8d e6       	ldi	r24, 0x6D	; 109
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	0e 94 80 01 	call	0x300	; 0x300 <lcd_string>
	voltageBuffer = voltageBuffer/10;
	utoa(voltageBuffer, buffer, 10);
	lcd_string(buffer);
	lcd_string(" C");
*/
}
 3ac:	0f 90       	pop	r0
 3ae:	0f 90       	pop	r0
 3b0:	0f 90       	pop	r0
 3b2:	0f 90       	pop	r0
 3b4:	cf 91       	pop	r28
 3b6:	df 91       	pop	r29
 3b8:	1f 91       	pop	r17
 3ba:	0f 91       	pop	r16
 3bc:	ff 90       	pop	r15
 3be:	ef 90       	pop	r14
 3c0:	08 95       	ret

000003c2 <screenWarningBatt2>:
eingestellte "Threshold" Schwelle sinkt.

--------------------------------------------------------------------------------*/
void screenWarningBatt2()
{
	lcd_clear();
 3c2:	0e 94 19 01 	call	0x232	; 0x232 <lcd_clear>
    lcd_string("Battery 2");
 3c6:	80 e7       	ldi	r24, 0x70	; 112
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	0e 94 80 01 	call	0x300	; 0x300 <lcd_string>
	set_cursor(0,2);
 3ce:	80 e0       	ldi	r24, 0x00	; 0
 3d0:	62 e0       	ldi	r22, 0x02	; 2
 3d2:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <set_cursor>
	lcd_string("below threshold!");	
 3d6:	8a e7       	ldi	r24, 0x7A	; 122
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	0e 94 80 01 	call	0x300	; 0x300 <lcd_string>
}
 3de:	08 95       	ret

000003e0 <screenWarningBatt1>:
eingestellte "Threshold" Schwelle sinkt.

--------------------------------------------------------------------------------*/
void screenWarningBatt1()
{
	lcd_clear();
 3e0:	0e 94 19 01 	call	0x232	; 0x232 <lcd_clear>
    lcd_string("Battery 1");
 3e4:	8b e8       	ldi	r24, 0x8B	; 139
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	0e 94 80 01 	call	0x300	; 0x300 <lcd_string>
	set_cursor(0,2);
 3ec:	80 e0       	ldi	r24, 0x00	; 0
 3ee:	62 e0       	ldi	r22, 0x02	; 2
 3f0:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <set_cursor>
	lcd_string("below threshold!");	
 3f4:	8a e7       	ldi	r24, 0x7A	; 122
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	0e 94 80 01 	call	0x300	; 0x300 <lcd_string>
}
 3fc:	08 95       	ret

000003fe <screenLightWarning>:

Wird beim Ausschalten des Abblendlichtes automatisch zurückgesetzt.
--------------------------------------------------------------------------------*/
void screenLightWarning()
{
	lcd_clear();
 3fe:	0e 94 19 01 	call	0x232	; 0x232 <lcd_clear>
    lcd_string("Warning!");
 402:	85 e9       	ldi	r24, 0x95	; 149
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	0e 94 80 01 	call	0x300	; 0x300 <lcd_string>
	set_cursor(0,2);
 40a:	80 e0       	ldi	r24, 0x00	; 0
 40c:	62 e0       	ldi	r22, 0x02	; 2
 40e:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <set_cursor>
	lcd_string("Light still on!");
 412:	8e e9       	ldi	r24, 0x9E	; 158
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	0e 94 80 01 	call	0x300	; 0x300 <lcd_string>
}
 41a:	08 95       	ret

0000041c <screenInfo>:


--------------------------------------------------------------------------------*/
void screenInfo()
{
	lcd_clear();
 41c:	0e 94 19 01 	call	0x232	; 0x232 <lcd_clear>
    lcd_string("Firmware: V0.3");
 420:	8e ea       	ldi	r24, 0xAE	; 174
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	0e 94 80 01 	call	0x300	; 0x300 <lcd_string>
	set_cursor(0,2);
 428:	80 e0       	ldi	r24, 0x00	; 0
 42a:	62 e0       	ldi	r22, 0x02	; 2
 42c:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <set_cursor>
	lcd_string("Date: 10.05.11");	
 430:	8d eb       	ldi	r24, 0xBD	; 189
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	0e 94 80 01 	call	0x300	; 0x300 <lcd_string>
}
 438:	08 95       	ret

0000043a <screenWakeupSleepmode>:


--------------------------------------------------------------------------------*/
void screenWakeupSleepmode()
{
	lcd_clear();
 43a:	0e 94 19 01 	call	0x232	; 0x232 <lcd_clear>
    lcd_string("Wake up from");
 43e:	8c ec       	ldi	r24, 0xCC	; 204
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	0e 94 80 01 	call	0x300	; 0x300 <lcd_string>
	set_cursor(0,2);
 446:	80 e0       	ldi	r24, 0x00	; 0
 448:	62 e0       	ldi	r22, 0x02	; 2
 44a:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <set_cursor>
	lcd_string("Sleepmode...");	
 44e:	89 ed       	ldi	r24, 0xD9	; 217
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	0e 94 80 01 	call	0x300	; 0x300 <lcd_string>
}
 456:	08 95       	ret

00000458 <screenGotoSleepmode>:


--------------------------------------------------------------------------------*/
void screenGotoSleepmode()
{
	lcd_clear();
 458:	0e 94 19 01 	call	0x232	; 0x232 <lcd_clear>
    lcd_string("Entering");
 45c:	86 ee       	ldi	r24, 0xE6	; 230
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	0e 94 80 01 	call	0x300	; 0x300 <lcd_string>
	set_cursor(0,2);
 464:	80 e0       	ldi	r24, 0x00	; 0
 466:	62 e0       	ldi	r22, 0x02	; 2
 468:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <set_cursor>
	lcd_string("Sleepmode...");	
 46c:	89 ed       	ldi	r24, 0xD9	; 217
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	0e 94 80 01 	call	0x300	; 0x300 <lcd_string>
}
 474:	08 95       	ret

00000476 <screenVoltageThreshold>:

!!!!die alarme bei unterschreiten der batterie grenzwerte sind noch nicht implementiert!!!

--------------------------------------------------------------------------------*/
void screenVoltageThreshold(uint16_t batt1Thres, uint16_t batt2Thres)
{
 476:	af 92       	push	r10
 478:	bf 92       	push	r11
 47a:	cf 92       	push	r12
 47c:	df 92       	push	r13
 47e:	ef 92       	push	r14
 480:	ff 92       	push	r15
 482:	0f 93       	push	r16
 484:	1f 93       	push	r17
 486:	df 93       	push	r29
 488:	cf 93       	push	r28
 48a:	00 d0       	rcall	.+0      	; 0x48c <screenVoltageThreshold+0x16>
 48c:	00 d0       	rcall	.+0      	; 0x48e <screenVoltageThreshold+0x18>
 48e:	cd b7       	in	r28, 0x3d	; 61
 490:	de b7       	in	r29, 0x3e	; 62
 492:	7c 01       	movw	r14, r24
 494:	5b 01       	movw	r10, r22
	char buffer[4];
	uint16_t voltageBuffer;	

	lcd_clear();
 496:	0e 94 19 01 	call	0x232	; 0x232 <lcd_clear>
	
	//Daten von Batterie1
    lcd_string("Threshold1: ");
 49a:	8f ee       	ldi	r24, 0xEF	; 239
 49c:	90 e0       	ldi	r25, 0x00	; 0
 49e:	0e 94 80 01 	call	0x300	; 0x300 <lcd_string>
	//Vorkomma-Stelle ausgeben
	voltageBuffer = batt1Thres/(uint16_t)10;	
	utoa(voltageBuffer, buffer, 10);
 4a2:	c7 01       	movw	r24, r14
 4a4:	6a e0       	ldi	r22, 0x0A	; 10
 4a6:	70 e0       	ldi	r23, 0x00	; 0
 4a8:	0e 94 23 04 	call	0x846	; 0x846 <__udivmodhi4>
 4ac:	cb 01       	movw	r24, r22
 4ae:	8e 01       	movw	r16, r28
 4b0:	0f 5f       	subi	r16, 0xFF	; 255
 4b2:	1f 4f       	sbci	r17, 0xFF	; 255
 4b4:	b8 01       	movw	r22, r16
 4b6:	4a e0       	ldi	r20, 0x0A	; 10
 4b8:	50 e0       	ldi	r21, 0x00	; 0
 4ba:	0e 94 37 04 	call	0x86e	; 0x86e <utoa>
	lcd_string(buffer);
 4be:	c8 01       	movw	r24, r16
 4c0:	0e 94 80 01 	call	0x300	; 0x300 <lcd_string>
	lcd_string(",");
 4c4:	9b e6       	ldi	r25, 0x6B	; 107
 4c6:	c9 2e       	mov	r12, r25
 4c8:	90 e0       	ldi	r25, 0x00	; 0
 4ca:	d9 2e       	mov	r13, r25
 4cc:	c6 01       	movw	r24, r12
 4ce:	0e 94 80 01 	call	0x300	; 0x300 <lcd_string>
	//Nachkomma-Stelle ausgeben
	voltageBuffer = batt1Thres%(uint16_t)10;
	utoa(voltageBuffer, buffer, 10);
 4d2:	c7 01       	movw	r24, r14
 4d4:	6a e0       	ldi	r22, 0x0A	; 10
 4d6:	70 e0       	ldi	r23, 0x00	; 0
 4d8:	0e 94 23 04 	call	0x846	; 0x846 <__udivmodhi4>
 4dc:	b8 01       	movw	r22, r16
 4de:	4a e0       	ldi	r20, 0x0A	; 10
 4e0:	50 e0       	ldi	r21, 0x00	; 0
 4e2:	0e 94 37 04 	call	0x86e	; 0x86e <utoa>
	lcd_string(buffer);
 4e6:	c8 01       	movw	r24, r16
 4e8:	0e 94 80 01 	call	0x300	; 0x300 <lcd_string>
	lcd_string(" V");
 4ec:	8c ef       	ldi	r24, 0xFC	; 252
 4ee:	e8 2e       	mov	r14, r24
 4f0:	80 e0       	ldi	r24, 0x00	; 0
 4f2:	f8 2e       	mov	r15, r24
 4f4:	c7 01       	movw	r24, r14
 4f6:	0e 94 80 01 	call	0x300	; 0x300 <lcd_string>

	//Daten von Batterie2	
	set_cursor(0,2);
 4fa:	80 e0       	ldi	r24, 0x00	; 0
 4fc:	62 e0       	ldi	r22, 0x02	; 2
 4fe:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <set_cursor>
	lcd_string("Threshold2: ");
 502:	8f ef       	ldi	r24, 0xFF	; 255
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	0e 94 80 01 	call	0x300	; 0x300 <lcd_string>
	//Vorkomma-Stelle ausgeben
	voltageBuffer = batt2Thres/(uint16_t)10;	
	utoa(voltageBuffer, buffer, 10);
 50a:	c5 01       	movw	r24, r10
 50c:	6a e0       	ldi	r22, 0x0A	; 10
 50e:	70 e0       	ldi	r23, 0x00	; 0
 510:	0e 94 23 04 	call	0x846	; 0x846 <__udivmodhi4>
 514:	cb 01       	movw	r24, r22
 516:	b8 01       	movw	r22, r16
 518:	4a e0       	ldi	r20, 0x0A	; 10
 51a:	50 e0       	ldi	r21, 0x00	; 0
 51c:	0e 94 37 04 	call	0x86e	; 0x86e <utoa>
	lcd_string(buffer);
 520:	c8 01       	movw	r24, r16
 522:	0e 94 80 01 	call	0x300	; 0x300 <lcd_string>
	lcd_string(",");
 526:	c6 01       	movw	r24, r12
 528:	0e 94 80 01 	call	0x300	; 0x300 <lcd_string>
	//Nachkomma-Stelle ausgeben
	voltageBuffer = batt2Thres%(uint16_t)10;
	utoa(voltageBuffer, buffer, 10);
 52c:	c5 01       	movw	r24, r10
 52e:	6a e0       	ldi	r22, 0x0A	; 10
 530:	70 e0       	ldi	r23, 0x00	; 0
 532:	0e 94 23 04 	call	0x846	; 0x846 <__udivmodhi4>
 536:	b8 01       	movw	r22, r16
 538:	4a e0       	ldi	r20, 0x0A	; 10
 53a:	50 e0       	ldi	r21, 0x00	; 0
 53c:	0e 94 37 04 	call	0x86e	; 0x86e <utoa>
	lcd_string(buffer);
 540:	c8 01       	movw	r24, r16
 542:	0e 94 80 01 	call	0x300	; 0x300 <lcd_string>
	lcd_string(" V");
 546:	c7 01       	movw	r24, r14
 548:	0e 94 80 01 	call	0x300	; 0x300 <lcd_string>
}
 54c:	0f 90       	pop	r0
 54e:	0f 90       	pop	r0
 550:	0f 90       	pop	r0
 552:	0f 90       	pop	r0
 554:	cf 91       	pop	r28
 556:	df 91       	pop	r29
 558:	1f 91       	pop	r17
 55a:	0f 91       	pop	r16
 55c:	ff 90       	pop	r15
 55e:	ef 90       	pop	r14
 560:	df 90       	pop	r13
 562:	cf 90       	pop	r12
 564:	bf 90       	pop	r11
 566:	af 90       	pop	r10
 568:	08 95       	ret

0000056a <screenVoltageControl>:
zu vermeiden; z.B. 12.5 -> 1250


--------------------------------------------------------------------------------*/
void screenVoltageControl(uint16_t batt1Volt, uint16_t batt2Volt)
{
 56a:	af 92       	push	r10
 56c:	bf 92       	push	r11
 56e:	cf 92       	push	r12
 570:	df 92       	push	r13
 572:	ef 92       	push	r14
 574:	ff 92       	push	r15
 576:	0f 93       	push	r16
 578:	1f 93       	push	r17
 57a:	df 93       	push	r29
 57c:	cf 93       	push	r28
 57e:	00 d0       	rcall	.+0      	; 0x580 <screenVoltageControl+0x16>
 580:	00 d0       	rcall	.+0      	; 0x582 <screenVoltageControl+0x18>
 582:	cd b7       	in	r28, 0x3d	; 61
 584:	de b7       	in	r29, 0x3e	; 62
 586:	7c 01       	movw	r14, r24
 588:	5b 01       	movw	r10, r22
	char buffer[4];
	uint16_t voltageBuffer;	

	lcd_clear();
 58a:	0e 94 19 01 	call	0x232	; 0x232 <lcd_clear>
	
	//Daten von Batterie1
    lcd_string("Batt1: ");
 58e:	8c e0       	ldi	r24, 0x0C	; 12
 590:	91 e0       	ldi	r25, 0x01	; 1
 592:	0e 94 80 01 	call	0x300	; 0x300 <lcd_string>
	//Vorkomma-Stelle ausgeben
	voltageBuffer = (batt1Volt+(uint16_t)(100>>1))/(uint16_t)100;	
	utoa(voltageBuffer, buffer, 10);
 596:	c7 01       	movw	r24, r14
 598:	c2 96       	adiw	r24, 0x32	; 50
 59a:	64 e6       	ldi	r22, 0x64	; 100
 59c:	70 e0       	ldi	r23, 0x00	; 0
 59e:	0e 94 23 04 	call	0x846	; 0x846 <__udivmodhi4>
 5a2:	cb 01       	movw	r24, r22
 5a4:	8e 01       	movw	r16, r28
 5a6:	0f 5f       	subi	r16, 0xFF	; 255
 5a8:	1f 4f       	sbci	r17, 0xFF	; 255
 5aa:	b8 01       	movw	r22, r16
 5ac:	4a e0       	ldi	r20, 0x0A	; 10
 5ae:	50 e0       	ldi	r21, 0x00	; 0
 5b0:	0e 94 37 04 	call	0x86e	; 0x86e <utoa>
	lcd_string(buffer);
 5b4:	c8 01       	movw	r24, r16
 5b6:	0e 94 80 01 	call	0x300	; 0x300 <lcd_string>
	lcd_string(",");
 5ba:	3b e6       	ldi	r19, 0x6B	; 107
 5bc:	c3 2e       	mov	r12, r19
 5be:	30 e0       	ldi	r19, 0x00	; 0
 5c0:	d3 2e       	mov	r13, r19
 5c2:	c6 01       	movw	r24, r12
 5c4:	0e 94 80 01 	call	0x300	; 0x300 <lcd_string>
	//Nachkomma-Stelle ausgeben
	voltageBuffer = batt1Volt%(uint16_t)100;
	utoa(voltageBuffer, buffer, 10);
 5c8:	c7 01       	movw	r24, r14
 5ca:	64 e6       	ldi	r22, 0x64	; 100
 5cc:	70 e0       	ldi	r23, 0x00	; 0
 5ce:	0e 94 23 04 	call	0x846	; 0x846 <__udivmodhi4>
 5d2:	b8 01       	movw	r22, r16
 5d4:	4a e0       	ldi	r20, 0x0A	; 10
 5d6:	50 e0       	ldi	r21, 0x00	; 0
 5d8:	0e 94 37 04 	call	0x86e	; 0x86e <utoa>
	lcd_string(buffer);
 5dc:	c8 01       	movw	r24, r16
 5de:	0e 94 80 01 	call	0x300	; 0x300 <lcd_string>
	lcd_string(" V");
 5e2:	2c ef       	ldi	r18, 0xFC	; 252
 5e4:	e2 2e       	mov	r14, r18
 5e6:	20 e0       	ldi	r18, 0x00	; 0
 5e8:	f2 2e       	mov	r15, r18
 5ea:	c7 01       	movw	r24, r14
 5ec:	0e 94 80 01 	call	0x300	; 0x300 <lcd_string>

	//Daten von Batterie2	
	set_cursor(0,2);
 5f0:	80 e0       	ldi	r24, 0x00	; 0
 5f2:	62 e0       	ldi	r22, 0x02	; 2
 5f4:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <set_cursor>
	lcd_string("Batt2: ");
 5f8:	84 e1       	ldi	r24, 0x14	; 20
 5fa:	91 e0       	ldi	r25, 0x01	; 1
 5fc:	0e 94 80 01 	call	0x300	; 0x300 <lcd_string>
	//Vorkomma-Stelle ausgeben
	voltageBuffer = (batt2Volt+(uint16_t)(100>>1))/(uint16_t)100;	
	utoa(voltageBuffer, buffer, 10);
 600:	c5 01       	movw	r24, r10
 602:	c2 96       	adiw	r24, 0x32	; 50
 604:	64 e6       	ldi	r22, 0x64	; 100
 606:	70 e0       	ldi	r23, 0x00	; 0
 608:	0e 94 23 04 	call	0x846	; 0x846 <__udivmodhi4>
 60c:	cb 01       	movw	r24, r22
 60e:	b8 01       	movw	r22, r16
 610:	4a e0       	ldi	r20, 0x0A	; 10
 612:	50 e0       	ldi	r21, 0x00	; 0
 614:	0e 94 37 04 	call	0x86e	; 0x86e <utoa>
	lcd_string(buffer);
 618:	c8 01       	movw	r24, r16
 61a:	0e 94 80 01 	call	0x300	; 0x300 <lcd_string>
	lcd_string(",");
 61e:	c6 01       	movw	r24, r12
 620:	0e 94 80 01 	call	0x300	; 0x300 <lcd_string>
	//Nachkomma-Stelle ausgeben
	voltageBuffer = batt2Volt%(uint16_t)100;
	utoa(voltageBuffer, buffer, 10);
 624:	c5 01       	movw	r24, r10
 626:	64 e6       	ldi	r22, 0x64	; 100
 628:	70 e0       	ldi	r23, 0x00	; 0
 62a:	0e 94 23 04 	call	0x846	; 0x846 <__udivmodhi4>
 62e:	b8 01       	movw	r22, r16
 630:	4a e0       	ldi	r20, 0x0A	; 10
 632:	50 e0       	ldi	r21, 0x00	; 0
 634:	0e 94 37 04 	call	0x86e	; 0x86e <utoa>
	lcd_string(buffer);
 638:	c8 01       	movw	r24, r16
 63a:	0e 94 80 01 	call	0x300	; 0x300 <lcd_string>
	lcd_string(" V");
 63e:	c7 01       	movw	r24, r14
 640:	0e 94 80 01 	call	0x300	; 0x300 <lcd_string>
}
 644:	0f 90       	pop	r0
 646:	0f 90       	pop	r0
 648:	0f 90       	pop	r0
 64a:	0f 90       	pop	r0
 64c:	cf 91       	pop	r28
 64e:	df 91       	pop	r29
 650:	1f 91       	pop	r17
 652:	0f 91       	pop	r16
 654:	ff 90       	pop	r15
 656:	ef 90       	pop	r14
 658:	df 90       	pop	r13
 65a:	cf 90       	pop	r12
 65c:	bf 90       	pop	r11
 65e:	af 90       	pop	r10
 660:	08 95       	ret

00000662 <screenHeatingAuto>:
beinhaltet die Ziel-Temperatur des Heizungs-Reglers.


--------------------------------------------------------------------------------*/
void screenHeatingAuto(uint16_t targetTemp)
{
 662:	0f 93       	push	r16
 664:	1f 93       	push	r17
 666:	df 93       	push	r29
 668:	cf 93       	push	r28
 66a:	00 d0       	rcall	.+0      	; 0x66c <screenHeatingAuto+0xa>
 66c:	00 d0       	rcall	.+0      	; 0x66e <screenHeatingAuto+0xc>
 66e:	cd b7       	in	r28, 0x3d	; 61
 670:	de b7       	in	r29, 0x3e	; 62
 672:	8c 01       	movw	r16, r24
	char buffer[4];
	
	lcd_clear();
 674:	0e 94 19 01 	call	0x232	; 0x232 <lcd_clear>
    lcd_string("Temperature:");
 678:	8c e1       	ldi	r24, 0x1C	; 28
 67a:	91 e0       	ldi	r25, 0x01	; 1
 67c:	0e 94 80 01 	call	0x300	; 0x300 <lcd_string>
	set_cursor(0,2);
 680:	80 e0       	ldi	r24, 0x00	; 0
 682:	62 e0       	ldi	r22, 0x02	; 2
 684:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <set_cursor>
	utoa(targetTemp, buffer, 10);
 688:	c8 01       	movw	r24, r16
 68a:	8e 01       	movw	r16, r28
 68c:	0f 5f       	subi	r16, 0xFF	; 255
 68e:	1f 4f       	sbci	r17, 0xFF	; 255
 690:	b8 01       	movw	r22, r16
 692:	4a e0       	ldi	r20, 0x0A	; 10
 694:	50 e0       	ldi	r21, 0x00	; 0
 696:	0e 94 37 04 	call	0x86e	; 0x86e <utoa>
	lcd_string(buffer);	
 69a:	c8 01       	movw	r24, r16
 69c:	0e 94 80 01 	call	0x300	; 0x300 <lcd_string>
}
 6a0:	0f 90       	pop	r0
 6a2:	0f 90       	pop	r0
 6a4:	0f 90       	pop	r0
 6a6:	0f 90       	pop	r0
 6a8:	cf 91       	pop	r28
 6aa:	df 91       	pop	r29
 6ac:	1f 91       	pop	r17
 6ae:	0f 91       	pop	r16
 6b0:	08 95       	ret

000006b2 <screenWelcome>:
Wird beim Systemstart angezeigt.

--------------------------------------------------------------------------------*/
void screenWelcome()
{
	lcd_clear();
 6b2:	0e 94 19 01 	call	0x232	; 0x232 <lcd_clear>
    lcd_string("Welcome!");
 6b6:	89 e2       	ldi	r24, 0x29	; 41
 6b8:	91 e0       	ldi	r25, 0x01	; 1
 6ba:	0e 94 80 01 	call	0x300	; 0x300 <lcd_string>
	set_cursor(0,2);
 6be:	80 e0       	ldi	r24, 0x00	; 0
 6c0:	62 e0       	ldi	r22, 0x02	; 2
 6c2:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <set_cursor>
	lcd_string("Starting system.");
 6c6:	82 e3       	ldi	r24, 0x32	; 50
 6c8:	91 e0       	ldi	r25, 0x01	; 1
 6ca:	0e 94 80 01 	call	0x300	; 0x300 <lcd_string>
}
 6ce:	08 95       	ret

000006d0 <screenHeatingManual>:

- 16 Heizlevel Stufen

--------------------------------------------------------------------------------*/
void screenHeatingManual(uint8_t heizStatus, uint8_t *heizLevel)
{
 6d0:	1f 93       	push	r17
 6d2:	cf 93       	push	r28
 6d4:	df 93       	push	r29
 6d6:	18 2f       	mov	r17, r24
 6d8:	eb 01       	movw	r28, r22
   lcd_clear();
 6da:	0e 94 19 01 	call	0x232	; 0x232 <lcd_clear>
   lcd_home();
 6de:	0e 94 62 01 	call	0x2c4	; 0x2c4 <lcd_home>
   lcd_string("cold        warm");
 6e2:	83 e4       	ldi	r24, 0x43	; 67
 6e4:	91 e0       	ldi	r25, 0x01	; 1
 6e6:	0e 94 80 01 	call	0x300	; 0x300 <lcd_string>
   
   if ((heizStatus==1) && ((*heizLevel) != 15)) //mehr heizen
 6ea:	11 30       	cpi	r17, 0x01	; 1
 6ec:	31 f4       	brne	.+12     	; 0x6fa <screenHeatingManual+0x2a>
 6ee:	88 81       	ld	r24, Y
 6f0:	8f 30       	cpi	r24, 0x0F	; 15
 6f2:	c9 f1       	breq	.+114    	; 0x766 <screenHeatingManual+0x96>
   {
   	   //setze nächsten Heizblock
   	   (*heizLevel)++;
 6f4:	8f 5f       	subi	r24, 0xFF	; 255
 6f6:	88 83       	st	Y, r24
 6f8:	1f c0       	rjmp	.+62     	; 0x738 <screenHeatingManual+0x68>
	   LCD_PORT |= 0xF0;                //das high nibble von temp2 wird PORTD zugewiesen
	   lcd_enable();					//E wird kurz gesetzt und dann wieder zurückgesetzt
   
	   _delay_us(42);
	}
	else if ((heizStatus==0) && ((*heizLevel)!=0)) //weniger heizen
 6fa:	11 23       	and	r17, r17
 6fc:	d1 f4       	brne	.+52     	; 0x732 <screenHeatingManual+0x62>
 6fe:	88 81       	ld	r24, Y
 700:	88 23       	and	r24, r24
 702:	89 f1       	breq	.+98     	; 0x766 <screenHeatingManual+0x96>
	{
	   //lösche aktuellen Heizblock
	   set_cursor((*heizLevel),2);
 704:	62 e0       	ldi	r22, 0x02	; 2
 706:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <set_cursor>
   	
	   LCD_PORT |= (1<<LCD_RS);        	// RS auf 1 setzen
 70a:	aa 9a       	sbi	0x15, 2	; 21
 
	   //High Teil des Zeichens ausgeben 			
	   LCD_PORT &= 0x0F;				//das high nibble in PORTD wird auf null gesetzt				
 70c:	85 b3       	in	r24, 0x15	; 21
 70e:	8f 70       	andi	r24, 0x0F	; 15
 710:	85 bb       	out	0x15, r24	; 21
	   LCD_PORT |= 0x80;                //das high nibble von PORTD wird auf 0b1111 gesetzt
 712:	af 9a       	sbi	0x15, 7	; 21
	   lcd_enable();					//E wird kurz gesetzt und dann wieder zurückgesetzt
 714:	0e 94 13 01 	call	0x226	; 0x226 <lcd_enable>
   
	   //Low Teil des Zeichens ausgeben
	   LCD_PORT &= 0x0F;				//das high nibble in PORTD wird auf null gesetzt
 718:	85 b3       	in	r24, 0x15	; 21
 71a:	8f 70       	andi	r24, 0x0F	; 15
 71c:	85 bb       	out	0x15, r24	; 21
	   LCD_PORT |= 0x80;                //das high nibble von temp2 wird PORTD zugewiesen
 71e:	af 9a       	sbi	0x15, 7	; 21
	   lcd_enable();					//E wird kurz gesetzt und dann wieder zurückgesetzt
 720:	0e 94 13 01 	call	0x226	; 0x226 <lcd_enable>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 724:	88 e3       	ldi	r24, 0x38	; 56
 726:	8a 95       	dec	r24
 728:	f1 f7       	brne	.-4      	; 0x726 <screenHeatingManual+0x56>
   
	   _delay_us(42);
	   (*heizLevel)--;
 72a:	88 81       	ld	r24, Y
 72c:	81 50       	subi	r24, 0x01	; 1
 72e:	88 83       	st	Y, r24
 730:	1a c0       	rjmp	.+52     	; 0x766 <screenHeatingManual+0x96>
	}
	else if (heizStatus==2) //gleichbleibend heizen
 732:	12 30       	cpi	r17, 0x02	; 2
 734:	c1 f4       	brne	.+48     	; 0x766 <screenHeatingManual+0x96>
	{
	   set_cursor((*heizLevel),2);
 736:	88 81       	ld	r24, Y
 738:	62 e0       	ldi	r22, 0x02	; 2
 73a:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <set_cursor>
   	
	   LCD_PORT |= (1<<LCD_RS);        	// RS auf 1 setzen
 73e:	aa 9a       	sbi	0x15, 2	; 21
 
	   //High Teil des Zeichens ausgeben 			
	   LCD_PORT &= 0x0F;				//das high nibble in PORTD wird auf null gesetzt				
 740:	85 b3       	in	r24, 0x15	; 21
 742:	8f 70       	andi	r24, 0x0F	; 15
 744:	85 bb       	out	0x15, r24	; 21
	   LCD_PORT |= 0xF0;                //das high nibble von PORTD wird auf 0b1111 gesetzt
 746:	85 b3       	in	r24, 0x15	; 21
 748:	80 6f       	ori	r24, 0xF0	; 240
 74a:	85 bb       	out	0x15, r24	; 21
	   lcd_enable();					//E wird kurz gesetzt und dann wieder zurückgesetzt
 74c:	0e 94 13 01 	call	0x226	; 0x226 <lcd_enable>
   
	   //Low Teil des Zeichens ausgeben
	   LCD_PORT &= 0x0F;				//das high nibble in PORTD wird auf null gesetzt
 750:	85 b3       	in	r24, 0x15	; 21
 752:	8f 70       	andi	r24, 0x0F	; 15
 754:	85 bb       	out	0x15, r24	; 21
	   LCD_PORT |= 0xF0;                //das high nibble von temp2 wird PORTD zugewiesen
 756:	85 b3       	in	r24, 0x15	; 21
 758:	80 6f       	ori	r24, 0xF0	; 240
 75a:	85 bb       	out	0x15, r24	; 21
	   lcd_enable();					//E wird kurz gesetzt und dann wieder zurückgesetzt
 75c:	0e 94 13 01 	call	0x226	; 0x226 <lcd_enable>
 760:	88 e3       	ldi	r24, 0x38	; 56
 762:	8a 95       	dec	r24
 764:	f1 f7       	brne	.-4      	; 0x762 <screenHeatingManual+0x92>
   
	   _delay_us(42);
	}
	
}
 766:	df 91       	pop	r29
 768:	cf 91       	pop	r28
 76a:	1f 91       	pop	r17
 76c:	08 95       	ret

0000076e <menuInit>:
Beim Starten und Aufwachen (SleepMode) des Systems soll erst der Willkommens
Bildschirm und dann der Batterie-Spannungs Bildschirm angezeigt werden.

--------------------------------------------------------------------------------*/
void menuInit()
{
 76e:	0f 93       	push	r16
 770:	1f 93       	push	r17
	uint16_t batt1Volt=0;
	uint16_t batt2Volt=0;	

	screenWelcome();
 772:	0e 94 59 03 	call	0x6b2	; 0x6b2 <screenWelcome>
 776:	80 e2       	ldi	r24, 0x20	; 32
 778:	9e e4       	ldi	r25, 0x4E	; 78
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 77a:	24 e6       	ldi	r18, 0x64	; 100
 77c:	30 e0       	ldi	r19, 0x00	; 0
 77e:	f9 01       	movw	r30, r18
 780:	31 97       	sbiw	r30, 0x01	; 1
 782:	f1 f7       	brne	.-4      	; 0x780 <menuInit+0x12>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 784:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 786:	d9 f7       	brne	.-10     	; 0x77e <menuInit+0x10>
	_delay_ms(2000);
	
	
	batt1Volt = adcRead15(4);
 788:	84 e0       	ldi	r24, 0x04	; 4
 78a:	0e 94 4e 00 	call	0x9c	; 0x9c <adcRead15>
 78e:	8c 01       	movw	r16, r24
	batt2Volt = adcRead15(5);
 790:	85 e0       	ldi	r24, 0x05	; 5
 792:	0e 94 4e 00 	call	0x9c	; 0x9c <adcRead15>
 796:	bc 01       	movw	r22, r24
	screenVoltageControl(batt1Volt, batt2Volt);
 798:	c8 01       	movw	r24, r16
 79a:	0e 94 b5 02 	call	0x56a	; 0x56a <screenVoltageControl>
 79e:	80 e3       	ldi	r24, 0x30	; 48
 7a0:	95 e7       	ldi	r25, 0x75	; 117
 7a2:	24 e6       	ldi	r18, 0x64	; 100
 7a4:	30 e0       	ldi	r19, 0x00	; 0
 7a6:	f9 01       	movw	r30, r18
 7a8:	31 97       	sbiw	r30, 0x01	; 1
 7aa:	f1 f7       	brne	.-4      	; 0x7a8 <menuInit+0x3a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 7ac:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 7ae:	d9 f7       	brne	.-10     	; 0x7a6 <menuInit+0x38>
	_delay_ms(3000);
}
 7b0:	1f 91       	pop	r17
 7b2:	0f 91       	pop	r16
 7b4:	08 95       	ret

000007b6 <myInit>:

--------------------------------------------------------------------------------------*/
void myInit()
{

	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
 7b6:	85 b7       	in	r24, 0x35	; 53
 7b8:	8f 78       	andi	r24, 0x8F	; 143
 7ba:	80 62       	ori	r24, 0x20	; 32
 7bc:	85 bf       	out	0x35, r24	; 53


	//Port C.0 als Ausgang
	//damit wird das Darlington angesteuert um im SleepMode
	//die Masse fürs Display abzuschalten (im SleepMode = 0)
	DDRC  |= (1<<BIT0);		 
 7be:	a0 9a       	sbi	0x14, 0	; 20
	PORTC |= (1<<BIT0);		
 7c0:	a8 9a       	sbi	0x15, 0	; 21

	//Port C.1 als Ausgang
	//damit wird das Darlington angesteuert um im SleepMode
	//die Masse auf den Emittor des Transistors zu schalten
	//der die Display-Beleuchtung steuert. (im SleepMode = 1)
	DDRC  |=(1<<BIT1);		
 7c2:	a1 9a       	sbi	0x14, 1	; 20
													
							
	//A.0 bis A.3 als Ausgänge für Darlington-Array
	//Bei Ansteuerung schaltet das Darlington Masse.
	DDRA |= (1<<BIT0) | (1<<BIT1) | (1<<BIT2) | (1<<BIT3); 
 7c4:	8a b3       	in	r24, 0x1a	; 26
 7c6:	8f 60       	ori	r24, 0x0F	; 15
 7c8:	8a bb       	out	0x1a, r24	; 26
														   

	//PB.2 erhällt 0V vom Darlington Array wenn die Zündung an ist -> weckt den uC aus dem Sleep Mode auf.
	//PB2 als Input
	//Pull-Up aktiv
	DDRB  &= ~(1<<BIT2);
 7ca:	ba 98       	cbi	0x17, 2	; 23
	PORTB |= (1<<BIT2);  
 7cc:	c2 9a       	sbi	0x18, 2	; 24


	//PD.0 als Input
	//Liest den Schalter links für die Menü-Steuerung
	//Pull-Up aktiv
	DDRD &= ~(1<<BIT0);
 7ce:	88 98       	cbi	0x11, 0	; 17
	PORTD |= (1<<BIT0);	
 7d0:	90 9a       	sbi	0x12, 0	; 18


	//Port D.6 als Eingang (Prüft ob die Zündung noch an ist)	
	//Wenn Zündung an, dann 0V an D.6 (durch Transistor)
	//Wenn Zündung aus, dann 5V über internen Pull-Up
	DDRD  &= ~(1<<BIT6);	
 7d2:	8e 98       	cbi	0x11, 6	; 17
	PORTD |= (1<<BIT6);		
 7d4:	96 9a       	sbi	0x12, 6	; 18
							
	//PD7 als Output (System-LED grün)
	//PD7 = OFF
	DDRD  |= (1<<BIT7); 
 7d6:	8f 9a       	sbi	0x11, 7	; 17
	PORTD &= ~(1<<BIT7);
 7d8:	97 98       	cbi	0x12, 7	; 18
									

	//General interrupt control register:
	//Enable interrupts for INT0, INT1, INT2	
	//GICR  |= (1<<BIT7) | (1<<BIT6) | (1<<BIT5); 
	GICR |= (1<<BIT5); //only INT2
 7da:	8b b7       	in	r24, 0x3b	; 59
 7dc:	80 62       	ori	r24, 0x20	; 32
 7de:	8b bf       	out	0x3b, r24	; 59

	//Statt über Interrupts werden die Buttons mitte & rechts jetzt 
	//normal eingelesen
	//Button rechts -> PD.3
	//Button links  -> PD.2
	DDRD &= ~(1<<BIT3);
 7e0:	8b 98       	cbi	0x11, 3	; 17
	PORTD |= (1<<BIT3);	
 7e2:	93 9a       	sbi	0x12, 3	; 18

	DDRD &= ~(1<<BIT2);
 7e4:	8a 98       	cbi	0x11, 2	; 17
	PORTD |= (1<<BIT2);	
 7e6:	92 9a       	sbi	0x12, 2	; 18

}
 7e8:	08 95       	ret

000007ea <pwmInit>:
#include <avr/io.h>
#include "pwmInit.h"

void pwmInit(uint16_t compare)
{
	DDRD |= (1<<BIT4) | (1<<BIT5);		//D.4&5 als Ausgänge definieren
 7ea:	21 b3       	in	r18, 0x11	; 17
 7ec:	20 63       	ori	r18, 0x30	; 48
 7ee:	21 bb       	out	0x11, r18	; 17
	
	//PWM, Phase Correct with ICR1 as TOP value
	//TOP: 625
	TCCR1A |= (1<<WGM11);	
 7f0:	2f b5       	in	r18, 0x2f	; 47
 7f2:	22 60       	ori	r18, 0x02	; 2
 7f4:	2f bd       	out	0x2f, r18	; 47
	TCCR1A &= ~(1<<WGM10);	
 7f6:	2f b5       	in	r18, 0x2f	; 47
 7f8:	2e 7f       	andi	r18, 0xFE	; 254
 7fa:	2f bd       	out	0x2f, r18	; 47

	TCCR1B |= (1<<WGM13);
 7fc:	2e b5       	in	r18, 0x2e	; 46
 7fe:	20 61       	ori	r18, 0x10	; 16
 800:	2e bd       	out	0x2e, r18	; 46
	TCCR1B &= ~(1<<WGM12);
 802:	2e b5       	in	r18, 0x2e	; 46
 804:	27 7f       	andi	r18, 0xF7	; 247
 806:	2e bd       	out	0x2e, r18	; 46

	//ICR1 = 625;
	ICR1 = 1250;
 808:	22 ee       	ldi	r18, 0xE2	; 226
 80a:	34 e0       	ldi	r19, 0x04	; 4
 80c:	37 bd       	out	0x27, r19	; 39
 80e:	26 bd       	out	0x26, r18	; 38
	

	//Nicht invertierende PWM, KanalA -> auf Pin D.5
	//- Clear OC1A/OC1B on Compare Match when up-counting. 
	//- Set OC1A/OC1B on Compare Match when downcounting.
	TCCR1A |= (1<<COM1A1); 	
 810:	2f b5       	in	r18, 0x2f	; 47
 812:	20 68       	ori	r18, 0x80	; 128
 814:	2f bd       	out	0x2f, r18	; 47
	TCCR1A &= ~(1<<COM1A0);
 816:	2f b5       	in	r18, 0x2f	; 47
 818:	2f 7b       	andi	r18, 0xBF	; 191
 81a:	2f bd       	out	0x2f, r18	; 47

	//Prescaler = 64
	TCCR1B |= (1<<CS10) | (1<<CS11);
 81c:	2e b5       	in	r18, 0x2e	; 46
 81e:	23 60       	ori	r18, 0x03	; 3
 820:	2e bd       	out	0x2e, r18	; 46
	TCCR1B |= ~(1<<CS12); 
 822:	2e b5       	in	r18, 0x2e	; 46
 824:	2b 6f       	ori	r18, 0xFB	; 251
 826:	2e bd       	out	0x2e, r18	; 46
		1 	1 	0 	Externer Pin 1, negative Flanke
		1 	1 	1 	Externer Pin 1, positive Flanke 
	*/
	
	//OCR1A->16bit register
	OCR1A=compare;	//Vergleichswert laden
 828:	9b bd       	out	0x2b, r25	; 43
 82a:	8a bd       	out	0x2a, r24	; 42
	
	
}
 82c:	08 95       	ret

0000082e <pwmUpdate>:


void pwmUpdate(uint16_t compare)
{
	OCR1A=compare;	
 82e:	9b bd       	out	0x2b, r25	; 43
 830:	8a bd       	out	0x2a, r24	; 42
}
 832:	08 95       	ret

00000834 <timer_init>:
#include "timerInit.h"

void timer_init(uint16_t compare)
{

	TCCR1B |= (1<<WGM12);	//CTC Mode:
 834:	2e b5       	in	r18, 0x2e	; 46
 836:	28 60       	ori	r18, 0x08	; 8
 838:	2e bd       	out	0x2e, r18	; 46
							//Timer1 zählt hoch, bei compare match wird er wieder zu 0 gesetzt

	TCCR1B |= (1<<CS10); //Prescaler nicht aktiviert - es liegt der Systemtakt an
 83a:	2e b5       	in	r18, 0x2e	; 46
 83c:	21 60       	ori	r18, 0x01	; 1
 83e:	2e bd       	out	0x2e, r18	; 46
	1 	0 	1 	CK / 1024
	1 	1 	0 	Externer Pin 1, negative Flanke
	1 	1 	1 	Externer Pin 1, positive Flanke 
*/
	
	OCR1A=compare;	//Vergleichswert laden
 840:	9b bd       	out	0x2b, r25	; 43
 842:	8a bd       	out	0x2a, r24	; 42
	
	
}
 844:	08 95       	ret

00000846 <__udivmodhi4>:
 846:	aa 1b       	sub	r26, r26
 848:	bb 1b       	sub	r27, r27
 84a:	51 e1       	ldi	r21, 0x11	; 17
 84c:	07 c0       	rjmp	.+14     	; 0x85c <__udivmodhi4_ep>

0000084e <__udivmodhi4_loop>:
 84e:	aa 1f       	adc	r26, r26
 850:	bb 1f       	adc	r27, r27
 852:	a6 17       	cp	r26, r22
 854:	b7 07       	cpc	r27, r23
 856:	10 f0       	brcs	.+4      	; 0x85c <__udivmodhi4_ep>
 858:	a6 1b       	sub	r26, r22
 85a:	b7 0b       	sbc	r27, r23

0000085c <__udivmodhi4_ep>:
 85c:	88 1f       	adc	r24, r24
 85e:	99 1f       	adc	r25, r25
 860:	5a 95       	dec	r21
 862:	a9 f7       	brne	.-22     	; 0x84e <__udivmodhi4_loop>
 864:	80 95       	com	r24
 866:	90 95       	com	r25
 868:	bc 01       	movw	r22, r24
 86a:	cd 01       	movw	r24, r26
 86c:	08 95       	ret

0000086e <utoa>:
 86e:	fb 01       	movw	r30, r22
 870:	9f 01       	movw	r18, r30
 872:	42 30       	cpi	r20, 0x02	; 2
 874:	74 f0       	brlt	.+28     	; 0x892 <utoa+0x24>
 876:	45 32       	cpi	r20, 0x25	; 37
 878:	64 f4       	brge	.+24     	; 0x892 <utoa+0x24>
 87a:	64 2f       	mov	r22, r20
 87c:	77 27       	eor	r23, r23
 87e:	0e 94 23 04 	call	0x846	; 0x846 <__udivmodhi4>
 882:	80 5d       	subi	r24, 0xD0	; 208
 884:	8a 33       	cpi	r24, 0x3A	; 58
 886:	0c f0       	brlt	.+2      	; 0x88a <utoa+0x1c>
 888:	89 5d       	subi	r24, 0xD9	; 217
 88a:	81 93       	st	Z+, r24
 88c:	cb 01       	movw	r24, r22
 88e:	00 97       	sbiw	r24, 0x00	; 0
 890:	a1 f7       	brne	.-24     	; 0x87a <utoa+0xc>
 892:	10 82       	st	Z, r1
 894:	c9 01       	movw	r24, r18
 896:	0c 94 4d 04 	jmp	0x89a	; 0x89a <strrev>

0000089a <strrev>:
 89a:	dc 01       	movw	r26, r24
 89c:	fc 01       	movw	r30, r24
 89e:	67 2f       	mov	r22, r23
 8a0:	71 91       	ld	r23, Z+
 8a2:	77 23       	and	r23, r23
 8a4:	e1 f7       	brne	.-8      	; 0x89e <strrev+0x4>
 8a6:	32 97       	sbiw	r30, 0x02	; 2
 8a8:	04 c0       	rjmp	.+8      	; 0x8b2 <strrev+0x18>
 8aa:	7c 91       	ld	r23, X
 8ac:	6d 93       	st	X+, r22
 8ae:	70 83       	st	Z, r23
 8b0:	62 91       	ld	r22, -Z
 8b2:	ae 17       	cp	r26, r30
 8b4:	bf 07       	cpc	r27, r31
 8b6:	c8 f3       	brcs	.-14     	; 0x8aa <strrev+0x10>
 8b8:	08 95       	ret

000008ba <_exit>:
 8ba:	f8 94       	cli

000008bc <__stop_program>:
 8bc:	ff cf       	rjmp	.-2      	; 0x8bc <__stop_program>
