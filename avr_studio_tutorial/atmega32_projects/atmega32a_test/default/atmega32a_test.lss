
atmega32a_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000021c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  0000021c  00000290  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000040  00000000  00000000  000002aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000009f  00000000  00000000  000002ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000073a  00000000  00000000  00000389  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000016c  00000000  00000000  00000ac3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000047b  00000000  00000000  00000c2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000b0  00000000  00000000  000010ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000192  00000000  00000000  0000115c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000001c9  00000000  00000000  000012ee  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e1       	ldi	r30, 0x1C	; 28
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	aa 37       	cpi	r26, 0x7A	; 122
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 0c 01 	jmp	0x218	; 0x218 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:

int main (void) {            
 
	

	DDRA  |= 0x01	;        //Port A.0 als Ausgang
  82:	d0 9a       	sbi	0x1a, 0	; 26
	lcd_init();
  84:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_init>



   while(1) {                
  
	    PORTA |= (1<<BIT0);  //Port A.0 = High
  88:	d8 9a       	sbi	0x1b, 0	; 27
		lcd_home();
  8a:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_home>
		lcd_string("Svenja:");
  8e:	80 e6       	ldi	r24, 0x60	; 96
  90:	90 e0       	ldi	r25, 0x00	; 0
  92:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_string>
		set_cursor(0,2);
  96:	80 e0       	ldi	r24, 0x00	; 0
  98:	62 e0       	ldi	r22, 0x02	; 2
  9a:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <set_cursor>
		lcd_string("liebesSchlaftier");
  9e:	88 e6       	ldi	r24, 0x68	; 104
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_string>
  a6:	f0 cf       	rjmp	.-32     	; 0x88 <main+0x6>

000000a8 <lcd_data>:
 
void lcd_data(unsigned char temp1)
{
   unsigned char temp2 = temp1;
 
   LCD_PORT |= (1<<LCD_RS);        	// RS auf 1 setzen
  a8:	aa 9a       	sbi	0x15, 2	; 21
 
   //High Teil des Zeichens ausgeben 			
   temp1 = temp1 & 0xF0;			//das low nibble von temp1 auf null setzen; 
   LCD_PORT &= 0x0F;				//das high nibble in PORTD wird auf null gesetzt				
  aa:	95 b3       	in	r25, 0x15	; 21
  ac:	9f 70       	andi	r25, 0x0F	; 15
  ae:	95 bb       	out	0x15, r25	; 21
   LCD_PORT |= temp1;               //das high nibble von temp1 wird PORTD zugewiesen
  b0:	25 b3       	in	r18, 0x15	; 21
  b2:	98 2f       	mov	r25, r24
  b4:	90 7f       	andi	r25, 0xF0	; 240
  b6:	92 2b       	or	r25, r18
  b8:	95 bb       	out	0x15, r25	; 21
// erzeugt den Enable-Puls
void lcd_enable(void)
{
   // Bei Problemen ggf. Pause gem‰ﬂ Datenblatt des LCD Controllers einf¸gen
   // http://www.mikrocontroller.net/topic/81974#685882
   LCD_PORT |= (1<<LCD_EN);			// enable setzen
  ba:	ab 9a       	sbi	0x15, 3	; 21
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  bc:	21 e0       	ldi	r18, 0x01	; 1
  be:	92 2f       	mov	r25, r18
  c0:	9a 95       	dec	r25
  c2:	f1 f7       	brne	.-4      	; 0xc0 <lcd_data+0x18>
    _delay_us(1);                   // kurze Pause
   
   
   // Bei Problemen ggf. Pause gem‰ﬂ Datenblatt des LCD Controllers verl‰ngern
   // http://www.mikrocontroller.net/topic/80900
   LCD_PORT &= ~(1<<LCD_EN);		//enabel zur¸cksetzen
  c4:	ab 98       	cbi	0x15, 3	; 21
   lcd_enable();					//E wird kurz gesetzt und dann wieder zur¸ckgesetzt
   
   //Low Teil des Zeichens ausgeben
   temp2 = temp2 << 4;				//das low nibble von temp2 wird auf das high nibble verschoben	
   temp2 = temp2 & 0xF0;			//das alte low nibble von temp2 wird zu 0 gesetzt
   LCD_PORT &= 0x0F;				//das high nibble in PORTD wird auf null gesetzt
  c6:	95 b3       	in	r25, 0x15	; 21
  c8:	9f 70       	andi	r25, 0x0F	; 15
  ca:	95 bb       	out	0x15, r25	; 21
   LCD_PORT |= temp2;               //das high nibble von temp2 wird PORTD zugewiesen
  cc:	95 b3       	in	r25, 0x15	; 21
  ce:	82 95       	swap	r24
  d0:	80 7f       	andi	r24, 0xF0	; 240
  d2:	98 2b       	or	r25, r24
  d4:	95 bb       	out	0x15, r25	; 21
// erzeugt den Enable-Puls
void lcd_enable(void)
{
   // Bei Problemen ggf. Pause gem‰ﬂ Datenblatt des LCD Controllers einf¸gen
   // http://www.mikrocontroller.net/topic/81974#685882
   LCD_PORT |= (1<<LCD_EN);			// enable setzen
  d6:	ab 9a       	sbi	0x15, 3	; 21
  d8:	2a 95       	dec	r18
  da:	f1 f7       	brne	.-4      	; 0xd8 <lcd_data+0x30>
    _delay_us(1);                   // kurze Pause
   
   
   // Bei Problemen ggf. Pause gem‰ﬂ Datenblatt des LCD Controllers verl‰ngern
   // http://www.mikrocontroller.net/topic/80900
   LCD_PORT &= ~(1<<LCD_EN);		//enabel zur¸cksetzen
  dc:	ab 98       	cbi	0x15, 3	; 21
  de:	88 e3       	ldi	r24, 0x38	; 56
  e0:	8a 95       	dec	r24
  e2:	f1 f7       	brne	.-4      	; 0xe0 <lcd_data+0x38>
   LCD_PORT &= 0x0F;				//das high nibble in PORTD wird auf null gesetzt
   LCD_PORT |= temp2;               //das high nibble von temp2 wird PORTD zugewiesen
   lcd_enable();					//E wird kurz gesetzt und dann wieder zur¸ckgesetzt
   
   _delay_us(42);
}
  e4:	08 95       	ret

000000e6 <lcd_command>:
 
void lcd_command(unsigned char temp1)
{
   unsigned char temp2 = temp1;
 
   LCD_PORT &= ~(1<<LCD_RS);        // RS auf 0 setzen
  e6:	aa 98       	cbi	0x15, 2	; 21
 
   temp1 = temp1 & 0xF0;            // maskieren
   LCD_PORT &= 0x0F;
  e8:	95 b3       	in	r25, 0x15	; 21
  ea:	9f 70       	andi	r25, 0x0F	; 15
  ec:	95 bb       	out	0x15, r25	; 21
   LCD_PORT |= temp1;               // setzen
  ee:	25 b3       	in	r18, 0x15	; 21
  f0:	98 2f       	mov	r25, r24
  f2:	90 7f       	andi	r25, 0xF0	; 240
  f4:	92 2b       	or	r25, r18
  f6:	95 bb       	out	0x15, r25	; 21
// erzeugt den Enable-Puls
void lcd_enable(void)
{
   // Bei Problemen ggf. Pause gem‰ﬂ Datenblatt des LCD Controllers einf¸gen
   // http://www.mikrocontroller.net/topic/81974#685882
   LCD_PORT |= (1<<LCD_EN);			// enable setzen
  f8:	ab 9a       	sbi	0x15, 3	; 21
  fa:	21 e0       	ldi	r18, 0x01	; 1
  fc:	92 2f       	mov	r25, r18
  fe:	9a 95       	dec	r25
 100:	f1 f7       	brne	.-4      	; 0xfe <lcd_command+0x18>
    _delay_us(1);                   // kurze Pause
   
   
   // Bei Problemen ggf. Pause gem‰ﬂ Datenblatt des LCD Controllers verl‰ngern
   // http://www.mikrocontroller.net/topic/80900
   LCD_PORT &= ~(1<<LCD_EN);		//enabel zur¸cksetzen
 102:	ab 98       	cbi	0x15, 3	; 21
   LCD_PORT |= temp1;               // setzen
   lcd_enable();
 
   temp2 = temp2 << 4;				// unteres Nibble holen
   temp2 = temp2 & 0xF0;            // unteres Nibble maskieren
   LCD_PORT &= 0x0F;
 104:	95 b3       	in	r25, 0x15	; 21
 106:	9f 70       	andi	r25, 0x0F	; 15
 108:	95 bb       	out	0x15, r25	; 21
   LCD_PORT |= temp2;               // setzen
 10a:	95 b3       	in	r25, 0x15	; 21
 10c:	82 95       	swap	r24
 10e:	80 7f       	andi	r24, 0xF0	; 240
 110:	98 2b       	or	r25, r24
 112:	95 bb       	out	0x15, r25	; 21
// erzeugt den Enable-Puls
void lcd_enable(void)
{
   // Bei Problemen ggf. Pause gem‰ﬂ Datenblatt des LCD Controllers einf¸gen
   // http://www.mikrocontroller.net/topic/81974#685882
   LCD_PORT |= (1<<LCD_EN);			// enable setzen
 114:	ab 9a       	sbi	0x15, 3	; 21
 116:	2a 95       	dec	r18
 118:	f1 f7       	brne	.-4      	; 0x116 <lcd_command+0x30>
    _delay_us(1);                   // kurze Pause
   
   
   // Bei Problemen ggf. Pause gem‰ﬂ Datenblatt des LCD Controllers verl‰ngern
   // http://www.mikrocontroller.net/topic/80900
   LCD_PORT &= ~(1<<LCD_EN);		//enabel zur¸cksetzen
 11a:	ab 98       	cbi	0x15, 3	; 21
 11c:	88 e3       	ldi	r24, 0x38	; 56
 11e:	8a 95       	dec	r24
 120:	f1 f7       	brne	.-4      	; 0x11e <lcd_command+0x38>
   LCD_PORT &= 0x0F;
   LCD_PORT |= temp2;               // setzen
   lcd_enable();
   
   _delay_us(42);
}
 122:	08 95       	ret

00000124 <lcd_enable>:
// erzeugt den Enable-Puls
void lcd_enable(void)
{
   // Bei Problemen ggf. Pause gem‰ﬂ Datenblatt des LCD Controllers einf¸gen
   // http://www.mikrocontroller.net/topic/81974#685882
   LCD_PORT |= (1<<LCD_EN);			// enable setzen
 124:	ab 9a       	sbi	0x15, 3	; 21
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	8a 95       	dec	r24
 12a:	f1 f7       	brne	.-4      	; 0x128 <lcd_enable+0x4>
    _delay_us(1);                   // kurze Pause
   
   
   // Bei Problemen ggf. Pause gem‰ﬂ Datenblatt des LCD Controllers verl‰ngern
   // http://www.mikrocontroller.net/topic/80900
   LCD_PORT &= ~(1<<LCD_EN);		//enabel zur¸cksetzen
 12c:	ab 98       	cbi	0x15, 3	; 21
}
 12e:	08 95       	ret

00000130 <lcd_clear>:
 
// Sendet den Befehl zur Lˆschung des Displays
 
void lcd_clear(void)
{
   lcd_command(CLEAR_DISPLAY);
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	0e 94 73 00 	call	0xe6	; 0xe6 <lcd_command>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 136:	88 e8       	ldi	r24, 0x88	; 136
 138:	93 e1       	ldi	r25, 0x13	; 19
 13a:	01 97       	sbiw	r24, 0x01	; 1
 13c:	f1 f7       	brne	.-4      	; 0x13a <lcd_clear+0xa>
   _delay_ms(5);
}
 13e:	08 95       	ret

00000140 <lcd_init>:
// Initialisierung: 
// Muss ganz am Anfang des Programms aufgerufen werden.
 
void lcd_init(void)
{
   LCD_DDR = LCD_DDR | 0xF0 | (1<<LCD_RS) | (1<<LCD_EN);   // Ports auf Ausgang schalten
 140:	84 b3       	in	r24, 0x14	; 20
 142:	8c 6f       	ori	r24, 0xFC	; 252
 144:	84 bb       	out	0x14, r24	; 20
 146:	80 e3       	ldi	r24, 0x30	; 48
 148:	95 e7       	ldi	r25, 0x75	; 117
 14a:	01 97       	sbiw	r24, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <lcd_init+0xa>

   // muss 3mal hintereinander gesendet werden zur Initialisierung
 
   _delay_ms(30);

   LCD_PORT &= 0x0F;			  //Oberes Nibble auf 0 setzen
 14e:	85 b3       	in	r24, 0x15	; 21
 150:	8f 70       	andi	r24, 0x0F	; 15
 152:	85 bb       	out	0x15, r24	; 21
   LCD_PORT |= 0x30;			  //DB7=0  DB6=0  DB5=1  DB4=1	            
 154:	85 b3       	in	r24, 0x15	; 21
 156:	80 63       	ori	r24, 0x30	; 48
 158:	85 bb       	out	0x15, r24	; 21
   LCD_PORT &= ~(1<<LCD_RS);      // RS auf 0
 15a:	aa 98       	cbi	0x15, 2	; 21
// erzeugt den Enable-Puls
void lcd_enable(void)
{
   // Bei Problemen ggf. Pause gem‰ﬂ Datenblatt des LCD Controllers einf¸gen
   // http://www.mikrocontroller.net/topic/81974#685882
   LCD_PORT |= (1<<LCD_EN);			// enable setzen
 15c:	ab 9a       	sbi	0x15, 3	; 21
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 15e:	91 e0       	ldi	r25, 0x01	; 1
 160:	89 2f       	mov	r24, r25
 162:	8a 95       	dec	r24
 164:	f1 f7       	brne	.-4      	; 0x162 <lcd_init+0x22>
    _delay_us(1);                   // kurze Pause
   
   
   // Bei Problemen ggf. Pause gem‰ﬂ Datenblatt des LCD Controllers verl‰ngern
   // http://www.mikrocontroller.net/topic/80900
   LCD_PORT &= ~(1<<LCD_EN);		//enabel zur¸cksetzen
 166:	ab 98       	cbi	0x15, 3	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 168:	e8 e8       	ldi	r30, 0x88	; 136
 16a:	f3 e1       	ldi	r31, 0x13	; 19
 16c:	31 97       	sbiw	r30, 0x01	; 1
 16e:	f1 f7       	brne	.-4      	; 0x16c <lcd_init+0x2c>
// erzeugt den Enable-Puls
void lcd_enable(void)
{
   // Bei Problemen ggf. Pause gem‰ﬂ Datenblatt des LCD Controllers einf¸gen
   // http://www.mikrocontroller.net/topic/81974#685882
   LCD_PORT |= (1<<LCD_EN);			// enable setzen
 170:	ab 9a       	sbi	0x15, 3	; 21
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 172:	89 2f       	mov	r24, r25
 174:	8a 95       	dec	r24
 176:	f1 f7       	brne	.-4      	; 0x174 <lcd_init+0x34>
    _delay_us(1);                   // kurze Pause
   
   
   // Bei Problemen ggf. Pause gem‰ﬂ Datenblatt des LCD Controllers verl‰ngern
   // http://www.mikrocontroller.net/topic/80900
   LCD_PORT &= ~(1<<LCD_EN);		//enabel zur¸cksetzen
 178:	ab 98       	cbi	0x15, 3	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 17a:	28 ee       	ldi	r18, 0xE8	; 232
 17c:	33 e0       	ldi	r19, 0x03	; 3
 17e:	f9 01       	movw	r30, r18
 180:	31 97       	sbiw	r30, 0x01	; 1
 182:	f1 f7       	brne	.-4      	; 0x180 <lcd_init+0x40>
// erzeugt den Enable-Puls
void lcd_enable(void)
{
   // Bei Problemen ggf. Pause gem‰ﬂ Datenblatt des LCD Controllers einf¸gen
   // http://www.mikrocontroller.net/topic/81974#685882
   LCD_PORT |= (1<<LCD_EN);			// enable setzen
 184:	ab 9a       	sbi	0x15, 3	; 21
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 186:	89 2f       	mov	r24, r25
 188:	8a 95       	dec	r24
 18a:	f1 f7       	brne	.-4      	; 0x188 <lcd_init+0x48>
    _delay_us(1);                   // kurze Pause
   
   
   // Bei Problemen ggf. Pause gem‰ﬂ Datenblatt des LCD Controllers verl‰ngern
   // http://www.mikrocontroller.net/topic/80900
   LCD_PORT &= ~(1<<LCD_EN);		//enabel zur¸cksetzen
 18c:	ab 98       	cbi	0x15, 3	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 18e:	f9 01       	movw	r30, r18
 190:	31 97       	sbiw	r30, 0x01	; 1
 192:	f1 f7       	brne	.-4      	; 0x190 <lcd_init+0x50>
   lcd_enable();				  //3.Senden

   _delay_ms(1);
 
   // 4 Bit Modus aktivieren 
   LCD_PORT &= 0x0F;
 194:	85 b3       	in	r24, 0x15	; 21
 196:	8f 70       	andi	r24, 0x0F	; 15
 198:	85 bb       	out	0x15, r24	; 21
   LCD_PORT |= 0x20;
 19a:	ad 9a       	sbi	0x15, 5	; 21
// erzeugt den Enable-Puls
void lcd_enable(void)
{
   // Bei Problemen ggf. Pause gem‰ﬂ Datenblatt des LCD Controllers einf¸gen
   // http://www.mikrocontroller.net/topic/81974#685882
   LCD_PORT |= (1<<LCD_EN);			// enable setzen
 19c:	ab 9a       	sbi	0x15, 3	; 21
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 19e:	9a 95       	dec	r25
 1a0:	f1 f7       	brne	.-4      	; 0x19e <lcd_init+0x5e>
    _delay_us(1);                   // kurze Pause
   
   
   // Bei Problemen ggf. Pause gem‰ﬂ Datenblatt des LCD Controllers verl‰ngern
   // http://www.mikrocontroller.net/topic/80900
   LCD_PORT &= ~(1<<LCD_EN);		//enabel zur¸cksetzen
 1a2:	ab 98       	cbi	0x15, 3	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1a4:	c9 01       	movw	r24, r18
 1a6:	01 97       	sbiw	r24, 0x01	; 1
 1a8:	f1 f7       	brne	.-4      	; 0x1a6 <lcd_init+0x66>
   LCD_PORT |= 0x20;
   lcd_enable();
   _delay_ms(1);
 
   // 4Bit / 2 Zeilen / 5x7
   lcd_command(0x28);
 1aa:	88 e2       	ldi	r24, 0x28	; 40
 1ac:	0e 94 73 00 	call	0xe6	; 0xe6 <lcd_command>
    
   // Display ein / Cursor aus / kein Blinken
   lcd_command(0x0C); 
 1b0:	8c e0       	ldi	r24, 0x0C	; 12
 1b2:	0e 94 73 00 	call	0xe6	; 0xe6 <lcd_command>
 
   // inkrement / kein Scrollen
   lcd_command(0x06);
 1b6:	86 e0       	ldi	r24, 0x06	; 6
 1b8:	0e 94 73 00 	call	0xe6	; 0xe6 <lcd_command>
 
   lcd_clear();
 1bc:	0e 94 98 00 	call	0x130	; 0x130 <lcd_clear>
}
 1c0:	08 95       	ret

000001c2 <lcd_home>:
 
// Sendet den Befehl: Cursor Home
 
void lcd_home(void)
{
   lcd_command(CURSOR_HOME);
 1c2:	82 e0       	ldi	r24, 0x02	; 2
 1c4:	0e 94 73 00 	call	0xe6	; 0xe6 <lcd_command>
 1c8:	88 e8       	ldi	r24, 0x88	; 136
 1ca:	93 e1       	ldi	r25, 0x13	; 19
 1cc:	01 97       	sbiw	r24, 0x01	; 1
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <lcd_home+0xa>
   _delay_ms(5);
}
 1d0:	08 95       	ret

000001d2 <set_cursor>:
 
void set_cursor(uint8_t x, uint8_t y)
{
  uint8_t tmp;
 
  switch (y) {
 1d2:	62 30       	cpi	r22, 0x02	; 2
 1d4:	61 f0       	breq	.+24     	; 0x1ee <set_cursor+0x1c>
 1d6:	63 30       	cpi	r22, 0x03	; 3
 1d8:	18 f4       	brcc	.+6      	; 0x1e0 <set_cursor+0xe>
 1da:	61 30       	cpi	r22, 0x01	; 1
 1dc:	79 f4       	brne	.+30     	; 0x1fc <set_cursor+0x2a>
 1de:	05 c0       	rjmp	.+10     	; 0x1ea <set_cursor+0x18>
 1e0:	63 30       	cpi	r22, 0x03	; 3
 1e2:	39 f0       	breq	.+14     	; 0x1f2 <set_cursor+0x20>
 1e4:	64 30       	cpi	r22, 0x04	; 4
 1e6:	51 f4       	brne	.+20     	; 0x1fc <set_cursor+0x2a>
 1e8:	06 c0       	rjmp	.+12     	; 0x1f6 <set_cursor+0x24>
    case 1: tmp=0x80+0x00+x; break;    // 1. Zeile
 1ea:	80 58       	subi	r24, 0x80	; 128
 1ec:	05 c0       	rjmp	.+10     	; 0x1f8 <set_cursor+0x26>
    case 2: tmp=0x80+0x40+x; break;    // 2. Zeile
 1ee:	80 54       	subi	r24, 0x40	; 64
 1f0:	03 c0       	rjmp	.+6      	; 0x1f8 <set_cursor+0x26>
    case 3: tmp=0x80+0x10+x; break;    // 3. Zeile
 1f2:	80 57       	subi	r24, 0x70	; 112
 1f4:	01 c0       	rjmp	.+2      	; 0x1f8 <set_cursor+0x26>
    case 4: tmp=0x80+0x50+x; break;    // 4. Zeile
 1f6:	80 53       	subi	r24, 0x30	; 48
    default: return;                   // f¸r den Fall einer falschen Zeile
  }
  lcd_command(tmp);
 1f8:	0e 94 73 00 	call	0xe6	; 0xe6 <lcd_command>
 1fc:	08 95       	ret

000001fe <lcd_string>:
}
 
// Schreibt einen String auf das LCD
 
void lcd_string(char *data)
{
 1fe:	cf 93       	push	r28
 200:	df 93       	push	r29
 202:	ec 01       	movw	r28, r24
 204:	03 c0       	rjmp	.+6      	; 0x20c <lcd_string+0xe>
    while(*data) {
        lcd_data(*data);
 206:	0e 94 54 00 	call	0xa8	; 0xa8 <lcd_data>
        data++;
 20a:	21 96       	adiw	r28, 0x01	; 1
 
// Schreibt einen String auf das LCD
 
void lcd_string(char *data)
{
    while(*data) {
 20c:	88 81       	ld	r24, Y
 20e:	88 23       	and	r24, r24
 210:	d1 f7       	brne	.-12     	; 0x206 <lcd_string+0x8>
        lcd_data(*data);
        data++;
    }
}
 212:	df 91       	pop	r29
 214:	cf 91       	pop	r28
 216:	08 95       	ret

00000218 <_exit>:
 218:	f8 94       	cli

0000021a <__stop_program>:
 21a:	ff cf       	rjmp	.-2      	; 0x21a <__stop_program>
