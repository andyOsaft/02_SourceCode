
t3_systemController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ca6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000f4  00800060  00000ca6  00000d3a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800154  00800154  00000e2e  2**0
                  ALLOC
  3 .debug_aranges 00000120  00000000  00000000  00000e2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000300  00000000  00000000  00000f4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000170d  00000000  00000000  0000124e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000070e  00000000  00000000  0000295b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000014f1  00000000  00000000  00003069  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002a0  00000000  00000000  0000455c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004f0  00000000  00000000  000047fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000107e  00000000  00000000  00004cec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  00005d6a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 a1 03 	jmp	0x742	; 0x742 <__vector_1>
   8:	0c 94 ab 03 	jmp	0x756	; 0x756 <__vector_2>
   c:	0c 94 b5 03 	jmp	0x76a	; 0x76a <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ea       	ldi	r30, 0xA6	; 166
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a4 35       	cpi	r26, 0x54	; 84
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	a4 e5       	ldi	r26, 0x54	; 84
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 35       	cpi	r26, 0x5C	; 92
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 2b 01 	call	0x256	; 0x256 <main>
  8a:	0c 94 51 06 	jmp	0xca2	; 0xca2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <updateHeatController>:
						   abtasten	  umrechnen            Sensor-Formel							

******************************************************************************************************/

void updateHeatController(uint8_t targetTemp)
{
  92:	1f 93       	push	r17
  94:	18 2f       	mov	r17, r24
	uint16_t voltInside;
	uint16_t tempInside;

	//Lese Sensor-Spannung (Ergebnis is Volt*100)
	voltInside = adcRead5(6);
  96:	86 e0       	ldi	r24, 0x06	; 6
  98:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <adcRead5>
	//Wandle Ergebnis in Temperatur-Wert um.
	tempInside = (voltInside*(uint16_t)145)-14377;
	
	//Int Division mit korrekter Rundung
	tempInside = (tempInside+(uint16_t)(100>>1))/(uint16_t)100;
  9c:	21 e9       	ldi	r18, 0x91	; 145
  9e:	30 e0       	ldi	r19, 0x00	; 0
  a0:	ac 01       	movw	r20, r24
  a2:	42 9f       	mul	r20, r18
  a4:	c0 01       	movw	r24, r0
  a6:	43 9f       	mul	r20, r19
  a8:	90 0d       	add	r25, r0
  aa:	52 9f       	mul	r21, r18
  ac:	90 0d       	add	r25, r0
  ae:	11 24       	eor	r1, r1
  b0:	87 5f       	subi	r24, 0xF7	; 247
  b2:	97 43       	sbci	r25, 0x37	; 55
  b4:	64 e6       	ldi	r22, 0x64	; 100
  b6:	70 e0       	ldi	r23, 0x00	; 0
  b8:	0e 94 17 06 	call	0xc2e	; 0xc2e <__udivmodhi4>
	
	//Control-Funktion
	//Muss geheizt werden?
	if ((targetTemp-1)<tempInside)
  bc:	41 2f       	mov	r20, r17
  be:	50 e0       	ldi	r21, 0x00	; 0
  c0:	ca 01       	movw	r24, r20
  c2:	01 97       	sbiw	r24, 0x01	; 1
  c4:	86 17       	cp	r24, r22
  c6:	97 07       	cpc	r25, r23
  c8:	18 f4       	brcc	.+6      	; 0xd0 <updateHeatController+0x3e>
		//pwmUpdate(63);
		pwmInit(93);
  ca:	8d e5       	ldi	r24, 0x5D	; 93
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	07 c0       	rjmp	.+14     	; 0xde <updateHeatController+0x4c>
		//pwmUpdate(93);
	//Muss gekühlt werden?
	else if ((targetTemp+1)>tempInside)
  d0:	4f 5f       	subi	r20, 0xFF	; 255
  d2:	5f 4f       	sbci	r21, 0xFF	; 255
  d4:	64 17       	cp	r22, r20
  d6:	75 07       	cpc	r23, r21
  d8:	20 f4       	brcc	.+8      	; 0xe2 <updateHeatController+0x50>
		//pwmUpdate(31);
		pwmInit(61);
  da:	8d e3       	ldi	r24, 0x3D	; 61
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	0e 94 15 03 	call	0x62a	; 0x62a <pwmInit>
		//pwmUpdate(61);
}
  e2:	1f 91       	pop	r17
  e4:	08 95       	ret

000000e6 <lcd_data>:
 
void lcd_data(unsigned char temp1)
{
   unsigned char temp2 = temp1;
 
   LCD_PORT |= (1<<LCD_RS);        	// RS auf 1 setzen
  e6:	aa 9a       	sbi	0x15, 2	; 21
 
   //High Teil des Zeichens ausgeben 			
   temp1 = temp1 & 0xF0;			//das low nibble von temp1 auf null setzen; 
   LCD_PORT &= 0x0F;				//das high nibble in PORTD wird auf null gesetzt				
  e8:	95 b3       	in	r25, 0x15	; 21
  ea:	9f 70       	andi	r25, 0x0F	; 15
  ec:	95 bb       	out	0x15, r25	; 21
   LCD_PORT |= temp1;               //das high nibble von temp1 wird PORTD zugewiesen
  ee:	25 b3       	in	r18, 0x15	; 21
  f0:	98 2f       	mov	r25, r24
  f2:	90 7f       	andi	r25, 0xF0	; 240
  f4:	92 2b       	or	r25, r18
  f6:	95 bb       	out	0x15, r25	; 21
// erzeugt den Enable-Puls
void lcd_enable(void)
{
   // Bei Problemen ggf. Pause gemäß Datenblatt des LCD Controllers einfügen
   // http://www.mikrocontroller.net/topic/81974#685882
   LCD_PORT |= (1<<LCD_EN);			// enable setzen
  f8:	ab 9a       	sbi	0x15, 3	; 21
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  fa:	21 e0       	ldi	r18, 0x01	; 1
  fc:	92 2f       	mov	r25, r18
  fe:	9a 95       	dec	r25
 100:	f1 f7       	brne	.-4      	; 0xfe <lcd_data+0x18>
    _delay_us(1);                   // kurze Pause
   
   
   // Bei Problemen ggf. Pause gemäß Datenblatt des LCD Controllers verlängern
   // http://www.mikrocontroller.net/topic/80900
   LCD_PORT &= ~(1<<LCD_EN);		//enabel zurücksetzen
 102:	ab 98       	cbi	0x15, 3	; 21
   lcd_enable();					//E wird kurz gesetzt und dann wieder zurückgesetzt
   
   //Low Teil des Zeichens ausgeben
   temp2 = temp2 << 4;				//das low nibble von temp2 wird auf das high nibble verschoben	
   temp2 = temp2 & 0xF0;			//das alte low nibble von temp2 wird zu 0 gesetzt
   LCD_PORT &= 0x0F;				//das high nibble in PORTD wird auf null gesetzt
 104:	95 b3       	in	r25, 0x15	; 21
 106:	9f 70       	andi	r25, 0x0F	; 15
 108:	95 bb       	out	0x15, r25	; 21
   LCD_PORT |= temp2;               //das high nibble von temp2 wird PORTD zugewiesen
 10a:	95 b3       	in	r25, 0x15	; 21
 10c:	82 95       	swap	r24
 10e:	80 7f       	andi	r24, 0xF0	; 240
 110:	98 2b       	or	r25, r24
 112:	95 bb       	out	0x15, r25	; 21
// erzeugt den Enable-Puls
void lcd_enable(void)
{
   // Bei Problemen ggf. Pause gemäß Datenblatt des LCD Controllers einfügen
   // http://www.mikrocontroller.net/topic/81974#685882
   LCD_PORT |= (1<<LCD_EN);			// enable setzen
 114:	ab 9a       	sbi	0x15, 3	; 21
 116:	2a 95       	dec	r18
 118:	f1 f7       	brne	.-4      	; 0x116 <lcd_data+0x30>
    _delay_us(1);                   // kurze Pause
   
   
   // Bei Problemen ggf. Pause gemäß Datenblatt des LCD Controllers verlängern
   // http://www.mikrocontroller.net/topic/80900
   LCD_PORT &= ~(1<<LCD_EN);		//enabel zurücksetzen
 11a:	ab 98       	cbi	0x15, 3	; 21
 11c:	88 e3       	ldi	r24, 0x38	; 56
 11e:	8a 95       	dec	r24
 120:	f1 f7       	brne	.-4      	; 0x11e <lcd_data+0x38>
   LCD_PORT &= 0x0F;				//das high nibble in PORTD wird auf null gesetzt
   LCD_PORT |= temp2;               //das high nibble von temp2 wird PORTD zugewiesen
   lcd_enable();					//E wird kurz gesetzt und dann wieder zurückgesetzt
   
   _delay_us(42);
}
 122:	08 95       	ret

00000124 <lcd_command>:
 
void lcd_command(unsigned char temp1)
{
   unsigned char temp2 = temp1;
 
   LCD_PORT &= ~(1<<LCD_RS);        // RS auf 0 setzen
 124:	aa 98       	cbi	0x15, 2	; 21
 
   temp1 = temp1 & 0xF0;            // maskieren
   LCD_PORT &= 0x0F;
 126:	95 b3       	in	r25, 0x15	; 21
 128:	9f 70       	andi	r25, 0x0F	; 15
 12a:	95 bb       	out	0x15, r25	; 21
   LCD_PORT |= temp1;               // setzen
 12c:	25 b3       	in	r18, 0x15	; 21
 12e:	98 2f       	mov	r25, r24
 130:	90 7f       	andi	r25, 0xF0	; 240
 132:	92 2b       	or	r25, r18
 134:	95 bb       	out	0x15, r25	; 21
// erzeugt den Enable-Puls
void lcd_enable(void)
{
   // Bei Problemen ggf. Pause gemäß Datenblatt des LCD Controllers einfügen
   // http://www.mikrocontroller.net/topic/81974#685882
   LCD_PORT |= (1<<LCD_EN);			// enable setzen
 136:	ab 9a       	sbi	0x15, 3	; 21
 138:	21 e0       	ldi	r18, 0x01	; 1
 13a:	92 2f       	mov	r25, r18
 13c:	9a 95       	dec	r25
 13e:	f1 f7       	brne	.-4      	; 0x13c <lcd_command+0x18>
    _delay_us(1);                   // kurze Pause
   
   
   // Bei Problemen ggf. Pause gemäß Datenblatt des LCD Controllers verlängern
   // http://www.mikrocontroller.net/topic/80900
   LCD_PORT &= ~(1<<LCD_EN);		//enabel zurücksetzen
 140:	ab 98       	cbi	0x15, 3	; 21
   LCD_PORT |= temp1;               // setzen
   lcd_enable();
 
   temp2 = temp2 << 4;				// unteres Nibble holen
   temp2 = temp2 & 0xF0;            // unteres Nibble maskieren
   LCD_PORT &= 0x0F;
 142:	95 b3       	in	r25, 0x15	; 21
 144:	9f 70       	andi	r25, 0x0F	; 15
 146:	95 bb       	out	0x15, r25	; 21
   LCD_PORT |= temp2;               // setzen
 148:	95 b3       	in	r25, 0x15	; 21
 14a:	82 95       	swap	r24
 14c:	80 7f       	andi	r24, 0xF0	; 240
 14e:	98 2b       	or	r25, r24
 150:	95 bb       	out	0x15, r25	; 21
// erzeugt den Enable-Puls
void lcd_enable(void)
{
   // Bei Problemen ggf. Pause gemäß Datenblatt des LCD Controllers einfügen
   // http://www.mikrocontroller.net/topic/81974#685882
   LCD_PORT |= (1<<LCD_EN);			// enable setzen
 152:	ab 9a       	sbi	0x15, 3	; 21
 154:	2a 95       	dec	r18
 156:	f1 f7       	brne	.-4      	; 0x154 <lcd_command+0x30>
    _delay_us(1);                   // kurze Pause
   
   
   // Bei Problemen ggf. Pause gemäß Datenblatt des LCD Controllers verlängern
   // http://www.mikrocontroller.net/topic/80900
   LCD_PORT &= ~(1<<LCD_EN);		//enabel zurücksetzen
 158:	ab 98       	cbi	0x15, 3	; 21
 15a:	88 e3       	ldi	r24, 0x38	; 56
 15c:	8a 95       	dec	r24
 15e:	f1 f7       	brne	.-4      	; 0x15c <lcd_command+0x38>
   LCD_PORT &= 0x0F;
   LCD_PORT |= temp2;               // setzen
   lcd_enable();
   
   _delay_us(42);
}
 160:	08 95       	ret

00000162 <lcd_enable>:
// erzeugt den Enable-Puls
void lcd_enable(void)
{
   // Bei Problemen ggf. Pause gemäß Datenblatt des LCD Controllers einfügen
   // http://www.mikrocontroller.net/topic/81974#685882
   LCD_PORT |= (1<<LCD_EN);			// enable setzen
 162:	ab 9a       	sbi	0x15, 3	; 21
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	8a 95       	dec	r24
 168:	f1 f7       	brne	.-4      	; 0x166 <lcd_enable+0x4>
    _delay_us(1);                   // kurze Pause
   
   
   // Bei Problemen ggf. Pause gemäß Datenblatt des LCD Controllers verlängern
   // http://www.mikrocontroller.net/topic/80900
   LCD_PORT &= ~(1<<LCD_EN);		//enabel zurücksetzen
 16a:	ab 98       	cbi	0x15, 3	; 21
}
 16c:	08 95       	ret

0000016e <lcd_clear>:
 
// Sendet den Befehl zur Löschung des Displays
 
void lcd_clear(void)
{
   lcd_command(CLEAR_DISPLAY);
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	0e 94 92 00 	call	0x124	; 0x124 <lcd_command>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 174:	88 e8       	ldi	r24, 0x88	; 136
 176:	93 e1       	ldi	r25, 0x13	; 19
 178:	01 97       	sbiw	r24, 0x01	; 1
 17a:	f1 f7       	brne	.-4      	; 0x178 <lcd_clear+0xa>
   _delay_ms(5);
}
 17c:	08 95       	ret

0000017e <lcd_init>:
// Initialisierung: 
// Muss ganz am Anfang des Programms aufgerufen werden.
 
void lcd_init(void)
{
   LCD_DDR = LCD_DDR | 0xF0 | (1<<LCD_RS) | (1<<LCD_EN);   // Ports auf Ausgang schalten
 17e:	84 b3       	in	r24, 0x14	; 20
 180:	8c 6f       	ori	r24, 0xFC	; 252
 182:	84 bb       	out	0x14, r24	; 20
 184:	80 e3       	ldi	r24, 0x30	; 48
 186:	95 e7       	ldi	r25, 0x75	; 117
 188:	01 97       	sbiw	r24, 0x01	; 1
 18a:	f1 f7       	brne	.-4      	; 0x188 <lcd_init+0xa>

   // muss 3mal hintereinander gesendet werden zur Initialisierung
 
   _delay_ms(30);

   LCD_PORT &= 0x0F;			  //Oberes Nibble auf 0 setzen
 18c:	85 b3       	in	r24, 0x15	; 21
 18e:	8f 70       	andi	r24, 0x0F	; 15
 190:	85 bb       	out	0x15, r24	; 21
   LCD_PORT |= 0x30;			  //DB7=0  DB6=0  DB5=1  DB4=1	            
 192:	85 b3       	in	r24, 0x15	; 21
 194:	80 63       	ori	r24, 0x30	; 48
 196:	85 bb       	out	0x15, r24	; 21
   LCD_PORT &= ~(1<<LCD_RS);      // RS auf 0
 198:	aa 98       	cbi	0x15, 2	; 21
// erzeugt den Enable-Puls
void lcd_enable(void)
{
   // Bei Problemen ggf. Pause gemäß Datenblatt des LCD Controllers einfügen
   // http://www.mikrocontroller.net/topic/81974#685882
   LCD_PORT |= (1<<LCD_EN);			// enable setzen
 19a:	ab 9a       	sbi	0x15, 3	; 21
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 19c:	91 e0       	ldi	r25, 0x01	; 1
 19e:	89 2f       	mov	r24, r25
 1a0:	8a 95       	dec	r24
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <lcd_init+0x22>
    _delay_us(1);                   // kurze Pause
   
   
   // Bei Problemen ggf. Pause gemäß Datenblatt des LCD Controllers verlängern
   // http://www.mikrocontroller.net/topic/80900
   LCD_PORT &= ~(1<<LCD_EN);		//enabel zurücksetzen
 1a4:	ab 98       	cbi	0x15, 3	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1a6:	e8 e8       	ldi	r30, 0x88	; 136
 1a8:	f3 e1       	ldi	r31, 0x13	; 19
 1aa:	31 97       	sbiw	r30, 0x01	; 1
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <lcd_init+0x2c>
// erzeugt den Enable-Puls
void lcd_enable(void)
{
   // Bei Problemen ggf. Pause gemäß Datenblatt des LCD Controllers einfügen
   // http://www.mikrocontroller.net/topic/81974#685882
   LCD_PORT |= (1<<LCD_EN);			// enable setzen
 1ae:	ab 9a       	sbi	0x15, 3	; 21
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 1b0:	89 2f       	mov	r24, r25
 1b2:	8a 95       	dec	r24
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <lcd_init+0x34>
    _delay_us(1);                   // kurze Pause
   
   
   // Bei Problemen ggf. Pause gemäß Datenblatt des LCD Controllers verlängern
   // http://www.mikrocontroller.net/topic/80900
   LCD_PORT &= ~(1<<LCD_EN);		//enabel zurücksetzen
 1b6:	ab 98       	cbi	0x15, 3	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1b8:	28 ee       	ldi	r18, 0xE8	; 232
 1ba:	33 e0       	ldi	r19, 0x03	; 3
 1bc:	f9 01       	movw	r30, r18
 1be:	31 97       	sbiw	r30, 0x01	; 1
 1c0:	f1 f7       	brne	.-4      	; 0x1be <lcd_init+0x40>
// erzeugt den Enable-Puls
void lcd_enable(void)
{
   // Bei Problemen ggf. Pause gemäß Datenblatt des LCD Controllers einfügen
   // http://www.mikrocontroller.net/topic/81974#685882
   LCD_PORT |= (1<<LCD_EN);			// enable setzen
 1c2:	ab 9a       	sbi	0x15, 3	; 21
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 1c4:	89 2f       	mov	r24, r25
 1c6:	8a 95       	dec	r24
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <lcd_init+0x48>
    _delay_us(1);                   // kurze Pause
   
   
   // Bei Problemen ggf. Pause gemäß Datenblatt des LCD Controllers verlängern
   // http://www.mikrocontroller.net/topic/80900
   LCD_PORT &= ~(1<<LCD_EN);		//enabel zurücksetzen
 1ca:	ab 98       	cbi	0x15, 3	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1cc:	f9 01       	movw	r30, r18
 1ce:	31 97       	sbiw	r30, 0x01	; 1
 1d0:	f1 f7       	brne	.-4      	; 0x1ce <lcd_init+0x50>
   lcd_enable();				  //3.Senden

   _delay_ms(1);
 
   // 4 Bit Modus aktivieren 
   LCD_PORT &= 0x0F;
 1d2:	85 b3       	in	r24, 0x15	; 21
 1d4:	8f 70       	andi	r24, 0x0F	; 15
 1d6:	85 bb       	out	0x15, r24	; 21
   LCD_PORT |= 0x20;
 1d8:	ad 9a       	sbi	0x15, 5	; 21
// erzeugt den Enable-Puls
void lcd_enable(void)
{
   // Bei Problemen ggf. Pause gemäß Datenblatt des LCD Controllers einfügen
   // http://www.mikrocontroller.net/topic/81974#685882
   LCD_PORT |= (1<<LCD_EN);			// enable setzen
 1da:	ab 9a       	sbi	0x15, 3	; 21
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 1dc:	9a 95       	dec	r25
 1de:	f1 f7       	brne	.-4      	; 0x1dc <lcd_init+0x5e>
    _delay_us(1);                   // kurze Pause
   
   
   // Bei Problemen ggf. Pause gemäß Datenblatt des LCD Controllers verlängern
   // http://www.mikrocontroller.net/topic/80900
   LCD_PORT &= ~(1<<LCD_EN);		//enabel zurücksetzen
 1e0:	ab 98       	cbi	0x15, 3	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1e2:	c9 01       	movw	r24, r18
 1e4:	01 97       	sbiw	r24, 0x01	; 1
 1e6:	f1 f7       	brne	.-4      	; 0x1e4 <lcd_init+0x66>
   LCD_PORT |= 0x20;
   lcd_enable();
   _delay_ms(1);
 
   // 4Bit / 2 Zeilen / 5x7
   lcd_command(0x28);
 1e8:	88 e2       	ldi	r24, 0x28	; 40
 1ea:	0e 94 92 00 	call	0x124	; 0x124 <lcd_command>
    
   // Display ein / Cursor aus / kein Blinken
   lcd_command(0x0C); 
 1ee:	8c e0       	ldi	r24, 0x0C	; 12
 1f0:	0e 94 92 00 	call	0x124	; 0x124 <lcd_command>
 
   // inkrement / kein Scrollen
   lcd_command(0x06);
 1f4:	86 e0       	ldi	r24, 0x06	; 6
 1f6:	0e 94 92 00 	call	0x124	; 0x124 <lcd_command>
 
   lcd_clear();
 1fa:	0e 94 b7 00 	call	0x16e	; 0x16e <lcd_clear>
}
 1fe:	08 95       	ret

00000200 <lcd_home>:
 
// Sendet den Befehl: Cursor Home
 
void lcd_home(void)
{
   lcd_command(CURSOR_HOME);
 200:	82 e0       	ldi	r24, 0x02	; 2
 202:	0e 94 92 00 	call	0x124	; 0x124 <lcd_command>
 206:	88 e8       	ldi	r24, 0x88	; 136
 208:	93 e1       	ldi	r25, 0x13	; 19
 20a:	01 97       	sbiw	r24, 0x01	; 1
 20c:	f1 f7       	brne	.-4      	; 0x20a <lcd_home+0xa>
   _delay_ms(5);
}
 20e:	08 95       	ret

00000210 <set_cursor>:
 
void set_cursor(uint8_t x, uint8_t y)
{
  uint8_t tmp;
 
  switch (y) {
 210:	62 30       	cpi	r22, 0x02	; 2
 212:	61 f0       	breq	.+24     	; 0x22c <set_cursor+0x1c>
 214:	63 30       	cpi	r22, 0x03	; 3
 216:	18 f4       	brcc	.+6      	; 0x21e <set_cursor+0xe>
 218:	61 30       	cpi	r22, 0x01	; 1
 21a:	79 f4       	brne	.+30     	; 0x23a <set_cursor+0x2a>
 21c:	05 c0       	rjmp	.+10     	; 0x228 <set_cursor+0x18>
 21e:	63 30       	cpi	r22, 0x03	; 3
 220:	39 f0       	breq	.+14     	; 0x230 <set_cursor+0x20>
 222:	64 30       	cpi	r22, 0x04	; 4
 224:	51 f4       	brne	.+20     	; 0x23a <set_cursor+0x2a>
 226:	06 c0       	rjmp	.+12     	; 0x234 <set_cursor+0x24>
    case 1: tmp=0x80+0x00+x; break;    // 1. Zeile
 228:	80 58       	subi	r24, 0x80	; 128
 22a:	05 c0       	rjmp	.+10     	; 0x236 <set_cursor+0x26>
    case 2: tmp=0x80+0x40+x; break;    // 2. Zeile
 22c:	80 54       	subi	r24, 0x40	; 64
 22e:	03 c0       	rjmp	.+6      	; 0x236 <set_cursor+0x26>
    case 3: tmp=0x80+0x10+x; break;    // 3. Zeile
 230:	80 57       	subi	r24, 0x70	; 112
 232:	01 c0       	rjmp	.+2      	; 0x236 <set_cursor+0x26>
    case 4: tmp=0x80+0x50+x; break;    // 4. Zeile
 234:	80 53       	subi	r24, 0x30	; 48
    default: return;                   // für den Fall einer falschen Zeile
  }
  lcd_command(tmp);
 236:	0e 94 92 00 	call	0x124	; 0x124 <lcd_command>
 23a:	08 95       	ret

0000023c <lcd_string>:
}
 
// Schreibt einen String auf das LCD
 
void lcd_string(char *data)
{
 23c:	cf 93       	push	r28
 23e:	df 93       	push	r29
 240:	ec 01       	movw	r28, r24
 242:	03 c0       	rjmp	.+6      	; 0x24a <lcd_string+0xe>
    while(*data) {
        lcd_data(*data);
 244:	0e 94 73 00 	call	0xe6	; 0xe6 <lcd_data>
        data++;
 248:	21 96       	adiw	r28, 0x01	; 1
 
// Schreibt einen String auf das LCD
 
void lcd_string(char *data)
{
    while(*data) {
 24a:	88 81       	ld	r24, Y
 24c:	88 23       	and	r24, r24
 24e:	d1 f7       	brne	.-12     	; 0x244 <lcd_string+0x8>
        lcd_data(*data);
        data++;
    }
}
 250:	df 91       	pop	r29
 252:	cf 91       	pop	r28
 254:	08 95       	ret

00000256 <main>:
#include "menuScreens.h"




int main (void) {            
 256:	2f 92       	push	r2
 258:	3f 92       	push	r3
 25a:	4f 92       	push	r4
 25c:	5f 92       	push	r5
 25e:	6f 92       	push	r6
 260:	7f 92       	push	r7
 262:	8f 92       	push	r8
 264:	9f 92       	push	r9
 266:	af 92       	push	r10
 268:	bf 92       	push	r11
 26a:	cf 92       	push	r12
 26c:	df 92       	push	r13
 26e:	ef 92       	push	r14
 270:	ff 92       	push	r15
 272:	1f 93       	push	r17
 274:	df 93       	push	r29
 276:	cf 93       	push	r28
 278:	cd b7       	in	r28, 0x3d	; 61
 27a:	de b7       	in	r29, 0x3e	; 62
 27c:	62 97       	sbiw	r28, 0x12	; 18
 27e:	0f b6       	in	r0, 0x3f	; 63
 280:	f8 94       	cli
 282:	de bf       	out	0x3e, r29	; 62
 284:	0f be       	out	0x3f, r0	; 63
 286:	cd bf       	out	0x3d, r28	; 61
	//Variablen

	//PWM-Wert für Heizungsservos
	//MIN = 31 (1ms)
	//MAX = 63 (2ms)
	volatile uint16_t pwmWert=31;
 288:	8f e1       	ldi	r24, 0x1F	; 31
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	98 87       	std	Y+8, r25	; 0x08
 28e:	8f 83       	std	Y+7, r24	; 0x07
	} currentMode;
	
	//flag um zu speichern ob heat- manual oder auto mode zuletzt aktiv war
	//=1 -> Manual Mode
	//=2 -> Auto Mode
	volatile uint8_t heatControlFlag=0;
 290:	1a 82       	std	Y+2, r1	; 0x02
	
	//Flags für Buttons(Menü-Button)
	//gedrückt       -> =0
	//lange gedrückt -> =2
	//ungedrückt     -> =1
	volatile uint8_t buttonLinks=1;
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	8b 83       	std	Y+3, r24	; 0x03
	volatile uint8_t buttonMitte=1;
 296:	8c 83       	std	Y+4, r24	; 0x04
	volatile uint8_t buttonRechts=1;
 298:	8d 83       	std	Y+5, r24	; 0x05

	//Temperatur Variable für den Heat Control Auto Mode
	//Wert in °C
	//Uint16_t wegen Umwandlung in string mit utoa funktion
	volatile uint16_t tempSollwert=20;
 29a:	84 e1       	ldi	r24, 0x14	; 20
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	9a 87       	std	Y+10, r25	; 0x0a
 2a0:	89 87       	std	Y+9, r24	; 0x09

	//Variablen für die beiden Batterie-Spannungen
	volatile uint16_t batt1Volt=0;
 2a2:	1c 86       	std	Y+12, r1	; 0x0c
 2a4:	1b 86       	std	Y+11, r1	; 0x0b
	volatile uint16_t batt2Volt=0;
 2a6:	1e 86       	std	Y+14, r1	; 0x0e
 2a8:	1d 86       	std	Y+13, r1	; 0x0d

	//Variablen für die beiden Temperatur-Sensor Spannungen
	//Umrechnung in Temperatur erfolgt in Display Routine.
	volatile uint16_t temp1Volt=0;
 2aa:	18 8a       	std	Y+16, r1	; 0x10
 2ac:	1f 86       	std	Y+15, r1	; 0x0f
	volatile uint16_t temp2Volt=0;
 2ae:	1a 8a       	std	Y+18, r1	; 0x12
 2b0:	19 8a       	std	Y+17, r1	; 0x11

	//Variable die im Manual Heizungs Mode die Anzahl der auf dem Display dargestellten
	//"Heiz-Punkte" einstellt.
	volatile uint8_t heizLevel=0;
 2b2:	1e 82       	std	Y+6, r1	; 0x06

//-------------------------------------------------------------------------------------	
	
	
	//Initialisierungen
	pwmWert=88;		
 2b4:	88 e5       	ldi	r24, 0x58	; 88
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	98 87       	std	Y+8, r25	; 0x08
 2ba:	8f 83       	std	Y+7, r24	; 0x07
	myInit();
 2bc:	0e 94 87 03 	call	0x70e	; 0x70e <myInit>
	adcInit();
 2c0:	0e 94 43 03 	call	0x686	; 0x686 <adcInit>
	pwmInit(pwmWert);
 2c4:	8f 81       	ldd	r24, Y+7	; 0x07
 2c6:	98 85       	ldd	r25, Y+8	; 0x08
 2c8:	0e 94 15 03 	call	0x62a	; 0x62a <pwmInit>
	lcd_init();
 2cc:	0e 94 bf 00 	call	0x17e	; 0x17e <lcd_init>
	menuInit();
 2d0:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <menuInit>

    PORTD |= (1<<BIT7);
 2d4:	97 9a       	sbi	0x12, 7	; 18
	//Start system in heat control auto mode
	//display regarding screen -> gleichbleibend heizen
	currentMode = heatControlManualMode;
 2d6:	19 82       	std	Y+1, r1	; 0x01
	//screenHeatingManual(2, &heizLevel);
	//_delay_ms(3000);

	//enable interrupts for wakeup sleepmode
	sei();
 2d8:	78 94       	sei
 2da:	28 ee       	ldi	r18, 0xE8	; 232
 2dc:	33 e0       	ldi	r19, 0x03	; 3

	while(1)  
	{   
		_delay_ms(100);

		pwmWert=99;
 2de:	e3 e6       	ldi	r30, 0x63	; 99
 2e0:	4e 2e       	mov	r4, r30
 2e2:	51 2c       	mov	r5, r1
 2e4:	76 e0       	ldi	r23, 0x06	; 6
 2e6:	e7 2e       	mov	r14, r23
 2e8:	f1 2c       	mov	r15, r1
 2ea:	ec 0e       	add	r14, r28
 2ec:	fd 1e       	adc	r15, r29
					{
						pwmWert += 2;
					}
					else
					{
						pwmWert=120;
 2ee:	68 e7       	ldi	r22, 0x78	; 120
 2f0:	26 2e       	mov	r2, r22
 2f2:	31 2c       	mov	r3, r1
					{
						pwmWert -= 2;
					}
					else
					{
						pwmWert=62;
 2f4:	5e e3       	ldi	r21, 0x3E	; 62
 2f6:	a5 2e       	mov	r10, r21
 2f8:	b1 2c       	mov	r11, r1
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 2fa:	12 e8       	ldi	r17, 0x82	; 130
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 2fc:	44 e6       	ldi	r20, 0x64	; 100
 2fe:	c4 2e       	mov	r12, r20
 300:	d1 2c       	mov	r13, r1
					{
						tempSollwert += 1;
					}
					else
					{
						tempSollwert=26;
 302:	9a e1       	ldi	r25, 0x1A	; 26
 304:	89 2e       	mov	r8, r25
 306:	91 2c       	mov	r9, r1
					{
						tempSollwert -= 1;
					}
					else
					{
						tempSollwert=16;
 308:	80 e1       	ldi	r24, 0x10	; 16
 30a:	68 2e       	mov	r6, r24
 30c:	71 2c       	mov	r7, r1
 30e:	05 c0       	rjmp	.+10     	; 0x31a <main+0xc4>
 310:	c6 01       	movw	r24, r12
 312:	01 97       	sbiw	r24, 0x01	; 1
 314:	f1 f7       	brne	.-4      	; 0x312 <main+0xbc>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 316:	21 50       	subi	r18, 0x01	; 1
 318:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 31a:	21 15       	cp	r18, r1
 31c:	31 05       	cpc	r19, r1
 31e:	c1 f7       	brne	.-16     	; 0x310 <main+0xba>

	while(1)  
	{   
		_delay_ms(100);

		pwmWert=99;
 320:	58 86       	std	Y+8, r5	; 0x08
 322:	4f 82       	std	Y+7, r4	; 0x07
		//button links lesen
 	 	//nutzt das Debounce-Makro (debounce.h)
		if ((debounce(PIND,PD0))) 
 324:	80 91 5a 01 	lds	r24, 0x015A
 328:	88 23       	and	r24, r24
 32a:	59 f0       	breq	.+22     	; 0x342 <main+0xec>
 32c:	80 e0       	ldi	r24, 0x00	; 0
 32e:	80 9b       	sbis	0x10, 0	; 16
 330:	15 c0       	rjmp	.+42     	; 0x35c <main+0x106>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 332:	91 2f       	mov	r25, r17
 334:	9a 95       	dec	r25
 336:	f1 f7       	brne	.-4      	; 0x334 <main+0xde>
 338:	81 50       	subi	r24, 0x01	; 1
 33a:	c9 f7       	brne	.-14     	; 0x32e <main+0xd8>
 33c:	10 92 5a 01 	sts	0x015A, r1
 340:	0d c0       	rjmp	.+26     	; 0x35c <main+0x106>
 342:	80 e0       	ldi	r24, 0x00	; 0
 344:	80 99       	sbic	0x10, 0	; 16
 346:	0a c0       	rjmp	.+20     	; 0x35c <main+0x106>
 348:	91 2f       	mov	r25, r17
 34a:	9a 95       	dec	r25
 34c:	f1 f7       	brne	.-4      	; 0x34a <main+0xf4>
 34e:	81 50       	subi	r24, 0x01	; 1
 350:	c9 f7       	brne	.-14     	; 0x344 <main+0xee>
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	80 93 5a 01 	sts	0x015A, r24
		{
			buttonLinks=0;
 358:	1b 82       	std	Y+3, r1	; 0x03
 35a:	02 c0       	rjmp	.+4      	; 0x360 <main+0x10a>
		}
		else
		{
			buttonLinks=1;
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	8b 83       	std	Y+3, r24	; 0x03
		}

		//button mitte lesen
		if ((debounce(PIND,PD3)))
 360:	80 91 59 01 	lds	r24, 0x0159
 364:	88 23       	and	r24, r24
 366:	59 f0       	breq	.+22     	; 0x37e <main+0x128>
 368:	80 e0       	ldi	r24, 0x00	; 0
 36a:	83 9b       	sbis	0x10, 3	; 16
 36c:	15 c0       	rjmp	.+42     	; 0x398 <main+0x142>
 36e:	91 2f       	mov	r25, r17
 370:	9a 95       	dec	r25
 372:	f1 f7       	brne	.-4      	; 0x370 <main+0x11a>
 374:	81 50       	subi	r24, 0x01	; 1
 376:	c9 f7       	brne	.-14     	; 0x36a <main+0x114>
 378:	10 92 59 01 	sts	0x0159, r1
 37c:	0d c0       	rjmp	.+26     	; 0x398 <main+0x142>
 37e:	80 e0       	ldi	r24, 0x00	; 0
 380:	83 99       	sbic	0x10, 3	; 16
 382:	0a c0       	rjmp	.+20     	; 0x398 <main+0x142>
 384:	91 2f       	mov	r25, r17
 386:	9a 95       	dec	r25
 388:	f1 f7       	brne	.-4      	; 0x386 <main+0x130>
 38a:	81 50       	subi	r24, 0x01	; 1
 38c:	c9 f7       	brne	.-14     	; 0x380 <main+0x12a>
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	80 93 59 01 	sts	0x0159, r24
		{
			buttonMitte=0;
 394:	1c 82       	std	Y+4, r1	; 0x04
 396:	02 c0       	rjmp	.+4      	; 0x39c <main+0x146>
		}
		else
		{
			buttonMitte=1;
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	8c 83       	std	Y+4, r24	; 0x04
		}

		//button rechts lesen
		if ((debounce(PIND,PD2)))
 39c:	80 91 58 01 	lds	r24, 0x0158
 3a0:	88 23       	and	r24, r24
 3a2:	59 f0       	breq	.+22     	; 0x3ba <main+0x164>
 3a4:	80 e0       	ldi	r24, 0x00	; 0
 3a6:	82 9b       	sbis	0x10, 2	; 16
 3a8:	15 c0       	rjmp	.+42     	; 0x3d4 <main+0x17e>
 3aa:	91 2f       	mov	r25, r17
 3ac:	9a 95       	dec	r25
 3ae:	f1 f7       	brne	.-4      	; 0x3ac <main+0x156>
 3b0:	81 50       	subi	r24, 0x01	; 1
 3b2:	c9 f7       	brne	.-14     	; 0x3a6 <main+0x150>
 3b4:	10 92 58 01 	sts	0x0158, r1
 3b8:	0d c0       	rjmp	.+26     	; 0x3d4 <main+0x17e>
 3ba:	80 e0       	ldi	r24, 0x00	; 0
 3bc:	82 99       	sbic	0x10, 2	; 16
 3be:	0a c0       	rjmp	.+20     	; 0x3d4 <main+0x17e>
 3c0:	91 2f       	mov	r25, r17
 3c2:	9a 95       	dec	r25
 3c4:	f1 f7       	brne	.-4      	; 0x3c2 <main+0x16c>
 3c6:	81 50       	subi	r24, 0x01	; 1
 3c8:	c9 f7       	brne	.-14     	; 0x3bc <main+0x166>
 3ca:	81 e0       	ldi	r24, 0x01	; 1
 3cc:	80 93 58 01 	sts	0x0158, r24
		{
			buttonRechts=0;
 3d0:	1d 82       	std	Y+5, r1	; 0x05
 3d2:	02 c0       	rjmp	.+4      	; 0x3d8 <main+0x182>
		}
		else
		{
			buttonRechts=1;
 3d4:	81 e0       	ldi	r24, 0x01	; 1
 3d6:	8d 83       	std	Y+5, r24	; 0x05
		

		//wenn buttonLinks einmal gedrückt wurde -> nächster Mode
		//heatControlFlag abfragen um zu wissen welcher heatControlMode
		//zuletzt aktiv war.
		if (buttonLinks==0)
 3d8:	8b 81       	ldd	r24, Y+3	; 0x03
 3da:	88 23       	and	r24, r24
 3dc:	69 f4       	brne	.+26     	; 0x3f8 <main+0x1a2>
		{	
			if (currentMode==versionInfoMode)
 3de:	89 81       	ldd	r24, Y+1	; 0x01
 3e0:	84 30       	cpi	r24, 0x04	; 4
 3e2:	39 f4       	brne	.+14     	; 0x3f2 <main+0x19c>
				if (heatControlFlag==2)
 3e4:	8a 81       	ldd	r24, Y+2	; 0x02
 3e6:	82 30       	cpi	r24, 0x02	; 2
 3e8:	11 f4       	brne	.+4      	; 0x3ee <main+0x198>
					currentMode=heatControlAutoMode;
 3ea:	81 e0       	ldi	r24, 0x01	; 1
 3ec:	04 c0       	rjmp	.+8      	; 0x3f6 <main+0x1a0>
				else 
					currentMode=heatControlManualMode;
 3ee:	19 82       	std	Y+1, r1	; 0x01
 3f0:	03 c0       	rjmp	.+6      	; 0x3f8 <main+0x1a2>
			else
				currentMode +=1;
 3f2:	89 81       	ldd	r24, Y+1	; 0x01
 3f4:	8f 5f       	subi	r24, 0xFF	; 255
 3f6:	89 83       	std	Y+1, r24	; 0x01
		}


		//Mode selector
		switch (currentMode)
 3f8:	89 81       	ldd	r24, Y+1	; 0x01
 3fa:	82 30       	cpi	r24, 0x02	; 2
 3fc:	09 f4       	brne	.+2      	; 0x400 <main+0x1aa>
 3fe:	e6 c0       	rjmp	.+460    	; 0x5cc <main+0x376>
 400:	83 30       	cpi	r24, 0x03	; 3
 402:	30 f4       	brcc	.+12     	; 0x410 <main+0x1ba>
 404:	88 23       	and	r24, r24
 406:	59 f0       	breq	.+22     	; 0x41e <main+0x1c8>
 408:	81 30       	cpi	r24, 0x01	; 1
 40a:	09 f0       	breq	.+2      	; 0x40e <main+0x1b8>
 40c:	03 c1       	rjmp	.+518    	; 0x614 <main+0x3be>
 40e:	77 c0       	rjmp	.+238    	; 0x4fe <main+0x2a8>
 410:	83 30       	cpi	r24, 0x03	; 3
 412:	09 f4       	brne	.+2      	; 0x416 <main+0x1c0>
 414:	ec c0       	rjmp	.+472    	; 0x5ee <main+0x398>
 416:	84 30       	cpi	r24, 0x04	; 4
 418:	09 f0       	breq	.+2      	; 0x41c <main+0x1c6>
 41a:	fc c0       	rjmp	.+504    	; 0x614 <main+0x3be>
 41c:	f9 c0       	rjmp	.+498    	; 0x610 <main+0x3ba>
		{
			//----------------------------------------------------------------
			case heatControlManualMode:
				//button links auf langen Tastendruck prüfen
				//prüfen -> kurz warten -> wenn immer noch gedrückt -> = lange gedrückt
				if ((debounce(PIND,PD0)))
 41e:	80 91 57 01 	lds	r24, 0x0157
 422:	88 23       	and	r24, r24
 424:	59 f0       	breq	.+22     	; 0x43c <main+0x1e6>
 426:	80 e0       	ldi	r24, 0x00	; 0
 428:	80 9b       	sbis	0x10, 0	; 16
 42a:	36 c0       	rjmp	.+108    	; 0x498 <main+0x242>
 42c:	91 2f       	mov	r25, r17
 42e:	9a 95       	dec	r25
 430:	f1 f7       	brne	.-4      	; 0x42e <main+0x1d8>
 432:	81 50       	subi	r24, 0x01	; 1
 434:	c9 f7       	brne	.-14     	; 0x428 <main+0x1d2>
 436:	10 92 57 01 	sts	0x0157, r1
 43a:	2e c0       	rjmp	.+92     	; 0x498 <main+0x242>
 43c:	80 e0       	ldi	r24, 0x00	; 0
 43e:	80 99       	sbic	0x10, 0	; 16
 440:	2b c0       	rjmp	.+86     	; 0x498 <main+0x242>
 442:	91 2f       	mov	r25, r17
 444:	9a 95       	dec	r25
 446:	f1 f7       	brne	.-4      	; 0x444 <main+0x1ee>
 448:	81 50       	subi	r24, 0x01	; 1
 44a:	c9 f7       	brne	.-14     	; 0x43e <main+0x1e8>
 44c:	81 e0       	ldi	r24, 0x01	; 1
 44e:	80 93 57 01 	sts	0x0157, r24
 452:	80 ed       	ldi	r24, 0xD0	; 208
 454:	97 e0       	ldi	r25, 0x07	; 7
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 456:	f6 01       	movw	r30, r12
 458:	31 97       	sbiw	r30, 0x01	; 1
 45a:	f1 f7       	brne	.-4      	; 0x458 <main+0x202>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 45c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 45e:	d9 f7       	brne	.-10     	; 0x456 <main+0x200>
				{
					_delay_ms(200);
					if ((debounce(PIND,PD0))) 
 460:	80 91 56 01 	lds	r24, 0x0156
 464:	88 23       	and	r24, r24
 466:	59 f0       	breq	.+22     	; 0x47e <main+0x228>
 468:	80 e0       	ldi	r24, 0x00	; 0
 46a:	80 9b       	sbis	0x10, 0	; 16
 46c:	15 c0       	rjmp	.+42     	; 0x498 <main+0x242>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 46e:	91 2f       	mov	r25, r17
 470:	9a 95       	dec	r25
 472:	f1 f7       	brne	.-4      	; 0x470 <main+0x21a>
 474:	81 50       	subi	r24, 0x01	; 1
 476:	c9 f7       	brne	.-14     	; 0x46a <main+0x214>
 478:	10 92 56 01 	sts	0x0156, r1
 47c:	0d c0       	rjmp	.+26     	; 0x498 <main+0x242>
 47e:	80 e0       	ldi	r24, 0x00	; 0
 480:	80 99       	sbic	0x10, 0	; 16
 482:	0a c0       	rjmp	.+20     	; 0x498 <main+0x242>
 484:	91 2f       	mov	r25, r17
 486:	9a 95       	dec	r25
 488:	f1 f7       	brne	.-4      	; 0x486 <main+0x230>
 48a:	81 50       	subi	r24, 0x01	; 1
 48c:	c9 f7       	brne	.-14     	; 0x480 <main+0x22a>
 48e:	81 e0       	ldi	r24, 0x01	; 1
 490:	80 93 56 01 	sts	0x0156, r24
					{
						buttonLinks=2;
 494:	82 e0       	ldi	r24, 0x02	; 2
 496:	8b 83       	std	Y+3, r24	; 0x03
					}
				}
				//wenn button links lange gedrückt wurde -> wechsle in den anderen heating-mode	
				if (buttonLinks==2)
 498:	8b 81       	ldd	r24, Y+3	; 0x03
 49a:	82 30       	cpi	r24, 0x02	; 2
 49c:	19 f4       	brne	.+6      	; 0x4a4 <main+0x24e>
				{
					currentMode=heatControlAutoMode;
 49e:	81 e0       	ldi	r24, 0x01	; 1
 4a0:	89 83       	std	Y+1, r24	; 0x01
 4a2:	8f c0       	rjmp	.+286    	; 0x5c2 <main+0x36c>
					screenHeatingAuto(tempSollwert);
				}
				//button mitte -> heizungs-level verringern (auf display und servo)
				else if (buttonMitte==0)
 4a4:	8c 81       	ldd	r24, Y+4	; 0x04
 4a6:	88 23       	and	r24, r24
 4a8:	79 f4       	brne	.+30     	; 0x4c8 <main+0x272>
				{
					screenHeatingManual(0, &heizLevel);
 4aa:	b7 01       	movw	r22, r14
 4ac:	0e 94 a4 05 	call	0xb48	; 0xb48 <screenHeatingManual>
					if (pwmWert>64)
 4b0:	8f 81       	ldd	r24, Y+7	; 0x07
 4b2:	98 85       	ldd	r25, Y+8	; 0x08
 4b4:	81 34       	cpi	r24, 0x41	; 65
 4b6:	91 05       	cpc	r25, r1
 4b8:	20 f0       	brcs	.+8      	; 0x4c2 <main+0x26c>
					{
						pwmWert -= 2;
 4ba:	8f 81       	ldd	r24, Y+7	; 0x07
 4bc:	98 85       	ldd	r25, Y+8	; 0x08
 4be:	02 97       	sbiw	r24, 0x02	; 2
 4c0:	12 c0       	rjmp	.+36     	; 0x4e6 <main+0x290>
					}
					else
					{
						pwmWert=62;
 4c2:	b8 86       	std	Y+8, r11	; 0x08
 4c4:	af 82       	std	Y+7, r10	; 0x07
 4c6:	14 c0       	rjmp	.+40     	; 0x4f0 <main+0x29a>
					}
					pwmInit(pwmWert);
					//pwmUpdate(pwmWert);
				}
				//button rechts -> heizungs-level erhöhen(auf display und servo)
				else if (buttonRechts==0)
 4c8:	8d 81       	ldd	r24, Y+5	; 0x05
 4ca:	88 23       	and	r24, r24
 4cc:	b1 f4       	brne	.+44     	; 0x4fa <main+0x2a4>
				{
					screenHeatingManual(1, &heizLevel);
 4ce:	81 e0       	ldi	r24, 0x01	; 1
 4d0:	b7 01       	movw	r22, r14
 4d2:	0e 94 a4 05 	call	0xb48	; 0xb48 <screenHeatingManual>
					if (pwmWert<118)
 4d6:	8f 81       	ldd	r24, Y+7	; 0x07
 4d8:	98 85       	ldd	r25, Y+8	; 0x08
 4da:	86 37       	cpi	r24, 0x76	; 118
 4dc:	91 05       	cpc	r25, r1
 4de:	30 f4       	brcc	.+12     	; 0x4ec <main+0x296>
					{
						pwmWert += 2;
 4e0:	8f 81       	ldd	r24, Y+7	; 0x07
 4e2:	98 85       	ldd	r25, Y+8	; 0x08
 4e4:	02 96       	adiw	r24, 0x02	; 2
 4e6:	98 87       	std	Y+8, r25	; 0x08
 4e8:	8f 83       	std	Y+7, r24	; 0x07
 4ea:	02 c0       	rjmp	.+4      	; 0x4f0 <main+0x29a>
					}
					else
					{
						pwmWert=120;
 4ec:	38 86       	std	Y+8, r3	; 0x08
 4ee:	2f 82       	std	Y+7, r2	; 0x07
					}
					pwmInit(pwmWert);
 4f0:	8f 81       	ldd	r24, Y+7	; 0x07
 4f2:	98 85       	ldd	r25, Y+8	; 0x08
 4f4:	0e 94 15 03 	call	0x62a	; 0x62a <pwmInit>
 4f8:	8d c0       	rjmp	.+282    	; 0x614 <main+0x3be>
					//pwmUpdate(pwmWert);
				}
				//wenn nichts gedrückt wurde aktuellen heizlevel auf display anzeigen
				else
				{
					screenHeatingManual(2, &heizLevel);
 4fa:	82 e0       	ldi	r24, 0x02	; 2
 4fc:	41 c0       	rjmp	.+130    	; 0x580 <main+0x32a>
				break;
			//----------------------------------------------------------------
			case heatControlAutoMode:
				//button links auf langen Tastendruck prüfen
				//prüfen -> kurz warten -> wenn immer noch gedrückt -> = lange gedrückt
				if ((debounce(PIND,PD0)))
 4fe:	80 91 55 01 	lds	r24, 0x0155
 502:	88 23       	and	r24, r24
 504:	59 f0       	breq	.+22     	; 0x51c <main+0x2c6>
 506:	80 e0       	ldi	r24, 0x00	; 0
 508:	80 9b       	sbis	0x10, 0	; 16
 50a:	36 c0       	rjmp	.+108    	; 0x578 <main+0x322>
 50c:	91 2f       	mov	r25, r17
 50e:	9a 95       	dec	r25
 510:	f1 f7       	brne	.-4      	; 0x50e <main+0x2b8>
 512:	81 50       	subi	r24, 0x01	; 1
 514:	c9 f7       	brne	.-14     	; 0x508 <main+0x2b2>
 516:	10 92 55 01 	sts	0x0155, r1
 51a:	2e c0       	rjmp	.+92     	; 0x578 <main+0x322>
 51c:	80 e0       	ldi	r24, 0x00	; 0
 51e:	80 99       	sbic	0x10, 0	; 16
 520:	2b c0       	rjmp	.+86     	; 0x578 <main+0x322>
 522:	91 2f       	mov	r25, r17
 524:	9a 95       	dec	r25
 526:	f1 f7       	brne	.-4      	; 0x524 <main+0x2ce>
 528:	81 50       	subi	r24, 0x01	; 1
 52a:	c9 f7       	brne	.-14     	; 0x51e <main+0x2c8>
 52c:	81 e0       	ldi	r24, 0x01	; 1
 52e:	80 93 55 01 	sts	0x0155, r24
 532:	88 ee       	ldi	r24, 0xE8	; 232
 534:	93 e0       	ldi	r25, 0x03	; 3
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 536:	f6 01       	movw	r30, r12
 538:	31 97       	sbiw	r30, 0x01	; 1
 53a:	f1 f7       	brne	.-4      	; 0x538 <main+0x2e2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 53c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 53e:	d9 f7       	brne	.-10     	; 0x536 <main+0x2e0>
				{
					_delay_ms(100);
					if ((debounce(PIND,PD0))) 
 540:	80 91 54 01 	lds	r24, 0x0154
 544:	88 23       	and	r24, r24
 546:	59 f0       	breq	.+22     	; 0x55e <main+0x308>
 548:	80 e0       	ldi	r24, 0x00	; 0
 54a:	80 9b       	sbis	0x10, 0	; 16
 54c:	15 c0       	rjmp	.+42     	; 0x578 <main+0x322>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 54e:	91 2f       	mov	r25, r17
 550:	9a 95       	dec	r25
 552:	f1 f7       	brne	.-4      	; 0x550 <main+0x2fa>
 554:	81 50       	subi	r24, 0x01	; 1
 556:	c9 f7       	brne	.-14     	; 0x54a <main+0x2f4>
 558:	10 92 54 01 	sts	0x0154, r1
 55c:	0d c0       	rjmp	.+26     	; 0x578 <main+0x322>
 55e:	80 e0       	ldi	r24, 0x00	; 0
 560:	80 99       	sbic	0x10, 0	; 16
 562:	0a c0       	rjmp	.+20     	; 0x578 <main+0x322>
 564:	91 2f       	mov	r25, r17
 566:	9a 95       	dec	r25
 568:	f1 f7       	brne	.-4      	; 0x566 <main+0x310>
 56a:	81 50       	subi	r24, 0x01	; 1
 56c:	c9 f7       	brne	.-14     	; 0x560 <main+0x30a>
 56e:	81 e0       	ldi	r24, 0x01	; 1
 570:	80 93 54 01 	sts	0x0154, r24
					{
						buttonLinks=2;
 574:	82 e0       	ldi	r24, 0x02	; 2
 576:	8b 83       	std	Y+3, r24	; 0x03
					}
				}
				//wenn button links lange gedrückt wurde -> wechsle in den anderen heating-mode	
				if (buttonLinks==2)
 578:	8b 81       	ldd	r24, Y+3	; 0x03
 57a:	82 30       	cpi	r24, 0x02	; 2
 57c:	29 f4       	brne	.+10     	; 0x588 <main+0x332>
				{
					currentMode=heatControlManualMode;
 57e:	19 82       	std	Y+1, r1	; 0x01
					screenHeatingManual(2, &heizLevel);
 580:	b7 01       	movw	r22, r14
 582:	0e 94 a4 05 	call	0xb48	; 0xb48 <screenHeatingManual>
 586:	46 c0       	rjmp	.+140    	; 0x614 <main+0x3be>
				}
				//button Mitte -> temperatur Sollwert für Regler verringern
				else if (buttonMitte==0)
 588:	8c 81       	ldd	r24, Y+4	; 0x04
 58a:	88 23       	and	r24, r24
 58c:	59 f4       	brne	.+22     	; 0x5a4 <main+0x34e>
				{
					if (tempSollwert>17)
 58e:	89 85       	ldd	r24, Y+9	; 0x09
 590:	9a 85       	ldd	r25, Y+10	; 0x0a
 592:	42 97       	sbiw	r24, 0x12	; 18
 594:	20 f0       	brcs	.+8      	; 0x59e <main+0x348>
					{
						tempSollwert -= 1;
 596:	89 85       	ldd	r24, Y+9	; 0x09
 598:	9a 85       	ldd	r25, Y+10	; 0x0a
 59a:	01 97       	sbiw	r24, 0x01	; 1
 59c:	0d c0       	rjmp	.+26     	; 0x5b8 <main+0x362>
					}
					else
					{
						tempSollwert=16;
 59e:	7a 86       	std	Y+10, r7	; 0x0a
 5a0:	69 86       	std	Y+9, r6	; 0x09
 5a2:	0f c0       	rjmp	.+30     	; 0x5c2 <main+0x36c>
					}
					screenHeatingAuto(tempSollwert);
				}
				//button rechts -> temperatur sollwert für regler erhöhen
				else if (buttonRechts==0)
 5a4:	8d 81       	ldd	r24, Y+5	; 0x05
 5a6:	88 23       	and	r24, r24
 5a8:	a9 f5       	brne	.+106    	; 0x614 <main+0x3be>
				{
					if (tempSollwert<25)
 5aa:	89 85       	ldd	r24, Y+9	; 0x09
 5ac:	9a 85       	ldd	r25, Y+10	; 0x0a
 5ae:	49 97       	sbiw	r24, 0x19	; 25
 5b0:	30 f4       	brcc	.+12     	; 0x5be <main+0x368>
					{
						tempSollwert += 1;
 5b2:	89 85       	ldd	r24, Y+9	; 0x09
 5b4:	9a 85       	ldd	r25, Y+10	; 0x0a
 5b6:	01 96       	adiw	r24, 0x01	; 1
 5b8:	9a 87       	std	Y+10, r25	; 0x0a
 5ba:	89 87       	std	Y+9, r24	; 0x09
 5bc:	02 c0       	rjmp	.+4      	; 0x5c2 <main+0x36c>
					}
					else
					{
						tempSollwert=26;
 5be:	9a 86       	std	Y+10, r9	; 0x0a
 5c0:	89 86       	std	Y+9, r8	; 0x09
					}
					screenHeatingAuto(tempSollwert);
 5c2:	89 85       	ldd	r24, Y+9	; 0x09
 5c4:	9a 85       	ldd	r25, Y+10	; 0x0a
 5c6:	0e 94 6d 05 	call	0xada	; 0xada <screenHeatingAuto>
 5ca:	24 c0       	rjmp	.+72     	; 0x614 <main+0x3be>
				break;
			//---------------------------------------------------------------- 
			case voltageControlMode:
				//start adc single conversion for both batteries
				//both values are voltage*100
				batt1Volt = adcRead15(4);
 5cc:	84 e0       	ldi	r24, 0x04	; 4
 5ce:	0e 94 4f 03 	call	0x69e	; 0x69e <adcRead15>
 5d2:	9c 87       	std	Y+12, r25	; 0x0c
 5d4:	8b 87       	std	Y+11, r24	; 0x0b
				batt2Volt = adcRead15(5);
 5d6:	85 e0       	ldi	r24, 0x05	; 5
 5d8:	0e 94 4f 03 	call	0x69e	; 0x69e <adcRead15>
 5dc:	9e 87       	std	Y+14, r25	; 0x0e
 5de:	8d 87       	std	Y+13, r24	; 0x0d
				screenVoltageControl(batt1Volt, batt2Volt);
 5e0:	8b 85       	ldd	r24, Y+11	; 0x0b
 5e2:	9c 85       	ldd	r25, Y+12	; 0x0c
 5e4:	6d 85       	ldd	r22, Y+13	; 0x0d
 5e6:	7e 85       	ldd	r23, Y+14	; 0x0e
 5e8:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <screenVoltageControl>
 5ec:	13 c0       	rjmp	.+38     	; 0x614 <main+0x3be>
				break;
			//---------------------------------------------------------------- 
			case tempInfoMode:
				//start adc single conversion for both temperature sensors voltages
				//both values are voltage*100
				temp1Volt = adcRead5(6);
 5ee:	86 e0       	ldi	r24, 0x06	; 6
 5f0:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <adcRead5>
 5f4:	98 8b       	std	Y+16, r25	; 0x10
 5f6:	8f 87       	std	Y+15, r24	; 0x0f
				temp2Volt = adcRead5(7);
 5f8:	87 e0       	ldi	r24, 0x07	; 7
 5fa:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <adcRead5>
 5fe:	9a 8b       	std	Y+18, r25	; 0x12
 600:	89 8b       	std	Y+17, r24	; 0x11
				screenTempInfo(temp1Volt,temp2Volt);
 602:	8f 85       	ldd	r24, Y+15	; 0x0f
 604:	98 89       	ldd	r25, Y+16	; 0x10
 606:	69 89       	ldd	r22, Y+17	; 0x11
 608:	7a 89       	ldd	r23, Y+18	; 0x12
 60a:	0e 94 c9 03 	call	0x792	; 0x792 <screenTempInfo>
 60e:	02 c0       	rjmp	.+4      	; 0x614 <main+0x3be>
				break;
			//---------------------------------------------------------------- 
			case versionInfoMode:
				screenInfo();
 610:	0e 94 4a 04 	call	0x894	; 0x894 <screenInfo>
			sleep_enable();	   
			sleep_cpu();
		}*/				
		
		//Wenn uC gerade aufgewacht ist, dann willkommens und battVolt Screens darstellen.
		if (wakeUp==1)
 614:	80 91 5b 01 	lds	r24, 0x015B
 618:	81 30       	cpi	r24, 0x01	; 1
 61a:	21 f4       	brne	.+8      	; 0x624 <main+0x3ce>
		{
			menuInit();
 61c:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <menuInit>
			wakeUp=0;
 620:	10 92 5b 01 	sts	0x015B, r1
 624:	28 ee       	ldi	r18, 0xE8	; 232
 626:	33 e0       	ldi	r19, 0x03	; 3
 628:	73 ce       	rjmp	.-794    	; 0x310 <main+0xba>

0000062a <pwmInit>:
#include <avr/io.h>
#include "pwmInit.h"

void pwmInit(uint16_t compare)
{
	DDRD |= (1<<BIT4) | (1<<BIT5);		//D.4&5 als Ausgänge definieren
 62a:	21 b3       	in	r18, 0x11	; 17
 62c:	20 63       	ori	r18, 0x30	; 48
 62e:	21 bb       	out	0x11, r18	; 17
	
	//PWM, Phase Correct with ICR1 as TOP value
	//TOP: 625
	TCCR1A |= (1<<WGM11);	
 630:	2f b5       	in	r18, 0x2f	; 47
 632:	22 60       	ori	r18, 0x02	; 2
 634:	2f bd       	out	0x2f, r18	; 47
	TCCR1A &= ~(1<<WGM10);	
 636:	2f b5       	in	r18, 0x2f	; 47
 638:	2e 7f       	andi	r18, 0xFE	; 254
 63a:	2f bd       	out	0x2f, r18	; 47

	TCCR1B |= (1<<WGM13);
 63c:	2e b5       	in	r18, 0x2e	; 46
 63e:	20 61       	ori	r18, 0x10	; 16
 640:	2e bd       	out	0x2e, r18	; 46
	TCCR1B &= ~(1<<WGM12);
 642:	2e b5       	in	r18, 0x2e	; 46
 644:	27 7f       	andi	r18, 0xF7	; 247
 646:	2e bd       	out	0x2e, r18	; 46

	ICR1 = 625;
 648:	21 e7       	ldi	r18, 0x71	; 113
 64a:	32 e0       	ldi	r19, 0x02	; 2
 64c:	37 bd       	out	0x27, r19	; 39
 64e:	26 bd       	out	0x26, r18	; 38
	

	//Nicht invertierende PWM, KanalA -> auf Pin D.5
	//- Clear OC1A/OC1B on Compare Match when up-counting. 
	//- Set OC1A/OC1B on Compare Match when downcounting.
	TCCR1A |= (1<<COM1A1); 	
 650:	2f b5       	in	r18, 0x2f	; 47
 652:	20 68       	ori	r18, 0x80	; 128
 654:	2f bd       	out	0x2f, r18	; 47
	TCCR1A &= ~(1<<COM1A0);
 656:	2f b5       	in	r18, 0x2f	; 47
 658:	2f 7b       	andi	r18, 0xBF	; 191
 65a:	2f bd       	out	0x2f, r18	; 47

	//Prescaler = 64
	TCCR1B |= (1<<CS10) | (1<<CS11);
 65c:	2e b5       	in	r18, 0x2e	; 46
 65e:	23 60       	ori	r18, 0x03	; 3
 660:	2e bd       	out	0x2e, r18	; 46
	TCCR1B |= ~(1<<CS12); 
 662:	2e b5       	in	r18, 0x2e	; 46
 664:	2b 6f       	ori	r18, 0xFB	; 251
 666:	2e bd       	out	0x2e, r18	; 46
		1 	1 	0 	Externer Pin 1, negative Flanke
		1 	1 	1 	Externer Pin 1, positive Flanke 
	*/
	
	//OCR1A->16bit register
	OCR1A=compare;	//Vergleichswert laden
 668:	9b bd       	out	0x2b, r25	; 43
 66a:	8a bd       	out	0x2a, r24	; 42
	
	
}
 66c:	08 95       	ret

0000066e <pwmUpdate>:


void pwmUpdate(uint16_t compare)
{
	OCR1A=compare;	
 66e:	9b bd       	out	0x2b, r25	; 43
 670:	8a bd       	out	0x2a, r24	; 42
}
 672:	08 95       	ret

00000674 <timer_init>:
#include "timerInit.h"

void timer_init(uint16_t compare)
{

	TCCR1B |= (1<<WGM12);	//CTC Mode:
 674:	2e b5       	in	r18, 0x2e	; 46
 676:	28 60       	ori	r18, 0x08	; 8
 678:	2e bd       	out	0x2e, r18	; 46
							//Timer1 zählt hoch, bei compare match wird er wieder zu 0 gesetzt

	TCCR1B |= (1<<CS10); //Prescaler nicht aktiviert - es liegt der Systemtakt an
 67a:	2e b5       	in	r18, 0x2e	; 46
 67c:	21 60       	ori	r18, 0x01	; 1
 67e:	2e bd       	out	0x2e, r18	; 46
	1 	0 	1 	CK / 1024
	1 	1 	0 	Externer Pin 1, negative Flanke
	1 	1 	1 	Externer Pin 1, positive Flanke 
*/
	
	OCR1A=compare;	//Vergleichswert laden
 680:	9b bd       	out	0x2b, r25	; 43
 682:	8a bd       	out	0x2a, r24	; 42
	
	
}
 684:	08 95       	ret

00000686 <adcInit>:
{
  
  uint16_t result;
 									
								
  ADMUX &= ~((1<<REFS1) | (1<<REFS0)); // externe Referenzspannung nutzen (typischerweise Vcc-Pegel)
 686:	87 b1       	in	r24, 0x07	; 7
 688:	8f 73       	andi	r24, 0x3F	; 63
 68a:	87 b9       	out	0x07, r24	; 7


  ADCSRA |= ((1<<ADEN) | (1<<ADPS2) | (1<<ADPS1));    	// ADC Prescaler wählen. BIT0 bis BII 2 in ADCSRA
 68c:	86 b1       	in	r24, 0x06	; 6
 68e:	86 68       	ori	r24, 0x86	; 134
 690:	86 b9       	out	0x06, r24	; 6
                               					    // UND ADC aktivieren



  //Erste conversion anstoßen, danach läuft der ADC im free run mode
  ADCSRA |= (1<<ADSC);	
 692:	36 9a       	sbi	0x06, 6	; 6
  

  //Auf Abschluss der Konvertierung warten
  //Das Register ADCSRA wird mit "1<<ADSC" maskiert. Da ADSC den Wert 6 hat, wartet das while 
  //also solange, bis das Bit6 von ADCSRA == 0 wird.
  while (ADCSRA & (1<<ADSC) ) {}
 694:	36 99       	sbic	0x06, 6	; 6
 696:	fe cf       	rjmp	.-4      	; 0x694 <adcInit+0xe>
  	
  //ADCSRA |= (1<<ADIE);		// ADC - > Interrupt Enable		
  
  /* ADCW muss einmal gelesen werden, sonst wird Ergebnis der nächsten
     Wandlung nicht übernommen. */
  result = ADCW;		 
 698:	84 b1       	in	r24, 0x04	; 4
 69a:	95 b1       	in	r25, 0x05	; 5
   
}
 69c:	08 95       	ret

0000069e <adcRead15>:
 15V	   1023						     1023


**************************************************************************************************************/
uint16_t adcRead15(uint8_t channel)
{
 69e:	98 2f       	mov	r25, r24
	uint16_t result=0;
	
	// 	Kanal waehlen(durch Parameterübergabe)	
	//  Kanäle 4 bis 7 sind verfügbar
	if ((channel >= 4) && (channel <=7))
 6a0:	84 50       	subi	r24, 0x04	; 4
 6a2:	84 30       	cpi	r24, 0x04	; 4
 6a4:	08 f4       	brcc	.+2      	; 0x6a8 <adcRead15+0xa>
 		ADMUX = channel;                  // 	Kanal waehlen(durch Parameterübergabe)
 6a6:	97 b9       	out	0x07, r25	; 7

	//Erste conversion anstoßen, danach läuft der ADC im free run mode
  	ADCSRA |= (1<<ADSC);	
 6a8:	36 9a       	sbi	0x06, 6	; 6
  

  	//Auf Abschluss der Konvertierung warten
	while (ADCSRA & (1<<ADSC) ) {}
 6aa:	36 99       	sbic	0x06, 6	; 6
 6ac:	fe cf       	rjmp	.-4      	; 0x6aa <adcRead15+0xc>
	
	//result in bit value
	result = ADCW;
 6ae:	24 b1       	in	r18, 0x04	; 4
 6b0:	35 b1       	in	r19, 0x05	; 5
	//convert result into voltage value
	//korrektes runden mit +(divisor>>1)
	//ohne die 16bit casts würde das zwischenergebnis auf die bitwertigkeit des
	//niedrigsten teil des terms reduziert (hier 8 bit von 100 oder 15)
	result = ((result * (uint16_t)15 * (int16_t)100)+(1023>>1)) / (uint16_t)1023;
 6b2:	8c ed       	ldi	r24, 0xDC	; 220
 6b4:	95 e0       	ldi	r25, 0x05	; 5
 6b6:	ac 01       	movw	r20, r24
 6b8:	24 9f       	mul	r18, r20
 6ba:	c0 01       	movw	r24, r0
 6bc:	25 9f       	mul	r18, r21
 6be:	90 0d       	add	r25, r0
 6c0:	34 9f       	mul	r19, r20
 6c2:	90 0d       	add	r25, r0
 6c4:	11 24       	eor	r1, r1
 6c6:	81 50       	subi	r24, 0x01	; 1
 6c8:	9e 4f       	sbci	r25, 0xFE	; 254
 6ca:	6f ef       	ldi	r22, 0xFF	; 255
 6cc:	73 e0       	ldi	r23, 0x03	; 3
 6ce:	0e 94 17 06 	call	0xc2e	; 0xc2e <__udivmodhi4>
 6d2:	cb 01       	movw	r24, r22

	return result;
}
 6d4:	08 95       	ret

000006d6 <adcRead5>:
/**************************************************************************************
Die  gleich Funktion noch einmal mit 5V als Bezugs-Spannung
**************************************************************************************/
uint16_t adcRead5(uint8_t channel)
{
 6d6:	98 2f       	mov	r25, r24
	uint16_t result=0;
	
	// 	Kanal waehlen(durch Parameterübergabe)	
	//  Kanäle 4 bis 7 sind verfügbar
	if ((channel >= 4) && (channel <=7))
 6d8:	84 50       	subi	r24, 0x04	; 4
 6da:	84 30       	cpi	r24, 0x04	; 4
 6dc:	08 f4       	brcc	.+2      	; 0x6e0 <adcRead5+0xa>
 		ADMUX = channel;                  // 	Kanal waehlen(durch Parameterübergabe)
 6de:	97 b9       	out	0x07, r25	; 7

	//Erste conversion anstoßen, danach läuft der ADC im free run mode
  	ADCSRA |= (1<<ADSC);	
 6e0:	36 9a       	sbi	0x06, 6	; 6
  

  	//Auf Abschluss der Konvertierung warten
	while (ADCSRA & (1<<ADSC) ) {}
 6e2:	36 99       	sbic	0x06, 6	; 6
 6e4:	fe cf       	rjmp	.-4      	; 0x6e2 <adcRead5+0xc>
	
	//result in bit value
	result = ADCW;
 6e6:	24 b1       	in	r18, 0x04	; 4
 6e8:	35 b1       	in	r19, 0x05	; 5
	//convert result into voltage value
	//korrektes runden mit +(divisor>>1)
	//ohne die 16bit casts würde das zwischenergebnis auf die bitwertigkeit des
	//niedrigsten teil des terms reduziert (hier 8 bit von 100 oder 15)
	result = ((result * (uint16_t)5 * (uint16_t)100) + (1023>>1)) / (uint16_t)1023;
 6ea:	84 ef       	ldi	r24, 0xF4	; 244
 6ec:	91 e0       	ldi	r25, 0x01	; 1
 6ee:	ac 01       	movw	r20, r24
 6f0:	24 9f       	mul	r18, r20
 6f2:	c0 01       	movw	r24, r0
 6f4:	25 9f       	mul	r18, r21
 6f6:	90 0d       	add	r25, r0
 6f8:	34 9f       	mul	r19, r20
 6fa:	90 0d       	add	r25, r0
 6fc:	11 24       	eor	r1, r1
 6fe:	81 50       	subi	r24, 0x01	; 1
 700:	9e 4f       	sbci	r25, 0xFE	; 254
 702:	6f ef       	ldi	r22, 0xFF	; 255
 704:	73 e0       	ldi	r23, 0x03	; 3
 706:	0e 94 17 06 	call	0xc2e	; 0xc2e <__udivmodhi4>
 70a:	cb 01       	movw	r24, r22

	return result;

}
 70c:	08 95       	ret

0000070e <myInit>:

--------------------------------------------------------------------------------------*/
void myInit()
{

	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
 70e:	85 b7       	in	r24, 0x35	; 53
 710:	8f 78       	andi	r24, 0x8F	; 143
 712:	80 62       	ori	r24, 0x20	; 32
 714:	85 bf       	out	0x35, r24	; 53


	//Port C.0 als Ausgang
	//damit wird das Darlington angesteuert um im SleepMode
	//die Masse fürs Display abzuschalten (im SleepMode = 0)
	DDRC  |= (1<<BIT0);		 
 716:	a0 9a       	sbi	0x14, 0	; 20
	PORTC |= (1<<BIT0);		
 718:	a8 9a       	sbi	0x15, 0	; 21

	//Port C.1 als Ausgang
	//damit wird das Darlington angesteuert um im SleepMode
	//die Masse auf den Emittor des Transistors zu schalten
	//der die Display-Beleuchtung steuert. (im SleepMode = 1)
	DDRC  |=(1<<BIT1);		
 71a:	a1 9a       	sbi	0x14, 1	; 20
													
							
	//A.0 bis A.3 als Ausgänge für Darlington-Array
	//Bei Ansteuerung schaltet das Darlington Masse.
	DDRA |= (1<<BIT0) | (1<<BIT1) | (1<<BIT2) | (1<<BIT3); 
 71c:	8a b3       	in	r24, 0x1a	; 26
 71e:	8f 60       	ori	r24, 0x0F	; 15
 720:	8a bb       	out	0x1a, r24	; 26
														   

	//PB.2 erhällt 0V vom Darlington Array wenn die Zündung an ist -> weckt den uC aus dem Sleep Mode auf.
	//PB2 als Input
	//Pull-Up aktiv
	DDRB  &= ~(1<<BIT2);
 722:	ba 98       	cbi	0x17, 2	; 23
	PORTB |= (1<<BIT2);  
 724:	c2 9a       	sbi	0x18, 2	; 24


	//PD.0 als Input
	//Liest den Schalter links für die Menü-Steuerung
	//Pull-Up aktiv
	DDRD &= ~(1<<BIT0);
 726:	88 98       	cbi	0x11, 0	; 17
	PORTD |= (1<<BIT0);	
 728:	90 9a       	sbi	0x12, 0	; 18


	//Port D.6 als Eingang (Prüft ob die Zündung noch an ist)	
	//Wenn Zündung an, dann 0V an D.6 (durch Transistor)
	//Wenn Zündung aus, dann 5V über internen Pull-Up
	DDRD  &= ~(1<<BIT6);	
 72a:	8e 98       	cbi	0x11, 6	; 17
	PORTD |= (1<<BIT6);		
 72c:	96 9a       	sbi	0x12, 6	; 18
							
	//PD7 als Output (System-LED grün)
	//PD7 = OFF
	DDRD  |= (1<<BIT7); 
 72e:	8f 9a       	sbi	0x11, 7	; 17
	PORTD &= ~(1<<BIT7);
 730:	97 98       	cbi	0x12, 7	; 18
									

	//General interrupt control register:
	//Enable interrupts for INT0, INT1, INT2	
	//GICR  |= (1<<BIT7) | (1<<BIT6) | (1<<BIT5); 
	GICR |= (1<<BIT5); //only INT2
 732:	8b b7       	in	r24, 0x3b	; 59
 734:	80 62       	ori	r24, 0x20	; 32
 736:	8b bf       	out	0x3b, r24	; 59

	//Statt über Interrupts werden die Buttons mitte & rechts jetzt 
	//normal eingelesen
	//Button rechts -> PD.3
	//Button links  -> PD.2
	DDRD &= ~(1<<BIT3);
 738:	8b 98       	cbi	0x11, 3	; 17
	PORTD |= (1<<BIT3);	
 73a:	93 9a       	sbi	0x12, 3	; 18

	DDRD &= ~(1<<BIT2);
 73c:	8a 98       	cbi	0x11, 2	; 17
	PORTD |= (1<<BIT2);	
 73e:	92 9a       	sbi	0x12, 2	; 18

}
 740:	08 95       	ret

00000742 <__vector_1>:



//bei Button "warm" (button ganz rechts), läuft durch wenn fallende Flanke auf INT0 (PD.2)
ISR(INT0_vect) 
{
 742:	1f 92       	push	r1
 744:	0f 92       	push	r0
 746:	0f b6       	in	r0, 0x3f	; 63
 748:	0f 92       	push	r0
 74a:	11 24       	eor	r1, r1
//	buttonRechts=0;	
}
 74c:	0f 90       	pop	r0
 74e:	0f be       	out	0x3f, r0	; 63
 750:	0f 90       	pop	r0
 752:	1f 90       	pop	r1
 754:	18 95       	reti

00000756 <__vector_2>:

//----------------------------------------------------------------------------------------------

//bei Button "kalt" (button in der Mitte), läuft durch wenn fallende Flanke auf INT1 (PD.3)
ISR(INT1_vect) 
{
 756:	1f 92       	push	r1
 758:	0f 92       	push	r0
 75a:	0f b6       	in	r0, 0x3f	; 63
 75c:	0f 92       	push	r0
 75e:	11 24       	eor	r1, r1
//	buttonMitte=0;	
}
 760:	0f 90       	pop	r0
 762:	0f be       	out	0x3f, r0	; 63
 764:	0f 90       	pop	r0
 766:	1f 90       	pop	r1
 768:	18 95       	reti

0000076a <__vector_3>:

//----------------------------------------------------------------------------------------------

//ISR läuft durch, wenn fallende Flanke auf INT2 (PB.2)
ISR(INT2_vect)
{	
 76a:	1f 92       	push	r1
 76c:	0f 92       	push	r0
 76e:	0f b6       	in	r0, 0x3f	; 63
 770:	0f 92       	push	r0
 772:	11 24       	eor	r1, r1
 774:	8f 93       	push	r24
	//Kein Plan für was das ist. Möglicherweise noch aus der Breadboard Phase
	//PORTD |= (1<<BIT7);

	//Display wieder anschalten.
	PORTC |= (1<<BIT0);
 776:	a8 9a       	sbi	0x15, 0	; 21
	PORTC &= ~(1<<BIT1);
 778:	a9 98       	cbi	0x15, 1	; 21

	sleep_disable();	
 77a:	85 b7       	in	r24, 0x35	; 53
 77c:	8f 77       	andi	r24, 0x7F	; 127
 77e:	85 bf       	out	0x35, r24	; 53
	
	//Variable setzen um zu das Aufwachen aus sleepmode zu signalisieren
	wakeUp=1;
 780:	81 e0       	ldi	r24, 0x01	; 1
 782:	80 93 5b 01 	sts	0x015B, r24
}
 786:	8f 91       	pop	r24
 788:	0f 90       	pop	r0
 78a:	0f be       	out	0x3f, r0	; 63
 78c:	0f 90       	pop	r0
 78e:	1f 90       	pop	r1
 790:	18 95       	reti

00000792 <screenTempInfo>:
-> Ergebnis der Multiplikation passt noch in 16 bit register.


--------------------------------------------------------------------------------*/
void screenTempInfo(uint16_t voltInside, uint16_t voltMotor)
{
 792:	ef 92       	push	r14
 794:	ff 92       	push	r15
 796:	0f 93       	push	r16
 798:	1f 93       	push	r17
 79a:	df 93       	push	r29
 79c:	cf 93       	push	r28
 79e:	00 d0       	rcall	.+0      	; 0x7a0 <screenTempInfo+0xe>
 7a0:	00 d0       	rcall	.+0      	; 0x7a2 <screenTempInfo+0x10>
 7a2:	cd b7       	in	r28, 0x3d	; 61
 7a4:	de b7       	in	r29, 0x3e	; 62

	//lcd_clear();
	//utoa(voltageBuffer, buffer,10);
	//lcd_string(buffer);

	tempInside = (voltInside*(uint16_t)145)-14377;
 7a6:	21 e9       	ldi	r18, 0x91	; 145
 7a8:	30 e0       	ldi	r19, 0x00	; 0
 7aa:	82 9f       	mul	r24, r18
 7ac:	80 01       	movw	r16, r0
 7ae:	83 9f       	mul	r24, r19
 7b0:	10 0d       	add	r17, r0
 7b2:	92 9f       	mul	r25, r18
 7b4:	10 0d       	add	r17, r0
 7b6:	11 24       	eor	r1, r1
 7b8:	09 52       	subi	r16, 0x29	; 41
 7ba:	18 43       	sbci	r17, 0x38	; 56
	tempMotor = (voltMotor*(uint16_t)145)-14377;
	

	lcd_clear();
 7bc:	0e 94 b7 00 	call	0x16e	; 0x16e <lcd_clear>
	
	//Daten vom Temperatur-Sensor im Innenraum
    lcd_string("T inside: ");
 7c0:	80 e6       	ldi	r24, 0x60	; 96
 7c2:	90 e0       	ldi	r25, 0x00	; 0
 7c4:	0e 94 1e 01 	call	0x23c	; 0x23c <lcd_string>
	//Vorkomma-Stelle ausgeben
	voltageBuffer = (tempInside+(uint16_t)(100>>1))/(uint16_t)100;	
	utoa(voltageBuffer, buffer, 10);
 7c8:	c8 01       	movw	r24, r16
 7ca:	c2 96       	adiw	r24, 0x32	; 50
 7cc:	64 e6       	ldi	r22, 0x64	; 100
 7ce:	70 e0       	ldi	r23, 0x00	; 0
 7d0:	0e 94 17 06 	call	0xc2e	; 0xc2e <__udivmodhi4>
 7d4:	cb 01       	movw	r24, r22
 7d6:	7e 01       	movw	r14, r28
 7d8:	08 94       	sec
 7da:	e1 1c       	adc	r14, r1
 7dc:	f1 1c       	adc	r15, r1
 7de:	b7 01       	movw	r22, r14
 7e0:	4a e0       	ldi	r20, 0x0A	; 10
 7e2:	50 e0       	ldi	r21, 0x00	; 0
 7e4:	0e 94 2b 06 	call	0xc56	; 0xc56 <utoa>
	lcd_string(buffer);
 7e8:	c7 01       	movw	r24, r14
 7ea:	0e 94 1e 01 	call	0x23c	; 0x23c <lcd_string>
	lcd_string(",");
 7ee:	8b e6       	ldi	r24, 0x6B	; 107
 7f0:	90 e0       	ldi	r25, 0x00	; 0
 7f2:	0e 94 1e 01 	call	0x23c	; 0x23c <lcd_string>
	//Nachkomma-Stelle ausgeben
	voltageBuffer = tempInside%(uint16_t)100;
	//Nur eine Nachkommastelle berücksichtigen
	voltageBuffer = (voltageBuffer+(uint16_t)(100>>1))/(uint16_t)10;
 7f6:	c8 01       	movw	r24, r16
 7f8:	64 e6       	ldi	r22, 0x64	; 100
 7fa:	70 e0       	ldi	r23, 0x00	; 0
 7fc:	0e 94 17 06 	call	0xc2e	; 0xc2e <__udivmodhi4>
	utoa(voltageBuffer, buffer, 10);
 800:	c2 96       	adiw	r24, 0x32	; 50
 802:	6a e0       	ldi	r22, 0x0A	; 10
 804:	70 e0       	ldi	r23, 0x00	; 0
 806:	0e 94 17 06 	call	0xc2e	; 0xc2e <__udivmodhi4>
 80a:	cb 01       	movw	r24, r22
 80c:	b7 01       	movw	r22, r14
 80e:	4a e0       	ldi	r20, 0x0A	; 10
 810:	50 e0       	ldi	r21, 0x00	; 0
 812:	0e 94 2b 06 	call	0xc56	; 0xc56 <utoa>
	lcd_string(buffer);
 816:	c7 01       	movw	r24, r14
 818:	0e 94 1e 01 	call	0x23c	; 0x23c <lcd_string>
	lcd_string(" C");
 81c:	8d e6       	ldi	r24, 0x6D	; 109
 81e:	90 e0       	ldi	r25, 0x00	; 0
 820:	0e 94 1e 01 	call	0x23c	; 0x23c <lcd_string>
	voltageBuffer = voltageBuffer/10;
	utoa(voltageBuffer, buffer, 10);
	lcd_string(buffer);
	lcd_string(" C");
*/
}
 824:	0f 90       	pop	r0
 826:	0f 90       	pop	r0
 828:	0f 90       	pop	r0
 82a:	0f 90       	pop	r0
 82c:	cf 91       	pop	r28
 82e:	df 91       	pop	r29
 830:	1f 91       	pop	r17
 832:	0f 91       	pop	r16
 834:	ff 90       	pop	r15
 836:	ef 90       	pop	r14
 838:	08 95       	ret

0000083a <screenWarningBatt2>:
eingestellte "Threshold" Schwelle sinkt.

--------------------------------------------------------------------------------*/
void screenWarningBatt2()
{
	lcd_clear();
 83a:	0e 94 b7 00 	call	0x16e	; 0x16e <lcd_clear>
    lcd_string("Battery 2");
 83e:	80 e7       	ldi	r24, 0x70	; 112
 840:	90 e0       	ldi	r25, 0x00	; 0
 842:	0e 94 1e 01 	call	0x23c	; 0x23c <lcd_string>
	set_cursor(0,2);
 846:	80 e0       	ldi	r24, 0x00	; 0
 848:	62 e0       	ldi	r22, 0x02	; 2
 84a:	0e 94 08 01 	call	0x210	; 0x210 <set_cursor>
	lcd_string("below threshold!");	
 84e:	8a e7       	ldi	r24, 0x7A	; 122
 850:	90 e0       	ldi	r25, 0x00	; 0
 852:	0e 94 1e 01 	call	0x23c	; 0x23c <lcd_string>
}
 856:	08 95       	ret

00000858 <screenWarningBatt1>:
eingestellte "Threshold" Schwelle sinkt.

--------------------------------------------------------------------------------*/
void screenWarningBatt1()
{
	lcd_clear();
 858:	0e 94 b7 00 	call	0x16e	; 0x16e <lcd_clear>
    lcd_string("Battery 1");
 85c:	8b e8       	ldi	r24, 0x8B	; 139
 85e:	90 e0       	ldi	r25, 0x00	; 0
 860:	0e 94 1e 01 	call	0x23c	; 0x23c <lcd_string>
	set_cursor(0,2);
 864:	80 e0       	ldi	r24, 0x00	; 0
 866:	62 e0       	ldi	r22, 0x02	; 2
 868:	0e 94 08 01 	call	0x210	; 0x210 <set_cursor>
	lcd_string("below threshold!");	
 86c:	8a e7       	ldi	r24, 0x7A	; 122
 86e:	90 e0       	ldi	r25, 0x00	; 0
 870:	0e 94 1e 01 	call	0x23c	; 0x23c <lcd_string>
}
 874:	08 95       	ret

00000876 <screenLightWarning>:

Wird beim Ausschalten des Abblendlichtes automatisch zurückgesetzt.
--------------------------------------------------------------------------------*/
void screenLightWarning()
{
	lcd_clear();
 876:	0e 94 b7 00 	call	0x16e	; 0x16e <lcd_clear>
    lcd_string("Warning!");
 87a:	85 e9       	ldi	r24, 0x95	; 149
 87c:	90 e0       	ldi	r25, 0x00	; 0
 87e:	0e 94 1e 01 	call	0x23c	; 0x23c <lcd_string>
	set_cursor(0,2);
 882:	80 e0       	ldi	r24, 0x00	; 0
 884:	62 e0       	ldi	r22, 0x02	; 2
 886:	0e 94 08 01 	call	0x210	; 0x210 <set_cursor>
	lcd_string("Light still on!");
 88a:	8e e9       	ldi	r24, 0x9E	; 158
 88c:	90 e0       	ldi	r25, 0x00	; 0
 88e:	0e 94 1e 01 	call	0x23c	; 0x23c <lcd_string>
}
 892:	08 95       	ret

00000894 <screenInfo>:


--------------------------------------------------------------------------------*/
void screenInfo()
{
	lcd_clear();
 894:	0e 94 b7 00 	call	0x16e	; 0x16e <lcd_clear>
    lcd_string("Firmware: V0.3");
 898:	8e ea       	ldi	r24, 0xAE	; 174
 89a:	90 e0       	ldi	r25, 0x00	; 0
 89c:	0e 94 1e 01 	call	0x23c	; 0x23c <lcd_string>
	set_cursor(0,2);
 8a0:	80 e0       	ldi	r24, 0x00	; 0
 8a2:	62 e0       	ldi	r22, 0x02	; 2
 8a4:	0e 94 08 01 	call	0x210	; 0x210 <set_cursor>
	lcd_string("Date: 10.05.11");	
 8a8:	8d eb       	ldi	r24, 0xBD	; 189
 8aa:	90 e0       	ldi	r25, 0x00	; 0
 8ac:	0e 94 1e 01 	call	0x23c	; 0x23c <lcd_string>
}
 8b0:	08 95       	ret

000008b2 <screenWakeupSleepmode>:


--------------------------------------------------------------------------------*/
void screenWakeupSleepmode()
{
	lcd_clear();
 8b2:	0e 94 b7 00 	call	0x16e	; 0x16e <lcd_clear>
    lcd_string("Wake up from");
 8b6:	8c ec       	ldi	r24, 0xCC	; 204
 8b8:	90 e0       	ldi	r25, 0x00	; 0
 8ba:	0e 94 1e 01 	call	0x23c	; 0x23c <lcd_string>
	set_cursor(0,2);
 8be:	80 e0       	ldi	r24, 0x00	; 0
 8c0:	62 e0       	ldi	r22, 0x02	; 2
 8c2:	0e 94 08 01 	call	0x210	; 0x210 <set_cursor>
	lcd_string("Sleepmode...");	
 8c6:	89 ed       	ldi	r24, 0xD9	; 217
 8c8:	90 e0       	ldi	r25, 0x00	; 0
 8ca:	0e 94 1e 01 	call	0x23c	; 0x23c <lcd_string>
}
 8ce:	08 95       	ret

000008d0 <screenGotoSleepmode>:


--------------------------------------------------------------------------------*/
void screenGotoSleepmode()
{
	lcd_clear();
 8d0:	0e 94 b7 00 	call	0x16e	; 0x16e <lcd_clear>
    lcd_string("Entering");
 8d4:	86 ee       	ldi	r24, 0xE6	; 230
 8d6:	90 e0       	ldi	r25, 0x00	; 0
 8d8:	0e 94 1e 01 	call	0x23c	; 0x23c <lcd_string>
	set_cursor(0,2);
 8dc:	80 e0       	ldi	r24, 0x00	; 0
 8de:	62 e0       	ldi	r22, 0x02	; 2
 8e0:	0e 94 08 01 	call	0x210	; 0x210 <set_cursor>
	lcd_string("Sleepmode...");	
 8e4:	89 ed       	ldi	r24, 0xD9	; 217
 8e6:	90 e0       	ldi	r25, 0x00	; 0
 8e8:	0e 94 1e 01 	call	0x23c	; 0x23c <lcd_string>
}
 8ec:	08 95       	ret

000008ee <screenVoltageThreshold>:

!!!!die alarme bei unterschreiten der batterie grenzwerte sind noch nicht implementiert!!!

--------------------------------------------------------------------------------*/
void screenVoltageThreshold(uint16_t batt1Thres, uint16_t batt2Thres)
{
 8ee:	af 92       	push	r10
 8f0:	bf 92       	push	r11
 8f2:	cf 92       	push	r12
 8f4:	df 92       	push	r13
 8f6:	ef 92       	push	r14
 8f8:	ff 92       	push	r15
 8fa:	0f 93       	push	r16
 8fc:	1f 93       	push	r17
 8fe:	df 93       	push	r29
 900:	cf 93       	push	r28
 902:	00 d0       	rcall	.+0      	; 0x904 <screenVoltageThreshold+0x16>
 904:	00 d0       	rcall	.+0      	; 0x906 <screenVoltageThreshold+0x18>
 906:	cd b7       	in	r28, 0x3d	; 61
 908:	de b7       	in	r29, 0x3e	; 62
 90a:	7c 01       	movw	r14, r24
 90c:	5b 01       	movw	r10, r22
	char buffer[4];
	uint16_t voltageBuffer;	

	lcd_clear();
 90e:	0e 94 b7 00 	call	0x16e	; 0x16e <lcd_clear>
	
	//Daten von Batterie1
    lcd_string("Threshold1: ");
 912:	8f ee       	ldi	r24, 0xEF	; 239
 914:	90 e0       	ldi	r25, 0x00	; 0
 916:	0e 94 1e 01 	call	0x23c	; 0x23c <lcd_string>
	//Vorkomma-Stelle ausgeben
	voltageBuffer = batt1Thres/(uint16_t)10;	
	utoa(voltageBuffer, buffer, 10);
 91a:	c7 01       	movw	r24, r14
 91c:	6a e0       	ldi	r22, 0x0A	; 10
 91e:	70 e0       	ldi	r23, 0x00	; 0
 920:	0e 94 17 06 	call	0xc2e	; 0xc2e <__udivmodhi4>
 924:	cb 01       	movw	r24, r22
 926:	8e 01       	movw	r16, r28
 928:	0f 5f       	subi	r16, 0xFF	; 255
 92a:	1f 4f       	sbci	r17, 0xFF	; 255
 92c:	b8 01       	movw	r22, r16
 92e:	4a e0       	ldi	r20, 0x0A	; 10
 930:	50 e0       	ldi	r21, 0x00	; 0
 932:	0e 94 2b 06 	call	0xc56	; 0xc56 <utoa>
	lcd_string(buffer);
 936:	c8 01       	movw	r24, r16
 938:	0e 94 1e 01 	call	0x23c	; 0x23c <lcd_string>
	lcd_string(",");
 93c:	9b e6       	ldi	r25, 0x6B	; 107
 93e:	c9 2e       	mov	r12, r25
 940:	90 e0       	ldi	r25, 0x00	; 0
 942:	d9 2e       	mov	r13, r25
 944:	c6 01       	movw	r24, r12
 946:	0e 94 1e 01 	call	0x23c	; 0x23c <lcd_string>
	//Nachkomma-Stelle ausgeben
	voltageBuffer = batt1Thres%(uint16_t)10;
	utoa(voltageBuffer, buffer, 10);
 94a:	c7 01       	movw	r24, r14
 94c:	6a e0       	ldi	r22, 0x0A	; 10
 94e:	70 e0       	ldi	r23, 0x00	; 0
 950:	0e 94 17 06 	call	0xc2e	; 0xc2e <__udivmodhi4>
 954:	b8 01       	movw	r22, r16
 956:	4a e0       	ldi	r20, 0x0A	; 10
 958:	50 e0       	ldi	r21, 0x00	; 0
 95a:	0e 94 2b 06 	call	0xc56	; 0xc56 <utoa>
	lcd_string(buffer);
 95e:	c8 01       	movw	r24, r16
 960:	0e 94 1e 01 	call	0x23c	; 0x23c <lcd_string>
	lcd_string(" V");
 964:	8c ef       	ldi	r24, 0xFC	; 252
 966:	e8 2e       	mov	r14, r24
 968:	80 e0       	ldi	r24, 0x00	; 0
 96a:	f8 2e       	mov	r15, r24
 96c:	c7 01       	movw	r24, r14
 96e:	0e 94 1e 01 	call	0x23c	; 0x23c <lcd_string>

	//Daten von Batterie2	
	set_cursor(0,2);
 972:	80 e0       	ldi	r24, 0x00	; 0
 974:	62 e0       	ldi	r22, 0x02	; 2
 976:	0e 94 08 01 	call	0x210	; 0x210 <set_cursor>
	lcd_string("Threshold2: ");
 97a:	8f ef       	ldi	r24, 0xFF	; 255
 97c:	90 e0       	ldi	r25, 0x00	; 0
 97e:	0e 94 1e 01 	call	0x23c	; 0x23c <lcd_string>
	//Vorkomma-Stelle ausgeben
	voltageBuffer = batt2Thres/(uint16_t)10;	
	utoa(voltageBuffer, buffer, 10);
 982:	c5 01       	movw	r24, r10
 984:	6a e0       	ldi	r22, 0x0A	; 10
 986:	70 e0       	ldi	r23, 0x00	; 0
 988:	0e 94 17 06 	call	0xc2e	; 0xc2e <__udivmodhi4>
 98c:	cb 01       	movw	r24, r22
 98e:	b8 01       	movw	r22, r16
 990:	4a e0       	ldi	r20, 0x0A	; 10
 992:	50 e0       	ldi	r21, 0x00	; 0
 994:	0e 94 2b 06 	call	0xc56	; 0xc56 <utoa>
	lcd_string(buffer);
 998:	c8 01       	movw	r24, r16
 99a:	0e 94 1e 01 	call	0x23c	; 0x23c <lcd_string>
	lcd_string(",");
 99e:	c6 01       	movw	r24, r12
 9a0:	0e 94 1e 01 	call	0x23c	; 0x23c <lcd_string>
	//Nachkomma-Stelle ausgeben
	voltageBuffer = batt2Thres%(uint16_t)10;
	utoa(voltageBuffer, buffer, 10);
 9a4:	c5 01       	movw	r24, r10
 9a6:	6a e0       	ldi	r22, 0x0A	; 10
 9a8:	70 e0       	ldi	r23, 0x00	; 0
 9aa:	0e 94 17 06 	call	0xc2e	; 0xc2e <__udivmodhi4>
 9ae:	b8 01       	movw	r22, r16
 9b0:	4a e0       	ldi	r20, 0x0A	; 10
 9b2:	50 e0       	ldi	r21, 0x00	; 0
 9b4:	0e 94 2b 06 	call	0xc56	; 0xc56 <utoa>
	lcd_string(buffer);
 9b8:	c8 01       	movw	r24, r16
 9ba:	0e 94 1e 01 	call	0x23c	; 0x23c <lcd_string>
	lcd_string(" V");
 9be:	c7 01       	movw	r24, r14
 9c0:	0e 94 1e 01 	call	0x23c	; 0x23c <lcd_string>
}
 9c4:	0f 90       	pop	r0
 9c6:	0f 90       	pop	r0
 9c8:	0f 90       	pop	r0
 9ca:	0f 90       	pop	r0
 9cc:	cf 91       	pop	r28
 9ce:	df 91       	pop	r29
 9d0:	1f 91       	pop	r17
 9d2:	0f 91       	pop	r16
 9d4:	ff 90       	pop	r15
 9d6:	ef 90       	pop	r14
 9d8:	df 90       	pop	r13
 9da:	cf 90       	pop	r12
 9dc:	bf 90       	pop	r11
 9de:	af 90       	pop	r10
 9e0:	08 95       	ret

000009e2 <screenVoltageControl>:
zu vermeiden; z.B. 12.5 -> 1250


--------------------------------------------------------------------------------*/
void screenVoltageControl(uint16_t batt1Volt, uint16_t batt2Volt)
{
 9e2:	af 92       	push	r10
 9e4:	bf 92       	push	r11
 9e6:	cf 92       	push	r12
 9e8:	df 92       	push	r13
 9ea:	ef 92       	push	r14
 9ec:	ff 92       	push	r15
 9ee:	0f 93       	push	r16
 9f0:	1f 93       	push	r17
 9f2:	df 93       	push	r29
 9f4:	cf 93       	push	r28
 9f6:	00 d0       	rcall	.+0      	; 0x9f8 <screenVoltageControl+0x16>
 9f8:	00 d0       	rcall	.+0      	; 0x9fa <screenVoltageControl+0x18>
 9fa:	cd b7       	in	r28, 0x3d	; 61
 9fc:	de b7       	in	r29, 0x3e	; 62
 9fe:	7c 01       	movw	r14, r24
 a00:	5b 01       	movw	r10, r22
	char buffer[4];
	uint16_t voltageBuffer;	

	lcd_clear();
 a02:	0e 94 b7 00 	call	0x16e	; 0x16e <lcd_clear>
	
	//Daten von Batterie1
    lcd_string("Batt1: ");
 a06:	8c e0       	ldi	r24, 0x0C	; 12
 a08:	91 e0       	ldi	r25, 0x01	; 1
 a0a:	0e 94 1e 01 	call	0x23c	; 0x23c <lcd_string>
	//Vorkomma-Stelle ausgeben
	voltageBuffer = (batt1Volt+(uint16_t)(100>>1))/(uint16_t)100;	
	utoa(voltageBuffer, buffer, 10);
 a0e:	c7 01       	movw	r24, r14
 a10:	c2 96       	adiw	r24, 0x32	; 50
 a12:	64 e6       	ldi	r22, 0x64	; 100
 a14:	70 e0       	ldi	r23, 0x00	; 0
 a16:	0e 94 17 06 	call	0xc2e	; 0xc2e <__udivmodhi4>
 a1a:	cb 01       	movw	r24, r22
 a1c:	8e 01       	movw	r16, r28
 a1e:	0f 5f       	subi	r16, 0xFF	; 255
 a20:	1f 4f       	sbci	r17, 0xFF	; 255
 a22:	b8 01       	movw	r22, r16
 a24:	4a e0       	ldi	r20, 0x0A	; 10
 a26:	50 e0       	ldi	r21, 0x00	; 0
 a28:	0e 94 2b 06 	call	0xc56	; 0xc56 <utoa>
	lcd_string(buffer);
 a2c:	c8 01       	movw	r24, r16
 a2e:	0e 94 1e 01 	call	0x23c	; 0x23c <lcd_string>
	lcd_string(",");
 a32:	3b e6       	ldi	r19, 0x6B	; 107
 a34:	c3 2e       	mov	r12, r19
 a36:	30 e0       	ldi	r19, 0x00	; 0
 a38:	d3 2e       	mov	r13, r19
 a3a:	c6 01       	movw	r24, r12
 a3c:	0e 94 1e 01 	call	0x23c	; 0x23c <lcd_string>
	//Nachkomma-Stelle ausgeben
	voltageBuffer = batt1Volt%(uint16_t)100;
	utoa(voltageBuffer, buffer, 10);
 a40:	c7 01       	movw	r24, r14
 a42:	64 e6       	ldi	r22, 0x64	; 100
 a44:	70 e0       	ldi	r23, 0x00	; 0
 a46:	0e 94 17 06 	call	0xc2e	; 0xc2e <__udivmodhi4>
 a4a:	b8 01       	movw	r22, r16
 a4c:	4a e0       	ldi	r20, 0x0A	; 10
 a4e:	50 e0       	ldi	r21, 0x00	; 0
 a50:	0e 94 2b 06 	call	0xc56	; 0xc56 <utoa>
	lcd_string(buffer);
 a54:	c8 01       	movw	r24, r16
 a56:	0e 94 1e 01 	call	0x23c	; 0x23c <lcd_string>
	lcd_string(" V");
 a5a:	2c ef       	ldi	r18, 0xFC	; 252
 a5c:	e2 2e       	mov	r14, r18
 a5e:	20 e0       	ldi	r18, 0x00	; 0
 a60:	f2 2e       	mov	r15, r18
 a62:	c7 01       	movw	r24, r14
 a64:	0e 94 1e 01 	call	0x23c	; 0x23c <lcd_string>

	//Daten von Batterie2	
	set_cursor(0,2);
 a68:	80 e0       	ldi	r24, 0x00	; 0
 a6a:	62 e0       	ldi	r22, 0x02	; 2
 a6c:	0e 94 08 01 	call	0x210	; 0x210 <set_cursor>
	lcd_string("Batt2: ");
 a70:	84 e1       	ldi	r24, 0x14	; 20
 a72:	91 e0       	ldi	r25, 0x01	; 1
 a74:	0e 94 1e 01 	call	0x23c	; 0x23c <lcd_string>
	//Vorkomma-Stelle ausgeben
	voltageBuffer = (batt2Volt+(uint16_t)(100>>1))/(uint16_t)100;	
	utoa(voltageBuffer, buffer, 10);
 a78:	c5 01       	movw	r24, r10
 a7a:	c2 96       	adiw	r24, 0x32	; 50
 a7c:	64 e6       	ldi	r22, 0x64	; 100
 a7e:	70 e0       	ldi	r23, 0x00	; 0
 a80:	0e 94 17 06 	call	0xc2e	; 0xc2e <__udivmodhi4>
 a84:	cb 01       	movw	r24, r22
 a86:	b8 01       	movw	r22, r16
 a88:	4a e0       	ldi	r20, 0x0A	; 10
 a8a:	50 e0       	ldi	r21, 0x00	; 0
 a8c:	0e 94 2b 06 	call	0xc56	; 0xc56 <utoa>
	lcd_string(buffer);
 a90:	c8 01       	movw	r24, r16
 a92:	0e 94 1e 01 	call	0x23c	; 0x23c <lcd_string>
	lcd_string(",");
 a96:	c6 01       	movw	r24, r12
 a98:	0e 94 1e 01 	call	0x23c	; 0x23c <lcd_string>
	//Nachkomma-Stelle ausgeben
	voltageBuffer = batt2Volt%(uint16_t)100;
	utoa(voltageBuffer, buffer, 10);
 a9c:	c5 01       	movw	r24, r10
 a9e:	64 e6       	ldi	r22, 0x64	; 100
 aa0:	70 e0       	ldi	r23, 0x00	; 0
 aa2:	0e 94 17 06 	call	0xc2e	; 0xc2e <__udivmodhi4>
 aa6:	b8 01       	movw	r22, r16
 aa8:	4a e0       	ldi	r20, 0x0A	; 10
 aaa:	50 e0       	ldi	r21, 0x00	; 0
 aac:	0e 94 2b 06 	call	0xc56	; 0xc56 <utoa>
	lcd_string(buffer);
 ab0:	c8 01       	movw	r24, r16
 ab2:	0e 94 1e 01 	call	0x23c	; 0x23c <lcd_string>
	lcd_string(" V");
 ab6:	c7 01       	movw	r24, r14
 ab8:	0e 94 1e 01 	call	0x23c	; 0x23c <lcd_string>
}
 abc:	0f 90       	pop	r0
 abe:	0f 90       	pop	r0
 ac0:	0f 90       	pop	r0
 ac2:	0f 90       	pop	r0
 ac4:	cf 91       	pop	r28
 ac6:	df 91       	pop	r29
 ac8:	1f 91       	pop	r17
 aca:	0f 91       	pop	r16
 acc:	ff 90       	pop	r15
 ace:	ef 90       	pop	r14
 ad0:	df 90       	pop	r13
 ad2:	cf 90       	pop	r12
 ad4:	bf 90       	pop	r11
 ad6:	af 90       	pop	r10
 ad8:	08 95       	ret

00000ada <screenHeatingAuto>:
beinhaltet die Ziel-Temperatur des Heizungs-Reglers.


--------------------------------------------------------------------------------*/
void screenHeatingAuto(uint16_t targetTemp)
{
 ada:	0f 93       	push	r16
 adc:	1f 93       	push	r17
 ade:	df 93       	push	r29
 ae0:	cf 93       	push	r28
 ae2:	00 d0       	rcall	.+0      	; 0xae4 <screenHeatingAuto+0xa>
 ae4:	00 d0       	rcall	.+0      	; 0xae6 <screenHeatingAuto+0xc>
 ae6:	cd b7       	in	r28, 0x3d	; 61
 ae8:	de b7       	in	r29, 0x3e	; 62
 aea:	8c 01       	movw	r16, r24
	char buffer[4];
	
	lcd_clear();
 aec:	0e 94 b7 00 	call	0x16e	; 0x16e <lcd_clear>
    lcd_string("Temperature:");
 af0:	8c e1       	ldi	r24, 0x1C	; 28
 af2:	91 e0       	ldi	r25, 0x01	; 1
 af4:	0e 94 1e 01 	call	0x23c	; 0x23c <lcd_string>
	set_cursor(0,2);
 af8:	80 e0       	ldi	r24, 0x00	; 0
 afa:	62 e0       	ldi	r22, 0x02	; 2
 afc:	0e 94 08 01 	call	0x210	; 0x210 <set_cursor>
	utoa(targetTemp, buffer, 10);
 b00:	c8 01       	movw	r24, r16
 b02:	8e 01       	movw	r16, r28
 b04:	0f 5f       	subi	r16, 0xFF	; 255
 b06:	1f 4f       	sbci	r17, 0xFF	; 255
 b08:	b8 01       	movw	r22, r16
 b0a:	4a e0       	ldi	r20, 0x0A	; 10
 b0c:	50 e0       	ldi	r21, 0x00	; 0
 b0e:	0e 94 2b 06 	call	0xc56	; 0xc56 <utoa>
	lcd_string(buffer);	
 b12:	c8 01       	movw	r24, r16
 b14:	0e 94 1e 01 	call	0x23c	; 0x23c <lcd_string>
}
 b18:	0f 90       	pop	r0
 b1a:	0f 90       	pop	r0
 b1c:	0f 90       	pop	r0
 b1e:	0f 90       	pop	r0
 b20:	cf 91       	pop	r28
 b22:	df 91       	pop	r29
 b24:	1f 91       	pop	r17
 b26:	0f 91       	pop	r16
 b28:	08 95       	ret

00000b2a <screenWelcome>:
Wird beim Systemstart angezeigt.

--------------------------------------------------------------------------------*/
void screenWelcome()
{
	lcd_clear();
 b2a:	0e 94 b7 00 	call	0x16e	; 0x16e <lcd_clear>
    lcd_string("Welcome!");
 b2e:	89 e2       	ldi	r24, 0x29	; 41
 b30:	91 e0       	ldi	r25, 0x01	; 1
 b32:	0e 94 1e 01 	call	0x23c	; 0x23c <lcd_string>
	set_cursor(0,2);
 b36:	80 e0       	ldi	r24, 0x00	; 0
 b38:	62 e0       	ldi	r22, 0x02	; 2
 b3a:	0e 94 08 01 	call	0x210	; 0x210 <set_cursor>
	lcd_string("Starting system.");
 b3e:	82 e3       	ldi	r24, 0x32	; 50
 b40:	91 e0       	ldi	r25, 0x01	; 1
 b42:	0e 94 1e 01 	call	0x23c	; 0x23c <lcd_string>
}
 b46:	08 95       	ret

00000b48 <screenHeatingManual>:

- 16 Heizlevel Stufen

--------------------------------------------------------------------------------*/
void screenHeatingManual(uint8_t heizStatus, uint8_t *heizLevel)
{
 b48:	1f 93       	push	r17
 b4a:	cf 93       	push	r28
 b4c:	df 93       	push	r29
 b4e:	18 2f       	mov	r17, r24
 b50:	eb 01       	movw	r28, r22
   lcd_clear();
 b52:	0e 94 b7 00 	call	0x16e	; 0x16e <lcd_clear>
   lcd_home();
 b56:	0e 94 00 01 	call	0x200	; 0x200 <lcd_home>
   lcd_string("cold        warm");
 b5a:	83 e4       	ldi	r24, 0x43	; 67
 b5c:	91 e0       	ldi	r25, 0x01	; 1
 b5e:	0e 94 1e 01 	call	0x23c	; 0x23c <lcd_string>
   
   if ((heizStatus==1) && ((*heizLevel) != 15)) //mehr heizen
 b62:	11 30       	cpi	r17, 0x01	; 1
 b64:	31 f4       	brne	.+12     	; 0xb72 <screenHeatingManual+0x2a>
 b66:	88 81       	ld	r24, Y
 b68:	8f 30       	cpi	r24, 0x0F	; 15
 b6a:	c9 f1       	breq	.+114    	; 0xbde <screenHeatingManual+0x96>
   {
   	   //setze nächsten Heizblock
   	   (*heizLevel)++;
 b6c:	8f 5f       	subi	r24, 0xFF	; 255
 b6e:	88 83       	st	Y, r24
 b70:	1f c0       	rjmp	.+62     	; 0xbb0 <screenHeatingManual+0x68>
	   LCD_PORT |= 0xF0;                //das high nibble von temp2 wird PORTD zugewiesen
	   lcd_enable();					//E wird kurz gesetzt und dann wieder zurückgesetzt
   
	   _delay_us(42);
	}
	else if ((heizStatus==0) && ((*heizLevel)!=0)) //weniger heizen
 b72:	11 23       	and	r17, r17
 b74:	d1 f4       	brne	.+52     	; 0xbaa <screenHeatingManual+0x62>
 b76:	88 81       	ld	r24, Y
 b78:	88 23       	and	r24, r24
 b7a:	89 f1       	breq	.+98     	; 0xbde <screenHeatingManual+0x96>
	{
	   //lösche aktuellen Heizblock
	   set_cursor((*heizLevel),2);
 b7c:	62 e0       	ldi	r22, 0x02	; 2
 b7e:	0e 94 08 01 	call	0x210	; 0x210 <set_cursor>
   	
	   LCD_PORT |= (1<<LCD_RS);        	// RS auf 1 setzen
 b82:	aa 9a       	sbi	0x15, 2	; 21
 
	   //High Teil des Zeichens ausgeben 			
	   LCD_PORT &= 0x0F;				//das high nibble in PORTD wird auf null gesetzt				
 b84:	85 b3       	in	r24, 0x15	; 21
 b86:	8f 70       	andi	r24, 0x0F	; 15
 b88:	85 bb       	out	0x15, r24	; 21
	   LCD_PORT |= 0x80;                //das high nibble von PORTD wird auf 0b1111 gesetzt
 b8a:	af 9a       	sbi	0x15, 7	; 21
	   lcd_enable();					//E wird kurz gesetzt und dann wieder zurückgesetzt
 b8c:	0e 94 b1 00 	call	0x162	; 0x162 <lcd_enable>
   
	   //Low Teil des Zeichens ausgeben
	   LCD_PORT &= 0x0F;				//das high nibble in PORTD wird auf null gesetzt
 b90:	85 b3       	in	r24, 0x15	; 21
 b92:	8f 70       	andi	r24, 0x0F	; 15
 b94:	85 bb       	out	0x15, r24	; 21
	   LCD_PORT |= 0x80;                //das high nibble von temp2 wird PORTD zugewiesen
 b96:	af 9a       	sbi	0x15, 7	; 21
	   lcd_enable();					//E wird kurz gesetzt und dann wieder zurückgesetzt
 b98:	0e 94 b1 00 	call	0x162	; 0x162 <lcd_enable>
 b9c:	88 e3       	ldi	r24, 0x38	; 56
 b9e:	8a 95       	dec	r24
 ba0:	f1 f7       	brne	.-4      	; 0xb9e <screenHeatingManual+0x56>
   
	   _delay_us(42);
	   (*heizLevel)--;
 ba2:	88 81       	ld	r24, Y
 ba4:	81 50       	subi	r24, 0x01	; 1
 ba6:	88 83       	st	Y, r24
 ba8:	1a c0       	rjmp	.+52     	; 0xbde <screenHeatingManual+0x96>
	}
	else if (heizStatus==2) //gleichbleibend heizen
 baa:	12 30       	cpi	r17, 0x02	; 2
 bac:	c1 f4       	brne	.+48     	; 0xbde <screenHeatingManual+0x96>
	{
	   set_cursor((*heizLevel),2);
 bae:	88 81       	ld	r24, Y
 bb0:	62 e0       	ldi	r22, 0x02	; 2
 bb2:	0e 94 08 01 	call	0x210	; 0x210 <set_cursor>
   	
	   LCD_PORT |= (1<<LCD_RS);        	// RS auf 1 setzen
 bb6:	aa 9a       	sbi	0x15, 2	; 21
 
	   //High Teil des Zeichens ausgeben 			
	   LCD_PORT &= 0x0F;				//das high nibble in PORTD wird auf null gesetzt				
 bb8:	85 b3       	in	r24, 0x15	; 21
 bba:	8f 70       	andi	r24, 0x0F	; 15
 bbc:	85 bb       	out	0x15, r24	; 21
	   LCD_PORT |= 0xF0;                //das high nibble von PORTD wird auf 0b1111 gesetzt
 bbe:	85 b3       	in	r24, 0x15	; 21
 bc0:	80 6f       	ori	r24, 0xF0	; 240
 bc2:	85 bb       	out	0x15, r24	; 21
	   lcd_enable();					//E wird kurz gesetzt und dann wieder zurückgesetzt
 bc4:	0e 94 b1 00 	call	0x162	; 0x162 <lcd_enable>
   
	   //Low Teil des Zeichens ausgeben
	   LCD_PORT &= 0x0F;				//das high nibble in PORTD wird auf null gesetzt
 bc8:	85 b3       	in	r24, 0x15	; 21
 bca:	8f 70       	andi	r24, 0x0F	; 15
 bcc:	85 bb       	out	0x15, r24	; 21
	   LCD_PORT |= 0xF0;                //das high nibble von temp2 wird PORTD zugewiesen
 bce:	85 b3       	in	r24, 0x15	; 21
 bd0:	80 6f       	ori	r24, 0xF0	; 240
 bd2:	85 bb       	out	0x15, r24	; 21
	   lcd_enable();					//E wird kurz gesetzt und dann wieder zurückgesetzt
 bd4:	0e 94 b1 00 	call	0x162	; 0x162 <lcd_enable>
 bd8:	88 e3       	ldi	r24, 0x38	; 56
 bda:	8a 95       	dec	r24
 bdc:	f1 f7       	brne	.-4      	; 0xbda <screenHeatingManual+0x92>
   
	   _delay_us(42);
	}
	
}
 bde:	df 91       	pop	r29
 be0:	cf 91       	pop	r28
 be2:	1f 91       	pop	r17
 be4:	08 95       	ret

00000be6 <menuInit>:
Beim Starten und Aufwachen (SleepMode) des Systems soll erst der Willkommens
Bildschirm und dann der Batterie-Spannungs Bildschirm angezeigt werden.

--------------------------------------------------------------------------------*/
void menuInit()
{
 be6:	0f 93       	push	r16
 be8:	1f 93       	push	r17
	uint16_t batt1Volt=0;
	uint16_t batt2Volt=0;	

	screenWelcome();
 bea:	0e 94 95 05 	call	0xb2a	; 0xb2a <screenWelcome>
 bee:	80 e2       	ldi	r24, 0x20	; 32
 bf0:	9e e4       	ldi	r25, 0x4E	; 78
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 bf2:	24 e6       	ldi	r18, 0x64	; 100
 bf4:	30 e0       	ldi	r19, 0x00	; 0
 bf6:	f9 01       	movw	r30, r18
 bf8:	31 97       	sbiw	r30, 0x01	; 1
 bfa:	f1 f7       	brne	.-4      	; 0xbf8 <menuInit+0x12>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 bfc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 bfe:	d9 f7       	brne	.-10     	; 0xbf6 <menuInit+0x10>
	_delay_ms(2000);
	
	
	batt1Volt = adcRead15(4);
 c00:	84 e0       	ldi	r24, 0x04	; 4
 c02:	0e 94 4f 03 	call	0x69e	; 0x69e <adcRead15>
 c06:	8c 01       	movw	r16, r24
	batt2Volt = adcRead15(5);
 c08:	85 e0       	ldi	r24, 0x05	; 5
 c0a:	0e 94 4f 03 	call	0x69e	; 0x69e <adcRead15>
 c0e:	bc 01       	movw	r22, r24
	screenVoltageControl(batt1Volt, batt2Volt);
 c10:	c8 01       	movw	r24, r16
 c12:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <screenVoltageControl>
 c16:	80 e3       	ldi	r24, 0x30	; 48
 c18:	95 e7       	ldi	r25, 0x75	; 117
 c1a:	24 e6       	ldi	r18, 0x64	; 100
 c1c:	30 e0       	ldi	r19, 0x00	; 0
 c1e:	f9 01       	movw	r30, r18
 c20:	31 97       	sbiw	r30, 0x01	; 1
 c22:	f1 f7       	brne	.-4      	; 0xc20 <menuInit+0x3a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 c24:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 c26:	d9 f7       	brne	.-10     	; 0xc1e <menuInit+0x38>
	_delay_ms(3000);
}
 c28:	1f 91       	pop	r17
 c2a:	0f 91       	pop	r16
 c2c:	08 95       	ret

00000c2e <__udivmodhi4>:
 c2e:	aa 1b       	sub	r26, r26
 c30:	bb 1b       	sub	r27, r27
 c32:	51 e1       	ldi	r21, 0x11	; 17
 c34:	07 c0       	rjmp	.+14     	; 0xc44 <__udivmodhi4_ep>

00000c36 <__udivmodhi4_loop>:
 c36:	aa 1f       	adc	r26, r26
 c38:	bb 1f       	adc	r27, r27
 c3a:	a6 17       	cp	r26, r22
 c3c:	b7 07       	cpc	r27, r23
 c3e:	10 f0       	brcs	.+4      	; 0xc44 <__udivmodhi4_ep>
 c40:	a6 1b       	sub	r26, r22
 c42:	b7 0b       	sbc	r27, r23

00000c44 <__udivmodhi4_ep>:
 c44:	88 1f       	adc	r24, r24
 c46:	99 1f       	adc	r25, r25
 c48:	5a 95       	dec	r21
 c4a:	a9 f7       	brne	.-22     	; 0xc36 <__udivmodhi4_loop>
 c4c:	80 95       	com	r24
 c4e:	90 95       	com	r25
 c50:	bc 01       	movw	r22, r24
 c52:	cd 01       	movw	r24, r26
 c54:	08 95       	ret

00000c56 <utoa>:
 c56:	fb 01       	movw	r30, r22
 c58:	9f 01       	movw	r18, r30
 c5a:	42 30       	cpi	r20, 0x02	; 2
 c5c:	74 f0       	brlt	.+28     	; 0xc7a <utoa+0x24>
 c5e:	45 32       	cpi	r20, 0x25	; 37
 c60:	64 f4       	brge	.+24     	; 0xc7a <utoa+0x24>
 c62:	64 2f       	mov	r22, r20
 c64:	77 27       	eor	r23, r23
 c66:	0e 94 17 06 	call	0xc2e	; 0xc2e <__udivmodhi4>
 c6a:	80 5d       	subi	r24, 0xD0	; 208
 c6c:	8a 33       	cpi	r24, 0x3A	; 58
 c6e:	0c f0       	brlt	.+2      	; 0xc72 <utoa+0x1c>
 c70:	89 5d       	subi	r24, 0xD9	; 217
 c72:	81 93       	st	Z+, r24
 c74:	cb 01       	movw	r24, r22
 c76:	00 97       	sbiw	r24, 0x00	; 0
 c78:	a1 f7       	brne	.-24     	; 0xc62 <utoa+0xc>
 c7a:	10 82       	st	Z, r1
 c7c:	c9 01       	movw	r24, r18
 c7e:	0c 94 41 06 	jmp	0xc82	; 0xc82 <strrev>

00000c82 <strrev>:
 c82:	dc 01       	movw	r26, r24
 c84:	fc 01       	movw	r30, r24
 c86:	67 2f       	mov	r22, r23
 c88:	71 91       	ld	r23, Z+
 c8a:	77 23       	and	r23, r23
 c8c:	e1 f7       	brne	.-8      	; 0xc86 <strrev+0x4>
 c8e:	32 97       	sbiw	r30, 0x02	; 2
 c90:	04 c0       	rjmp	.+8      	; 0xc9a <strrev+0x18>
 c92:	7c 91       	ld	r23, X
 c94:	6d 93       	st	X+, r22
 c96:	70 83       	st	Z, r23
 c98:	62 91       	ld	r22, -Z
 c9a:	ae 17       	cp	r26, r30
 c9c:	bf 07       	cpc	r27, r31
 c9e:	c8 f3       	brcs	.-14     	; 0xc92 <strrev+0x10>
 ca0:	08 95       	ret

00000ca2 <_exit>:
 ca2:	f8 94       	cli

00000ca4 <__stop_program>:
 ca4:	ff cf       	rjmp	.-2      	; 0xca4 <__stop_program>
