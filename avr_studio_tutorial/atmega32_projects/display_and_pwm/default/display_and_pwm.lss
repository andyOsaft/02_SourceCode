
display_and_pwm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004c8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  000004c8  0000055c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800082  00800082  0000057e  2**0
                  ALLOC
  3 .debug_aranges 000000a0  00000000  00000000  0000057e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000001b0  00000000  00000000  0000061e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c4b  00000000  00000000  000007ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000003de  00000000  00000000  00001419  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000ac2  00000000  00000000  000017f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000190  00000000  00000000  000022bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000029c  00000000  00000000  0000244c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002e3  00000000  00000000  000026e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  000029cb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_1>
   8:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__vector_2>
   c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ec       	ldi	r30, 0xC8	; 200
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a2 38       	cpi	r26, 0x82	; 130
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a2 e8       	ldi	r26, 0x82	; 130
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a5 38       	cpi	r26, 0x85	; 133
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 80 00 	call	0x100	; 0x100 <main>
  8a:	0c 94 62 02 	jmp	0x4c4	; 0x4c4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_1>:
volatile uint8_t lcdIni=0;
	


ISR(INT0_vect) //bei Button "warm", läuft durch wenn fallende Flanke auf INT0 (PD.2)
{
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	8f 93       	push	r24
	heizungUpdate=1;
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	80 93 82 00 	sts	0x0082, r24
	buttonWarm=1;
  a4:	80 93 83 00 	sts	0x0083, r24
	
}
  a8:	8f 91       	pop	r24
  aa:	0f 90       	pop	r0
  ac:	0f be       	out	0x3f, r0	; 63
  ae:	0f 90       	pop	r0
  b0:	1f 90       	pop	r1
  b2:	18 95       	reti

000000b4 <__vector_2>:


ISR(INT1_vect) //bei Button "kalt", läuft durch wenn fallende Flanke auf INT1 (PD.3)
{
  b4:	1f 92       	push	r1
  b6:	0f 92       	push	r0
  b8:	0f b6       	in	r0, 0x3f	; 63
  ba:	0f 92       	push	r0
  bc:	11 24       	eor	r1, r1
  be:	8f 93       	push	r24
	heizungUpdate=1;
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	80 93 82 00 	sts	0x0082, r24
	buttonWarm=0;
  c6:	10 92 83 00 	sts	0x0083, r1
	
}
  ca:	8f 91       	pop	r24
  cc:	0f 90       	pop	r0
  ce:	0f be       	out	0x3f, r0	; 63
  d0:	0f 90       	pop	r0
  d2:	1f 90       	pop	r1
  d4:	18 95       	reti

000000d6 <__vector_3>:


ISR(INT2_vect)
{	
  d6:	1f 92       	push	r1
  d8:	0f 92       	push	r0
  da:	0f b6       	in	r0, 0x3f	; 63
  dc:	0f 92       	push	r0
  de:	11 24       	eor	r1, r1
  e0:	8f 93       	push	r24
	PORTD |= (1<<BIT7);
  e2:	97 9a       	sbi	0x12, 7	; 18
	PORTC |= (1<<BIT0);
  e4:	a8 9a       	sbi	0x15, 0	; 21
	PORTC &= ~(1<<BIT1);
  e6:	a9 98       	cbi	0x15, 1	; 21
	lcdIni=1;
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	80 93 84 00 	sts	0x0084, r24
	sleep_disable();	//ISR läuft durch, wenn fallende Flanke auf INT2 (PB.2)
  ee:	85 b7       	in	r24, 0x35	; 53
  f0:	8f 77       	andi	r24, 0x7F	; 127
  f2:	85 bf       	out	0x35, r24	; 53
}
  f4:	8f 91       	pop	r24
  f6:	0f 90       	pop	r0
  f8:	0f be       	out	0x3f, r0	; 63
  fa:	0f 90       	pop	r0
  fc:	1f 90       	pop	r1
  fe:	18 95       	reti

00000100 <main>:



int main (void) {            
 100:	ff 92       	push	r15
 102:	0f 93       	push	r16
 104:	1f 93       	push	r17
 
	//Initialisierungen

	heizInit();
 106:	0e 94 bb 01 	call	0x376	; 0x376 <heizInit>
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
 10a:	85 b7       	in	r24, 0x35	; 53
 10c:	8f 78       	andi	r24, 0x8F	; 143
 10e:	80 62       	ori	r24, 0x20	; 32
 110:	85 bf       	out	0x35, r24	; 53

	sei();	
 112:	78 94       	sei
	uint8_t heizStufe=0;
	uint8_t dispPos=0;
	uint8_t tempDispPos=0;

			
	DDRB  |= 0x01;	        //Port A.0 als Ausgang (Kontroll LED grün)
 114:	b8 9a       	sbi	0x17, 0	; 23
	PORTB |= (1<<BIT0);		//Port A.0 = HIGH
 116:	c0 9a       	sbi	0x18, 0	; 24

	DDRC  |= (1<<BIT0);		//Port C.0 als Ausgang 
 118:	a0 9a       	sbi	0x14, 0	; 20
	PORTC |= (1<<BIT0);		//damit wird das Darlington angesteuert um im SleepMode
 11a:	a8 9a       	sbi	0x15, 0	; 21
							//die Masse fürs Display abzuschalten (im SleepMode = 0)

	DDRC  |=(1<<BIT1);		//Port C.1 als Ausgang
 11c:	a1 9a       	sbi	0x14, 1	; 20
							//die Masse auf den Emittor des Transistors zu schalten
							//der die Display-Beleuchtung steuert. (im SleepMode = 1)

	

	lcd_init();
 11e:	0e 94 37 01 	call	0x26e	; 0x26e <lcd_init>
	lcd_home();
 122:	0e 94 78 01 	call	0x2f0	; 0x2f0 <lcd_home>
	lcd_string("kalt        warm");
 126:	80 e6       	ldi	r24, 0x60	; 96
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	0e 94 96 01 	call	0x32c	; 0x32c <lcd_string>
	lcdHeizung(dispPos);
 12e:	80 e0       	ldi	r24, 0x00	; 0
 130:	0e 94 4a 02 	call	0x494	; 0x494 <lcdHeizung>
	
	DDRA |= (1<<BIT0) | (1<<BIT1) | (1<<BIT2) | (1<<BIT3); //A.0 bis A.3 als Ausgänge für Darlington-Array
 134:	8a b3       	in	r24, 0x1a	; 26
 136:	8f 60       	ori	r24, 0x0F	; 15
 138:	8a bb       	out	0x1a, r24	; 26
 13a:	ff 24       	eor	r15, r15
 13c:	00 e0       	ldi	r16, 0x00	; 0
	

  while(1)  {                
  

		if (lcdIni==1)
 13e:	80 91 84 00 	lds	r24, 0x0084
 142:	81 30       	cpi	r24, 0x01	; 1
 144:	99 f4       	brne	.+38     	; 0x16c <main+0x6c>
		{
			lcd_init();	
 146:	0e 94 37 01 	call	0x26e	; 0x26e <lcd_init>
			lcd_init();
 14a:	0e 94 37 01 	call	0x26e	; 0x26e <lcd_init>
			lcd_home();
 14e:	0e 94 78 01 	call	0x2f0	; 0x2f0 <lcd_home>
			lcd_string("kalt        warm");
 152:	80 e6       	ldi	r24, 0x60	; 96
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	0e 94 96 01 	call	0x32c	; 0x32c <lcd_string>
 15a:	10 e0       	ldi	r17, 0x00	; 0
			for(tempDispPos=0;tempDispPos<=dispPos;tempDispPos++)
			{
				lcdHeizung(tempDispPos);
 15c:	81 2f       	mov	r24, r17
 15e:	0e 94 4a 02 	call	0x494	; 0x494 <lcdHeizung>
		{
			lcd_init();	
			lcd_init();
			lcd_home();
			lcd_string("kalt        warm");
			for(tempDispPos=0;tempDispPos<=dispPos;tempDispPos++)
 162:	1f 5f       	subi	r17, 0xFF	; 255
 164:	01 17       	cp	r16, r17
 166:	d0 f7       	brcc	.-12     	; 0x15c <main+0x5c>
			{
				lcdHeizung(tempDispPos);
			}
			lcdIni=0;
 168:	10 92 84 00 	sts	0x0084, r1
		}

		if (heizungUpdate)
 16c:	80 91 82 00 	lds	r24, 0x0082
 170:	88 23       	and	r24, r24
 172:	41 f1       	breq	.+80     	; 0x1c4 <main+0xc4>
		{
			if (buttonWarm)
 174:	80 91 83 00 	lds	r24, 0x0083
 178:	88 23       	and	r24, r24
 17a:	99 f0       	breq	.+38     	; 0x1a2 <main+0xa2>
			{
				if (heizStufe<=maxHeizStufe)
 17c:	87 e0       	ldi	r24, 0x07	; 7
 17e:	8f 15       	cp	r24, r15
 180:	f8 f0       	brcs	.+62     	; 0x1c0 <main+0xc0>
				{	
					dispPos++;
 182:	10 2f       	mov	r17, r16
 184:	1f 5f       	subi	r17, 0xFF	; 255
					lcdHeizung(dispPos);
 186:	81 2f       	mov	r24, r17
 188:	0e 94 4a 02 	call	0x494	; 0x494 <lcdHeizung>
					dispPos++;
 18c:	0e 5f       	subi	r16, 0xFE	; 254
					lcdHeizung(dispPos);
 18e:	80 2f       	mov	r24, r16
 190:	0e 94 4a 02 	call	0x494	; 0x494 <lcdHeizung>
					heizStufe++;
 194:	f3 94       	inc	r15
					buttonWarm=0;
 196:	10 92 83 00 	sts	0x0083, r1
					motorRechtslauf(anzahlSchritte);
 19a:	84 e6       	ldi	r24, 0x64	; 100
 19c:	0e 94 ca 01 	call	0x394	; 0x394 <motorRechtslauf>
 1a0:	0f c0       	rjmp	.+30     	; 0x1c0 <main+0xc0>
				}
			}
			
			else //buttonKalt=gedrückt
			{
				if (heizStufe!=0)
 1a2:	ff 20       	and	r15, r15
 1a4:	69 f0       	breq	.+26     	; 0x1c0 <main+0xc0>
				{
					lcdKuehlung(dispPos);
 1a6:	80 2f       	mov	r24, r16
 1a8:	0e 94 36 02 	call	0x46c	; 0x46c <lcdKuehlung>
					dispPos--;
 1ac:	10 2f       	mov	r17, r16
 1ae:	11 50       	subi	r17, 0x01	; 1
					lcdKuehlung(dispPos);
 1b0:	81 2f       	mov	r24, r17
 1b2:	0e 94 36 02 	call	0x46c	; 0x46c <lcdKuehlung>
					dispPos--;
 1b6:	02 50       	subi	r16, 0x02	; 2
					heizStufe--;
 1b8:	fa 94       	dec	r15
					motorLinkslauf(anzahlSchritte);
 1ba:	84 e6       	ldi	r24, 0x64	; 100
 1bc:	0e 94 f7 01 	call	0x3ee	; 0x3ee <motorLinkslauf>
					
				}
			}
			heizungUpdate=0;
 1c0:	10 92 82 00 	sts	0x0082, r1
		}
		
		if (PIND & (1<<BIT6))	// Zündung=ON  -> Transistor schaltet 0V -> PIND.6 = 0
 1c4:	86 9b       	sbis	0x10, 6	; 16
 1c6:	bb cf       	rjmp	.-138    	; 0x13e <main+0x3e>
		{						// Zündung=OFF -> Transistor sperrt      -> PIND.6 = 1 (interner Pull-Up)
			 					// '->Sleep ON
			PORTC &= ~(1<<BIT0);//Display -> Spannungslos (Display-Masse wird abgeschaltet)
 1c8:	a8 98       	cbi	0x15, 0	; 21
			PORTC |= (1<<BIT1); //DisplayBeleuchtung -> spannungslos (über Darlington 0V an TransistorBasis)
 1ca:	a9 9a       	sbi	0x15, 1	; 21
			sleep_enable();	   
 1cc:	85 b7       	in	r24, 0x35	; 53
 1ce:	80 68       	ori	r24, 0x80	; 128
 1d0:	85 bf       	out	0x35, r24	; 53
			sleep_cpu();
 1d2:	88 95       	sleep
 1d4:	b4 cf       	rjmp	.-152    	; 0x13e <main+0x3e>

000001d6 <lcd_data>:
 
void lcd_data(unsigned char temp1)
{
   unsigned char temp2 = temp1;
 
   LCD_PORT |= (1<<LCD_RS);        	// RS auf 1 setzen
 1d6:	aa 9a       	sbi	0x15, 2	; 21
 
   //High Teil des Zeichens ausgeben 			
   temp1 = temp1 & 0xF0;			//das low nibble von temp1 auf null setzen; 
   LCD_PORT &= 0x0F;				//das high nibble in PORTD wird auf null gesetzt				
 1d8:	95 b3       	in	r25, 0x15	; 21
 1da:	9f 70       	andi	r25, 0x0F	; 15
 1dc:	95 bb       	out	0x15, r25	; 21
   LCD_PORT |= temp1;               //das high nibble von temp1 wird PORTD zugewiesen
 1de:	25 b3       	in	r18, 0x15	; 21
 1e0:	98 2f       	mov	r25, r24
 1e2:	90 7f       	andi	r25, 0xF0	; 240
 1e4:	92 2b       	or	r25, r18
 1e6:	95 bb       	out	0x15, r25	; 21
// erzeugt den Enable-Puls
void lcd_enable(void)
{
   // Bei Problemen ggf. Pause gemäß Datenblatt des LCD Controllers einfügen
   // http://www.mikrocontroller.net/topic/81974#685882
   LCD_PORT |= (1<<LCD_EN);			// enable setzen
 1e8:	ab 9a       	sbi	0x15, 3	; 21
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 1ea:	21 e0       	ldi	r18, 0x01	; 1
 1ec:	92 2f       	mov	r25, r18
 1ee:	9a 95       	dec	r25
 1f0:	f1 f7       	brne	.-4      	; 0x1ee <lcd_data+0x18>
    _delay_us(1);                   // kurze Pause
   
   
   // Bei Problemen ggf. Pause gemäß Datenblatt des LCD Controllers verlängern
   // http://www.mikrocontroller.net/topic/80900
   LCD_PORT &= ~(1<<LCD_EN);		//enabel zurücksetzen
 1f2:	ab 98       	cbi	0x15, 3	; 21
   lcd_enable();					//E wird kurz gesetzt und dann wieder zurückgesetzt
   
   //Low Teil des Zeichens ausgeben
   temp2 = temp2 << 4;				//das low nibble von temp2 wird auf das high nibble verschoben	
   temp2 = temp2 & 0xF0;			//das alte low nibble von temp2 wird zu 0 gesetzt
   LCD_PORT &= 0x0F;				//das high nibble in PORTD wird auf null gesetzt
 1f4:	95 b3       	in	r25, 0x15	; 21
 1f6:	9f 70       	andi	r25, 0x0F	; 15
 1f8:	95 bb       	out	0x15, r25	; 21
   LCD_PORT |= temp2;               //das high nibble von temp2 wird PORTD zugewiesen
 1fa:	95 b3       	in	r25, 0x15	; 21
 1fc:	82 95       	swap	r24
 1fe:	80 7f       	andi	r24, 0xF0	; 240
 200:	98 2b       	or	r25, r24
 202:	95 bb       	out	0x15, r25	; 21
// erzeugt den Enable-Puls
void lcd_enable(void)
{
   // Bei Problemen ggf. Pause gemäß Datenblatt des LCD Controllers einfügen
   // http://www.mikrocontroller.net/topic/81974#685882
   LCD_PORT |= (1<<LCD_EN);			// enable setzen
 204:	ab 9a       	sbi	0x15, 3	; 21
 206:	2a 95       	dec	r18
 208:	f1 f7       	brne	.-4      	; 0x206 <lcd_data+0x30>
    _delay_us(1);                   // kurze Pause
   
   
   // Bei Problemen ggf. Pause gemäß Datenblatt des LCD Controllers verlängern
   // http://www.mikrocontroller.net/topic/80900
   LCD_PORT &= ~(1<<LCD_EN);		//enabel zurücksetzen
 20a:	ab 98       	cbi	0x15, 3	; 21
 20c:	88 e3       	ldi	r24, 0x38	; 56
 20e:	8a 95       	dec	r24
 210:	f1 f7       	brne	.-4      	; 0x20e <lcd_data+0x38>
   LCD_PORT &= 0x0F;				//das high nibble in PORTD wird auf null gesetzt
   LCD_PORT |= temp2;               //das high nibble von temp2 wird PORTD zugewiesen
   lcd_enable();					//E wird kurz gesetzt und dann wieder zurückgesetzt
   
   _delay_us(42);
}
 212:	08 95       	ret

00000214 <lcd_command>:
 
void lcd_command(unsigned char temp1)
{
   unsigned char temp2 = temp1;
 
   LCD_PORT &= ~(1<<LCD_RS);        // RS auf 0 setzen
 214:	aa 98       	cbi	0x15, 2	; 21
 
   temp1 = temp1 & 0xF0;            // maskieren
   LCD_PORT &= 0x0F;
 216:	95 b3       	in	r25, 0x15	; 21
 218:	9f 70       	andi	r25, 0x0F	; 15
 21a:	95 bb       	out	0x15, r25	; 21
   LCD_PORT |= temp1;               // setzen
 21c:	25 b3       	in	r18, 0x15	; 21
 21e:	98 2f       	mov	r25, r24
 220:	90 7f       	andi	r25, 0xF0	; 240
 222:	92 2b       	or	r25, r18
 224:	95 bb       	out	0x15, r25	; 21
// erzeugt den Enable-Puls
void lcd_enable(void)
{
   // Bei Problemen ggf. Pause gemäß Datenblatt des LCD Controllers einfügen
   // http://www.mikrocontroller.net/topic/81974#685882
   LCD_PORT |= (1<<LCD_EN);			// enable setzen
 226:	ab 9a       	sbi	0x15, 3	; 21
 228:	21 e0       	ldi	r18, 0x01	; 1
 22a:	92 2f       	mov	r25, r18
 22c:	9a 95       	dec	r25
 22e:	f1 f7       	brne	.-4      	; 0x22c <lcd_command+0x18>
    _delay_us(1);                   // kurze Pause
   
   
   // Bei Problemen ggf. Pause gemäß Datenblatt des LCD Controllers verlängern
   // http://www.mikrocontroller.net/topic/80900
   LCD_PORT &= ~(1<<LCD_EN);		//enabel zurücksetzen
 230:	ab 98       	cbi	0x15, 3	; 21
   LCD_PORT |= temp1;               // setzen
   lcd_enable();
 
   temp2 = temp2 << 4;				// unteres Nibble holen
   temp2 = temp2 & 0xF0;            // unteres Nibble maskieren
   LCD_PORT &= 0x0F;
 232:	95 b3       	in	r25, 0x15	; 21
 234:	9f 70       	andi	r25, 0x0F	; 15
 236:	95 bb       	out	0x15, r25	; 21
   LCD_PORT |= temp2;               // setzen
 238:	95 b3       	in	r25, 0x15	; 21
 23a:	82 95       	swap	r24
 23c:	80 7f       	andi	r24, 0xF0	; 240
 23e:	98 2b       	or	r25, r24
 240:	95 bb       	out	0x15, r25	; 21
// erzeugt den Enable-Puls
void lcd_enable(void)
{
   // Bei Problemen ggf. Pause gemäß Datenblatt des LCD Controllers einfügen
   // http://www.mikrocontroller.net/topic/81974#685882
   LCD_PORT |= (1<<LCD_EN);			// enable setzen
 242:	ab 9a       	sbi	0x15, 3	; 21
 244:	2a 95       	dec	r18
 246:	f1 f7       	brne	.-4      	; 0x244 <lcd_command+0x30>
    _delay_us(1);                   // kurze Pause
   
   
   // Bei Problemen ggf. Pause gemäß Datenblatt des LCD Controllers verlängern
   // http://www.mikrocontroller.net/topic/80900
   LCD_PORT &= ~(1<<LCD_EN);		//enabel zurücksetzen
 248:	ab 98       	cbi	0x15, 3	; 21
 24a:	88 e3       	ldi	r24, 0x38	; 56
 24c:	8a 95       	dec	r24
 24e:	f1 f7       	brne	.-4      	; 0x24c <lcd_command+0x38>
   LCD_PORT &= 0x0F;
   LCD_PORT |= temp2;               // setzen
   lcd_enable();
   
   _delay_us(42);
}
 250:	08 95       	ret

00000252 <lcd_enable>:
// erzeugt den Enable-Puls
void lcd_enable(void)
{
   // Bei Problemen ggf. Pause gemäß Datenblatt des LCD Controllers einfügen
   // http://www.mikrocontroller.net/topic/81974#685882
   LCD_PORT |= (1<<LCD_EN);			// enable setzen
 252:	ab 9a       	sbi	0x15, 3	; 21
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	8a 95       	dec	r24
 258:	f1 f7       	brne	.-4      	; 0x256 <lcd_enable+0x4>
    _delay_us(1);                   // kurze Pause
   
   
   // Bei Problemen ggf. Pause gemäß Datenblatt des LCD Controllers verlängern
   // http://www.mikrocontroller.net/topic/80900
   LCD_PORT &= ~(1<<LCD_EN);		//enabel zurücksetzen
 25a:	ab 98       	cbi	0x15, 3	; 21
}
 25c:	08 95       	ret

0000025e <lcd_clear>:
 
// Sendet den Befehl zur Löschung des Displays
 
void lcd_clear(void)
{
   lcd_command(CLEAR_DISPLAY);
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	0e 94 0a 01 	call	0x214	; 0x214 <lcd_command>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 264:	88 e8       	ldi	r24, 0x88	; 136
 266:	93 e1       	ldi	r25, 0x13	; 19
 268:	01 97       	sbiw	r24, 0x01	; 1
 26a:	f1 f7       	brne	.-4      	; 0x268 <lcd_clear+0xa>
   _delay_ms(5);
}
 26c:	08 95       	ret

0000026e <lcd_init>:
// Initialisierung: 
// Muss ganz am Anfang des Programms aufgerufen werden.
 
void lcd_init(void)
{
   LCD_DDR = LCD_DDR | 0xF0 | (1<<LCD_RS) | (1<<LCD_EN);   // Ports auf Ausgang schalten
 26e:	84 b3       	in	r24, 0x14	; 20
 270:	8c 6f       	ori	r24, 0xFC	; 252
 272:	84 bb       	out	0x14, r24	; 20
 274:	80 e3       	ldi	r24, 0x30	; 48
 276:	95 e7       	ldi	r25, 0x75	; 117
 278:	01 97       	sbiw	r24, 0x01	; 1
 27a:	f1 f7       	brne	.-4      	; 0x278 <lcd_init+0xa>

   // muss 3mal hintereinander gesendet werden zur Initialisierung
 
   _delay_ms(30);

   LCD_PORT &= 0x0F;			  //Oberes Nibble auf 0 setzen
 27c:	85 b3       	in	r24, 0x15	; 21
 27e:	8f 70       	andi	r24, 0x0F	; 15
 280:	85 bb       	out	0x15, r24	; 21
   LCD_PORT |= 0x30;			  //DB7=0  DB6=0  DB5=1  DB4=1	            
 282:	85 b3       	in	r24, 0x15	; 21
 284:	80 63       	ori	r24, 0x30	; 48
 286:	85 bb       	out	0x15, r24	; 21
   LCD_PORT &= ~(1<<LCD_RS);      // RS auf 0
 288:	aa 98       	cbi	0x15, 2	; 21
// erzeugt den Enable-Puls
void lcd_enable(void)
{
   // Bei Problemen ggf. Pause gemäß Datenblatt des LCD Controllers einfügen
   // http://www.mikrocontroller.net/topic/81974#685882
   LCD_PORT |= (1<<LCD_EN);			// enable setzen
 28a:	ab 9a       	sbi	0x15, 3	; 21
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 28c:	91 e0       	ldi	r25, 0x01	; 1
 28e:	89 2f       	mov	r24, r25
 290:	8a 95       	dec	r24
 292:	f1 f7       	brne	.-4      	; 0x290 <lcd_init+0x22>
    _delay_us(1);                   // kurze Pause
   
   
   // Bei Problemen ggf. Pause gemäß Datenblatt des LCD Controllers verlängern
   // http://www.mikrocontroller.net/topic/80900
   LCD_PORT &= ~(1<<LCD_EN);		//enabel zurücksetzen
 294:	ab 98       	cbi	0x15, 3	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 296:	e8 e8       	ldi	r30, 0x88	; 136
 298:	f3 e1       	ldi	r31, 0x13	; 19
 29a:	31 97       	sbiw	r30, 0x01	; 1
 29c:	f1 f7       	brne	.-4      	; 0x29a <lcd_init+0x2c>
// erzeugt den Enable-Puls
void lcd_enable(void)
{
   // Bei Problemen ggf. Pause gemäß Datenblatt des LCD Controllers einfügen
   // http://www.mikrocontroller.net/topic/81974#685882
   LCD_PORT |= (1<<LCD_EN);			// enable setzen
 29e:	ab 9a       	sbi	0x15, 3	; 21
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 2a0:	89 2f       	mov	r24, r25
 2a2:	8a 95       	dec	r24
 2a4:	f1 f7       	brne	.-4      	; 0x2a2 <lcd_init+0x34>
    _delay_us(1);                   // kurze Pause
   
   
   // Bei Problemen ggf. Pause gemäß Datenblatt des LCD Controllers verlängern
   // http://www.mikrocontroller.net/topic/80900
   LCD_PORT &= ~(1<<LCD_EN);		//enabel zurücksetzen
 2a6:	ab 98       	cbi	0x15, 3	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 2a8:	28 ee       	ldi	r18, 0xE8	; 232
 2aa:	33 e0       	ldi	r19, 0x03	; 3
 2ac:	f9 01       	movw	r30, r18
 2ae:	31 97       	sbiw	r30, 0x01	; 1
 2b0:	f1 f7       	brne	.-4      	; 0x2ae <lcd_init+0x40>
// erzeugt den Enable-Puls
void lcd_enable(void)
{
   // Bei Problemen ggf. Pause gemäß Datenblatt des LCD Controllers einfügen
   // http://www.mikrocontroller.net/topic/81974#685882
   LCD_PORT |= (1<<LCD_EN);			// enable setzen
 2b2:	ab 9a       	sbi	0x15, 3	; 21
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 2b4:	89 2f       	mov	r24, r25
 2b6:	8a 95       	dec	r24
 2b8:	f1 f7       	brne	.-4      	; 0x2b6 <lcd_init+0x48>
    _delay_us(1);                   // kurze Pause
   
   
   // Bei Problemen ggf. Pause gemäß Datenblatt des LCD Controllers verlängern
   // http://www.mikrocontroller.net/topic/80900
   LCD_PORT &= ~(1<<LCD_EN);		//enabel zurücksetzen
 2ba:	ab 98       	cbi	0x15, 3	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 2bc:	f9 01       	movw	r30, r18
 2be:	31 97       	sbiw	r30, 0x01	; 1
 2c0:	f1 f7       	brne	.-4      	; 0x2be <lcd_init+0x50>
   lcd_enable();				  //3.Senden

   _delay_ms(1);
 
   // 4 Bit Modus aktivieren 
   LCD_PORT &= 0x0F;
 2c2:	85 b3       	in	r24, 0x15	; 21
 2c4:	8f 70       	andi	r24, 0x0F	; 15
 2c6:	85 bb       	out	0x15, r24	; 21
   LCD_PORT |= 0x20;
 2c8:	ad 9a       	sbi	0x15, 5	; 21
// erzeugt den Enable-Puls
void lcd_enable(void)
{
   // Bei Problemen ggf. Pause gemäß Datenblatt des LCD Controllers einfügen
   // http://www.mikrocontroller.net/topic/81974#685882
   LCD_PORT |= (1<<LCD_EN);			// enable setzen
 2ca:	ab 9a       	sbi	0x15, 3	; 21
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 2cc:	9a 95       	dec	r25
 2ce:	f1 f7       	brne	.-4      	; 0x2cc <lcd_init+0x5e>
    _delay_us(1);                   // kurze Pause
   
   
   // Bei Problemen ggf. Pause gemäß Datenblatt des LCD Controllers verlängern
   // http://www.mikrocontroller.net/topic/80900
   LCD_PORT &= ~(1<<LCD_EN);		//enabel zurücksetzen
 2d0:	ab 98       	cbi	0x15, 3	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 2d2:	c9 01       	movw	r24, r18
 2d4:	01 97       	sbiw	r24, 0x01	; 1
 2d6:	f1 f7       	brne	.-4      	; 0x2d4 <lcd_init+0x66>
   LCD_PORT |= 0x20;
   lcd_enable();
   _delay_ms(1);
 
   // 4Bit / 2 Zeilen / 5x7
   lcd_command(0x28);
 2d8:	88 e2       	ldi	r24, 0x28	; 40
 2da:	0e 94 0a 01 	call	0x214	; 0x214 <lcd_command>
    
   // Display ein / Cursor aus / kein Blinken
   lcd_command(0x0C); 
 2de:	8c e0       	ldi	r24, 0x0C	; 12
 2e0:	0e 94 0a 01 	call	0x214	; 0x214 <lcd_command>
 
   // inkrement / kein Scrollen
   lcd_command(0x06);
 2e4:	86 e0       	ldi	r24, 0x06	; 6
 2e6:	0e 94 0a 01 	call	0x214	; 0x214 <lcd_command>
 
   lcd_clear();
 2ea:	0e 94 2f 01 	call	0x25e	; 0x25e <lcd_clear>
}
 2ee:	08 95       	ret

000002f0 <lcd_home>:
 
// Sendet den Befehl: Cursor Home
 
void lcd_home(void)
{
   lcd_command(CURSOR_HOME);
 2f0:	82 e0       	ldi	r24, 0x02	; 2
 2f2:	0e 94 0a 01 	call	0x214	; 0x214 <lcd_command>
 2f6:	88 e8       	ldi	r24, 0x88	; 136
 2f8:	93 e1       	ldi	r25, 0x13	; 19
 2fa:	01 97       	sbiw	r24, 0x01	; 1
 2fc:	f1 f7       	brne	.-4      	; 0x2fa <lcd_home+0xa>
   _delay_ms(5);
}
 2fe:	08 95       	ret

00000300 <set_cursor>:
 
void set_cursor(uint8_t x, uint8_t y)
{
  uint8_t tmp;
 
  switch (y) {
 300:	62 30       	cpi	r22, 0x02	; 2
 302:	61 f0       	breq	.+24     	; 0x31c <set_cursor+0x1c>
 304:	63 30       	cpi	r22, 0x03	; 3
 306:	18 f4       	brcc	.+6      	; 0x30e <set_cursor+0xe>
 308:	61 30       	cpi	r22, 0x01	; 1
 30a:	79 f4       	brne	.+30     	; 0x32a <set_cursor+0x2a>
 30c:	05 c0       	rjmp	.+10     	; 0x318 <set_cursor+0x18>
 30e:	63 30       	cpi	r22, 0x03	; 3
 310:	39 f0       	breq	.+14     	; 0x320 <set_cursor+0x20>
 312:	64 30       	cpi	r22, 0x04	; 4
 314:	51 f4       	brne	.+20     	; 0x32a <set_cursor+0x2a>
 316:	06 c0       	rjmp	.+12     	; 0x324 <set_cursor+0x24>
    case 1: tmp=0x80+0x00+x; break;    // 1. Zeile
 318:	80 58       	subi	r24, 0x80	; 128
 31a:	05 c0       	rjmp	.+10     	; 0x326 <set_cursor+0x26>
    case 2: tmp=0x80+0x40+x; break;    // 2. Zeile
 31c:	80 54       	subi	r24, 0x40	; 64
 31e:	03 c0       	rjmp	.+6      	; 0x326 <set_cursor+0x26>
    case 3: tmp=0x80+0x10+x; break;    // 3. Zeile
 320:	80 57       	subi	r24, 0x70	; 112
 322:	01 c0       	rjmp	.+2      	; 0x326 <set_cursor+0x26>
    case 4: tmp=0x80+0x50+x; break;    // 4. Zeile
 324:	80 53       	subi	r24, 0x30	; 48
    default: return;                   // für den Fall einer falschen Zeile
  }
  lcd_command(tmp);
 326:	0e 94 0a 01 	call	0x214	; 0x214 <lcd_command>
 32a:	08 95       	ret

0000032c <lcd_string>:
}
 
// Schreibt einen String auf das LCD
 
void lcd_string(char *data)
{
 32c:	cf 93       	push	r28
 32e:	df 93       	push	r29
 330:	ec 01       	movw	r28, r24
 332:	03 c0       	rjmp	.+6      	; 0x33a <lcd_string+0xe>
    while(*data) {
        lcd_data(*data);
 334:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_data>
        data++;
 338:	21 96       	adiw	r28, 0x01	; 1
 
// Schreibt einen String auf das LCD
 
void lcd_string(char *data)
{
    while(*data) {
 33a:	88 81       	ld	r24, Y
 33c:	88 23       	and	r24, r24
 33e:	d1 f7       	brne	.-12     	; 0x334 <lcd_string+0x8>
        lcd_data(*data);
        data++;
    }
}
 340:	df 91       	pop	r29
 342:	cf 91       	pop	r28
 344:	08 95       	ret

00000346 <pwm_init>:
#include <avr/io.h>
#include "pwm_init.h"

void pwm_init(uint16_t compare)
{
	DDRD |= (1<<BIT4) | (1<<BIT5);		//D.4&5 als Ausgänge definieren
 346:	21 b3       	in	r18, 0x11	; 17
 348:	20 63       	ori	r18, 0x30	; 48
 34a:	21 bb       	out	0x11, r18	; 17

	TCCR1A |= (1<<WGM10) | (1<<WGM11);	//PWM, Phase Correct, 10-bit
 34c:	2f b5       	in	r18, 0x2f	; 47
 34e:	23 60       	ori	r18, 0x03	; 3
 350:	2f bd       	out	0x2f, r18	; 47
	//100 % Duty Cycle sind 2046 Zählschritte. 
	//Bei Systemtakt=4MHz -> PWM-Frequenz=1,955 KHz => 0,5115ms									
	

	
	TCCR1A |= (1<<COM1A1); 	//Nicht invertierende PWM, KanalA -> auf Pin D.5
 352:	2f b5       	in	r18, 0x2f	; 47
 354:	20 68       	ori	r18, 0x80	; 128
 356:	2f bd       	out	0x2f, r18	; 47
							//- Clear OC1A/OC1B on Compare Match when up-counting. 
							//- Set OC1A/OC1B on Compare Match when downcounting.


	TCCR1B |= (1<<CS10); //Prescaler nicht aktiviert - es liegt der Systemtakt an
 358:	2e b5       	in	r18, 0x2e	; 46
 35a:	21 60       	ori	r18, 0x01	; 1
 35c:	2e bd       	out	0x2e, r18	; 46
	1 	0 	1 	CK / 1024
	1 	1 	0 	Externer Pin 1, negative Flanke
	1 	1 	1 	Externer Pin 1, positive Flanke 
*/
	
	OCR1A=compare;	//Vergleichswert laden
 35e:	9b bd       	out	0x2b, r25	; 43
 360:	8a bd       	out	0x2a, r24	; 42
	
	
}
 362:	08 95       	ret

00000364 <timer_init>:
#include "timer_init.h"

void timer_init(uint16_t compare)
{

	TCCR1B |= (1<<WGM12);	//CTC Mode:
 364:	2e b5       	in	r18, 0x2e	; 46
 366:	28 60       	ori	r18, 0x08	; 8
 368:	2e bd       	out	0x2e, r18	; 46
							//Timer1 zählt hoch, bei compare match wird er wieder zu 0 gesetzt

	TCCR1B |= (1<<CS10); //Prescaler nicht aktiviert - es liegt der Systemtakt an
 36a:	2e b5       	in	r18, 0x2e	; 46
 36c:	21 60       	ori	r18, 0x01	; 1
 36e:	2e bd       	out	0x2e, r18	; 46
	1 	0 	1 	CK / 1024
	1 	1 	0 	Externer Pin 1, negative Flanke
	1 	1 	1 	Externer Pin 1, positive Flanke 
*/
	
	OCR1A=compare;	//Vergleichswert laden
 370:	9b bd       	out	0x2b, r25	; 43
 372:	8a bd       	out	0x2a, r24	; 42
	
	
}
 374:	08 95       	ret

00000376 <heizInit>:
#define BIT6 6
#define BIT7 7 

void heizInit()
{
   	DDRB  &= ~(1<<BIT2);//PB2 als Input
 376:	ba 98       	cbi	0x17, 2	; 23
	PORTB |= (1<<BIT2); //Pull-Up aktiv 
 378:	c2 9a       	sbi	0x18, 2	; 24

	DDRD  &= ~(1<<BIT6);	//Port D.6 als Eingang (Prüft ob die Zündung noch an ist)
 37a:	8e 98       	cbi	0x11, 6	; 17
	PORTD |= (1<<BIT6);		//Wenn Zündung an, dann 0V an D.6 (durch Transistor)
 37c:	96 9a       	sbi	0x12, 6	; 18
							//Wenn Zündung aus, dann 5V über internen Pull-Up

	DDRD  |= (1<<BIT7); //PD7 als Output (ISR-Kontroll_LED)
 37e:	8f 9a       	sbi	0x11, 7	; 17
	PORTD |= ~(1<<BIT7);//PD7 = OFF
 380:	82 b3       	in	r24, 0x12	; 18
 382:	8f 67       	ori	r24, 0x7F	; 127
 384:	82 bb       	out	0x12, r24	; 18

	MCUCR |= (1<<BIT3) | (1<<BIT1);
 386:	85 b7       	in	r24, 0x35	; 53
 388:	8a 60       	ori	r24, 0x0A	; 10
 38a:	85 bf       	out	0x35, r24	; 53
	GICR  |= (1<<BIT7) | (1<<BIT6) | (1<<BIT5);
 38c:	8b b7       	in	r24, 0x3b	; 59
 38e:	80 6e       	ori	r24, 0xE0	; 224
 390:	8b bf       	out	0x3b, r24	; 59

	
}
 392:	08 95       	ret

00000394 <motorRechtslauf>:

void motorRechtslauf(uint8_t anzahlSchritte)
{
 394:	df 93       	push	r29
 396:	cf 93       	push	r28
 398:	00 d0       	rcall	.+0      	; 0x39a <motorRechtslauf+0x6>
 39a:	00 d0       	rcall	.+0      	; 0x39c <motorRechtslauf+0x8>
 39c:	cd b7       	in	r28, 0x3d	; 61
 39e:	de b7       	in	r29, 0x3e	; 62
 3a0:	38 2f       	mov	r19, r24
	uint8_t vs[4]={10,6,5,9};
 3a2:	8a e0       	ldi	r24, 0x0A	; 10
 3a4:	89 83       	std	Y+1, r24	; 0x01
 3a6:	86 e0       	ldi	r24, 0x06	; 6
 3a8:	8a 83       	std	Y+2, r24	; 0x02
 3aa:	85 e0       	ldi	r24, 0x05	; 5
 3ac:	8b 83       	std	Y+3, r24	; 0x03
 3ae:	89 e0       	ldi	r24, 0x09	; 9
 3b0:	8c 83       	std	Y+4, r24	; 0x04
 3b2:	20 e0       	ldi	r18, 0x00	; 0
	uint8_t z,n=0;
	
	for (z=0;z<anzahlSchritte;z++)
		{
			PORTA=vs[n&3];
 3b4:	be 01       	movw	r22, r28
 3b6:	6f 5f       	subi	r22, 0xFF	; 255
 3b8:	7f 4f       	sbci	r23, 0xFF	; 255
 3ba:	40 e1       	ldi	r20, 0x10	; 16
 3bc:	57 e2       	ldi	r21, 0x27	; 39
 3be:	0b c0       	rjmp	.+22     	; 0x3d6 <motorRechtslauf+0x42>
 3c0:	82 2f       	mov	r24, r18
 3c2:	83 70       	andi	r24, 0x03	; 3
 3c4:	fb 01       	movw	r30, r22
 3c6:	e8 0f       	add	r30, r24
 3c8:	f1 1d       	adc	r31, r1
 3ca:	80 81       	ld	r24, Z
 3cc:	8b bb       	out	0x1b, r24	; 27
 3ce:	ca 01       	movw	r24, r20
 3d0:	01 97       	sbiw	r24, 0x01	; 1
 3d2:	f1 f7       	brne	.-4      	; 0x3d0 <motorRechtslauf+0x3c>
void motorRechtslauf(uint8_t anzahlSchritte)
{
	uint8_t vs[4]={10,6,5,9};
	uint8_t z,n=0;
	
	for (z=0;z<anzahlSchritte;z++)
 3d4:	2f 5f       	subi	r18, 0xFF	; 255
 3d6:	23 17       	cp	r18, r19
 3d8:	98 f3       	brcs	.-26     	; 0x3c0 <motorRechtslauf+0x2c>
		{
			PORTA=vs[n&3];
			_delay_ms(10);
			n++;
		}
	PORTA &= ~((1<<BIT0)|(1<<BIT1)|(1<<BIT2)|(1<<BIT3));
 3da:	8b b3       	in	r24, 0x1b	; 27
 3dc:	80 7f       	andi	r24, 0xF0	; 240
 3de:	8b bb       	out	0x1b, r24	; 27
}
 3e0:	0f 90       	pop	r0
 3e2:	0f 90       	pop	r0
 3e4:	0f 90       	pop	r0
 3e6:	0f 90       	pop	r0
 3e8:	cf 91       	pop	r28
 3ea:	df 91       	pop	r29
 3ec:	08 95       	ret

000003ee <motorLinkslauf>:



void motorLinkslauf(uint8_t anzahlSchritte)
{
 3ee:	df 93       	push	r29
 3f0:	cf 93       	push	r28
 3f2:	00 d0       	rcall	.+0      	; 0x3f4 <motorLinkslauf+0x6>
 3f4:	00 d0       	rcall	.+0      	; 0x3f6 <motorLinkslauf+0x8>
 3f6:	cd b7       	in	r28, 0x3d	; 61
 3f8:	de b7       	in	r29, 0x3e	; 62
 3fa:	38 2f       	mov	r19, r24
	uint8_t vs[4]={9,5,6,10};
 3fc:	89 e0       	ldi	r24, 0x09	; 9
 3fe:	89 83       	std	Y+1, r24	; 0x01
 400:	85 e0       	ldi	r24, 0x05	; 5
 402:	8a 83       	std	Y+2, r24	; 0x02
 404:	86 e0       	ldi	r24, 0x06	; 6
 406:	8b 83       	std	Y+3, r24	; 0x03
 408:	8a e0       	ldi	r24, 0x0A	; 10
 40a:	8c 83       	std	Y+4, r24	; 0x04
 40c:	20 e0       	ldi	r18, 0x00	; 0
	uint8_t z,n=0;
	
	for (z=0;z<anzahlSchritte;z++)
		{
			PORTA=vs[n&3];
 40e:	be 01       	movw	r22, r28
 410:	6f 5f       	subi	r22, 0xFF	; 255
 412:	7f 4f       	sbci	r23, 0xFF	; 255
 414:	40 e1       	ldi	r20, 0x10	; 16
 416:	57 e2       	ldi	r21, 0x27	; 39
 418:	0b c0       	rjmp	.+22     	; 0x430 <motorLinkslauf+0x42>
 41a:	82 2f       	mov	r24, r18
 41c:	83 70       	andi	r24, 0x03	; 3
 41e:	fb 01       	movw	r30, r22
 420:	e8 0f       	add	r30, r24
 422:	f1 1d       	adc	r31, r1
 424:	80 81       	ld	r24, Z
 426:	8b bb       	out	0x1b, r24	; 27
 428:	ca 01       	movw	r24, r20
 42a:	01 97       	sbiw	r24, 0x01	; 1
 42c:	f1 f7       	brne	.-4      	; 0x42a <motorLinkslauf+0x3c>
void motorLinkslauf(uint8_t anzahlSchritte)
{
	uint8_t vs[4]={9,5,6,10};
	uint8_t z,n=0;
	
	for (z=0;z<anzahlSchritte;z++)
 42e:	2f 5f       	subi	r18, 0xFF	; 255
 430:	23 17       	cp	r18, r19
 432:	98 f3       	brcs	.-26     	; 0x41a <motorLinkslauf+0x2c>
		{
			PORTA=vs[n&3];
			_delay_ms(10);
			n++;
		}
	PORTA &= ~((1<<BIT0)|(1<<BIT1)|(1<<BIT2)|(1<<BIT3));
 434:	8b b3       	in	r24, 0x1b	; 27
 436:	80 7f       	andi	r24, 0xF0	; 240
 438:	8b bb       	out	0x1b, r24	; 27
}
 43a:	0f 90       	pop	r0
 43c:	0f 90       	pop	r0
 43e:	0f 90       	pop	r0
 440:	0f 90       	pop	r0
 442:	cf 91       	pop	r28
 444:	df 91       	pop	r29
 446:	08 95       	ret

00000448 <lcdAusschalten>:
   _delay_us(42);
}

void lcdAusschalten()
{
	lcd_clear();
 448:	0e 94 2f 01 	call	0x25e	; 0x25e <lcd_clear>
	lcd_home();
 44c:	0e 94 78 01 	call	0x2f0	; 0x2f0 <lcd_home>
	lcd_string("Auf Wiedersehen");
 450:	81 e7       	ldi	r24, 0x71	; 113
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	0e 94 96 01 	call	0x32c	; 0x32c <lcd_string>
 458:	80 e2       	ldi	r24, 0x20	; 32
 45a:	9e e4       	ldi	r25, 0x4E	; 78
 45c:	24 e6       	ldi	r18, 0x64	; 100
 45e:	30 e0       	ldi	r19, 0x00	; 0
 460:	f9 01       	movw	r30, r18
 462:	31 97       	sbiw	r30, 0x01	; 1
 464:	f1 f7       	brne	.-4      	; 0x462 <lcdAusschalten+0x1a>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 466:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 468:	d9 f7       	brne	.-10     	; 0x460 <lcdAusschalten+0x18>
	_delay_ms(2000);

}
 46a:	08 95       	ret

0000046c <lcdKuehlung>:

void lcdKuehlung(uint8_t dispPos)
{
   //Ziel: Alle Pixel der DisplayZelle auf high setzeb
   
   set_cursor(dispPos,2);
 46c:	62 e0       	ldi	r22, 0x02	; 2
 46e:	0e 94 80 01 	call	0x300	; 0x300 <set_cursor>
   	
   LCD_PORT |= (1<<LCD_RS);        	// RS auf 1 setzen
 472:	aa 9a       	sbi	0x15, 2	; 21
 
   //High Teil des Zeichens ausgeben 			
   LCD_PORT &= 0x0F;				//das high nibble in PORTD wird auf null gesetzt				
 474:	85 b3       	in	r24, 0x15	; 21
 476:	8f 70       	andi	r24, 0x0F	; 15
 478:	85 bb       	out	0x15, r24	; 21
   LCD_PORT |= 0x80;                //das high nibble von PORTD wird auf 0b1111 gesetzt
 47a:	af 9a       	sbi	0x15, 7	; 21
   lcd_enable();					//E wird kurz gesetzt und dann wieder zurückgesetzt
 47c:	0e 94 29 01 	call	0x252	; 0x252 <lcd_enable>
   
   //Low Teil des Zeichens ausgeben
   LCD_PORT &= 0x0F;				//das high nibble in PORTD wird auf null gesetzt
 480:	85 b3       	in	r24, 0x15	; 21
 482:	8f 70       	andi	r24, 0x0F	; 15
 484:	85 bb       	out	0x15, r24	; 21
   LCD_PORT |= 0x80;               //das high nibble von temp2 wird PORTD zugewiesen
 486:	af 9a       	sbi	0x15, 7	; 21
   lcd_enable();					//E wird kurz gesetzt und dann wieder zurückgesetzt
 488:	0e 94 29 01 	call	0x252	; 0x252 <lcd_enable>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 48c:	88 e3       	ldi	r24, 0x38	; 56
 48e:	8a 95       	dec	r24
 490:	f1 f7       	brne	.-4      	; 0x48e <lcdKuehlung+0x22>
   
   _delay_us(42);
}
 492:	08 95       	ret

00000494 <lcdHeizung>:

void lcdHeizung(uint8_t dispPos)
{
   //Ziel: Alle Pixel der DisplayZelle auf high setzeb
   
   set_cursor(dispPos,2);
 494:	62 e0       	ldi	r22, 0x02	; 2
 496:	0e 94 80 01 	call	0x300	; 0x300 <set_cursor>
   	
   LCD_PORT |= (1<<LCD_RS);        	// RS auf 1 setzen
 49a:	aa 9a       	sbi	0x15, 2	; 21
 
   //High Teil des Zeichens ausgeben 			
   LCD_PORT &= 0x0F;				//das high nibble in PORTD wird auf null gesetzt				
 49c:	85 b3       	in	r24, 0x15	; 21
 49e:	8f 70       	andi	r24, 0x0F	; 15
 4a0:	85 bb       	out	0x15, r24	; 21
   LCD_PORT |= 0xF0;                //das high nibble von PORTD wird auf 0b1111 gesetzt
 4a2:	85 b3       	in	r24, 0x15	; 21
 4a4:	80 6f       	ori	r24, 0xF0	; 240
 4a6:	85 bb       	out	0x15, r24	; 21
   lcd_enable();					//E wird kurz gesetzt und dann wieder zurückgesetzt
 4a8:	0e 94 29 01 	call	0x252	; 0x252 <lcd_enable>
   
   //Low Teil des Zeichens ausgeben
   LCD_PORT &= 0x0F;				//das high nibble in PORTD wird auf null gesetzt
 4ac:	85 b3       	in	r24, 0x15	; 21
 4ae:	8f 70       	andi	r24, 0x0F	; 15
 4b0:	85 bb       	out	0x15, r24	; 21
   LCD_PORT |= 0xF0;               //das high nibble von temp2 wird PORTD zugewiesen
 4b2:	85 b3       	in	r24, 0x15	; 21
 4b4:	80 6f       	ori	r24, 0xF0	; 240
 4b6:	85 bb       	out	0x15, r24	; 21
   lcd_enable();					//E wird kurz gesetzt und dann wieder zurückgesetzt
 4b8:	0e 94 29 01 	call	0x252	; 0x252 <lcd_enable>
 4bc:	88 e3       	ldi	r24, 0x38	; 56
 4be:	8a 95       	dec	r24
 4c0:	f1 f7       	brne	.-4      	; 0x4be <lcdHeizung+0x2a>
   
   _delay_us(42);
}
 4c2:	08 95       	ret

000004c4 <_exit>:
 4c4:	f8 94       	cli

000004c6 <__stop_program>:
 4c6:	ff cf       	rjmp	.-2      	; 0x4c6 <__stop_program>
