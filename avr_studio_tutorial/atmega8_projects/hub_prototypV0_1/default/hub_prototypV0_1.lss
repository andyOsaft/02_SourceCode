
hub_prototypV0_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000056  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000000aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  000000ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000076  00000000  00000000  000000e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000041  00000000  00000000  0000015b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000008e  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  0000022c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000ad  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	0e c0       	rjmp	.+28     	; 0x52 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:

int main (void) {            // (2)
 
	

	DDRD  |= 0xFF;             // (3) PortB 2 & 3 = Ausgang
  38:	81 b3       	in	r24, 0x11	; 17
  3a:	8f ef       	ldi	r24, 0xFF	; 255
  3c:	81 bb       	out	0x11, r24	; 17
    PORTD |= (1<<BIT2);  		
  3e:	92 9a       	sbi	0x12, 2	; 18


	DDRC  &=  ~(1<<BIT5); //C.0 als Eingang
  40:	a5 98       	cbi	0x14, 5	; 20
	PORTC |= (1<<BIT5);	  //Pull-Up aktiv
  42:	ad 9a       	sbi	0x15, 5	; 21


   while(1) {                // (5a)
  
   		if (!(PINC & (1<<BIT0)))
		   PORTD ^= (1<<BIT3);
  44:	98 e0       	ldi	r25, 0x08	; 8
	PORTC |= (1<<BIT5);	  //Pull-Up aktiv


   while(1) {                // (5a)
  
   		if (!(PINC & (1<<BIT0)))
  46:	98 99       	sbic	0x13, 0	; 19
  48:	fe cf       	rjmp	.-4      	; 0x46 <__SREG__+0x7>
		   PORTD ^= (1<<BIT3);
  4a:	82 b3       	in	r24, 0x12	; 18
  4c:	89 27       	eor	r24, r25
  4e:	82 bb       	out	0x12, r24	; 18
  50:	fa cf       	rjmp	.-12     	; 0x46 <__SREG__+0x7>

00000052 <_exit>:
  52:	f8 94       	cli

00000054 <__stop_program>:
  54:	ff cf       	rjmp	.-2      	; 0x54 <__stop_program>
