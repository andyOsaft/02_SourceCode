
inADC_outPWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000504  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  00000504  00000598  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800082  00800082  000005ba  2**0
                  ALLOC
  3 .debug_aranges 000000a0  00000000  00000000  000005ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000012f  00000000  00000000  0000065a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b13  00000000  00000000  00000789  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000393  00000000  00000000  0000129c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008e8  00000000  00000000  0000162f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000130  00000000  00000000  00001f18  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000237  00000000  00000000  00002048  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002c2  00000000  00000000  0000227f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00002541  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	da c0       	rjmp	.+436    	; 0x1d2 <__vector_14>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e4 e0       	ldi	r30, 0x04	; 4
  3a:	f5 e0       	ldi	r31, 0x05	; 5
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a2 38       	cpi	r26, 0x82	; 130
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a2 e8       	ldi	r26, 0x82	; 130
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a7 38       	cpi	r26, 0x87	; 135
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	f6 d0       	rcall	.+492    	; 0x246 <main>
  5a:	52 c2       	rjmp	.+1188   	; 0x500 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <adc_init>:
#include "adcInit.h"

void adc_init(uint8_t mux)
{
  
  ADMUX = mux;                      // 	Kanal waehlen(durch Parameterübergabe)
  5e:	87 b9       	out	0x07, r24	; 7
  									
								
  ADMUX &= ~((1<<REFS1) | (1<<REFS0)); // externe Referenzspannung nutzen (typischerweise Vcc-Pegel)
  60:	87 b1       	in	r24, 0x07	; 7
  62:	8f 73       	andi	r24, 0x3F	; 63
  64:	87 b9       	out	0x07, r24	; 7


  ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1);    	// ADC Prescaler wählen. BIT0 bis BII 2 in ADCSRA
  66:	86 e8       	ldi	r24, 0x86	; 134
  68:	86 b9       	out	0x06, r24	; 6
  													// ADC-Takt muss im Bereich 50 - 200 kHz liegen
													// ---> Prescaler = 32 ---> ADC-Takt = 115 kHz
                               					    // UND ADC aktivieren
  ADCSRA |= (1<<ADSC);		// Vor Free Run muss einmal start conversion angestoßen werden 
  6a:	36 9a       	sbi	0x06, 6	; 6
  ADCSRA |= (1<<ADFR);		// ADC -> Free Run
  6c:	35 9a       	sbi	0x06, 5	; 6
  	
  ADCSRA |= (1<<ADIE);		// ADC - > Interrupt Enable				 
  6e:	33 9a       	sbi	0x06, 3	; 6
   
}
  70:	08 95       	ret

00000072 <lcd_data>:
 
void lcd_data(unsigned char temp1)
{
   unsigned char temp2 = temp1;
 
   LCD_PORT |= (1<<LCD_RS);        	// RS auf 1 setzen
  72:	92 9a       	sbi	0x12, 2	; 18
 
   //High Teil des Zeichens ausgeben 			
   temp1 = temp1 & 0xF0;			//das low nibble von temp1 auf null setzen; 
   LCD_PORT &= 0x0F;				//das high nibble in PORTD wird auf null gesetzt				
  74:	92 b3       	in	r25, 0x12	; 18
  76:	9f 70       	andi	r25, 0x0F	; 15
  78:	92 bb       	out	0x12, r25	; 18
   LCD_PORT |= temp1;               //das high nibble von temp1 wird PORTD zugewiesen
  7a:	22 b3       	in	r18, 0x12	; 18
  7c:	98 2f       	mov	r25, r24
  7e:	90 7f       	andi	r25, 0xF0	; 240
  80:	92 2b       	or	r25, r18
  82:	92 bb       	out	0x12, r25	; 18
// erzeugt den Enable-Puls
void lcd_enable(void)
{
   // Bei Problemen ggf. Pause gemäß Datenblatt des LCD Controllers einfügen
   // http://www.mikrocontroller.net/topic/81974#685882
   LCD_PORT |= (1<<LCD_EN);			// enable setzen
  84:	93 9a       	sbi	0x12, 3	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  86:	21 e0       	ldi	r18, 0x01	; 1
  88:	92 2f       	mov	r25, r18
  8a:	9a 95       	dec	r25
  8c:	f1 f7       	brne	.-4      	; 0x8a <lcd_data+0x18>
    _delay_us(1);                   // kurze Pause
   
   
   // Bei Problemen ggf. Pause gemäß Datenblatt des LCD Controllers verlängern
   // http://www.mikrocontroller.net/topic/80900
   LCD_PORT &= ~(1<<LCD_EN);		//enabel zurücksetzen
  8e:	93 98       	cbi	0x12, 3	; 18
   lcd_enable();					//E wird kurz gesetzt und dann wieder zurückgesetzt
   
   //Low Teil des Zeichens ausgeben
   temp2 = temp2 << 4;				//das low nibble von temp2 wird auf das high nibble verschoben	
   temp2 = temp2 & 0xF0;			//das alte low nibble von temp2 wird zu 0 gesetzt
   LCD_PORT &= 0x0F;				//das high nibble in PORTD wird auf null gesetzt
  90:	92 b3       	in	r25, 0x12	; 18
  92:	9f 70       	andi	r25, 0x0F	; 15
  94:	92 bb       	out	0x12, r25	; 18
   LCD_PORT |= temp2;               //das high nibble von temp2 wird PORTD zugewiesen
  96:	92 b3       	in	r25, 0x12	; 18
  98:	82 95       	swap	r24
  9a:	80 7f       	andi	r24, 0xF0	; 240
  9c:	98 2b       	or	r25, r24
  9e:	92 bb       	out	0x12, r25	; 18
// erzeugt den Enable-Puls
void lcd_enable(void)
{
   // Bei Problemen ggf. Pause gemäß Datenblatt des LCD Controllers einfügen
   // http://www.mikrocontroller.net/topic/81974#685882
   LCD_PORT |= (1<<LCD_EN);			// enable setzen
  a0:	93 9a       	sbi	0x12, 3	; 18
  a2:	2a 95       	dec	r18
  a4:	f1 f7       	brne	.-4      	; 0xa2 <lcd_data+0x30>
    _delay_us(1);                   // kurze Pause
   
   
   // Bei Problemen ggf. Pause gemäß Datenblatt des LCD Controllers verlängern
   // http://www.mikrocontroller.net/topic/80900
   LCD_PORT &= ~(1<<LCD_EN);		//enabel zurücksetzen
  a6:	93 98       	cbi	0x12, 3	; 18
  a8:	83 e3       	ldi	r24, 0x33	; 51
  aa:	8a 95       	dec	r24
  ac:	f1 f7       	brne	.-4      	; 0xaa <lcd_data+0x38>
   LCD_PORT &= 0x0F;				//das high nibble in PORTD wird auf null gesetzt
   LCD_PORT |= temp2;               //das high nibble von temp2 wird PORTD zugewiesen
   lcd_enable();					//E wird kurz gesetzt und dann wieder zurückgesetzt
   
   _delay_us(42);
}
  ae:	08 95       	ret

000000b0 <lcd_command>:
 
void lcd_command(unsigned char temp1)
{
   unsigned char temp2 = temp1;
 
   LCD_PORT &= ~(1<<LCD_RS);        // RS auf 0 setzen
  b0:	92 98       	cbi	0x12, 2	; 18
 
   temp1 = temp1 & 0xF0;            // maskieren
   LCD_PORT &= 0x0F;
  b2:	92 b3       	in	r25, 0x12	; 18
  b4:	9f 70       	andi	r25, 0x0F	; 15
  b6:	92 bb       	out	0x12, r25	; 18
   LCD_PORT |= temp1;               // setzen
  b8:	22 b3       	in	r18, 0x12	; 18
  ba:	98 2f       	mov	r25, r24
  bc:	90 7f       	andi	r25, 0xF0	; 240
  be:	92 2b       	or	r25, r18
  c0:	92 bb       	out	0x12, r25	; 18
// erzeugt den Enable-Puls
void lcd_enable(void)
{
   // Bei Problemen ggf. Pause gemäß Datenblatt des LCD Controllers einfügen
   // http://www.mikrocontroller.net/topic/81974#685882
   LCD_PORT |= (1<<LCD_EN);			// enable setzen
  c2:	93 9a       	sbi	0x12, 3	; 18
  c4:	21 e0       	ldi	r18, 0x01	; 1
  c6:	92 2f       	mov	r25, r18
  c8:	9a 95       	dec	r25
  ca:	f1 f7       	brne	.-4      	; 0xc8 <lcd_command+0x18>
    _delay_us(1);                   // kurze Pause
   
   
   // Bei Problemen ggf. Pause gemäß Datenblatt des LCD Controllers verlängern
   // http://www.mikrocontroller.net/topic/80900
   LCD_PORT &= ~(1<<LCD_EN);		//enabel zurücksetzen
  cc:	93 98       	cbi	0x12, 3	; 18
   LCD_PORT |= temp1;               // setzen
   lcd_enable();
 
   temp2 = temp2 << 4;				// unteres Nibble holen
   temp2 = temp2 & 0xF0;            // unteres Nibble maskieren
   LCD_PORT &= 0x0F;
  ce:	92 b3       	in	r25, 0x12	; 18
  d0:	9f 70       	andi	r25, 0x0F	; 15
  d2:	92 bb       	out	0x12, r25	; 18
   LCD_PORT |= temp2;               // setzen
  d4:	92 b3       	in	r25, 0x12	; 18
  d6:	82 95       	swap	r24
  d8:	80 7f       	andi	r24, 0xF0	; 240
  da:	98 2b       	or	r25, r24
  dc:	92 bb       	out	0x12, r25	; 18
// erzeugt den Enable-Puls
void lcd_enable(void)
{
   // Bei Problemen ggf. Pause gemäß Datenblatt des LCD Controllers einfügen
   // http://www.mikrocontroller.net/topic/81974#685882
   LCD_PORT |= (1<<LCD_EN);			// enable setzen
  de:	93 9a       	sbi	0x12, 3	; 18
  e0:	2a 95       	dec	r18
  e2:	f1 f7       	brne	.-4      	; 0xe0 <lcd_command+0x30>
    _delay_us(1);                   // kurze Pause
   
   
   // Bei Problemen ggf. Pause gemäß Datenblatt des LCD Controllers verlängern
   // http://www.mikrocontroller.net/topic/80900
   LCD_PORT &= ~(1<<LCD_EN);		//enabel zurücksetzen
  e4:	93 98       	cbi	0x12, 3	; 18
  e6:	83 e3       	ldi	r24, 0x33	; 51
  e8:	8a 95       	dec	r24
  ea:	f1 f7       	brne	.-4      	; 0xe8 <lcd_command+0x38>
   LCD_PORT &= 0x0F;
   LCD_PORT |= temp2;               // setzen
   lcd_enable();
   
   _delay_us(42);
}
  ec:	08 95       	ret

000000ee <lcd_enable>:
// erzeugt den Enable-Puls
void lcd_enable(void)
{
   // Bei Problemen ggf. Pause gemäß Datenblatt des LCD Controllers einfügen
   // http://www.mikrocontroller.net/topic/81974#685882
   LCD_PORT |= (1<<LCD_EN);			// enable setzen
  ee:	93 9a       	sbi	0x12, 3	; 18
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	8a 95       	dec	r24
  f4:	f1 f7       	brne	.-4      	; 0xf2 <lcd_enable+0x4>
    _delay_us(1);                   // kurze Pause
   
   
   // Bei Problemen ggf. Pause gemäß Datenblatt des LCD Controllers verlängern
   // http://www.mikrocontroller.net/topic/80900
   LCD_PORT &= ~(1<<LCD_EN);		//enabel zurücksetzen
  f6:	93 98       	cbi	0x12, 3	; 18
}
  f8:	08 95       	ret

000000fa <lcd_clear>:
 
// Sendet den Befehl zur Löschung des Displays
 
void lcd_clear(void)
{
   lcd_command(CLEAR_DISPLAY);
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	d9 df       	rcall	.-78     	; 0xb0 <lcd_command>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  fe:	80 e0       	ldi	r24, 0x00	; 0
 100:	92 e1       	ldi	r25, 0x12	; 18
 102:	01 97       	sbiw	r24, 0x01	; 1
 104:	f1 f7       	brne	.-4      	; 0x102 <lcd_clear+0x8>
   _delay_ms(5);
}
 106:	08 95       	ret

00000108 <lcd_init>:
// Initialisierung: 
// Muss ganz am Anfang des Programms aufgerufen werden.
 
void lcd_init(void)
{
   LCD_DDR = LCD_DDR | 0xF0 | (1<<LCD_RS) | (1<<LCD_EN);   // Ports auf Ausgang schalten
 108:	81 b3       	in	r24, 0x11	; 17
 10a:	8c 6f       	ori	r24, 0xFC	; 252
 10c:	81 bb       	out	0x11, r24	; 17
 10e:	80 e0       	ldi	r24, 0x00	; 0
 110:	9c e6       	ldi	r25, 0x6C	; 108
 112:	01 97       	sbiw	r24, 0x01	; 1
 114:	f1 f7       	brne	.-4      	; 0x112 <lcd_init+0xa>

   // muss 3mal hintereinander gesendet werden zur Initialisierung
 
   _delay_ms(30);

   LCD_PORT &= 0x0F;			  //Oberes Nibble auf 0 setzen
 116:	82 b3       	in	r24, 0x12	; 18
 118:	8f 70       	andi	r24, 0x0F	; 15
 11a:	82 bb       	out	0x12, r24	; 18
   LCD_PORT |= 0x30;			  //DB7=0  DB6=0  DB5=1  DB4=1	            
 11c:	82 b3       	in	r24, 0x12	; 18
 11e:	80 63       	ori	r24, 0x30	; 48
 120:	82 bb       	out	0x12, r24	; 18
   LCD_PORT &= ~(1<<LCD_RS);      // RS auf 0
 122:	92 98       	cbi	0x12, 2	; 18
// erzeugt den Enable-Puls
void lcd_enable(void)
{
   // Bei Problemen ggf. Pause gemäß Datenblatt des LCD Controllers einfügen
   // http://www.mikrocontroller.net/topic/81974#685882
   LCD_PORT |= (1<<LCD_EN);			// enable setzen
 124:	93 9a       	sbi	0x12, 3	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 126:	91 e0       	ldi	r25, 0x01	; 1
 128:	89 2f       	mov	r24, r25
 12a:	8a 95       	dec	r24
 12c:	f1 f7       	brne	.-4      	; 0x12a <lcd_init+0x22>
    _delay_us(1);                   // kurze Pause
   
   
   // Bei Problemen ggf. Pause gemäß Datenblatt des LCD Controllers verlängern
   // http://www.mikrocontroller.net/topic/80900
   LCD_PORT &= ~(1<<LCD_EN);		//enabel zurücksetzen
 12e:	93 98       	cbi	0x12, 3	; 18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 130:	e0 e0       	ldi	r30, 0x00	; 0
 132:	f2 e1       	ldi	r31, 0x12	; 18
 134:	31 97       	sbiw	r30, 0x01	; 1
 136:	f1 f7       	brne	.-4      	; 0x134 <lcd_init+0x2c>
// erzeugt den Enable-Puls
void lcd_enable(void)
{
   // Bei Problemen ggf. Pause gemäß Datenblatt des LCD Controllers einfügen
   // http://www.mikrocontroller.net/topic/81974#685882
   LCD_PORT |= (1<<LCD_EN);			// enable setzen
 138:	93 9a       	sbi	0x12, 3	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 13a:	89 2f       	mov	r24, r25
 13c:	8a 95       	dec	r24
 13e:	f1 f7       	brne	.-4      	; 0x13c <lcd_init+0x34>
    _delay_us(1);                   // kurze Pause
   
   
   // Bei Problemen ggf. Pause gemäß Datenblatt des LCD Controllers verlängern
   // http://www.mikrocontroller.net/topic/80900
   LCD_PORT &= ~(1<<LCD_EN);		//enabel zurücksetzen
 140:	93 98       	cbi	0x12, 3	; 18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 142:	29 e9       	ldi	r18, 0x99	; 153
 144:	33 e0       	ldi	r19, 0x03	; 3
 146:	f9 01       	movw	r30, r18
 148:	31 97       	sbiw	r30, 0x01	; 1
 14a:	f1 f7       	brne	.-4      	; 0x148 <lcd_init+0x40>
// erzeugt den Enable-Puls
void lcd_enable(void)
{
   // Bei Problemen ggf. Pause gemäß Datenblatt des LCD Controllers einfügen
   // http://www.mikrocontroller.net/topic/81974#685882
   LCD_PORT |= (1<<LCD_EN);			// enable setzen
 14c:	93 9a       	sbi	0x12, 3	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 14e:	89 2f       	mov	r24, r25
 150:	8a 95       	dec	r24
 152:	f1 f7       	brne	.-4      	; 0x150 <lcd_init+0x48>
    _delay_us(1);                   // kurze Pause
   
   
   // Bei Problemen ggf. Pause gemäß Datenblatt des LCD Controllers verlängern
   // http://www.mikrocontroller.net/topic/80900
   LCD_PORT &= ~(1<<LCD_EN);		//enabel zurücksetzen
 154:	93 98       	cbi	0x12, 3	; 18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 156:	f9 01       	movw	r30, r18
 158:	31 97       	sbiw	r30, 0x01	; 1
 15a:	f1 f7       	brne	.-4      	; 0x158 <lcd_init+0x50>
   lcd_enable();				  //3.Senden

   _delay_ms(1);
 
   // 4 Bit Modus aktivieren 
   LCD_PORT &= 0x0F;
 15c:	82 b3       	in	r24, 0x12	; 18
 15e:	8f 70       	andi	r24, 0x0F	; 15
 160:	82 bb       	out	0x12, r24	; 18
   LCD_PORT |= 0x20;
 162:	95 9a       	sbi	0x12, 5	; 18
// erzeugt den Enable-Puls
void lcd_enable(void)
{
   // Bei Problemen ggf. Pause gemäß Datenblatt des LCD Controllers einfügen
   // http://www.mikrocontroller.net/topic/81974#685882
   LCD_PORT |= (1<<LCD_EN);			// enable setzen
 164:	93 9a       	sbi	0x12, 3	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 166:	9a 95       	dec	r25
 168:	f1 f7       	brne	.-4      	; 0x166 <lcd_init+0x5e>
    _delay_us(1);                   // kurze Pause
   
   
   // Bei Problemen ggf. Pause gemäß Datenblatt des LCD Controllers verlängern
   // http://www.mikrocontroller.net/topic/80900
   LCD_PORT &= ~(1<<LCD_EN);		//enabel zurücksetzen
 16a:	93 98       	cbi	0x12, 3	; 18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 16c:	c9 01       	movw	r24, r18
 16e:	01 97       	sbiw	r24, 0x01	; 1
 170:	f1 f7       	brne	.-4      	; 0x16e <lcd_init+0x66>
   LCD_PORT |= 0x20;
   lcd_enable();
   _delay_ms(1);
 
   // 4Bit / 2 Zeilen / 5x7
   lcd_command(0x28);
 172:	88 e2       	ldi	r24, 0x28	; 40
 174:	9d df       	rcall	.-198    	; 0xb0 <lcd_command>
    
   // Display ein / Cursor aus / kein Blinken
   lcd_command(0x0C); 
 176:	8c e0       	ldi	r24, 0x0C	; 12
 178:	9b df       	rcall	.-202    	; 0xb0 <lcd_command>
 
   // inkrement / kein Scrollen
   lcd_command(0x06);
 17a:	86 e0       	ldi	r24, 0x06	; 6
 17c:	99 df       	rcall	.-206    	; 0xb0 <lcd_command>
 
   lcd_clear();
 17e:	bd df       	rcall	.-134    	; 0xfa <lcd_clear>
}
 180:	08 95       	ret

00000182 <lcd_home>:
 
// Sendet den Befehl: Cursor Home
 
void lcd_home(void)
{
   lcd_command(CURSOR_HOME);
 182:	82 e0       	ldi	r24, 0x02	; 2
 184:	95 df       	rcall	.-214    	; 0xb0 <lcd_command>
 186:	80 e0       	ldi	r24, 0x00	; 0
 188:	92 e1       	ldi	r25, 0x12	; 18
 18a:	01 97       	sbiw	r24, 0x01	; 1
 18c:	f1 f7       	brne	.-4      	; 0x18a <lcd_home+0x8>
   _delay_ms(5);
}
 18e:	08 95       	ret

00000190 <set_cursor>:
 
void set_cursor(uint8_t x, uint8_t y)
{
  uint8_t tmp;
 
  switch (y) {
 190:	62 30       	cpi	r22, 0x02	; 2
 192:	61 f0       	breq	.+24     	; 0x1ac <set_cursor+0x1c>
 194:	63 30       	cpi	r22, 0x03	; 3
 196:	18 f4       	brcc	.+6      	; 0x19e <set_cursor+0xe>
 198:	61 30       	cpi	r22, 0x01	; 1
 19a:	71 f4       	brne	.+28     	; 0x1b8 <set_cursor+0x28>
 19c:	05 c0       	rjmp	.+10     	; 0x1a8 <set_cursor+0x18>
 19e:	63 30       	cpi	r22, 0x03	; 3
 1a0:	39 f0       	breq	.+14     	; 0x1b0 <set_cursor+0x20>
 1a2:	64 30       	cpi	r22, 0x04	; 4
 1a4:	49 f4       	brne	.+18     	; 0x1b8 <set_cursor+0x28>
 1a6:	06 c0       	rjmp	.+12     	; 0x1b4 <set_cursor+0x24>
    case 1: tmp=0x80+0x00+x; break;    // 1. Zeile
 1a8:	80 58       	subi	r24, 0x80	; 128
 1aa:	05 c0       	rjmp	.+10     	; 0x1b6 <set_cursor+0x26>
    case 2: tmp=0x80+0x40+x; break;    // 2. Zeile
 1ac:	80 54       	subi	r24, 0x40	; 64
 1ae:	03 c0       	rjmp	.+6      	; 0x1b6 <set_cursor+0x26>
    case 3: tmp=0x80+0x10+x; break;    // 3. Zeile
 1b0:	80 57       	subi	r24, 0x70	; 112
 1b2:	01 c0       	rjmp	.+2      	; 0x1b6 <set_cursor+0x26>
    case 4: tmp=0x80+0x50+x; break;    // 4. Zeile
 1b4:	80 53       	subi	r24, 0x30	; 48
    default: return;                   // für den Fall einer falschen Zeile
  }
  lcd_command(tmp);
 1b6:	7c df       	rcall	.-264    	; 0xb0 <lcd_command>
 1b8:	08 95       	ret

000001ba <lcd_string>:
}
 
// Schreibt einen String auf das LCD
 
void lcd_string(char *data)
{
 1ba:	cf 93       	push	r28
 1bc:	df 93       	push	r29
 1be:	ec 01       	movw	r28, r24
 1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <lcd_string+0xc>
    while(*data) {
        lcd_data(*data);
 1c2:	57 df       	rcall	.-338    	; 0x72 <lcd_data>
        data++;
 1c4:	21 96       	adiw	r28, 0x01	; 1
 
// Schreibt einen String auf das LCD
 
void lcd_string(char *data)
{
    while(*data) {
 1c6:	88 81       	ld	r24, Y
 1c8:	88 23       	and	r24, r24
 1ca:	d9 f7       	brne	.-10     	; 0x1c2 <lcd_string+0x8>
        lcd_data(*data);
        data++;
    }
}
 1cc:	df 91       	pop	r29
 1ce:	cf 91       	pop	r28
 1d0:	08 95       	ret

000001d2 <__vector_14>:

volatile uint16_t adcWert;		//Wert der vom ADC kommt
volatile uint16_t pwmWert;		//Compare Wert für die PWM-Generierung

ISR(ADC_vect) //ISR für ADC Conversion Complete
{
 1d2:	1f 92       	push	r1
 1d4:	0f 92       	push	r0
 1d6:	0f b6       	in	r0, 0x3f	; 63
 1d8:	0f 92       	push	r0
 1da:	11 24       	eor	r1, r1
 1dc:	2f 93       	push	r18
 1de:	3f 93       	push	r19
 1e0:	4f 93       	push	r20
 1e2:	5f 93       	push	r21
 1e4:	6f 93       	push	r22
 1e6:	7f 93       	push	r23
 1e8:	8f 93       	push	r24
 1ea:	9f 93       	push	r25
 1ec:	af 93       	push	r26
 1ee:	bf 93       	push	r27
 1f0:	ef 93       	push	r30
 1f2:	ff 93       	push	r31
	uint32_t tempValue=0;
	tempValue = ADCW;
 1f4:	64 b1       	in	r22, 0x04	; 4
 1f6:	75 b1       	in	r23, 0x05	; 5
 1f8:	80 e0       	ldi	r24, 0x00	; 0
 1fa:	90 e0       	ldi	r25, 0x00	; 0
	tempValue = tempValue * (uint32_t) 500;
 1fc:	24 ef       	ldi	r18, 0xF4	; 244
 1fe:	31 e0       	ldi	r19, 0x01	; 1
 200:	40 e0       	ldi	r20, 0x00	; 0
 202:	50 e0       	ldi	r21, 0x00	; 0
 204:	f9 d0       	rcall	.+498    	; 0x3f8 <__mulsi3>
	tempValue = tempValue / (uint32_t) 1023;
	//adc-wert * 100 wird gespeichert (5V als Referenz-Spannung)
	adcWert = tempValue;
 206:	2f ef       	ldi	r18, 0xFF	; 255
 208:	33 e0       	ldi	r19, 0x03	; 3
 20a:	40 e0       	ldi	r20, 0x00	; 0
 20c:	50 e0       	ldi	r21, 0x00	; 0
 20e:	27 d1       	rcall	.+590    	; 0x45e <__udivmodsi4>
 210:	30 93 86 00 	sts	0x0086, r19
 214:	20 93 85 00 	sts	0x0085, r18
	
	//pwm-Wert für Duty Cycle wird gespeichert
	pwmWert = ADCW;				
 218:	84 b1       	in	r24, 0x04	; 4
 21a:	95 b1       	in	r25, 0x05	; 5
 21c:	90 93 84 00 	sts	0x0084, r25
 220:	80 93 83 00 	sts	0x0083, r24
}
 224:	ff 91       	pop	r31
 226:	ef 91       	pop	r30
 228:	bf 91       	pop	r27
 22a:	af 91       	pop	r26
 22c:	9f 91       	pop	r25
 22e:	8f 91       	pop	r24
 230:	7f 91       	pop	r23
 232:	6f 91       	pop	r22
 234:	5f 91       	pop	r21
 236:	4f 91       	pop	r20
 238:	3f 91       	pop	r19
 23a:	2f 91       	pop	r18
 23c:	0f 90       	pop	r0
 23e:	0f be       	out	0x3f, r0	; 63
 240:	0f 90       	pop	r0
 242:	1f 90       	pop	r1
 244:	18 95       	reti

00000246 <main>:




int main(void)
{
 246:	cf 92       	push	r12
 248:	df 92       	push	r13
 24a:	ef 92       	push	r14
 24c:	ff 92       	push	r15
 24e:	0f 93       	push	r16
 250:	1f 93       	push	r17
 252:	df 93       	push	r29
 254:	cf 93       	push	r28
 256:	cd b7       	in	r28, 0x3d	; 61
 258:	de b7       	in	r29, 0x3e	; 62
 25a:	2a 97       	sbiw	r28, 0x0a	; 10
 25c:	0f b6       	in	r0, 0x3f	; 63
 25e:	f8 94       	cli
 260:	de bf       	out	0x3e, r29	; 62
 262:	0f be       	out	0x3f, r0	; 63
 264:	cd bf       	out	0x3d, r28	; 61

	//Interrupts abschalten
	cli();
 266:	f8 94       	cli
	int8_t ADC_an=0;				//Variable für Betrieb An/Aus (getoggelt über Schalter einlesen)
	char buffer[10];	
	
	
	//Initialisierungen
	myInit();
 268:	c2 d0       	rcall	.+388    	; 0x3ee <myInit>
	lcd_init();
 26a:	4e df       	rcall	.-356    	; 0x108 <lcd_init>
	pwmInit(31);
 26c:	8f e1       	ldi	r24, 0x1F	; 31
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	9b d0       	rcall	.+310    	; 0x3a8 <pwmInit>

	
	adc_kanal = 0;				//ADC-Kanal0 -> Pin C.0
	adc_init(adc_kanal);
 272:	80 e0       	ldi	r24, 0x00	; 0
 274:	f4 de       	rcall	.-536    	; 0x5e <adc_init>
 276:	20 e0       	ldi	r18, 0x00	; 0
 278:	ff 24       	eor	r15, r15
 27a:	ee 24       	eor	r14, r14
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 27c:	88 e7       	ldi	r24, 0x78	; 120
 27e:	d8 2e       	mov	r13, r24
	

    while(1)
    {
		
		if(debounce(PINB,PB0))
 280:	cc 24       	eor	r12, r12
 282:	c3 94       	inc	r12
				lcd_home();
				//erste Zeile ausgeben
				lcd_string("ADC an:  ");
				set_cursor(9,1);
				//Vorkommastelle
				itoa((adcWert/100), buffer,10);
 284:	8e 01       	movw	r16, r28
 286:	0f 5f       	subi	r16, 0xFF	; 255
 288:	1f 4f       	sbci	r17, 0xFF	; 255
	

    while(1)
    {
		
		if(debounce(PINB,PB0))
 28a:	80 91 82 00 	lds	r24, 0x0082
 28e:	88 23       	and	r24, r24
 290:	59 f0       	breq	.+22     	; 0x2a8 <main+0x62>
 292:	80 e0       	ldi	r24, 0x00	; 0
 294:	b0 9b       	sbis	0x16, 0	; 22
 296:	16 c0       	rjmp	.+44     	; 0x2c4 <main+0x7e>
 298:	9d 2d       	mov	r25, r13
 29a:	9a 95       	dec	r25
 29c:	f1 f7       	brne	.-4      	; 0x29a <main+0x54>
 29e:	81 50       	subi	r24, 0x01	; 1
 2a0:	c9 f7       	brne	.-14     	; 0x294 <main+0x4e>
 2a2:	10 92 82 00 	sts	0x0082, r1
 2a6:	0e c0       	rjmp	.+28     	; 0x2c4 <main+0x7e>
 2a8:	80 e0       	ldi	r24, 0x00	; 0
 2aa:	b0 99       	sbic	0x16, 0	; 22
 2ac:	0b c0       	rjmp	.+22     	; 0x2c4 <main+0x7e>
 2ae:	9d 2d       	mov	r25, r13
 2b0:	9a 95       	dec	r25
 2b2:	f1 f7       	brne	.-4      	; 0x2b0 <main+0x6a>
 2b4:	81 50       	subi	r24, 0x01	; 1
 2b6:	c9 f7       	brne	.-14     	; 0x2aa <main+0x64>
 2b8:	c0 92 82 00 	sts	0x0082, r12
			ADC_an = !ADC_an;  //An/Aus Betrieb toggeln
 2bc:	ee 20       	and	r14, r14
 2be:	09 f4       	brne	.+2      	; 0x2c2 <main+0x7c>
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	e8 2e       	mov	r14, r24
		
						
		if (ADC_an == 1)
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	e8 16       	cp	r14, r24
 2c8:	21 f4       	brne	.+8      	; 0x2d2 <main+0x8c>
			PORTB |= (1<<BIT2); //Wenn ADC=ON -> LED=ON
 2ca:	c2 9a       	sbi	0x18, 2	; 24
		


		if ( ADC_an ) //führe Aktion aus wenn Port B.0 = low ist (Schalter aktiv)
			{	
				if (LCD_an == 0)  //Zum einmaligen Löschen des Displays beim durchlaufen dieses If-Zweiges
 2cc:	22 23       	and	r18, r18
 2ce:	49 f4       	brne	.+18     	; 0x2e2 <main+0x9c>
 2d0:	06 c0       	rjmp	.+12     	; 0x2de <main+0x98>
		
						
		if (ADC_an == 1)
			PORTB |= (1<<BIT2); //Wenn ADC=ON -> LED=ON
		else
			PORTB &= ~(1<<BIT2);//Else LED=OFF
 2d2:	c2 98       	cbi	0x18, 2	; 24
				sei();
			}	

		else
			{
				cli();
 2d4:	f8 94       	cli
				if (LCD_aus == 0)  //Zum einmaligen Löschen des Displays beim durchlaufen dieses If-Zweiges
 2d6:	ff 20       	and	r15, r15
 2d8:	09 f0       	breq	.+2      	; 0x2dc <main+0x96>
 2da:	64 c0       	rjmp	.+200    	; 0x3a4 <main+0x15e>
 2dc:	5b c0       	rjmp	.+182    	; 0x394 <main+0x14e>

		if ( ADC_an ) //führe Aktion aus wenn Port B.0 = low ist (Schalter aktiv)
			{	
				if (LCD_an == 0)  //Zum einmaligen Löschen des Displays beim durchlaufen dieses If-Zweiges
				{
					lcd_clear();
 2de:	0d df       	rcall	.-486    	; 0xfa <lcd_clear>
 2e0:	ff 24       	eor	r15, r15
					LCD_an = 1;
					LCD_aus = 0;
				}
				lcd_home();
 2e2:	4f df       	rcall	.-354    	; 0x182 <lcd_home>
				//erste Zeile ausgeben
				lcd_string("ADC an:  ");
 2e4:	80 e6       	ldi	r24, 0x60	; 96
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	68 df       	rcall	.-304    	; 0x1ba <lcd_string>
				set_cursor(9,1);
 2ea:	89 e0       	ldi	r24, 0x09	; 9
 2ec:	61 e0       	ldi	r22, 0x01	; 1
 2ee:	50 df       	rcall	.-352    	; 0x190 <set_cursor>
				//Vorkommastelle
				itoa((adcWert/100), buffer,10);
 2f0:	80 91 85 00 	lds	r24, 0x0085
 2f4:	90 91 86 00 	lds	r25, 0x0086
 2f8:	64 e6       	ldi	r22, 0x64	; 100
 2fa:	70 e0       	ldi	r23, 0x00	; 0
 2fc:	9c d0       	rcall	.+312    	; 0x436 <__udivmodhi4>
 2fe:	cb 01       	movw	r24, r22
 300:	b8 01       	movw	r22, r16
 302:	4a e0       	ldi	r20, 0x0A	; 10
 304:	50 e0       	ldi	r21, 0x00	; 0
 306:	cd d0       	rcall	.+410    	; 0x4a2 <itoa>
				lcd_string(buffer);
 308:	c8 01       	movw	r24, r16
 30a:	57 df       	rcall	.-338    	; 0x1ba <lcd_string>
				lcd_string(".");
 30c:	8a e6       	ldi	r24, 0x6A	; 106
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	54 df       	rcall	.-344    	; 0x1ba <lcd_string>
				//Nachkommastelle
				itoa((adcWert%100), buffer, 10);	
 312:	80 91 85 00 	lds	r24, 0x0085
 316:	90 91 86 00 	lds	r25, 0x0086
 31a:	64 e6       	ldi	r22, 0x64	; 100
 31c:	70 e0       	ldi	r23, 0x00	; 0
 31e:	8b d0       	rcall	.+278    	; 0x436 <__udivmodhi4>
 320:	b8 01       	movw	r22, r16
 322:	4a e0       	ldi	r20, 0x0A	; 10
 324:	50 e0       	ldi	r21, 0x00	; 0
 326:	bd d0       	rcall	.+378    	; 0x4a2 <itoa>
				lcd_string(buffer);
 328:	c8 01       	movw	r24, r16
 32a:	47 df       	rcall	.-370    	; 0x1ba <lcd_string>
				lcd_string("   ");			
 32c:	8c e6       	ldi	r24, 0x6C	; 108
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	44 df       	rcall	.-376    	; 0x1ba <lcd_string>

				//zweite Zeile ausgebens
				set_cursor(0,2);
 332:	80 e0       	ldi	r24, 0x00	; 0
 334:	62 e0       	ldi	r22, 0x02	; 2
 336:	2c df       	rcall	.-424    	; 0x190 <set_cursor>
				lcd_string("Cycle:   ");
 338:	80 e7       	ldi	r24, 0x70	; 112
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	3e df       	rcall	.-388    	; 0x1ba <lcd_string>
				set_cursor(9,2);
 33e:	89 e0       	ldi	r24, 0x09	; 9
 340:	62 e0       	ldi	r22, 0x02	; 2
 342:	26 df       	rcall	.-436    	; 0x190 <set_cursor>
				itoa(pwmWert,buffer, 10);
 344:	80 91 83 00 	lds	r24, 0x0083
 348:	90 91 84 00 	lds	r25, 0x0084
 34c:	b8 01       	movw	r22, r16
 34e:	4a e0       	ldi	r20, 0x0A	; 10
 350:	50 e0       	ldi	r21, 0x00	; 0
 352:	a7 d0       	rcall	.+334    	; 0x4a2 <itoa>
				lcd_string(buffer);
 354:	c8 01       	movw	r24, r16
 356:	31 df       	rcall	.-414    	; 0x1ba <lcd_string>
				lcd_string("   ");
 358:	8c e6       	ldi	r24, 0x6C	; 108
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	2e df       	rcall	.-420    	; 0x1ba <lcd_string>
				
				//PWM aktualisieren
				if (pwmWert<31)
 35e:	80 91 83 00 	lds	r24, 0x0083
 362:	90 91 84 00 	lds	r25, 0x0084
 366:	4f 97       	sbiw	r24, 0x1f	; 31
 368:	18 f4       	brcc	.+6      	; 0x370 <main+0x12a>
					pwmUpdate(31);
 36a:	8f e1       	ldi	r24, 0x1F	; 31
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	0e c0       	rjmp	.+28     	; 0x38c <main+0x146>
				else if (adcWert>63)
 370:	80 91 85 00 	lds	r24, 0x0085
 374:	90 91 86 00 	lds	r25, 0x0086
 378:	80 34       	cpi	r24, 0x40	; 64
 37a:	91 05       	cpc	r25, r1
 37c:	18 f0       	brcs	.+6      	; 0x384 <main+0x13e>
					pwmUpdate(63);
 37e:	8f e3       	ldi	r24, 0x3F	; 63
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	04 c0       	rjmp	.+8      	; 0x38c <main+0x146>
				else	
					pwmUpdate(pwmWert);
 384:	80 91 83 00 	lds	r24, 0x0083
 388:	90 91 84 00 	lds	r25, 0x0084
 38c:	2d d0       	rcall	.+90     	; 0x3e8 <pwmUpdate>
				sei();
 38e:	78 94       	sei
 390:	21 e0       	ldi	r18, 0x01	; 1
 392:	7b cf       	rjmp	.-266    	; 0x28a <main+0x44>
			{
				cli();
				if (LCD_aus == 0)  //Zum einmaligen Löschen des Displays beim durchlaufen dieses If-Zweiges
				{
				{
					lcd_clear();
 394:	b2 de       	rcall	.-668    	; 0xfa <lcd_clear>
					LCD_aus = 1;
					LCD_an = 0;
				}
				lcd_home();
 396:	f5 de       	rcall	.-534    	; 0x182 <lcd_home>
				lcd_string("ADC aus");
 398:	8a e7       	ldi	r24, 0x7A	; 122
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	0e df       	rcall	.-484    	; 0x1ba <lcd_string>
 39e:	20 e0       	ldi	r18, 0x00	; 0
 3a0:	ff 24       	eor	r15, r15
 3a2:	f3 94       	inc	r15
				}
				sei();
 3a4:	78 94       	sei
 3a6:	71 cf       	rjmp	.-286    	; 0x28a <main+0x44>

000003a8 <pwmInit>:
#include <avr/io.h>
#include "pwmInit.h"

void pwmInit(uint16_t compare)
{
	DDRB |= (1<<BIT1);		//B.1 als Ausgang definieren
 3a8:	b9 9a       	sbi	0x17, 1	; 23
	
	//PWM, Phase Correct with ICR1 as TOP value
	//TOP: 625
	TCCR1A |= (1<<WGM11);	
 3aa:	2f b5       	in	r18, 0x2f	; 47
 3ac:	22 60       	ori	r18, 0x02	; 2
 3ae:	2f bd       	out	0x2f, r18	; 47
	TCCR1A &= ~(1<<WGM10);	
 3b0:	2f b5       	in	r18, 0x2f	; 47
 3b2:	2e 7f       	andi	r18, 0xFE	; 254
 3b4:	2f bd       	out	0x2f, r18	; 47

	TCCR1B |= (1<<WGM13);
 3b6:	2e b5       	in	r18, 0x2e	; 46
 3b8:	20 61       	ori	r18, 0x10	; 16
 3ba:	2e bd       	out	0x2e, r18	; 46
	TCCR1B &= ~(1<<WGM12);
 3bc:	2e b5       	in	r18, 0x2e	; 46
 3be:	27 7f       	andi	r18, 0xF7	; 247
 3c0:	2e bd       	out	0x2e, r18	; 46

	ICR1 = 625;
 3c2:	21 e7       	ldi	r18, 0x71	; 113
 3c4:	32 e0       	ldi	r19, 0x02	; 2
 3c6:	37 bd       	out	0x27, r19	; 39
 3c8:	26 bd       	out	0x26, r18	; 38
	

	//Nicht invertierende PWM, KanalA -> auf Pin D.5
	//- Clear OC1A/OC1B on Compare Match when up-counting. 
	//- Set OC1A/OC1B on Compare Match when downcounting.
	TCCR1A |= (1<<COM1A1); 	
 3ca:	2f b5       	in	r18, 0x2f	; 47
 3cc:	20 68       	ori	r18, 0x80	; 128
 3ce:	2f bd       	out	0x2f, r18	; 47
	TCCR1A &= ~(1<<COM1A0);
 3d0:	2f b5       	in	r18, 0x2f	; 47
 3d2:	2f 7b       	andi	r18, 0xBF	; 191
 3d4:	2f bd       	out	0x2f, r18	; 47

	//Prescaler = 64
	TCCR1B |= (1<<CS10) | (1<<CS11);
 3d6:	2e b5       	in	r18, 0x2e	; 46
 3d8:	23 60       	ori	r18, 0x03	; 3
 3da:	2e bd       	out	0x2e, r18	; 46
	TCCR1B |= ~(1<<CS12); 
 3dc:	2e b5       	in	r18, 0x2e	; 46
 3de:	2b 6f       	ori	r18, 0xFB	; 251
 3e0:	2e bd       	out	0x2e, r18	; 46
		1 	1 	0 	Externer Pin 1, negative Flanke
		1 	1 	1 	Externer Pin 1, positive Flanke 
	*/
	
	//OCR1A->16bit register
	OCR1A=compare;	//Vergleichswert laden
 3e2:	9b bd       	out	0x2b, r25	; 43
 3e4:	8a bd       	out	0x2a, r24	; 42
	
	
}
 3e6:	08 95       	ret

000003e8 <pwmUpdate>:


void pwmUpdate(uint16_t compare)
{
	OCR1A=compare;	
 3e8:	9b bd       	out	0x2b, r25	; 43
 3ea:	8a bd       	out	0x2a, r24	; 42
}
 3ec:	08 95       	ret

000003ee <myInit>:
#include "myInit.h"

void myInit()
{
	//Input-Pin der den ADC-Betrieb an/ausschaltet
	DDRB &= ~(1<<BIT0);			//B.0 als Eingang definieren (auf 0 setzen)
 3ee:	b8 98       	cbi	0x17, 0	; 23
	PORTB |= (1<<BIT0);			//B.0 Pull-Up aktivieren 
 3f0:	c0 9a       	sbi	0x18, 0	; 24


	//Kontroll LED für den Betrieb ON/OFF
	DDRB |= (1<<BIT2);			//B.1 als Ausgang definieren
 3f2:	ba 9a       	sbi	0x17, 2	; 23
	PORTB &= ~(1<<BIT2);		//B.1 = OFF	
 3f4:	c2 98       	cbi	0x18, 2	; 24
}
 3f6:	08 95       	ret

000003f8 <__mulsi3>:
 3f8:	62 9f       	mul	r22, r18
 3fa:	d0 01       	movw	r26, r0
 3fc:	73 9f       	mul	r23, r19
 3fe:	f0 01       	movw	r30, r0
 400:	82 9f       	mul	r24, r18
 402:	e0 0d       	add	r30, r0
 404:	f1 1d       	adc	r31, r1
 406:	64 9f       	mul	r22, r20
 408:	e0 0d       	add	r30, r0
 40a:	f1 1d       	adc	r31, r1
 40c:	92 9f       	mul	r25, r18
 40e:	f0 0d       	add	r31, r0
 410:	83 9f       	mul	r24, r19
 412:	f0 0d       	add	r31, r0
 414:	74 9f       	mul	r23, r20
 416:	f0 0d       	add	r31, r0
 418:	65 9f       	mul	r22, r21
 41a:	f0 0d       	add	r31, r0
 41c:	99 27       	eor	r25, r25
 41e:	72 9f       	mul	r23, r18
 420:	b0 0d       	add	r27, r0
 422:	e1 1d       	adc	r30, r1
 424:	f9 1f       	adc	r31, r25
 426:	63 9f       	mul	r22, r19
 428:	b0 0d       	add	r27, r0
 42a:	e1 1d       	adc	r30, r1
 42c:	f9 1f       	adc	r31, r25
 42e:	bd 01       	movw	r22, r26
 430:	cf 01       	movw	r24, r30
 432:	11 24       	eor	r1, r1
 434:	08 95       	ret

00000436 <__udivmodhi4>:
 436:	aa 1b       	sub	r26, r26
 438:	bb 1b       	sub	r27, r27
 43a:	51 e1       	ldi	r21, 0x11	; 17
 43c:	07 c0       	rjmp	.+14     	; 0x44c <__udivmodhi4_ep>

0000043e <__udivmodhi4_loop>:
 43e:	aa 1f       	adc	r26, r26
 440:	bb 1f       	adc	r27, r27
 442:	a6 17       	cp	r26, r22
 444:	b7 07       	cpc	r27, r23
 446:	10 f0       	brcs	.+4      	; 0x44c <__udivmodhi4_ep>
 448:	a6 1b       	sub	r26, r22
 44a:	b7 0b       	sbc	r27, r23

0000044c <__udivmodhi4_ep>:
 44c:	88 1f       	adc	r24, r24
 44e:	99 1f       	adc	r25, r25
 450:	5a 95       	dec	r21
 452:	a9 f7       	brne	.-22     	; 0x43e <__udivmodhi4_loop>
 454:	80 95       	com	r24
 456:	90 95       	com	r25
 458:	bc 01       	movw	r22, r24
 45a:	cd 01       	movw	r24, r26
 45c:	08 95       	ret

0000045e <__udivmodsi4>:
 45e:	a1 e2       	ldi	r26, 0x21	; 33
 460:	1a 2e       	mov	r1, r26
 462:	aa 1b       	sub	r26, r26
 464:	bb 1b       	sub	r27, r27
 466:	fd 01       	movw	r30, r26
 468:	0d c0       	rjmp	.+26     	; 0x484 <__udivmodsi4_ep>

0000046a <__udivmodsi4_loop>:
 46a:	aa 1f       	adc	r26, r26
 46c:	bb 1f       	adc	r27, r27
 46e:	ee 1f       	adc	r30, r30
 470:	ff 1f       	adc	r31, r31
 472:	a2 17       	cp	r26, r18
 474:	b3 07       	cpc	r27, r19
 476:	e4 07       	cpc	r30, r20
 478:	f5 07       	cpc	r31, r21
 47a:	20 f0       	brcs	.+8      	; 0x484 <__udivmodsi4_ep>
 47c:	a2 1b       	sub	r26, r18
 47e:	b3 0b       	sbc	r27, r19
 480:	e4 0b       	sbc	r30, r20
 482:	f5 0b       	sbc	r31, r21

00000484 <__udivmodsi4_ep>:
 484:	66 1f       	adc	r22, r22
 486:	77 1f       	adc	r23, r23
 488:	88 1f       	adc	r24, r24
 48a:	99 1f       	adc	r25, r25
 48c:	1a 94       	dec	r1
 48e:	69 f7       	brne	.-38     	; 0x46a <__udivmodsi4_loop>
 490:	60 95       	com	r22
 492:	70 95       	com	r23
 494:	80 95       	com	r24
 496:	90 95       	com	r25
 498:	9b 01       	movw	r18, r22
 49a:	ac 01       	movw	r20, r24
 49c:	bd 01       	movw	r22, r26
 49e:	cf 01       	movw	r24, r30
 4a0:	08 95       	ret

000004a2 <itoa>:
 4a2:	fb 01       	movw	r30, r22
 4a4:	9f 01       	movw	r18, r30
 4a6:	e8 94       	clt
 4a8:	42 30       	cpi	r20, 0x02	; 2
 4aa:	bc f0       	brlt	.+46     	; 0x4da <itoa+0x38>
 4ac:	45 32       	cpi	r20, 0x25	; 37
 4ae:	ac f4       	brge	.+42     	; 0x4da <itoa+0x38>
 4b0:	4a 30       	cpi	r20, 0x0A	; 10
 4b2:	29 f4       	brne	.+10     	; 0x4be <itoa+0x1c>
 4b4:	97 fb       	bst	r25, 7
 4b6:	1e f4       	brtc	.+6      	; 0x4be <itoa+0x1c>
 4b8:	90 95       	com	r25
 4ba:	81 95       	neg	r24
 4bc:	9f 4f       	sbci	r25, 0xFF	; 255
 4be:	64 2f       	mov	r22, r20
 4c0:	77 27       	eor	r23, r23
 4c2:	b9 df       	rcall	.-142    	; 0x436 <__udivmodhi4>
 4c4:	80 5d       	subi	r24, 0xD0	; 208
 4c6:	8a 33       	cpi	r24, 0x3A	; 58
 4c8:	0c f0       	brlt	.+2      	; 0x4cc <itoa+0x2a>
 4ca:	89 5d       	subi	r24, 0xD9	; 217
 4cc:	81 93       	st	Z+, r24
 4ce:	cb 01       	movw	r24, r22
 4d0:	00 97       	sbiw	r24, 0x00	; 0
 4d2:	a9 f7       	brne	.-22     	; 0x4be <itoa+0x1c>
 4d4:	16 f4       	brtc	.+4      	; 0x4da <itoa+0x38>
 4d6:	5d e2       	ldi	r21, 0x2D	; 45
 4d8:	51 93       	st	Z+, r21
 4da:	10 82       	st	Z, r1
 4dc:	c9 01       	movw	r24, r18
 4de:	00 c0       	rjmp	.+0      	; 0x4e0 <strrev>

000004e0 <strrev>:
 4e0:	dc 01       	movw	r26, r24
 4e2:	fc 01       	movw	r30, r24
 4e4:	67 2f       	mov	r22, r23
 4e6:	71 91       	ld	r23, Z+
 4e8:	77 23       	and	r23, r23
 4ea:	e1 f7       	brne	.-8      	; 0x4e4 <strrev+0x4>
 4ec:	32 97       	sbiw	r30, 0x02	; 2
 4ee:	04 c0       	rjmp	.+8      	; 0x4f8 <strrev+0x18>
 4f0:	7c 91       	ld	r23, X
 4f2:	6d 93       	st	X+, r22
 4f4:	70 83       	st	Z, r23
 4f6:	62 91       	ld	r22, -Z
 4f8:	ae 17       	cp	r26, r30
 4fa:	bf 07       	cpc	r27, r31
 4fc:	c8 f3       	brcs	.-14     	; 0x4f0 <strrev+0x10>
 4fe:	08 95       	ret

00000500 <_exit>:
 500:	f8 94       	cli

00000502 <__stop_program>:
 502:	ff cf       	rjmp	.-2      	; 0x502 <__stop_program>
